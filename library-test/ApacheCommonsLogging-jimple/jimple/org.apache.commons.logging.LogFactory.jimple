public abstract class org.apache.commons.logging.LogFactory extends java.lang.Object
{
    public static final java.lang.String PRIORITY_KEY;
    public static final java.lang.String TCCL_KEY;
    public static final java.lang.String FACTORY_PROPERTY;
    public static final java.lang.String FACTORY_DEFAULT;
    public static final java.lang.String FACTORY_PROPERTIES;
    protected static final java.lang.String SERVICE_ID;
    public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY;
    private static java.io.PrintStream diagnosticsStream;
    private static final java.lang.String diagnosticPrefix;
    public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY;
    private static final java.lang.String WEAK_HASHTABLE_CLASSNAME;
    private static final java.lang.ClassLoader thisClassLoader;
    protected static java.util.Hashtable factories;
    protected static volatile org.apache.commons.logging.LogFactory nullClassLoaderFactory;

    static void <clinit>()
    {
        java.lang.ClassLoader $r0, $r1, r3;
        java.lang.SecurityException $r2;
        java.lang.String r4, $r9;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.io.PrintStream $r10;
        java.util.Hashtable $r11;
        boolean $z0;

        <org.apache.commons.logging.LogFactory: java.lang.String WEAK_HASHTABLE_CLASSNAME> = "org.apache.commons.logging.impl.WeakHashtable";

        <org.apache.commons.logging.LogFactory: java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY> = "org.apache.commons.logging.LogFactory.HashtableImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String DIAGNOSTICS_DEST_PROPERTY> = "org.apache.commons.logging.diagnostics.dest";

        <org.apache.commons.logging.LogFactory: java.lang.String SERVICE_ID> = "META-INF/services/org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTIES> = "commons-logging.properties";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_DEFAULT> = "org.apache.commons.logging.impl.LogFactoryImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTY> = "org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String TCCL_KEY> = "use_tccl";

        <org.apache.commons.logging.LogFactory: java.lang.String PRIORITY_KEY> = "priority";

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = null;

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = null;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> = $r0;

     label1:
        r3 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        $r1 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if $r1 != null goto label2;

        r4 = "BOOTLOADER";

        goto label5;

     label2:
        r4 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r3);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        r4 = "UNKNOWN";

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LogFactory from ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix> = $r9;

        $r10 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.PrintStream initDiagnostics()>();

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r10;

        staticinvoke <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        $r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>();

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = $r11;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label6;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("BOOTSTRAP COMPLETED");

     label6:
        return;

        catch java.lang.SecurityException from label1 to label3 with label4;
    }

    protected void <init>()
    {
        org.apache.commons.logging.LogFactory r0;

        r0 := @this: org.apache.commons.logging.LogFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Object getAttribute(java.lang.String);

    public abstract java.lang.String[] getAttributeNames();

    public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;

    public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;

    public abstract void release();

    public abstract void removeAttribute(java.lang.String);

    public abstract void setAttribute(java.lang.String, java.lang.Object);

    private static final java.util.Hashtable createFactoryStore()
    {
        java.lang.Object $r0;
        java.util.Hashtable $r1, r6;
        java.lang.SecurityException $r2;
        java.lang.Throwable $r3;
        java.lang.String $r4, r7;
        boolean $z0, $z1;
        java.io.PrintStream $r5;
        java.lang.Class r9;

        r6 = null;

     label01:
        r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl", null);

     label02:
        goto label04;

     label03:
        $r2 := @caughtexception;

        r7 = null;

     label04:
        if r7 != null goto label05;

        r7 = "org.apache.commons.logging.impl.WeakHashtable";

     label05:
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r7);

        $r0 = virtualinvoke r9.<java.lang.Class: java.lang.Object newInstance()>();

        r6 = (java.util.Hashtable) $r0;

     label06:
        goto label09;

     label07:
        $r3 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void handleThrowable(java.lang.Throwable)>($r3);

        $r4 = "org.apache.commons.logging.impl.WeakHashtable";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z0 != 0 goto label09;

        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label08;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        goto label09;

     label08:
        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

     label09:
        if r6 != null goto label10;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r6 = $r1;

     label10:
        return r6;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private static java.lang.String trim(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        return $r1;
    }

    protected static void handleThrowable(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0, $z1;
        java.lang.VirtualMachineError $r1;
        java.lang.ThreadDeath $r2;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.ThreadDeath;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.ThreadDeath) r0;

        throw $r2;

     label1:
        $z1 = r0 instanceof java.lang.VirtualMachineError;

        if $z1 == 0 goto label2;

        $r1 = (java.lang.VirtualMachineError) r0;

        throw $r1;

     label2:
        return;
    }

    public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader r0, $r3, r52;
        java.util.Properties r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r23, $r25, $r28, $r31, $r32, $r35, $r38, $r39, $r45, $r48, $r49;
        java.lang.String $r7, $r10, $r16, $r21, $r24, $r26, $r29, $r30, $r33, $r36, $r37, $r40, $r46, $r47, $r50, r53, r54, r60, r62, r64, r65;
        java.io.BufferedReader $r8, $r42, r58;
        java.io.InputStreamReader $r9, $r43;
        java.lang.Boolean $r22;
        java.lang.SecurityException $r27;
        java.lang.RuntimeException $r34;
        java.io.UnsupportedEncodingException $r41;
        java.lang.Exception $r44;
        org.apache.commons.logging.LogFactory r51;
        java.io.InputStream r57;
        java.util.Enumeration r63;

        r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()>();

        if r0 != null goto label01;

        $z14 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z14 == 0 goto label01;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Context classloader is null.");

     label01:
        r51 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>(r0);

        if r51 == null goto label02;

        return r51;

     label02:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label03;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] LogFactory implementation requested for the first time for context classloader ");

        $r24 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r26);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[LOOKUP] ", r0);

     label03:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>(r0, "commons-logging.properties");

        r52 = r0;

        if r1 == null goto label04;

        r53 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("use_tccl");

        if r53 == null goto label04;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r53);

        $z13 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        if $z13 != 0 goto label04;

        r52 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

     label04:
        $z18 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z18 == 0 goto label05;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label05:
        r54 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.LogFactory", null);

        if r54 == null goto label07;

        $z12 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z12 == 0 goto label06;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] Creating an instance of LogFactory class \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as specified by system property ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r21);

     label06:
        r51 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r54, r52, r0);

        goto label12;

     label07:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label12;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined.");

     label08:
        goto label12;

     label09:
        $r27 := @caughtexception;

        $z15 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z15 == 0 goto label12;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r29 = virtualinvoke $r27.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r30 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>($r29);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r33);

        goto label12;

     label10:
        $r34 := @caughtexception;

        $z16 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z16 == 0 goto label11;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] An exception occurred while trying to create an instance of the custom factory class: [");

        $r36 = virtualinvoke $r34.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r37 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>($r36);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as specified by a system property.");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r40);

     label11:
        throw $r34;

     label12:
        if r51 != null goto label22;

        $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z8 == 0 goto label13;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label13:
        r57 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>(r0, "META-INF/services/org.apache.commons.logging.LogFactory");

        if r57 == null goto label19;

     label14:
        $r8 = new java.io.BufferedReader;

        $r9 = new java.io.InputStreamReader;

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r57, "UTF-8");

        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader)>($r9);

        r58 = $r8;

     label15:
        goto label17;

     label16:
        $r41 := @caughtexception;

        $r42 = new java.io.BufferedReader;

        $r43 = new java.io.InputStreamReader;

        specialinvoke $r43.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r57);

        specialinvoke $r42.<java.io.BufferedReader: void <init>(java.io.Reader)>($r43);

        r58 = $r42;

     label17:
        r60 = virtualinvoke r58.<java.io.BufferedReader: java.lang.String readLine()>();

        virtualinvoke r58.<java.io.BufferedReader: void close()>();

        if r60 == null goto label22;

        $r10 = "";

        $z10 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r60);

        if $z10 != 0 goto label22;

        $z11 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z11 == 0 goto label18;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP]  Creating an instance of LogFactory class ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as specified by file \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/org.apache.commons.logging.LogFactory");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' which was present in the path of the context classloader.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r16);

     label18:
        r51 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r60, r52, r0);

        goto label22;

     label19:
        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label22;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No resource file with name \'META-INF/services/org.apache.commons.logging.LogFactory\' found.");

     label20:
        goto label22;

     label21:
        $r44 := @caughtexception;

        $z17 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z17 == 0 goto label22;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r46 = virtualinvoke $r44.<java.lang.Exception: java.lang.String getMessage()>();

        $r47 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String trim(java.lang.String)>($r46);

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r50);

     label22:
        if r51 != null goto label27;

        if r1 == null goto label26;

        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label23;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking in properties file for entry with key \'org.apache.commons.logging.LogFactory\' to define the LogFactory subclass to use...");

     label23:
        r62 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

        if r62 == null goto label25;

        $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z7 == 0 goto label24;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] Properties file specifies LogFactory subclass \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r7);

     label24:
        r51 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r62, r52, r0);

        goto label27;

     label25:
        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label27;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Properties file has no entry specifying LogFactory subclass.");

        goto label27;

     label26:
        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label27;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No properties file available to determine LogFactory subclass from..");

     label27:
        if r51 != null goto label29;

        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label28;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Loading the default LogFactory implementation \'org.apache.commons.logging.impl.LogFactoryImpl\' via the same classloader that loaded this LogFactory class (ie not looking in the context classloader).");

     label28:
        $r3 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        r51 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>("org.apache.commons.logging.impl.LogFactoryImpl", $r3, r0);

     label29:
        if r51 == null goto label32;

        staticinvoke <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>(r0, r51);

        if r1 == null goto label32;

        r63 = virtualinvoke r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

        goto label31;

     label30:
        $r2 = interfaceinvoke r63.<java.util.Enumeration: java.lang.Object nextElement()>();

        r64 = (java.lang.String) $r2;

        r65 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r64);

        virtualinvoke r51.<org.apache.commons.logging.LogFactory: void setAttribute(java.lang.String,java.lang.Object)>(r64, r65);

     label31:
        $z2 = interfaceinvoke r63.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label30;

     label32:
        return r51;

        catch java.lang.SecurityException from label05 to label08 with label09;
        catch java.lang.RuntimeException from label05 to label08 with label10;
        catch java.io.UnsupportedEncodingException from label14 to label15 with label16;
        catch java.lang.Exception from label13 to label20 with label21;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class r0;
        org.apache.commons.logging.LogFactory $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.Class)>(r0);

        return $r2;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String r0;
        org.apache.commons.logging.LogFactory $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)>(r0);

        return $r2;
    }

    public static void release(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.Hashtable r1;
        org.apache.commons.logging.LogFactory r3, $r7, $r8;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r11;
        java.lang.String $r10, $r12;
        java.lang.Throwable $r13;

        r0 := @parameter0: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Releasing factory for classloader ");

        $r10 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r12);

     label1:
        r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor r1;

     label2:
        if r0 != null goto label3;

        $r7 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r7 == null goto label4;

        $r8 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r8.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        goto label4;

     label3:
        $r5 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.apache.commons.logging.LogFactory) $r5;

        if r3 == null goto label4;

        virtualinvoke r3.<org.apache.commons.logging.LogFactory: void release()>();

        virtualinvoke r1.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        exitmonitor r1;

     label7:
        throw $r13;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static void releaseAll()
    {
        java.util.Hashtable r0;
        java.util.Enumeration r2;
        org.apache.commons.logging.LogFactory r3, $r6, $r7;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.Throwable $r8;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Releasing factory for all classloaders.");

     label1:
        r0 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor r0;

     label2:
        r2 = virtualinvoke r0.<java.util.Hashtable: java.util.Enumeration elements()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (org.apache.commons.logging.LogFactory) $r5;

        virtualinvoke r3.<org.apache.commons.logging.LogFactory: void release()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label3;

        virtualinvoke r0.<java.util.Hashtable: void clear()>();

        $r6 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r6 == null goto label5;

        $r7 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r7.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label5:
        exitmonitor r0;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

     label8:
        throw $r8;

     label9:
        return;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r2;
        java.lang.SecurityException $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to get classloader for class \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to security restrictions - ");

        $r7 = virtualinvoke $r3.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9);

     label4:
        throw $r3;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>();

        return $r0;
    }

    private static java.lang.ClassLoader getContextClassLoaderInternal() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.LogFactory$1 $r0;
        java.lang.Object $r1;
        java.lang.ClassLoader $r2;

        $r0 = new org.apache.commons.logging.LogFactory$1;

        specialinvoke $r0.<org.apache.commons.logging.LogFactory$1: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.lang.ClassLoader) $r1;

        return $r2;
    }

    protected static java.lang.ClassLoader directGetContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Thread $r1;
        java.lang.SecurityException $r2;
        java.lang.ClassLoader r3;

        r3 = null;

     label1:
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r3 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return r3;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private static org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.Hashtable $r1;
        java.lang.Object $r2;
        org.apache.commons.logging.LogFactory $r3, $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 != null goto label1;

        $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        return $r4;

     label1:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.logging.LogFactory) $r2;

        return $r3;
    }

    private static void cacheFactory(java.lang.ClassLoader, org.apache.commons.logging.LogFactory)
    {
        java.lang.ClassLoader r0;
        org.apache.commons.logging.LogFactory r1;
        java.util.Hashtable $r2;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.commons.logging.LogFactory;

        if r1 == null goto label2;

        if r0 != null goto label1;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = r1;

        goto label2;

     label1:
        $r2 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label2:
        return;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String r0, $r8, $r11, $r13, $r15, $r17;
        java.lang.ClassLoader r1, r2;
        java.lang.Object r3;
        org.apache.commons.logging.LogConfigurationException r4;
        org.apache.commons.logging.LogFactory$2 $r5;
        boolean $z0, $z1, $z2;
        org.apache.commons.logging.LogFactory $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r14, $r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.ClassLoader;

        $r5 = new org.apache.commons.logging.LogFactory$2;

        specialinvoke $r5.<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)>(r0, r1);

        r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

        $z0 = r3 instanceof org.apache.commons.logging.LogConfigurationException;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.logging.LogConfigurationException) r3;

        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("An error occurred while loading the factory class:");

        $r15 = virtualinvoke r4.<org.apache.commons.logging.LogConfigurationException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r17);

     label1:
        throw r4;

     label2:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Created object ");

        $r8 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to manage classloader ");

        $r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label3:
        $r6 = (org.apache.commons.logging.LogFactory) r3;

        return $r6;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        org.apache.commons.logging.LogFactory $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r0, r1, null);

        return $r2;
    }

    protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, $r6, $r9, $r12, $r16, $r20, $r23, $r25, $r28, $r30, $r40, $r42, $r51, $r57, $r58, $r72, $r75;
        java.lang.ClassLoader r1, $r15, $r36, $r44, $r67;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object $r3, $r77;
        org.apache.commons.logging.LogFactory $r4, $r78;
        java.lang.StringBuilder $r5, $r7, $r8, $r11, $r13, $r14, $r17, $r18, $r21, $r22, $r24, $r26, $r27, $r29, $r37, $r38, $r39, $r41, $r68, $r69, $r70, $r71, $r73, $r74;
        java.lang.Class $r10, $r19, $r33, $r50, r76;
        java.lang.Exception $r31;
        org.apache.commons.logging.LogConfigurationException $r32, $r34;
        java.lang.ClassNotFoundException $r35;
        java.lang.ClassCastException $r43, $r56;
        java.lang.StringBuffer $r45;
        java.lang.NoClassDefFoundError $r66;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        r76 = null;

     label01:
        if r1 == null goto label14;

     label02:
        r76 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r10 = class "org/apache/commons/logging/LogFactory";

        $z1 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r76);

        if $z1 == 0 goto label03;

        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label04;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loaded class ");

        $r25 = virtualinvoke r76.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from classloader ");

        $r28 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r30);

        goto label04;

     label03:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label04;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Factory class ");

        $r12 = virtualinvoke r76.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" loaded from classloader ");

        $r15 = virtualinvoke r76.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r16 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend \'");

        $r19 = class "org/apache/commons/logging/LogFactory";

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as loaded by this classloader.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r23);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[BAD CL TREE] ", r1);

     label04:
        $r77 = virtualinvoke r76.<java.lang.Class: java.lang.Object newInstance()>();

        $r78 = (org.apache.commons.logging.LogFactory) $r77;

     label05:
        return $r78;

     label06:
        $r35 := @caughtexception;

        $r36 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r36 goto label14;

        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label07;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to locate any class called \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via classloader ");

        $r40 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r42);

     label07:
        throw $r35;

     label08:
        $r66 := @caughtexception;

        $r67 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r67 goto label14;

        $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z8 == 0 goto label09;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class \'");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be loaded");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" via classloader ");

        $r72 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - it depends on some other class that cannot be found.");

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r75);

     label09:
        throw $r66;

     label10:
        $r43 := @caughtexception;

        $r44 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r44 goto label14;

        z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>(r76);

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The application has specified that a custom LogFactory implementation ");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("should be used but Class \'");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be converted to \'");

        $r50 = class "org/apache/commons/logging/LogFactory";

        $r51 = virtualinvoke $r50.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'. ");

        if z0 == 0 goto label11;

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The conflict is caused by the presence of multiple LogFactory classes ");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("in incompatible classloaders. ");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Background can be found in http://commons.apache.org/logging/tech.html. ");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("If you have not explicitly specified a custom LogFactory then it is likely ");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("that the container has set one without your knowledge. ");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("In this case, consider using the commons-logging-adapters.jar file or ");

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("specifying the standard LogFactory from the command line. ");

        goto label12;

     label11:
        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Please check the custom implementation. ");

     label12:
        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Help can be found @http://commons.apache.org/logging/troubleshooting.html.");

        $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z7 == 0 goto label13;

        $r58 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r58);

     label13:
        $r56 = new java.lang.ClassCastException;

        $r57 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r56.<java.lang.ClassCastException: void <init>(java.lang.String)>($r57);

        throw $r56;

     label14:
        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load factory class via classloader ");

        $r6 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - trying the classloader associated with this LogFactory.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9);

     label15:
        r76 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r3 = virtualinvoke r76.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (org.apache.commons.logging.LogFactory) $r3;

     label16:
        return $r4;

     label17:
        $r31 := @caughtexception;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label18;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Unable to create LogFactory instance.");

     label18:
        if r76 == null goto label19;

        $r33 = class "org/apache/commons/logging/LogFactory";

        $z5 = virtualinvoke $r33.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r76);

        if $z5 != 0 goto label19;

        $r34 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r34.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("The chosen LogFactory implementation does not extend LogFactory. Please check your configuration.", $r31);

        return $r34;

     label19:
        $r32 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r32.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r31);

        return $r32;

        catch java.lang.ClassNotFoundException from label02 to label05 with label06;
        catch java.lang.NoClassDefFoundError from label02 to label05 with label08;
        catch java.lang.ClassCastException from label02 to label05 with label10;
        catch java.lang.Exception from label01 to label05 with label17;
        catch java.lang.Exception from label06 to label16 with label17;
    }

    private static boolean implementsLogFactory(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r9, $r10, $r14, $r16, $r19, $r21;
        java.lang.String $r3, $r6, $r8, $r11, $r15, $r17, $r20, $r22;
        java.lang.ClassNotFoundException $r12;
        java.lang.LinkageError $r13;
        java.lang.SecurityException $r18;
        boolean z0;
        java.lang.ClassLoader r23;

        r0 := @parameter0: java.lang.Class;

        z0 = 0;

        if r0 == null goto label8;

     label1:
        r23 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r23 != null goto label2;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] was loaded by the boot classloader");

        goto label8;

     label2:
        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[CUSTOM LOG FACTORY] ", r23);

        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.commons.logging.LogFactory", 0, r23);

        z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if z0 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implements LogFactory but was loaded by an incompatible classloader.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r11);

        goto label8;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement LogFactory.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r6);

     label4:
        goto label8;

     label5:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("[CUSTOM LOG FACTORY] SecurityException thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r20 = virtualinvoke $r18.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r22);

        goto label8;

     label6:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("[CUSTOM LOG FACTORY] LinkageError thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r15 = virtualinvoke $r13.<java.lang.LinkageError: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r17);

        goto label8;

     label7:
        $r12 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the custom LogFactory implementation. Is the custom factory in the right classloader?");

     label8:
        return z0;

        catch java.lang.SecurityException from label1 to label4 with label5;
        catch java.lang.LinkageError from label1 to label4 with label6;
        catch java.lang.ClassNotFoundException from label1 to label4 with label7;
    }

    private static java.io.InputStream getResourceAsStream(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        org.apache.commons.logging.LogFactory$3 $r2;
        java.lang.Object $r3;
        java.io.InputStream $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$3;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.io.InputStream) $r3;

        return $r4;
    }

    private static java.util.Enumeration getResources(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.Object r3;
        org.apache.commons.logging.LogFactory$4 $r4;
        java.util.Enumeration $r5;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r4 = new org.apache.commons.logging.LogFactory$4;

        specialinvoke $r4.<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);

        $r5 = (java.util.Enumeration) r3;

        return $r5;
    }

    private static java.util.Properties getProperties(java.net.URL)
    {
        java.net.URL r0;
        org.apache.commons.logging.LogFactory$5 $r2;
        java.lang.Object $r3;
        java.util.Properties $r4;

        r0 := @parameter0: java.net.URL;

        $r2 = new org.apache.commons.logging.LogFactory$5;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>(r0);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.util.Properties) $r3;

        return $r4;
    }

    private static final java.util.Properties getConfigurationFile(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, $r15, $r26, $r32, $r38, $r42, r47, r48;
        java.net.URL r2, r45;
        java.util.Properties r3, r44;
        java.lang.Object $r4;
        byte $b0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r39, $r40, $r41;
        java.lang.SecurityException $r43;
        double d0, d1;
        java.util.Enumeration r46;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        r44 = null;

        d0 = 0.0;

        r45 = null;

     label01:
        r46 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        if r46 != null goto label09;

     label02:
        return null;

     label03:
        $r4 = interfaceinvoke r46.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (java.net.URL) $r4;

        r3 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>(r2);

        if r3 == null goto label09;

        if r44 != null goto label05;

        r45 = r2;

        r44 = r3;

        r47 = virtualinvoke r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

        d0 = 0.0;

        if r47 == null goto label04;

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r47);

     label04:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label09;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] Properties file found at \'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r32);

        goto label09;

     label05:
        r48 = virtualinvoke r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

        d1 = 0.0;

        if r48 == null goto label06;

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r48);

     label06:
        $b0 = d1 cmpl d0;

        if $b0 <= 0 goto label08;

        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label07;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overrides file at \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r26);

     label07:
        r45 = r2;

        r44 = r3;

        d0 = d1;

        goto label09;

     label08:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label09;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not override file at \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r15);

     label09:
        $z4 = interfaceinvoke r46.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 != 0 goto label03;

     label10:
        goto label12;

     label11:
        $r43 := @caughtexception;

        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label12;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("SecurityException thrown while trying to find/read config files.");

     label12:
        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label14;

        if r44 != null goto label13;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] No properties file of name \'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found.");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r42);

        goto label14;

     label13:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("[LOOKUP] Properties file of name \'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found at \'");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r38);

     label14:
        return r44;

        catch java.lang.SecurityException from label01 to label02 with label11;
        catch java.lang.SecurityException from label03 to label10 with label11;
    }

    private static java.lang.String getSystemProperty(java.lang.String, java.lang.String) throws java.lang.SecurityException
    {
        java.lang.String r0, r1, $r4;
        org.apache.commons.logging.LogFactory$6 $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$6;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$6: void <init>(java.lang.String,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private static java.io.PrintStream initDiagnostics()
    {
        java.lang.String r0;
        boolean $z0, $z1;
        java.io.FileOutputStream $r1;
        java.io.PrintStream $r2, $r3, $r4;
        java.io.IOException $r5;
        java.lang.SecurityException $r6;

     label1:
        r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.diagnostics.dest", null);

        if r0 != null goto label4;

     label2:
        return null;

     label3:
        $r6 := @caughtexception;

        return null;

     label4:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("STDOUT");

        if $z0 == 0 goto label5;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        return $r4;

     label5:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("STDERR");

        if $z1 == 0 goto label6;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        return $r3;

     label6:
        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r0, 1);

        $r2 = new java.io.PrintStream;

        specialinvoke $r2.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r1);

     label7:
        return $r2;

     label8:
        $r5 := @caughtexception;

        return null;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.io.IOException from label6 to label7 with label8;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        java.io.PrintStream $r0;

        $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private static final void logDiagnostic(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.io.PrintStream $r1, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r1 == null goto label1;

        $r3 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        $r2 = <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r2);

        $r4 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r5 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r5.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    protected static final void logRawDiagnostic(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintStream $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r1 == null goto label1;

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r3.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    private static void logClassLoaderEnvironment(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;
        boolean $z0;
        java.lang.StringBuilder $r3, $r5, $r7, $r9, $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r22, $r23;
        java.lang.String $r4, $r6, $r8, $r10, $r14, $r16, $r20, $r24, r27;
        java.lang.SecurityException $r21, $r25;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ENV] Extension directories (java.ext.dir): ");

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dir");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ENV] Application classpath (java.class.path): ");

        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10);

     label2:
        goto label4;

     label3:
        $r25 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ENV] Security setting prevent interrogation of system classpaths.");

     label4:
        r27 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

     label5:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

     label6:
        goto label8;

     label7:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ENV] Security forbids determining the classloader for ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r24);

        return;

     label8:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ENV] Class ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was loaded via classloader ");

        $r14 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ENV] Ancestry of classloader which loaded ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>($r20, r1);

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.SecurityException from label5 to label6 with label7;
    }

    private static void logHierarchy(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, $r5, $r7, $r8, $r12, $r15, $r16, $r21, $r26, $r28, r30;
        java.lang.ClassLoader r1, r29;
        boolean $z0;
        java.lang.StringBuffer $r3;
        java.lang.StringBuilder $r4, $r6, $r14, $r17, $r18, $r19, $r20, $r25, $r27;
        java.lang.SecurityException $r22, $r24;

        r0 := @parameter0: java.lang.String;

        r29 := @parameter1: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        if r29 == null goto label02;

        r30 = virtualinvoke r29.<java.lang.Object: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);

        $r16 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r29);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r21);

     label02:
        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label03:
        goto label05;

     label04:
        $r24 := @caughtexception;

        $r25 = new java.lang.StringBuilder;

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r26);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security forbids determining the system classloader.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r28);

        return;

     label05:
        if r29 == null goto label12;

        $r3 = new java.lang.StringBuffer;

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassLoader tree:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r7);

     label06:
        $r8 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r29);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        if r29 != r1 goto label07;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (SYSTEM) ");

     label07:
        r29 = virtualinvoke r29.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> SECRET");

        goto label11;

     label10:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ");

        if r29 != null goto label06;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BOOT");

     label11:
        $r12 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r12);

     label12:
        return;

        catch java.lang.SecurityException from label02 to label03 with label04;
        catch java.lang.SecurityException from label07 to label08 with label09;
    }

    public static java.lang.String objectId(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r5, $r6;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r7;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void access$0(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r0);

        return;
    }
}
