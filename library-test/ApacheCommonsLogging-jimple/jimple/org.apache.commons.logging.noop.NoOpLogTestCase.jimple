public class org.apache.commons.logging.noop.NoOpLogTestCase extends org.apache.commons.logging.AbstractLogTest
{

    public void <init>()
    {
        org.apache.commons.logging.noop.NoOpLogTestCase r0;

        r0 := @this: org.apache.commons.logging.noop.NoOpLogTestCase;

        specialinvoke r0.<org.apache.commons.logging.AbstractLogTest: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.logging.noop.NoOpLogTestCase r0;

        r0 := @this: org.apache.commons.logging.noop.NoOpLogTestCase;

        staticinvoke <org.apache.commons.logging.LogFactory: void releaseAll()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");

        return;
    }

    public void tearDown()
    {
        org.apache.commons.logging.noop.NoOpLogTestCase r0;
        java.util.Properties $r1;

        r0 := @this: org.apache.commons.logging.noop.NoOpLogTestCase;

        staticinvoke <org.apache.commons.logging.LogFactory: void releaseAll()>();

        $r1 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        virtualinvoke $r1.<java.util.Properties: java.lang.Object remove(java.lang.Object)>("org.apache.commons.logging.Log");

        return;
    }

    public org.apache.commons.logging.Log getLogObject()
    {
        org.apache.commons.logging.noop.NoOpLogTestCase r0;
        org.apache.commons.logging.impl.NoOpLog $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.logging.noop.NoOpLogTestCase;

        $r1 = new org.apache.commons.logging.impl.NoOpLog;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r1.<org.apache.commons.logging.impl.NoOpLog: void <init>(java.lang.String)>($r3);

        return $r1;
    }

    public void testSerializable() throws java.lang.Exception
    {
        org.apache.commons.logging.noop.NoOpLogTestCase r0;
        java.lang.Class $r5;
        java.lang.String $r6;
        java.io.ByteArrayOutputStream $r7;
        java.io.ObjectOutputStream $r8;
        java.io.ByteArrayInputStream $r9;
        byte[] $r10;
        java.io.ObjectInputStream $r11;
        java.lang.Object $r12;
        org.apache.commons.logging.Log r13, r14;

        r0 := @this: org.apache.commons.logging.noop.NoOpLogTestCase;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        r13 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>($r6);

        specialinvoke r0.<org.apache.commons.logging.noop.NoOpLogTestCase: void checkLog(org.apache.commons.logging.Log)>(r13);

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new java.io.ObjectOutputStream;

        specialinvoke $r8.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r7);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r13);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void close()>();

        $r9 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        $r11 = new java.io.ObjectInputStream;

        specialinvoke $r11.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r9);

        $r12 = virtualinvoke $r11.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r14 = (org.apache.commons.logging.Log) $r12;

        virtualinvoke $r11.<java.io.ObjectInputStream: void close()>();

        specialinvoke r0.<org.apache.commons.logging.noop.NoOpLogTestCase: void checkLog(org.apache.commons.logging.Log)>(r14);

        return;
    }

    private void checkLog(org.apache.commons.logging.Log)
    {
        org.apache.commons.logging.noop.NoOpLogTestCase r0;
        org.apache.commons.logging.Log r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.logging.noop.NoOpLogTestCase;

        r1 := @parameter0: org.apache.commons.logging.Log;

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Log exists", r1);

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Log class", "org.apache.commons.logging.impl.NoOpLog", $r3);

        $z0 = interfaceinvoke r1.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertFalse(boolean)>($z0);

        $z1 = interfaceinvoke r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertFalse(boolean)>($z1);

        $z2 = interfaceinvoke r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertFalse(boolean)>($z2);

        $z3 = interfaceinvoke r1.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertFalse(boolean)>($z3);

        $z4 = interfaceinvoke r1.<org.apache.commons.logging.Log: boolean isErrorEnabled()>();

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertFalse(boolean)>($z4);

        $z5 = interfaceinvoke r1.<org.apache.commons.logging.Log: boolean isFatalEnabled()>();

        staticinvoke <org.apache.commons.logging.noop.NoOpLogTestCase: void assertFalse(boolean)>($z5);

        return;
    }
}
