public class org.apache.commons.logging.impl.WeakHashtableTestCase extends junit.framework.TestCase
{
    private static final int WAIT_FOR_THREAD_COMPLETION;
    private static final int RUN_LOOPS;
    private static final int OUTER_LOOP;
    private static final int THREAD_COUNT;
    private static org.apache.commons.logging.impl.WeakHashtable hashtable;
    private static final int MAX_GC_ITERATIONS;
    private org.apache.commons.logging.impl.WeakHashtable weakHashtable;
    private java.lang.Long keyOne;
    private java.lang.Long keyTwo;
    private java.lang.Long keyThree;
    private java.lang.Long valueOne;
    private java.lang.Long valueTwo;
    private java.lang.Long valueThree;

    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        org.apache.commons.logging.impl.WeakHashtable $r1, $r10, $r14, $r18;
        java.lang.Long $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r16, $r17;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        specialinvoke r0.<junit.framework.TestCase: void setUp()>();

        $r1 = new org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r1.<org.apache.commons.logging.impl.WeakHashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable> = $r1;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1L);

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne> = $r2;

        $r3 = new java.lang.Long;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>(2L);

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyTwo> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(3L);

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyThree> = $r4;

        $r5 = new java.lang.Long;

        specialinvoke $r5.<java.lang.Long: void <init>(long)>(100L);

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueOne> = $r5;

        $r6 = new java.lang.Long;

        specialinvoke $r6.<java.lang.Long: void <init>(long)>(200L);

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueTwo> = $r6;

        $r7 = new java.lang.Long;

        specialinvoke $r7.<java.lang.Long: void <init>(long)>(300L);

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueThree> = $r7;

        $r10 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r9 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        $r8 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueOne>;

        virtualinvoke $r10.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r13 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyTwo>;

        $r12 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueTwo>;

        virtualinvoke $r14.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r12);

        $r18 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r17 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyThree>;

        $r16 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueThree>;

        virtualinvoke $r18.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r16);

        return;
    }

    public void testContains() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.Long $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        org.apache.commons.logging.impl.WeakHashtable $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r2 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(1L);

        $z0 = virtualinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: boolean contains(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z0);

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r3 = new java.lang.Long;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>(2L);

        $z1 = virtualinvoke $r4.<org.apache.commons.logging.impl.WeakHashtable: boolean contains(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z1);

        $r6 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r5 = new java.lang.Long;

        specialinvoke $r5.<java.lang.Long: void <init>(long)>(3L);

        $z2 = virtualinvoke $r6.<org.apache.commons.logging.impl.WeakHashtable: boolean contains(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z2);

        $r8 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r7 = new java.lang.Long;

        specialinvoke $r7.<java.lang.Long: void <init>(long)>(100L);

        $z3 = virtualinvoke $r8.<org.apache.commons.logging.impl.WeakHashtable: boolean contains(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z3);

        $r10 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r9 = new java.lang.Long;

        specialinvoke $r9.<java.lang.Long: void <init>(long)>(200L);

        $z4 = virtualinvoke $r10.<org.apache.commons.logging.impl.WeakHashtable: boolean contains(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z4);

        $r12 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(300L);

        $z5 = virtualinvoke $r12.<org.apache.commons.logging.impl.WeakHashtable: boolean contains(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z5);

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r13 = new java.lang.Long;

        specialinvoke $r13.<java.lang.Long: void <init>(long)>(400L);

        $z6 = virtualinvoke $r14.<org.apache.commons.logging.impl.WeakHashtable: boolean contains(java.lang.Object)>($r13);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z6);

        return;
    }

    public void testContainsKey() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.Long $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        org.apache.commons.logging.impl.WeakHashtable $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r2 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(1L);

        $z0 = virtualinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r3 = new java.lang.Long;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>(2L);

        $z1 = virtualinvoke $r4.<org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z1);

        $r6 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r5 = new java.lang.Long;

        specialinvoke $r5.<java.lang.Long: void <init>(long)>(3L);

        $z2 = virtualinvoke $r6.<org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z2);

        $r8 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r7 = new java.lang.Long;

        specialinvoke $r7.<java.lang.Long: void <init>(long)>(100L);

        $z3 = virtualinvoke $r8.<org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z3);

        $r10 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r9 = new java.lang.Long;

        specialinvoke $r9.<java.lang.Long: void <init>(long)>(200L);

        $z4 = virtualinvoke $r10.<org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z4);

        $r12 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(300L);

        $z5 = virtualinvoke $r12.<org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z5);

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r13 = new java.lang.Long;

        specialinvoke $r13.<java.lang.Long: void <init>(long)>(400L);

        $z6 = virtualinvoke $r14.<org.apache.commons.logging.impl.WeakHashtable: boolean containsKey(java.lang.Object)>($r13);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z6);

        return;
    }

    public void testContainsValue() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.Long $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        org.apache.commons.logging.impl.WeakHashtable $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r2 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(1L);

        $z0 = virtualinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: boolean containsValue(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z0);

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r3 = new java.lang.Long;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>(2L);

        $z1 = virtualinvoke $r4.<org.apache.commons.logging.impl.WeakHashtable: boolean containsValue(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z1);

        $r6 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r5 = new java.lang.Long;

        specialinvoke $r5.<java.lang.Long: void <init>(long)>(3L);

        $z2 = virtualinvoke $r6.<org.apache.commons.logging.impl.WeakHashtable: boolean containsValue(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z2);

        $r8 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r7 = new java.lang.Long;

        specialinvoke $r7.<java.lang.Long: void <init>(long)>(100L);

        $z3 = virtualinvoke $r8.<org.apache.commons.logging.impl.WeakHashtable: boolean containsValue(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z3);

        $r10 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r9 = new java.lang.Long;

        specialinvoke $r9.<java.lang.Long: void <init>(long)>(200L);

        $z4 = virtualinvoke $r10.<org.apache.commons.logging.impl.WeakHashtable: boolean containsValue(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z4);

        $r12 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(300L);

        $z5 = virtualinvoke $r12.<org.apache.commons.logging.impl.WeakHashtable: boolean containsValue(java.lang.Object)>($r11);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z5);

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r13 = new java.lang.Long;

        specialinvoke $r13.<java.lang.Long: void <init>(long)>(400L);

        $z6 = virtualinvoke $r14.<org.apache.commons.logging.impl.WeakHashtable: boolean containsValue(java.lang.Object)>($r13);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertFalse(boolean)>($z6);

        return;
    }

    public void testElements() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.util.Enumeration r2;
        java.util.ArrayList $r3;
        org.apache.commons.logging.impl.WeakHashtable $r4;
        boolean $z0, $z2, $z3, $z4;
        java.lang.Object $r5;
        int $i0;
        java.lang.Long $r6, $r7, $r8;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        r2 = virtualinvoke $r4.<org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration elements()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(int,int)>(3, $i0);

        $r6 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueOne>;

        $z2 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z2);

        $r7 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueTwo>;

        $z3 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z3);

        $r8 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueThree>;

        $z4 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r8);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z4);

        return;
    }

    public void testEntrySet() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.util.Set r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object r4, $r6, $r11, $r13, $r15;
        org.apache.commons.logging.impl.WeakHashtable $r5;
        java.lang.Long $r7, $r8, $r9, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r5 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        r1 = virtualinvoke $r5.<org.apache.commons.logging.impl.WeakHashtable: java.util.Set entrySet()>();

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        $z0 = virtualinvoke $r7.<java.lang.Long: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueOne>;

        $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label5;

     label2:
        $r8 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyTwo>;

        $z1 = virtualinvoke $r8.<java.lang.Long: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        $r12 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueTwo>;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        goto label5;

     label3:
        $r9 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyThree>;

        $z2 = virtualinvoke $r9.<java.lang.Long: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label4;

        $r10 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueThree>;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label5;

     label4:
        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void fail(java.lang.String)>("Unexpected key");

     label5:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        return;
    }

    public void testGet() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.Long $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        org.apache.commons.logging.impl.WeakHashtable $r2, $r6, $r10, $r14;
        java.lang.Object $r4, $r8, $r12, $r15;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r3 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueOne>;

        $r2 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r1 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        $r4 = virtualinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r1);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r7 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueTwo>;

        $r6 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r5 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyTwo>;

        $r8 = virtualinvoke $r6.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r11 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueThree>;

        $r10 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r9 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyThree>;

        $r12 = virtualinvoke $r10.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r9);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r13 = new java.lang.Long;

        specialinvoke $r13.<java.lang.Long: void <init>(long)>(50L);

        $r15 = virtualinvoke $r14.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r13);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertNull(java.lang.Object)>($r15);

        return;
    }

    public void testKeys() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.util.Enumeration r2;
        java.util.ArrayList $r3;
        org.apache.commons.logging.impl.WeakHashtable $r4;
        boolean $z0, $z2, $z3, $z4;
        java.lang.Object $r5;
        int $i0;
        java.lang.Long $r6, $r7, $r8;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        r2 = virtualinvoke $r4.<org.apache.commons.logging.impl.WeakHashtable: java.util.Enumeration keys()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(int,int)>(3, $i0);

        $r6 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        $z2 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r6);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z2);

        $r7 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyTwo>;

        $z3 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z3);

        $r8 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyThree>;

        $z4 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r8);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z4);

        return;
    }

    public void testKeySet() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.util.Set r1;
        org.apache.commons.logging.impl.WeakHashtable $r2;
        int $i0;
        java.lang.Long $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r2 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        r1 = virtualinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: java.util.Set keySet()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(int,int)>(3, $i0);

        $r3 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyTwo>;

        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z1);

        $r5 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyThree>;

        $z2 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z2);

        return;
    }

    public void testPut() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.Long $r2, $r3, $r6;
        org.apache.commons.logging.impl.WeakHashtable $r4, $r7, $r10, $r13;
        java.lang.Object $r8, $r9, $r12;
        java.lang.Exception $r15, $r16, r17, r19;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(2004L);

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r3 = new java.lang.Long;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>(1066L);

        virtualinvoke $r4.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r6 = new java.lang.Long;

        specialinvoke $r6.<java.lang.Long: void <init>(long)>(1066L);

        $r7 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r8 = virtualinvoke $r7.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r2);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        r17 = null;

     label1:
        $r10 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        virtualinvoke $r10.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r9);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        r17 = $r16;

     label4:
        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("did not throw an exception adding a null key", r17);

        r19 = null;

     label5:
        $r13 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        virtualinvoke $r13.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, null);

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        r19 = $r15;

     label8:
        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("did not throw an exception adding a null value", r19);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void testPutAll() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.util.HashMap $r6;
        java.lang.Long $r7, $r8, $r10, $r11;
        org.apache.commons.logging.impl.WeakHashtable $r13, $r14, $r15, $r17;
        int $i0;
        java.lang.Object $r16, $r18;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = new java.lang.Long;

        specialinvoke $r7.<java.lang.Long: void <init>(long)>(1066L);

        $r8 = new java.lang.Long;

        specialinvoke $r8.<java.lang.Long: void <init>(long)>(1415L);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r10 = new java.lang.Long;

        specialinvoke $r10.<java.lang.Long: void <init>(long)>(1645L);

        $r11 = new java.lang.Long;

        specialinvoke $r11.<java.lang.Long: void <init>(long)>(1815L);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r13 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        virtualinvoke $r13.<org.apache.commons.logging.impl.WeakHashtable: void putAll(java.util.Map)>($r6);

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $i0 = virtualinvoke $r14.<org.apache.commons.logging.impl.WeakHashtable: int size()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(int,int)>(5, $i0);

        $r15 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r16 = virtualinvoke $r15.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r7);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r16);

        $r17 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r18 = virtualinvoke $r17.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r10);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r18);

        return;
    }

    public void testRemove() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.Long $r1, $r5;
        org.apache.commons.logging.impl.WeakHashtable $r2, $r4, $r6;
        int $i0;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r2 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r1 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        virtualinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $i0 = virtualinvoke $r4.<org.apache.commons.logging.impl.WeakHashtable: int size()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(int,int)>(2, $i0);

        $r6 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r5 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        $r7 = virtualinvoke $r6.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertNull(java.lang.Object)>($r7);

        return;
    }

    public void testValues() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.util.Collection r1;
        org.apache.commons.logging.impl.WeakHashtable $r2;
        int $i0;
        java.lang.Long $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r2 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        r1 = virtualinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: java.util.Collection values()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(int,int)>(3, $i0);

        $r3 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueOne>;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueTwo>;

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z1);

        $r5 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueThree>;

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r5);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertTrue(boolean)>($z2);

        return;
    }

    public void xxxIgnoretestRelease() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        byte[] r3;
        java.lang.Long $r4, $r9, $r10;
        org.apache.commons.logging.impl.WeakHashtable $r5, $r11, $r14;
        java.lang.Object $r6, $r12;
        java.lang.ref.ReferenceQueue $r7;
        java.lang.ref.WeakReference $r8;
        int $i0, $i1, i2, i3;
        java.lang.ref.Reference $r13;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        $r5 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(1L);

        $r6 = virtualinvoke $r5.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r4);

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertNotNull(java.lang.Object)>($r6);

        $r7 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r7.<java.lang.ref.ReferenceQueue: void <init>()>();

        $r8 = new java.lang.ref.WeakReference;

        $r9 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne>;

        specialinvoke $r8.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>($r9, $r7);

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyOne> = null;

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyTwo> = null;

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long keyThree> = null;

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueOne> = null;

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueTwo> = null;

        r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: java.lang.Long valueThree> = null;

        i2 = 0;

        i3 = 2;

     label1:
        staticinvoke <java.lang.System: void gc()>();

        $i0 = i2;

        i2 = i2 + 1;

        if $i0 <= 50 goto label2;

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void fail(java.lang.String)>("Max iterations reached before resource released.");

     label2:
        $r11 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $r10 = new java.lang.Long;

        specialinvoke $r10.<java.lang.Long: void <init>(long)>(1L);

        $r12 = virtualinvoke $r11.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object get(java.lang.Object)>($r10);

        if $r12 != null goto label3;

        goto label4;

     label3:
        r3 = newarray (byte)[i3];

        i3 = i3 * 2;

        goto label1;

     label4:
        $r13 = virtualinvoke $r7.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r13 == null goto label4;

        $r14 = r0.<org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable weakHashtable>;

        $i1 = virtualinvoke $r14.<org.apache.commons.logging.impl.WeakHashtable: int size()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void assertEquals(java.lang.String,int,int)>("underlying table not emptied", 0, $i1);

        return;
    }

    public void testLOGGING_119() throws java.lang.Exception
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase r0;
        java.lang.Thread[] r1;
        org.apache.commons.logging.impl.WeakHashtable $r2;
        int $i0, $i1, i2, i3, i4, i5, i6, $i7;
        org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread $r3;
        java.lang.StringBuilder $r4, $r5, $r12, $r13, $r14, $r15;
        java.lang.String $r6, $r16;
        java.lang.Thread $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase;

        r1 = newarray (java.lang.Thread)[10];

        i2 = 1;

        goto label12;

     label01:
        $r2 = new org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable: void <init>()>();

        <org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable hashtable> = $r2;

        i3 = 0;

        goto label03;

     label02:
        $r3 = new org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Thread:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread: void <init>(java.lang.String)>($r6);

        r1[i3] = $r3;

        $r7 = r1[i3];

        virtualinvoke $r7.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r8 = r1[i3];

        virtualinvoke $r8.<java.lang.Thread: void start()>();

        i3 = i3 + 1;

     label03:
        $i0 = lengthof r1;

        if i3 < $i0 goto label02;

        i4 = 0;

        goto label06;

     label04:
        $r9 = r1[i4];

        virtualinvoke $r9.<java.lang.Thread: void join(long)>(5000L);

        $r10 = r1[i4];

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label05;

        goto label07;

     label05:
        i4 = i4 + 1;

     label06:
        $i1 = lengthof r1;

        if i4 < $i1 goto label04;

     label07:
        i5 = 0;

        i6 = 0;

        goto label10;

     label08:
        $r11 = r1[i6];

        $z1 = virtualinvoke $r11.<java.lang.Thread: boolean isAlive()>();

        if $z1 == 0 goto label09;

        i5 = i5 + 1;

     label09:
        i6 = i6 + 1;

     label10:
        $i7 = lengthof r1;

        if i6 < $i7 goto label08;

        if i5 <= 0 goto label11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Attempt: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Stuck threads: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: void fail(java.lang.String)>($r16);

     label11:
        i2 = i2 + 1;

     label12:
        if i2 <= 400 goto label01;

        return;
    }

    static org.apache.commons.logging.impl.WeakHashtable access$0()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;

        $r0 = <org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable hashtable>;

        return $r0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.logging.impl.WeakHashtableTestCase: int MAX_GC_ITERATIONS> = 50;

        <org.apache.commons.logging.impl.WeakHashtableTestCase: int THREAD_COUNT> = 10;

        <org.apache.commons.logging.impl.WeakHashtableTestCase: int OUTER_LOOP> = 400;

        <org.apache.commons.logging.impl.WeakHashtableTestCase: int RUN_LOOPS> = 3000;

        <org.apache.commons.logging.impl.WeakHashtableTestCase: int WAIT_FOR_THREAD_COMPLETION> = 5000;

        return;
    }
}
