public class org.apache.commons.logging.log4j.log4j12.TestAppender extends org.apache.log4j.AppenderSkeleton
{
    private final java.util.List events;

    public void <init>(java.util.List)
    {
        org.apache.commons.logging.log4j.log4j12.TestAppender r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.logging.log4j.log4j12.TestAppender;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        r0.<org.apache.commons.logging.log4j.log4j12.TestAppender: java.util.List events> = r1;

        return;
    }

    protected void append(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.commons.logging.log4j.log4j12.TestAppender r0;
        org.apache.log4j.spi.LoggingEvent r1;
        org.apache.commons.logging.log4j.StandardTests$LogEvent $r3;
        org.apache.log4j.Level $r4;
        java.lang.String $r5, $r8;
        java.lang.Object $r6, $r7;
        org.apache.log4j.spi.ThrowableInformation $r9, $r10;
        java.lang.Throwable $r11;
        java.util.List $r12;

        r0 := @this: org.apache.commons.logging.log4j.log4j12.TestAppender;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r3 = new org.apache.commons.logging.log4j.StandardTests$LogEvent;

        specialinvoke $r3.<org.apache.commons.logging.log4j.StandardTests$LogEvent: void <init>()>();

        $r4 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r5 = virtualinvoke $r4.<org.apache.log4j.Level: java.lang.String toString()>();

        $r3.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String level> = $r5;

        $r6 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        if $r6 != null goto label1;

        $r3.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String msg> = null;

        goto label2;

     label1:
        $r7 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r3.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String msg> = $r8;

     label2:
        $r9 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        if $r9 != null goto label3;

        $r3.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.Throwable throwable> = null;

        goto label4;

     label3:
        $r10 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        $r11 = virtualinvoke $r10.<org.apache.log4j.spi.ThrowableInformation: java.lang.Throwable getThrowable()>();

        $r3.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.Throwable throwable> = $r11;

     label4:
        $r12 = r0.<org.apache.commons.logging.log4j.log4j12.TestAppender: java.util.List events>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void close()
    {
        org.apache.commons.logging.log4j.log4j12.TestAppender r0;

        r0 := @this: org.apache.commons.logging.log4j.log4j12.TestAppender;

        return;
    }

    public boolean requiresLayout()
    {
        org.apache.commons.logging.log4j.log4j12.TestAppender r0;

        r0 := @this: org.apache.commons.logging.log4j.log4j12.TestAppender;

        return 0;
    }
}
