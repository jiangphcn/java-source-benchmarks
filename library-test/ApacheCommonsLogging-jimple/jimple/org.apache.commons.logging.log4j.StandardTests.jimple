public abstract class org.apache.commons.logging.log4j.StandardTests extends junit.framework.TestCase
{

    public void <init>()
    {
        org.apache.commons.logging.log4j.StandardTests r0;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.logging.log4j.StandardTests r0;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        staticinvoke <org.apache.commons.logging.LogFactory: void releaseAll()>();

        return;
    }

    public void tearDown()
    {
        org.apache.commons.logging.log4j.StandardTests r0;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        staticinvoke <org.apache.commons.logging.LogFactory: void releaseAll()>();

        return;
    }

    public abstract void setUpTestAppender(java.util.List) throws java.lang.Exception;

    public void testCreateFactory()
    {
        org.apache.commons.logging.log4j.StandardTests r0;
        org.apache.commons.logging.LogFactory r1;
        java.lang.String[] r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertNotNull(java.lang.String,java.lang.Object)>("LogFactory exists", r1);

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("LogFactory class", "org.apache.commons.logging.impl.LogFactoryImpl", $r4);

        r2 = virtualinvoke r1.<org.apache.commons.logging.LogFactory: java.lang.String[] getAttributeNames()>();

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertNotNull(java.lang.String,java.lang.Object)>("Names exists", r2);

        $i0 = lengthof r2;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,int,int)>("Names empty", 0, $i0);

        return;
    }

    public void testPlainMessages() throws java.lang.Exception
    {
        org.apache.commons.logging.log4j.StandardTests r0;
        org.apache.commons.logging.Log r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void setUpTestAppender(java.util.List)>($r3);

        r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("test-category");

        specialinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void logPlainMessages(org.apache.commons.logging.Log)>(r2);

        specialinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void checkLoggingEvents(java.util.List,boolean)>($r3, 0);

        return;
    }

    public void testExceptionMessages() throws java.lang.Exception
    {
        org.apache.commons.logging.log4j.StandardTests r0;
        org.apache.commons.logging.Log r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void setUpTestAppender(java.util.List)>($r3);

        r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("test-category");

        specialinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void logExceptionMessages(org.apache.commons.logging.Log)>(r2);

        specialinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void checkLoggingEvents(java.util.List,boolean)>($r3, 1);

        return;
    }

    public void testSerializable() throws java.lang.Exception
    {
        org.apache.commons.logging.log4j.StandardTests r0;
        org.apache.commons.logging.Log r2, r7;
        java.util.ArrayList $r8;
        java.io.ByteArrayOutputStream $r9;
        java.io.ObjectOutputStream $r10;
        java.io.ByteArrayInputStream $r11;
        byte[] $r12;
        java.io.ObjectInputStream $r13;
        java.lang.Object $r14;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void setUpTestAppender(java.util.List)>($r8);

        r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>("test-category");

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        $r10 = new java.io.ObjectOutputStream;

        specialinvoke $r10.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r9);

        virtualinvoke $r10.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);

        virtualinvoke $r10.<java.io.ObjectOutputStream: void close()>();

        $r11 = new java.io.ByteArrayInputStream;

        $r12 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);

        $r13 = new java.io.ObjectInputStream;

        specialinvoke $r13.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r11);

        $r14 = virtualinvoke $r13.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r7 = (org.apache.commons.logging.Log) $r14;

        virtualinvoke $r13.<java.io.ObjectInputStream: void close()>();

        specialinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void logExceptionMessages(org.apache.commons.logging.Log)>(r7);

        specialinvoke r0.<org.apache.commons.logging.log4j.StandardTests: void checkLoggingEvents(java.util.List,boolean)>($r8, 1);

        return;
    }

    private void checkLoggingEvents(java.util.List, boolean)
    {
        org.apache.commons.logging.log4j.StandardTests r0;
        java.util.List r1;
        boolean z0, $z1, $z2, $z3, $z4;
        int $i0;
        java.lang.Object $r2, $r6, $r10, $r14;
        java.lang.String $r3, $r4, $r7, $r8, $r11, $r12, $r15, $r16;
        java.lang.Throwable $r5, $r9, $r13, $r17;
        org.apache.commons.logging.log4j.StandardTests$LogEvent r22, r23, r24, r25;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,int,int)>("Unexpected number of log events", 4, $i0);

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r22 = (org.apache.commons.logging.log4j.StandardTests$LogEvent) $r2;

        $r3 = r22.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String msg>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Info message expected", "info", $r3);

        $r4 = r22.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String level>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Info level expected", "INFO", $r4);

        $r5 = r22.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.Throwable throwable>;

        if $r5 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,boolean,boolean)>("Exception data incorrect", $z1, z0);

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        r23 = (org.apache.commons.logging.log4j.StandardTests$LogEvent) $r6;

        $r7 = r23.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String msg>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Warn message expected", "warn", $r7);

        $r8 = r23.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String level>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Warn level expected", "WARN", $r8);

        $r9 = r23.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.Throwable throwable>;

        if $r9 == null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,boolean,boolean)>("Exception data incorrect", $z2, z0);

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        r24 = (org.apache.commons.logging.log4j.StandardTests$LogEvent) $r10;

        $r11 = r24.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String msg>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Error message expected", "error", $r11);

        $r12 = r24.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String level>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Error level expected", "ERROR", $r12);

        $r13 = r24.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.Throwable throwable>;

        if $r13 == null goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,boolean,boolean)>("Exception data incorrect", $z3, z0);

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(3);

        r25 = (org.apache.commons.logging.log4j.StandardTests$LogEvent) $r14;

        $r15 = r25.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String msg>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Fatal message expected", "fatal", $r15);

        $r16 = r25.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.String level>;

        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Fatal level expected", "FATAL", $r16);

        $r17 = r25.<org.apache.commons.logging.log4j.StandardTests$LogEvent: java.lang.Throwable throwable>;

        if $r17 == null goto label7;

        $z4 = 1;

        goto label8;

     label7:
        $z4 = 0;

     label8:
        staticinvoke <org.apache.commons.logging.log4j.StandardTests: void assertEquals(java.lang.String,boolean,boolean)>("Exception data incorrect", $z4, z0);

        return;
    }

    private void logPlainMessages(org.apache.commons.logging.Log)
    {
        org.apache.commons.logging.log4j.StandardTests r0;
        org.apache.commons.logging.Log r1;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        r1 := @parameter0: org.apache.commons.logging.Log;

        interfaceinvoke r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("trace");

        interfaceinvoke r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("debug");

        interfaceinvoke r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("info");

        interfaceinvoke r1.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("warn");

        interfaceinvoke r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>("error");

        interfaceinvoke r1.<org.apache.commons.logging.Log: void fatal(java.lang.Object)>("fatal");

        return;
    }

    private void logExceptionMessages(org.apache.commons.logging.Log)
    {
        org.apache.commons.logging.log4j.StandardTests r0;
        org.apache.commons.logging.Log r1;
        org.apache.commons.logging.DummyException $r3;

        r0 := @this: org.apache.commons.logging.log4j.StandardTests;

        r1 := @parameter0: org.apache.commons.logging.Log;

        $r3 = new org.apache.commons.logging.DummyException;

        specialinvoke $r3.<org.apache.commons.logging.DummyException: void <init>()>();

        interfaceinvoke r1.<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>("trace", $r3);

        interfaceinvoke r1.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("debug", $r3);

        interfaceinvoke r1.<org.apache.commons.logging.Log: void info(java.lang.Object,java.lang.Throwable)>("info", $r3);

        interfaceinvoke r1.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("warn", $r3);

        interfaceinvoke r1.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("error", $r3);

        interfaceinvoke r1.<org.apache.commons.logging.Log: void fatal(java.lang.Object,java.lang.Throwable)>("fatal", $r3);

        return;
    }
}
