public class org.apache.commons.logging.impl.ServletContextCleaner extends java.lang.Object implements javax.servlet.ServletContextListener
{
    private static final java.lang.Class[] RELEASE_SIGNATURE;

    static void <clinit>()
    {
        java.lang.Class[] $r0;

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "java/lang/ClassLoader";

        <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class[] RELEASE_SIGNATURE> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.logging.impl.ServletContextCleaner r0;

        r0 := @this: org.apache.commons.logging.impl.ServletContextCleaner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void contextDestroyed(javax.servlet.ServletContextEvent)
    {
        org.apache.commons.logging.impl.ServletContextCleaner r0;
        javax.servlet.ServletContextEvent r1;
        java.lang.ClassLoader r2, $r8, r16;
        java.lang.Object[] r3;
        java.lang.reflect.Method r4;
        java.lang.Thread $r5;
        java.lang.Class[] $r6;
        java.lang.NoSuchMethodException $r9;
        java.io.PrintStream $r10, $r13, $r15;
        java.lang.ClassNotFoundException $r11;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.IllegalAccessException $r14;
        java.lang.Class r17;

        r0 := @this: org.apache.commons.logging.impl.ServletContextCleaner;

        r1 := @parameter0: javax.servlet.ServletContextEvent;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke $r5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r3 = newarray (java.lang.Object)[1];

        r3[0] = r2;

        r16 = r2;

        goto label7;

     label1:
        r17 = virtualinvoke r16.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r6 = <org.apache.commons.logging.impl.ServletContextCleaner: java.lang.Class[] RELEASE_SIGNATURE>;

        r4 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("release", $r6);

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r3);

        $r8 = virtualinvoke r17.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r16 = virtualinvoke $r8.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label2:
        goto label7;

     label3:
        $r11 := @caughtexception;

        r16 = null;

        goto label7;

     label4:
        $r9 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance found which does not support release method!");

        r16 = null;

        goto label7;

     label5:
        $r14 := @caughtexception;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance found which is not accessable!");

        r16 = null;

        goto label7;

     label6:
        $r12 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("LogFactory instance release method failed!");

        r16 = null;

     label7:
        if r16 != null goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void release(java.lang.ClassLoader)>(r2);

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
    }

    public void contextInitialized(javax.servlet.ServletContextEvent)
    {
        org.apache.commons.logging.impl.ServletContextCleaner r0;
        javax.servlet.ServletContextEvent r1;

        r0 := @this: org.apache.commons.logging.impl.ServletContextCleaner;

        r1 := @parameter0: javax.servlet.ServletContextEvent;

        return;
    }
}
