public class org.apache.commons.logging.LoadTestCase extends junit.framework.TestCase
{
    private static java.lang.String[] LOG_PCKG;
    private java.lang.ClassLoader origContextClassLoader;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "org.apache.commons.logging";

        $r0[1] = "org.apache.commons.logging.impl";

        <org.apache.commons.logging.LoadTestCase: java.lang.String[] LOG_PCKG> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.logging.LoadTestCase r0;

        r0 := @this: org.apache.commons.logging.LoadTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    private void setAllowFlawedContext(java.lang.Class, java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.logging.LoadTestCase r0;
        java.lang.Class r1;
        java.lang.String r2;
        java.lang.reflect.Method r4;
        java.lang.Class[] $r5;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.commons.logging.LoadTestCase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "java/lang/String";

        r4 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setAllowFlawedContext", $r5);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6);

        return;
    }

    public void testInContainer() throws java.lang.Exception
    {
        org.apache.commons.logging.LoadTestCase r0;
        java.lang.Thread $r1, $r3, $r4, $r5, $r7;
        java.lang.ClassLoader $r2, $r6, $r8;
        org.apache.commons.logging.LogConfigurationException $r9, $r10;
        java.lang.Class r11, r12, r13, r15, r16;

        r0 := @this: org.apache.commons.logging.LoadTestCase;

        r11 = specialinvoke r0.<org.apache.commons.logging.LoadTestCase: java.lang.Class reload()>();

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r1.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r2);

        specialinvoke r0.<org.apache.commons.logging.LoadTestCase: void execute(java.lang.Class)>(r11);

        r12 = specialinvoke r0.<org.apache.commons.logging.LoadTestCase: java.lang.Class reload()>();

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(null);

        specialinvoke r0.<org.apache.commons.logging.LoadTestCase: void execute(java.lang.Class)>(r12);

        r13 = specialinvoke r0.<org.apache.commons.logging.LoadTestCase: java.lang.Class reload()>();

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(null);

     label1:
        specialinvoke r0.<org.apache.commons.logging.LoadTestCase: void setAllowFlawedContext(java.lang.Class,java.lang.String)>(r13, "false");

        specialinvoke r0.<org.apache.commons.logging.LoadTestCase: void execute(java.lang.Class)>(r13);

        staticinvoke <org.apache.commons.logging.LoadTestCase: void fail(java.lang.String)>("Logging config succeeded when context classloader was null!");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        r15 = specialinvoke r0.<org.apache.commons.logging.LoadTestCase: java.lang.Class reload()>();

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        virtualinvoke $r5.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r6);

        specialinvoke r0.<org.apache.commons.logging.LoadTestCase: void execute(java.lang.Class)>(r15);

        r16 = specialinvoke r0.<org.apache.commons.logging.LoadTestCase: java.lang.Class reload()>();

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        virtualinvoke $r7.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r8);

     label5:
        specialinvoke r0.<org.apache.commons.logging.LoadTestCase: void setAllowFlawedContext(java.lang.Class,java.lang.String)>(r16, "false");

        specialinvoke r0.<org.apache.commons.logging.LoadTestCase: void execute(java.lang.Class)>(r16);

        staticinvoke <org.apache.commons.logging.LoadTestCase: void fail(java.lang.String)>("Error: somehow downcast a Logger loaded via system classloader to the Log interface loaded via a custom classloader");

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

     label8:
        return;

        catch org.apache.commons.logging.LogConfigurationException from label1 to label2 with label3;
        catch org.apache.commons.logging.LogConfigurationException from label5 to label6 with label7;
    }

    private java.lang.Class reload() throws java.lang.Exception
    {
        org.apache.commons.logging.LoadTestCase r0;
        org.apache.commons.logging.LoadTestCase$AppClassLoader $r2;
        java.lang.Class $r3, $r5, r11;
        java.lang.ClassLoader $r4, $r8;
        java.lang.String $r6;
        java.lang.Throwable $r9;
        java.lang.ClassNotFoundException $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.LoadTestCase;

        r11 = null;

        $r2 = new org.apache.commons.logging.LoadTestCase$AppClassLoader;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r2.<org.apache.commons.logging.LoadTestCase$AppClassLoader: void <init>(java.lang.ClassLoader)>($r4);

     label1:
        $r5 = class "org/apache/commons/logging/UserClass";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        r11 = virtualinvoke $r2.<org.apache.commons.logging.LoadTestCase$AppClassLoader: java.lang.Class loadClass(java.lang.String)>($r6);

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        throw $r10;

     label4:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void printStackTrace()>();

        staticinvoke <org.apache.commons.logging.LoadTestCase: void fail(java.lang.String)>("AppClassLoader failed ");

     label5:
        $r8 = virtualinvoke r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r8 != $r2 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <org.apache.commons.logging.LoadTestCase: void assertTrue(java.lang.String,boolean)>("app isolated", $z0);

        return r11;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void execute(java.lang.Class) throws java.lang.Exception
    {
        org.apache.commons.logging.LoadTestCase r0;
        java.lang.Class r1;

        r0 := @this: org.apache.commons.logging.LoadTestCase;

        r1 := @parameter0: java.lang.Class;

        virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.logging.LoadTestCase r0;
        java.lang.Thread $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.apache.commons.logging.LoadTestCase;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r0.<org.apache.commons.logging.LoadTestCase: java.lang.ClassLoader origContextClassLoader> = $r2;

        return;
    }

    public void tearDown()
    {
        org.apache.commons.logging.LoadTestCase r0;
        java.lang.Thread $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.apache.commons.logging.LoadTestCase;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<org.apache.commons.logging.LoadTestCase: java.lang.ClassLoader origContextClassLoader>;

        virtualinvoke $r1.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r2);

        return;
    }

    static java.lang.String[] access$0()
    {
        java.lang.String[] $r0;

        $r0 = <org.apache.commons.logging.LoadTestCase: java.lang.String[] LOG_PCKG>;

        return $r0;
    }
}
