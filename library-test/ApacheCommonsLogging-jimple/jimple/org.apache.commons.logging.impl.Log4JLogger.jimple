public class org.apache.commons.logging.impl.Log4JLogger extends java.lang.Object implements org.apache.commons.logging.Log, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final java.lang.String FQCN;
    private transient volatile org.apache.log4j.Logger logger;
    private final java.lang.String name;
    private static final org.apache.log4j.Priority traceLevel;

    static void <clinit>()
    {
        java.lang.Class $r1, $r3, $r4;
        java.lang.String $r2;
        boolean $z0;
        java.lang.reflect.Field $r5;
        java.lang.Object $r6;
        java.lang.InstantiationError $r7;
        java.lang.Exception $r8;
        org.apache.log4j.Priority r9;

        <org.apache.commons.logging.impl.Log4JLogger: long serialVersionUID> = 5160705895411730424L;

        $r1 = class "org/apache/commons/logging/impl/Log4JLogger";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN> = $r2;

        $r3 = class "org/apache/log4j/Priority";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "org/apache/log4j/Level");

        if $z0 != 0 goto label1;

        $r7 = new java.lang.InstantiationError;

        specialinvoke $r7.<java.lang.InstantiationError: void <init>(java.lang.String)>("Log4J 1.2 not available");

        throw $r7;

     label1:
        $r4 = class "org/apache/log4j/Level";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("TRACE");

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r9 = (org.apache.log4j.Priority) $r6;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r9 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

     label4:
        <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Priority traceLevel> = r9;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger> = null;

        r0.<org.apache.commons.logging.impl.Log4JLogger: java.lang.String name> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.String r1;
        org.apache.log4j.Logger $r2;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger> = null;

        r0.<org.apache.commons.logging.impl.Log4JLogger: java.lang.String name> = r1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger> = $r2;

        return;
    }

    public void <init>(org.apache.log4j.Logger)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        org.apache.log4j.Logger r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: org.apache.log4j.Logger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger> = null;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Warning - null logger in constructor; possible log4j misconfiguration.");

        throw $r3;

     label1:
        $r2 = virtualinvoke r1.<org.apache.log4j.Logger: java.lang.String getName()>();

        r0.<org.apache.commons.logging.impl.Log4JLogger: java.lang.String name> = $r2;

        r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger> = r1;

        return;
    }

    public void trace(java.lang.Object)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Priority $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r3 = <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Priority traceLevel>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r4, $r3, r1, null);

        return;
    }

    public void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        org.apache.log4j.Logger $r3;
        org.apache.log4j.Priority $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r4 = <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Priority traceLevel>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, $r4, r1, r2);

        return;
    }

    public void debug(java.lang.Object)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Level $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r4, $r3, r1, null);

        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        org.apache.log4j.Logger $r3;
        org.apache.log4j.Level $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, $r4, r1, r2);

        return;
    }

    public void info(java.lang.Object)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Level $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r4, $r3, r1, null);

        return;
    }

    public void info(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        org.apache.log4j.Logger $r3;
        org.apache.log4j.Level $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, $r4, r1, r2);

        return;
    }

    public void warn(java.lang.Object)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Level $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r4, $r3, r1, null);

        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        org.apache.log4j.Logger $r3;
        org.apache.log4j.Level $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, $r4, r1, r2);

        return;
    }

    public void error(java.lang.Object)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Level $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r4, $r3, r1, null);

        return;
    }

    public void error(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        org.apache.log4j.Logger $r3;
        org.apache.log4j.Level $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, $r4, r1, r2);

        return;
    }

    public void fatal(java.lang.Object)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        org.apache.log4j.Logger $r2;
        org.apache.log4j.Level $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r4 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r4, $r3, r1, null);

        return;
    }

    public void fatal(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        org.apache.log4j.Logger $r3;
        org.apache.log4j.Level $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r5 = <org.apache.commons.logging.impl.Log4JLogger: java.lang.String FQCN>;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void log(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, $r4, r1, r2);

        return;
    }

    public org.apache.log4j.Logger getLogger()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        java.lang.String $r3;
        org.apache.log4j.Logger $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        r6 = r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger>;

        if r6 != null goto label6;

        entermonitor r0;

     label1:
        r6 = r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger>;

        if r6 != null goto label2;

        $r3 = r0.<org.apache.commons.logging.impl.Log4JLogger: java.lang.String name>;

        $r4 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>($r3);

        r6 = $r4;

        r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger logger> = $r4;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        return r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isDebugEnabled()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        org.apache.log4j.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        return $z0;
    }

    public boolean isErrorEnabled()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        return $z0;
    }

    public boolean isFatalEnabled()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        return $z0;
    }

    public boolean isInfoEnabled()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        org.apache.log4j.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        return $z0;
    }

    public boolean isTraceEnabled()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Priority $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r2 = <org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Priority traceLevel>;

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        return $z0;
    }

    public boolean isWarnEnabled()
    {
        org.apache.commons.logging.impl.Log4JLogger r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.Log4JLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.Log4JLogger: org.apache.log4j.Logger getLogger()>();

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke $r1.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        return $z0;
    }
}
