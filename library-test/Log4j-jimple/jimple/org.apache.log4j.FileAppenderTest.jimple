public class org.apache.log4j.FileAppenderTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.apache.log4j.FileAppenderTest r0;

        r0 := @this: org.apache.log4j.FileAppenderTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testDirectoryCreation()
    {
        org.apache.log4j.FileAppenderTest r0;
        java.lang.String $r4;
        boolean $z0, $z3;
        java.io.File $r5, $r6, $r9;
        org.apache.log4j.FileAppender $r7;
        org.apache.log4j.PatternLayout $r8;

        r0 := @this: org.apache.log4j.FileAppenderTest;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("1.1.");

        if $z0 != 0 goto label1;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("output/newdir/temp.log");

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("output/newdir");

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        $r7 = new org.apache.log4j.FileAppender;

        specialinvoke $r7.<org.apache.log4j.FileAppender: void <init>()>();

        virtualinvoke $r7.<org.apache.log4j.FileAppender: void setFile(java.lang.String)>("output/newdir/temp.log");

        $r8 = new org.apache.log4j.PatternLayout;

        specialinvoke $r8.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>("%m%n");

        virtualinvoke $r7.<org.apache.log4j.FileAppender: void setLayout(org.apache.log4j.Layout)>($r8);

        virtualinvoke $r7.<org.apache.log4j.FileAppender: void activateOptions()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>("output/newdir/temp.log");

        $z3 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        staticinvoke <org.apache.log4j.FileAppenderTest: void assertTrue(boolean)>($z3);

     label1:
        return;
    }

    public void testGetThresholdReturnType() throws java.lang.Exception
    {
        org.apache.log4j.FileAppenderTest r0;
        java.lang.reflect.Method r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.FileAppenderTest;

        $r2 = class "org/apache/log4j/FileAppender";

        r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getThreshold", null);

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r3 != class "org/apache/log4j/Priority" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.log4j.FileAppenderTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testgetSetThreshold()
    {
        org.apache.log4j.FileAppenderTest r0;
        org.apache.log4j.Level r2;
        org.apache.log4j.FileAppender $r3;
        org.apache.log4j.Priority $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.log4j.FileAppenderTest;

        $r3 = new org.apache.log4j.FileAppender;

        specialinvoke $r3.<org.apache.log4j.FileAppender: void <init>()>();

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r4 = virtualinvoke $r3.<org.apache.log4j.FileAppender: org.apache.log4j.Priority getThreshold()>();

        staticinvoke <org.apache.log4j.FileAppenderTest: void assertNull(java.lang.Object)>($r4);

        virtualinvoke $r3.<org.apache.log4j.FileAppender: void setThreshold(org.apache.log4j.Priority)>(r2);

        $r5 = virtualinvoke $r3.<org.apache.log4j.FileAppender: org.apache.log4j.Priority getThreshold()>();

        if $r5 != r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.log4j.FileAppenderTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testIsAsSevereAsThreshold()
    {
        org.apache.log4j.FileAppenderTest r0;
        org.apache.log4j.Level r2;
        org.apache.log4j.FileAppender $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.FileAppenderTest;

        $r3 = new org.apache.log4j.FileAppender;

        specialinvoke $r3.<org.apache.log4j.FileAppender: void <init>()>();

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $z0 = virtualinvoke $r3.<org.apache.log4j.FileAppender: boolean isAsSevereAsThreshold(org.apache.log4j.Priority)>(r2);

        staticinvoke <org.apache.log4j.FileAppenderTest: void assertTrue(boolean)>($z0);

        return;
    }
}
