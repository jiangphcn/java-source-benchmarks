public final class org.apache.log4j.LogMF extends org.apache.log4j.LogXF
{
    private static java.text.NumberFormat numberFormat;
    private static java.util.Locale numberLocale;
    private static java.text.DateFormat dateFormat;
    private static java.util.Locale dateLocale;
    private static final java.lang.String FQCN;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <org.apache.log4j.LogMF: java.text.NumberFormat numberFormat> = null;

        <org.apache.log4j.LogMF: java.util.Locale numberLocale> = null;

        <org.apache.log4j.LogMF: java.text.DateFormat dateFormat> = null;

        <org.apache.log4j.LogMF: java.util.Locale dateLocale> = null;

        $r0 = class "org/apache/log4j/LogMF";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <org.apache.log4j.LogMF: java.lang.String FQCN> = $r1;

        return;
    }

    private void <init>()
    {
        org.apache.log4j.LogMF r0;

        r0 := @this: org.apache.log4j.LogMF;

        specialinvoke r0.<org.apache.log4j.LogXF: void <init>()>();

        return;
    }

    private static synchronized java.lang.String formatNumber(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Locale r1, $r2;
        java.text.NumberFormat $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = <org.apache.log4j.LogMF: java.util.Locale numberLocale>;

        if r1 != $r2 goto label1;

        $r4 = <org.apache.log4j.LogMF: java.text.NumberFormat numberFormat>;

        if $r4 != null goto label2;

     label1:
        <org.apache.log4j.LogMF: java.util.Locale numberLocale> = r1;

        $r3 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>(r1);

        <org.apache.log4j.LogMF: java.text.NumberFormat numberFormat> = $r3;

     label2:
        $r5 = <org.apache.log4j.LogMF: java.text.NumberFormat numberFormat>;

        $r6 = virtualinvoke $r5.<java.text.NumberFormat: java.lang.String format(java.lang.Object)>(r0);

        return $r6;
    }

    private static synchronized java.lang.String formatDate(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Locale r1, $r2;
        java.text.DateFormat $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = <org.apache.log4j.LogMF: java.util.Locale dateLocale>;

        if r1 != $r2 goto label1;

        $r4 = <org.apache.log4j.LogMF: java.text.DateFormat dateFormat>;

        if $r4 != null goto label2;

     label1:
        <org.apache.log4j.LogMF: java.util.Locale dateLocale> = r1;

        $r3 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>(3, 3, r1);

        <org.apache.log4j.LogMF: java.text.DateFormat dateFormat> = $r3;

     label2:
        $r5 = <org.apache.log4j.LogMF: java.text.DateFormat dateFormat>;

        $r6 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.lang.Object)>(r0);

        return $r6;
    }

    private static java.lang.String formatObject(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r4;

     label1:
        $z1 = r0 instanceof java.lang.Double;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof java.lang.Float;

        if $z2 == 0 goto label3;

     label2:
        $r1 = staticinvoke <org.apache.log4j.LogMF: java.lang.String formatNumber(java.lang.Object)>(r0);

        return $r1;

     label3:
        $z3 = r0 instanceof java.util.Date;

        if $z3 == 0 goto label4;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.String formatDate(java.lang.Object)>(r0);

        return $r3;

     label4:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        return $r2;
    }

    private static boolean isSimple(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9, i10;
        char $c4, $c6, $c8;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(39);

        if $i0 == -1 goto label1;

        return 0;

     label1:
        i10 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(123);

        goto label5;

     label2:
        $i1 = i10 + 2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label3;

        $i3 = i10 + 2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 125 goto label3;

        $i5 = i10 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        if $c6 < 48 goto label3;

        $i7 = i10 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 <= 57 goto label4;

     label3:
        return 0;

     label4:
        $i9 = i10 + 1;

        i10 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(123, $i9);

     label5:
        if i10 != -1 goto label2;

        return 1;
    }

    private static java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r2, $r4, $r5, $r7, $r8, $r10, $r12, $r13, r17, r18, $r20, $r21, r23;
        java.lang.Object[] r1;
        int i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11, $i12, i13, i14, $i15;
        boolean $z0;
        char $c4, $c6, $c8, $c10;
        java.lang.StringBuilder $r3, $r6, $r11, $r14, $r19, $r22;
        java.lang.Object $r9;
        java.lang.IllegalArgumentException $r15;
        java.lang.String[] r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = staticinvoke <org.apache.log4j.LogMF: boolean isSimple(java.lang.String)>(r0);

        if $z0 == 0 goto label08;

        r16 = newarray (java.lang.String)[10];

        i13 = 0;

        r17 = "";

        i14 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(123);

        goto label07;

     label02:
        $i1 = i14 + 2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label06;

        $i3 = i14 + 2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 125 goto label06;

        $i5 = i14 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        if $c6 < 48 goto label06;

        $i7 = i14 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 > 57 goto label06;

        $i9 = i14 + 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        i0 = $c10 - 48;

        $r3 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r17);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i14);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r18 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r16[i0];

        if $r7 != null goto label05;

        if r1 == null goto label03;

        $i12 = lengthof r1;

        if i0 < $i12 goto label04;

     label03:
        $i11 = i14 + 3;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i14, $i11);

        r16[i0] = $r8;

        goto label05;

     label04:
        $r9 = r1[i0];

        $r10 = staticinvoke <org.apache.log4j.LogMF: java.lang.String formatObject(java.lang.Object)>($r9);

        r16[i0] = $r10;

     label05:
        $r19 = new java.lang.StringBuilder;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r18);

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20);

        $r21 = r16[i0];

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r17 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        i13 = i14 + 3;

        i14 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(123, i13);

        goto label07;

     label06:
        $i15 = i14 + 1;

        i14 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(123, $i15);

     label07:
        if i14 >= 0 goto label02;

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r17);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r23 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return r23;

     label08:
        $r2 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

     label09:
        return $r2;

     label10:
        $r15 := @caughtexception;

        return r0;

        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
    }

    private static java.lang.String format(java.lang.String, java.lang.Object)
    {
        java.lang.String r0, $r3, $r5, $r6, $r9, $r12, $r13, $r16, $r17, r20, r21, r22, r23;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11, i12, i13, $i14;
        boolean $z0;
        java.lang.Object[] $r2;
        char $c4, $c6, $c8, $c10;
        java.lang.StringBuilder $r4, $r7, $r8, $r10, $r11, $r14, $r15, $r18;
        java.lang.IllegalArgumentException $r19;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = staticinvoke <org.apache.log4j.LogMF: boolean isSimple(java.lang.String)>(r0);

        if $z0 == 0 goto label08;

        r20 = null;

        i12 = 0;

        r21 = "";

        i13 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(123);

        goto label07;

     label02:
        $i1 = i13 + 2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label06;

        $i3 = i13 + 2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 125 goto label06;

        $i5 = i13 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        if $c6 < 48 goto label06;

        $i7 = i13 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 > 57 goto label06;

        $i9 = i13 + 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        i0 = $c10 - 48;

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r21);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i12, i13);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r22 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 == 0 goto label03;

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r22);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $i11 = i13 + 3;

        $r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, $i11);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label05;

     label03:
        if r20 != null goto label04;

        r20 = staticinvoke <org.apache.log4j.LogMF: java.lang.String formatObject(java.lang.Object)>(r1);

     label04:
        $r8 = new java.lang.StringBuilder;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r22);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        r21 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        i12 = i13 + 3;

        i13 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(123, i12);

        goto label07;

     label06:
        $i14 = i13 + 1;

        i13 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(123, $i14);

     label07:
        if i13 >= 0 goto label02;

        $r15 = new java.lang.StringBuilder;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r21);

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i12);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return r23;

     label08:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r2);

     label09:
        return $r3;

     label10:
        $r19 := @caughtexception;

        return r0;

        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
    }

    private static java.lang.String format(java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, r1, r5, $r7;
        java.lang.Object[] r2;
        java.lang.Exception $r3;
        java.util.ResourceBundle r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 == null goto label4;

     label1:
        r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>(r0);

        r5 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r1);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r5 = r1;

        goto label5;

     label4:
        r5 = r1;

     label5:
        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r5, r2);

        return $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static void forcedLog(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r4;
        org.apache.log4j.spi.LoggingEvent $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        $r3 = new org.apache.log4j.spi.LoggingEvent;

        $r4 = <org.apache.log4j.LogMF: java.lang.String FQCN>;

        specialinvoke $r3.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r4, r0, r1, r2, null);

        virtualinvoke r0.<org.apache.log4j.Logger: void callAppenders(org.apache.log4j.spi.LoggingEvent)>($r3);

        return;
    }

    private static void forcedLog(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.Throwable)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        java.lang.Throwable r3;
        org.apache.log4j.spi.LoggingEvent $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Throwable;

        $r4 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = <org.apache.log4j.LogMF: java.lang.String FQCN>;

        specialinvoke $r4.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, r0, r1, r2, r3);

        virtualinvoke r0.<org.apache.log4j.Logger: void callAppenders(org.apache.log4j.spi.LoggingEvent)>($r4);

        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        org.apache.log4j.Level $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r3);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r5);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        java.lang.Object[] r2;
        boolean $z0;
        org.apache.log4j.Level $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        java.lang.Object[] r2;
        boolean $z0;
        org.apache.log4j.Level $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r4);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        org.apache.log4j.Level $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r3);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r5);

     label1:
        return;
    }

    public static void error(org.apache.log4j.Logger, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        org.apache.log4j.Level $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r3);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r5);

     label1:
        return;
    }

    public static void fatal(org.apache.log4j.Logger, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        org.apache.log4j.Level $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r3);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.Throwable r1;
        java.lang.String r2, $r6;
        java.lang.Object[] r3;
        org.apache.log4j.Level $r4, $r5;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $r4 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, $r5, $r6, r1);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.Throwable r1;
        java.lang.String r2, $r5;
        java.lang.Object[] r3;
        boolean $z0;
        org.apache.log4j.Level $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, $r4, $r5, r1);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.Throwable r1;
        java.lang.String r2, $r5;
        java.lang.Object[] r3;
        boolean $z0;
        org.apache.log4j.Level $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, $r4, $r5, r1);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.Throwable r1;
        java.lang.String r2, $r6;
        java.lang.Object[] r3;
        org.apache.log4j.Level $r4, $r5;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, $r5, $r6, r1);

     label1:
        return;
    }

    public static void error(org.apache.log4j.Logger, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.Throwable r1;
        java.lang.String r2, $r6;
        java.lang.Object[] r3;
        org.apache.log4j.Level $r4, $r5;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, $r5, $r6, r1);

     label1:
        return;
    }

    public static void fatal(org.apache.log4j.Logger, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        java.lang.Throwable r1;
        java.lang.String r2, $r6;
        java.lang.Object[] r3;
        org.apache.log4j.Level $r4, $r5;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, $r5, $r6, r1);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, boolean)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        boolean z0, $z1;
        org.apache.log4j.Level $r2, $r3;
        java.lang.Boolean $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z1 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z1 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Boolean valueOf(boolean)>(z0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, char)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        char c0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Character $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Character valueOf(char)>(c0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, byte)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        byte b0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Byte $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        b0 := @parameter2: byte;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Byte valueOf(byte)>(b0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, short)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        short s0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Short $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Short valueOf(short)>(s0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, int)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        int i0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Integer $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, long)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        long l0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Long $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Long valueOf(long)>(l0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, float)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        float f0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Float $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Float valueOf(float)>(f0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, double)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        double d0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Double $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $r2 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        java.lang.Object r2;
        org.apache.log4j.Level $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $r3 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r3);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r5);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r7;
        java.lang.Object r2, r3;
        org.apache.log4j.Level $r4, $r5;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object)>(r2, r3);

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r6);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r5, $r7);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r8;
        java.lang.Object r2, r3, r4;
        org.apache.log4j.Level $r5, $r6;
        boolean $z0;
        java.lang.Object[] $r7;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $r5 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r5);

        if $z0 == 0 goto label1;

        $r6 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r7);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r6, $r8);

     label1:
        return;
    }

    public static void trace(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r9;
        java.lang.Object r2, r3, r4, r5;
        org.apache.log4j.Level $r6, $r7;
        boolean $z0;
        java.lang.Object[] $r8;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $r6 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r6);

        if $z0 == 0 goto label1;

        $r7 = <org.apache.log4j.LogMF: org.apache.log4j.Level TRACE>;

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4, r5);

        $r9 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r8);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r7, $r9);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, boolean)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        boolean z0, $z1;
        org.apache.log4j.Level $r2;
        java.lang.Boolean $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Boolean valueOf(boolean)>(z0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, char)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        char c0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Character $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Character valueOf(char)>(c0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, byte)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        byte b0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Byte $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        b0 := @parameter2: byte;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Byte valueOf(byte)>(b0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, short)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        short s0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Short $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Short valueOf(short)>(s0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, int)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        int i0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, long)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        long l0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Long $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Long valueOf(long)>(l0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, float)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        float f0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Float $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Float valueOf(float)>(f0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, double)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        double d0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Double $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        org.apache.log4j.Level $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r4);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r6;
        java.lang.Object r2, r3;
        boolean $z0;
        org.apache.log4j.Level $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object)>(r2, r3);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r6);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r7;
        java.lang.Object r2, r3, r4;
        boolean $z0;
        org.apache.log4j.Level $r5;
        java.lang.Object[] $r6;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r6);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r5, $r7);

     label1:
        return;
    }

    public static void debug(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r8;
        java.lang.Object r2, r3, r4, r5;
        boolean $z0;
        org.apache.log4j.Level $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4, r5);

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r7);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r6, $r8);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, boolean)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        boolean z0, $z1;
        org.apache.log4j.Level $r2;
        java.lang.Boolean $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z1 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Boolean valueOf(boolean)>(z0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, char)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        char c0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Character $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Character valueOf(char)>(c0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, byte)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        byte b0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Byte $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        b0 := @parameter2: byte;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Byte valueOf(byte)>(b0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, short)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        short s0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Short $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Short valueOf(short)>(s0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, int)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        int i0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, long)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        long l0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Long $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Long valueOf(long)>(l0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, float)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        float f0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Float $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Float valueOf(float)>(f0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, double)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        double d0;
        boolean $z0;
        org.apache.log4j.Level $r2;
        java.lang.Double $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r2, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        org.apache.log4j.Level $r3;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r4);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r6;
        java.lang.Object r2, r3;
        boolean $z0;
        org.apache.log4j.Level $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object)>(r2, r3);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r6);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r7;
        java.lang.Object r2, r3, r4;
        boolean $z0;
        org.apache.log4j.Level $r5;
        java.lang.Object[] $r6;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r6);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r5, $r7);

     label1:
        return;
    }

    public static void info(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r8;
        java.lang.Object r2, r3, r4, r5;
        boolean $z0;
        org.apache.log4j.Level $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4, r5);

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r7);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r6, $r8);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, boolean)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        boolean z0, $z1;
        org.apache.log4j.Level $r2, $r3;
        java.lang.Boolean $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z1 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z1 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Boolean valueOf(boolean)>(z0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, char)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        char c0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Character $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Character valueOf(char)>(c0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, byte)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        byte b0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Byte $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        b0 := @parameter2: byte;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Byte valueOf(byte)>(b0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, short)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        short s0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Short $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Short valueOf(short)>(s0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, int)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        int i0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Integer $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, long)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        long l0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Long $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Long valueOf(long)>(l0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, float)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        float f0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Float $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Float valueOf(float)>(f0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, double)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        double d0;
        org.apache.log4j.Level $r2, $r3;
        boolean $z0;
        java.lang.Double $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r3, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r5;
        java.lang.Object r2;
        org.apache.log4j.Level $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r3);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object)>(r1, r2);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r4, $r5);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r7;
        java.lang.Object r2, r3;
        org.apache.log4j.Level $r4, $r5;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object)>(r2, r3);

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r6);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r5, $r7);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r8;
        java.lang.Object r2, r3, r4;
        org.apache.log4j.Level $r5, $r6;
        boolean $z0;
        java.lang.Object[] $r7;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r5);

        if $z0 == 0 goto label1;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r7);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r6, $r8);

     label1:
        return;
    }

    public static void warn(org.apache.log4j.Logger, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1, $r9;
        java.lang.Object r2, r3, r4, r5;
        org.apache.log4j.Level $r6, $r7;
        boolean $z0;
        java.lang.Object[] $r8;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>($r6);

        if $z0 == 0 goto label1;

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4, r5);

        $r9 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r8);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, $r7, $r9);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r4;
        java.lang.Object[] r3;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r4);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.Throwable r2;
        java.lang.String r3, $r5;
        java.lang.Object[] r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.Throwable;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r3, r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, r1, $r5, r2);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        java.lang.Object r3;
        boolean $z0;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>(r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, boolean)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        boolean z0, $z1;
        java.lang.Boolean $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $z1 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z1 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Boolean valueOf(boolean)>(z0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, byte)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        byte b0;
        boolean $z0;
        java.lang.Byte $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        b0 := @parameter3: byte;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Byte valueOf(byte)>(b0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, char)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        char c0;
        boolean $z0;
        java.lang.Character $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        c0 := @parameter3: char;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Character valueOf(char)>(c0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, short)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        short s0;
        boolean $z0;
        java.lang.Short $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        s0 := @parameter3: short;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Short valueOf(short)>(s0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, int)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        int i0;
        boolean $z0;
        java.lang.Integer $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, long)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        long l0;
        boolean $z0;
        java.lang.Long $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        l0 := @parameter3: long;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Long valueOf(long)>(l0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, float)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        float f0;
        boolean $z0;
        java.lang.Float $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        f0 := @parameter3: float;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Float valueOf(float)>(f0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, double)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r5;
        double d0;
        boolean $z0;
        java.lang.Double $r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        d0 := @parameter3: double;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.log4j.LogMF: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r3);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r6;
        java.lang.Object r3, r4;
        boolean $z0;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object)>(r3, r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r7;
        java.lang.Object r3, r4, r5;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object)>(r3, r4, r5);

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r6);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r7);

     label1:
        return;
    }

    public static void log(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, $r8;
        java.lang.Object r3, r4, r5, r6;
        boolean $z0;
        java.lang.Object[] $r7;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r3, r4, r5, r6);

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, $r7);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r8);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r5;
        java.lang.Object[] r4;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, r4);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r5);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.Throwable, java.lang.String, java.lang.String, java.lang.Object[])
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.Throwable r2;
        java.lang.String r3, r4, $r6;
        java.lang.Object[] r5;
        boolean $z0;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.Throwable;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r3, r4, r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String,java.lang.Throwable)>(r0, r1, $r6, r2);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        java.lang.Object r4;
        boolean $z0;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>(r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, boolean)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        boolean z0, $z1;
        java.lang.Boolean $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $z1 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z1 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Boolean valueOf(boolean)>(z0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, char)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        char c0;
        boolean $z0;
        java.lang.Character $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        c0 := @parameter4: char;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Character valueOf(char)>(c0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, byte)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        byte b0;
        boolean $z0;
        java.lang.Byte $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        b0 := @parameter4: byte;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Byte valueOf(byte)>(b0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, short)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        short s0;
        boolean $z0;
        java.lang.Short $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        s0 := @parameter4: short;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Short valueOf(short)>(s0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, int)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        int i0;
        boolean $z0;
        java.lang.Integer $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, long)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        long l0;
        boolean $z0;
        java.lang.Long $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        l0 := @parameter4: long;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Long valueOf(long)>(l0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, float)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        float f0;
        boolean $z0;
        java.lang.Float $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        f0 := @parameter4: float;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Float valueOf(float)>(f0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, double)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r6;
        double d0;
        boolean $z0;
        java.lang.Double $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        d0 := @parameter4: double;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.log4j.LogMF: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r5);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r6);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r7;
        java.lang.Object r4, r5;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object)>(r4, r5);

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r6);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r7);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r8;
        java.lang.Object r4, r5, r6;
        boolean $z0;
        java.lang.Object[] $r7;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object)>(r4, r5, r6);

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r7);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r8);

     label1:
        return;
    }

    public static void logrb(org.apache.log4j.Logger, org.apache.log4j.Level, java.lang.String, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.Level r1;
        java.lang.String r2, r3, $r9;
        java.lang.Object r4, r5, r6, r7;
        boolean $z0;
        java.lang.Object[] $r8;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 := @parameter1: org.apache.log4j.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.log4j.Logger: boolean isEnabledFor(org.apache.log4j.Priority)>(r1);

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <org.apache.log4j.LogMF: java.lang.Object[] toArray(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r4, r5, r6, r7);

        $r9 = staticinvoke <org.apache.log4j.LogMF: java.lang.String format(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, $r8);

        staticinvoke <org.apache.log4j.LogMF: void forcedLog(org.apache.log4j.Logger,org.apache.log4j.Level,java.lang.String)>(r0, r1, $r9);

     label1:
        return;
    }
}
