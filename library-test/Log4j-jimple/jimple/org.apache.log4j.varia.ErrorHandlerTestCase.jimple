public class org.apache.log4j.varia.ErrorHandlerTestCase extends junit.framework.TestCase
{
    static java.lang.String TEMP;
    static java.lang.String FILTERED;
    static java.lang.String EXCEPTION1;
    static java.lang.String EXCEPTION2;
    static java.lang.String EXCEPTION3;
    static java.lang.String TEST1_PAT;
    org.apache.log4j.Logger root;
    org.apache.log4j.Logger logger;

    static void <clinit>()
    {
        <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String TEMP> = "output/temp";

        <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String FILTERED> = "output/filtered";

        <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION1> = "java.lang.Exception: Just testing";

        <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION2> = "\\s*at .*\\(.*\\)";

        <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION3> = "\\s*at .*\\(Native Method\\)";

        <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String TEST1_PAT> = "FALLBACK - (root|test) - Message \\d";

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.varia.ErrorHandlerTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.varia.ErrorHandlerTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.varia.ErrorHandlerTestCase r0;
        org.apache.log4j.Logger $r1, $r2;

        r0 := @this: org.apache.log4j.varia.ErrorHandlerTestCase;

        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root> = $r1;

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("test");

        r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger> = $r2;

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.varia.ErrorHandlerTestCase r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.spi.LoggerRepository $r2;

        r0 := @this: org.apache.log4j.varia.ErrorHandlerTestCase;

        $r1 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        return;
    }

    public void test1() throws java.lang.Exception
    {
        org.apache.log4j.varia.ErrorHandlerTestCase r0;
        org.apache.log4j.Appender r1;
        org.apache.log4j.spi.ErrorHandler r2;
        org.apache.log4j.Logger $r4;
        org.apache.log4j.util.ControlFilter $r5;
        java.lang.String[] $r6;
        java.lang.String $r7, $r8, $r9, $r10, $r13, $r14, $r17;
        org.apache.log4j.util.Filter[] $r11;
        org.apache.log4j.util.LineNumberFilter $r12;
        org.apache.log4j.util.JunitTestRunnerFilter $r15;
        org.apache.log4j.util.SunReflectFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.varia.ErrorHandlerTestCase;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void configure(java.lang.String)>("input/xml/fallback1.xml");

        $r4 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        r1 = virtualinvoke $r4.<org.apache.log4j.Logger: org.apache.log4j.Appender getAppender(java.lang.String)>("PRIMARY");

        r2 = interfaceinvoke r1.<org.apache.log4j.Appender: org.apache.log4j.spi.ErrorHandler getErrorHandler()>();

        staticinvoke <org.apache.log4j.varia.ErrorHandlerTestCase: void assertNotNull(java.lang.Object)>(r2);

        virtualinvoke r0.<org.apache.log4j.varia.ErrorHandlerTestCase: void common()>();

        $r5 = new org.apache.log4j.util.ControlFilter;

        $r6 = newarray (java.lang.String)[4];

        $r7 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String TEST1_PAT>;

        $r6[0] = $r7;

        $r8 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION1>;

        $r6[1] = $r8;

        $r9 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION2>;

        $r6[2] = $r9;

        $r10 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION3>;

        $r6[3] = $r10;

        specialinvoke $r5.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r6);

        $r13 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String TEMP>;

        $r14 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String FILTERED>;

        $r11 = newarray (org.apache.log4j.util.Filter)[4];

        $r11[0] = $r5;

        $r12 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r12.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r11[1] = $r12;

        $r15 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r15.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r11[2] = $r15;

        $r16 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r16.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r11[3] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r13, $r14, $r11);

        $r17 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/fallback1");

        staticinvoke <org.apache.log4j.varia.ErrorHandlerTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test2() throws java.lang.Exception
    {
        org.apache.log4j.varia.ErrorHandlerTestCase r0;
        org.apache.log4j.Appender r1;
        org.apache.log4j.spi.ErrorHandler r2;
        org.apache.log4j.Logger $r4;
        org.apache.log4j.util.ControlFilter $r5;
        java.lang.String[] $r6;
        java.lang.String $r7, $r8, $r9, $r10, $r13, $r14, $r17;
        org.apache.log4j.util.Filter[] $r11;
        org.apache.log4j.util.LineNumberFilter $r12;
        org.apache.log4j.util.JunitTestRunnerFilter $r15;
        org.apache.log4j.util.SunReflectFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.varia.ErrorHandlerTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/fallback1.properties");

        $r4 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        r1 = virtualinvoke $r4.<org.apache.log4j.Logger: org.apache.log4j.Appender getAppender(java.lang.String)>("PRIMARY");

        r2 = interfaceinvoke r1.<org.apache.log4j.Appender: org.apache.log4j.spi.ErrorHandler getErrorHandler()>();

        staticinvoke <org.apache.log4j.varia.ErrorHandlerTestCase: void assertNotNull(java.lang.Object)>(r2);

        virtualinvoke r0.<org.apache.log4j.varia.ErrorHandlerTestCase: void common()>();

        $r5 = new org.apache.log4j.util.ControlFilter;

        $r6 = newarray (java.lang.String)[4];

        $r7 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String TEST1_PAT>;

        $r6[0] = $r7;

        $r8 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION1>;

        $r6[1] = $r8;

        $r9 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION2>;

        $r6[2] = $r9;

        $r10 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String EXCEPTION3>;

        $r6[3] = $r10;

        specialinvoke $r5.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r6);

        $r13 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String TEMP>;

        $r14 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String FILTERED>;

        $r11 = newarray (org.apache.log4j.util.Filter)[4];

        $r11[0] = $r5;

        $r12 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r12.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r11[1] = $r12;

        $r15 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r15.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r11[2] = $r15;

        $r16 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r16.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r11[3] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r13, $r14, $r11);

        $r17 = <org.apache.log4j.varia.ErrorHandlerTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/fallback1");

        staticinvoke <org.apache.log4j.varia.ErrorHandlerTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    void common()
    {
        org.apache.log4j.varia.ErrorHandlerTestCase r0;
        java.lang.StringBuilder $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r37, $r39, $r42, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59;
        org.apache.log4j.Logger $r3, $r7, $r11, $r15, $r19, $r23, $r27, $r31, $r35, $r40, $r46, $r50, $r54, $r58;
        java.lang.String $r5, $r9, $r13, $r17, $r21, $r25, $r29, $r33, $r38, $r43, $r48, $r52, $r56, $r60;
        org.apache.log4j.Level $r36, $r41;
        java.lang.Exception $r44;
        int i1, i2, i3, i4, i5, i6, i7;

        r0 := @this: org.apache.log4j.varia.ErrorHandlerTestCase;

        $r3 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i1 = -1 + 1;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r5);

        $r7 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r9);

        $r11 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i2 = i1 + 1;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.log4j.Logger: void info(java.lang.Object)>($r13);

        $r15 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<org.apache.log4j.Logger: void info(java.lang.Object)>($r17);

        $r19 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i3 = i2 + 1;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r21);

        $r23 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r25);

        $r27 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i4 = i3 + 1;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<org.apache.log4j.Logger: void error(java.lang.Object)>($r29);

        $r31 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<org.apache.log4j.Logger: void error(java.lang.Object)>($r33);

        $r35 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger>;

        $r36 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i5 = i4 + 1;

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r36, $r38);

        $r40 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r41 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r41, $r43);

        $r44 = new java.lang.Exception;

        specialinvoke $r44.<java.lang.Exception: void <init>(java.lang.String)>("Just testing");

        $r46 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i6 = i5 + 1;

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>($r48, $r44);

        $r50 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>($r52, $r44);

        $r54 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger logger>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i7 = i6 + 1;

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r56, $r44);

        $r58 = r0.<org.apache.log4j.varia.ErrorHandlerTestCase: org.apache.log4j.Logger root>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r58.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r60, $r44);

        return;
    }
}
