public class org.apache.log4j.jmx.HierarchyDynamicMBean extends org.apache.log4j.jmx.AbstractDynamicMBean implements org.apache.log4j.spi.HierarchyEventListener, javax.management.NotificationBroadcaster
{
    static final java.lang.String ADD_APPENDER;
    static final java.lang.String THRESHOLD;
    private javax.management.MBeanConstructorInfo[] dConstructors;
    private javax.management.MBeanOperationInfo[] dOperations;
    private java.util.Vector vAttributes;
    private java.lang.String dClassName;
    private java.lang.String dDescription;
    private javax.management.NotificationBroadcasterSupport nbs;
    private org.apache.log4j.spi.LoggerRepository hierarchy;
    private static org.apache.log4j.Logger log;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        <org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String THRESHOLD> = "threshold";

        <org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String ADD_APPENDER> = "addAppender.";

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/jmx/HierarchyDynamicMBean");

        <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        javax.management.MBeanConstructorInfo[] $r1;
        javax.management.MBeanOperationInfo[] $r2;
        java.util.Vector $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        javax.management.NotificationBroadcasterSupport $r6;
        org.apache.log4j.spi.LoggerRepository $r7;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        specialinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: void <init>()>();

        $r1 = newarray (javax.management.MBeanConstructorInfo)[1];

        r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors> = $r1;

        $r2 = newarray (javax.management.MBeanOperationInfo)[1];

        r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.MBeanOperationInfo[] dOperations> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.util.Vector vAttributes> = $r3;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName> = $r5;

        r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dDescription> = "This MBean acts as a management facade for org.apache.log4j.Hierarchy.";

        $r6 = new javax.management.NotificationBroadcasterSupport;

        specialinvoke $r6.<javax.management.NotificationBroadcasterSupport: void <init>()>();

        r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.NotificationBroadcasterSupport nbs> = $r6;

        $r7 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.spi.LoggerRepository hierarchy> = $r7;

        specialinvoke r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: void buildDynamicMBeanInfo()>();

        return;
    }

    private void buildDynamicMBeanInfo()
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        java.lang.reflect.Constructor[] r1;
        javax.management.MBeanParameterInfo[] r2;
        java.lang.Class $r3;
        javax.management.MBeanConstructorInfo $r4;
        java.lang.reflect.Constructor $r5;
        javax.management.MBeanConstructorInfo[] $r6;
        javax.management.MBeanAttributeInfo $r7;
        java.util.Vector $r8;
        javax.management.MBeanParameterInfo $r9;
        javax.management.MBeanOperationInfo $r10;
        javax.management.MBeanOperationInfo[] $r11;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r6 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r4 = new javax.management.MBeanConstructorInfo;

        $r5 = r1[0];

        specialinvoke $r4.<javax.management.MBeanConstructorInfo: void <init>(java.lang.String,java.lang.reflect.Constructor)>("HierarchyDynamicMBean(): Constructs a HierarchyDynamicMBean instance", $r5);

        $r6[0] = $r4;

        $r8 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.util.Vector vAttributes>;

        $r7 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r7.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("threshold", "java.lang.String", "The \"threshold\" state of the hiearchy.", 1, 1, 0);

        virtualinvoke $r8.<java.util.Vector: boolean add(java.lang.Object)>($r7);

        r2 = newarray (javax.management.MBeanParameterInfo)[1];

        $r9 = new javax.management.MBeanParameterInfo;

        specialinvoke $r9.<javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>("name", "java.lang.String", "Create a logger MBean");

        r2[0] = $r9;

        $r11 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r10 = new javax.management.MBeanOperationInfo;

        specialinvoke $r10.<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanParameterInfo[],java.lang.String,int)>("addLoggerMBean", "addLoggerMBean(): add a loggerMBean", r2, "javax.management.ObjectName", 1);

        $r11[0] = $r10;

        return;
    }

    public javax.management.ObjectName addLoggerMBean(java.lang.String)
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        java.lang.String r1;
        org.apache.log4j.Logger r2;
        javax.management.ObjectName $r3;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger exists(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = virtualinvoke r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.ObjectName addLoggerMBean(org.apache.log4j.Logger)>(r2);

        return $r3;

     label1:
        return null;
    }

    javax.management.ObjectName addLoggerMBean(org.apache.log4j.Logger)
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        org.apache.log4j.Logger r1, $r13, $r29, $r35;
        java.lang.String r2, $r9, $r11, $r16, $r22, $r26, $r32, $r38;
        org.apache.log4j.jmx.LoggerDynamicMBean $r4;
        javax.management.ObjectName $r5, r39;
        javax.management.MBeanServer $r6;
        boolean $z0;
        javax.management.NotificationFilterSupport $r7;
        java.lang.StringBuilder $r8, $r10, $r12, $r14, $r15, $r19, $r21, $r23, $r24, $r25, $r28, $r30, $r31, $r34, $r36, $r37;
        javax.management.NotificationBroadcasterSupport $r17;
        javax.management.MBeanAttributeInfo $r18;
        java.util.Vector $r20;
        java.lang.RuntimeException $r27;
        javax.management.JMException $r33;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: org.apache.log4j.Logger;

        r2 = virtualinvoke r1.<org.apache.log4j.Logger: java.lang.String getName()>();

        r39 = null;

     label1:
        $r4 = new org.apache.log4j.jmx.LoggerDynamicMBean;

        specialinvoke $r4.<org.apache.log4j.jmx.LoggerDynamicMBean: void <init>(org.apache.log4j.Logger)>(r1);

        $r5 = new javax.management.ObjectName;

        specialinvoke $r5.<javax.management.ObjectName: void <init>(java.lang.String,java.lang.String,java.lang.String)>("log4j", "logger", r2);

        r39 = $r5;

        $r6 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.MBeanServer server>;

        $z0 = interfaceinvoke $r6.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>($r5);

        if $z0 != 0 goto label5;

        virtualinvoke r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: void registerMBean(java.lang.Object,javax.management.ObjectName)>($r4, $r5);

        $r7 = new javax.management.NotificationFilterSupport;

        specialinvoke $r7.<javax.management.NotificationFilterSupport: void <init>()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("addAppender.");

        $r9 = virtualinvoke r1.<org.apache.log4j.Logger: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<javax.management.NotificationFilterSupport: void enableType(java.lang.String)>($r11);

        $r13 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("---Adding logger [");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as listener.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r16);

        $r17 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.NotificationBroadcasterSupport nbs>;

        virtualinvoke $r17.<javax.management.NotificationBroadcasterSupport: void addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>($r4, $r7, null);

        $r20 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.util.Vector vAttributes>;

        $r18 = new javax.management.MBeanAttributeInfo;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("logger=");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("The ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" logger.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>($r22, "javax.management.ObjectName", $r26, 1, 1, 0);

        virtualinvoke $r20.<java.util.Vector: boolean add(java.lang.Object)>($r18);

     label2:
        goto label5;

     label3:
        $r33 := @caughtexception;

        $r35 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add loggerMBean for [");

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r38, $r33);

        goto label5;

     label4:
        $r27 := @caughtexception;

        $r29 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add loggerMBean for [");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r32, $r27);

     label5:
        return r39;

        catch javax.management.JMException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    public void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        javax.management.NotificationListener r1;
        javax.management.NotificationFilter r2;
        java.lang.Object r3;
        javax.management.NotificationBroadcasterSupport $r4;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: javax.management.NotificationListener;

        r2 := @parameter1: javax.management.NotificationFilter;

        r3 := @parameter2: java.lang.Object;

        $r4 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.NotificationBroadcasterSupport nbs>;

        virtualinvoke $r4.<javax.management.NotificationBroadcasterSupport: void addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r1, r2, r3);

        return;
    }

    protected org.apache.log4j.Logger getLogger()
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        org.apache.log4j.Logger $r1;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        $r1 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        return $r1;
    }

    public javax.management.MBeanInfo getMBeanInfo()
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        javax.management.MBeanAttributeInfo[] r1;
        java.util.Vector $r2, $r3;
        int $i0;
        javax.management.MBeanInfo $r5;
        javax.management.MBeanNotificationInfo[] $r6;
        javax.management.MBeanOperationInfo[] $r7;
        javax.management.MBeanConstructorInfo[] $r8;
        java.lang.String $r9, $r10;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        $r2 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.util.Vector vAttributes>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        r1 = newarray (javax.management.MBeanAttributeInfo)[$i0];

        $r3 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.util.Vector vAttributes>;

        virtualinvoke $r3.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        $r5 = new javax.management.MBeanInfo;

        $r10 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName>;

        $r9 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dDescription>;

        $r8 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r7 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r6 = newarray (javax.management.MBeanNotificationInfo)[0];

        specialinvoke $r5.<javax.management.MBeanInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanAttributeInfo[],javax.management.MBeanConstructorInfo[],javax.management.MBeanOperationInfo[],javax.management.MBeanNotificationInfo[])>($r10, $r9, r1, $r8, $r7, $r6);

        return $r5;
    }

    public javax.management.MBeanNotificationInfo[] getNotificationInfo()
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        javax.management.NotificationBroadcasterSupport $r1;
        javax.management.MBeanNotificationInfo[] $r2;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        $r1 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.NotificationBroadcasterSupport nbs>;

        $r2 = virtualinvoke $r1.<javax.management.NotificationBroadcasterSupport: javax.management.MBeanNotificationInfo[] getNotificationInfo()>();

        return $r2;
    }

    public java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        java.lang.String r1, $r9, $r11, $r13, $r18, $r20;
        java.lang.Object[] r2;
        java.lang.String[] r3;
        boolean $z0;
        javax.management.ReflectionException $r4;
        java.lang.NoSuchMethodException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r17, $r19;
        java.lang.Object $r12;
        javax.management.ObjectName $r14;
        javax.management.RuntimeOperationsException $r15;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.lang.String[];

        if r1 != null goto label1;

        $r15 = new javax.management.RuntimeOperationsException;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Operation name cannot be null");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke a null operation in ");

        $r18 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r16, $r20);

        throw $r15;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("addLoggerMBean");

        if $z0 == 0 goto label2;

        $r12 = r2[0];

        $r13 = (java.lang.String) $r12;

        $r14 = virtualinvoke r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.ObjectName addLoggerMBean(java.lang.String)>($r13);

        return $r14;

     label2:
        $r4 = new javax.management.ReflectionException;

        $r5 = new java.lang.NoSuchMethodException;

        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r1);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot find the operation ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r9 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javax.management.ReflectionException: void <init>(java.lang.Exception,java.lang.String)>($r5, $r11);

        throw $r4;
    }

    public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        java.lang.String r1, $r6, $r10, $r12, $r13, $r15, $r22, $r25, $r30, $r35, r36, $r43, $r45;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r9, $r11, $r14, $r16, $r21, $r23, $r24, $r27, $r29, $r32, $r34, $r40, $r41, $r42, $r44;
        org.apache.log4j.Logger $r3, $r28, $r33;
        boolean $z0, $z1;
        javax.management.ObjectName $r7;
        org.apache.log4j.spi.LoggerRepository $r17;
        org.apache.log4j.Level $r18;
        javax.management.RuntimeOperationsException $r19;
        java.lang.IllegalArgumentException $r20;
        javax.management.JMException $r26;
        java.lang.RuntimeException $r31;
        javax.management.AttributeNotFoundException $r39;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r19 = new javax.management.RuntimeOperationsException;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke a getter of ");

        $r22 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute name");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r20, $r25);

        throw $r19;

     label1:
        $r3 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Called getAttribute with [");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r6);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("threshold");

        if $z0 == 0 goto label2;

        $r17 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.spi.LoggerRepository hierarchy>;

        $r18 = interfaceinvoke $r17.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Level getThreshold()>();

        return $r18;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("logger");

        if $z1 == 0 goto label7;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("%3D");

        r36 = r1;

        if i0 <= 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $i1 = i0 + 3;

        $r15 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r36 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r7 = new javax.management.ObjectName;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<javax.management.ObjectName: void <init>(java.lang.String)>($r10);

     label4:
        return $r7;

     label5:
        $r26 := @caughtexception;

        $r28 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create ObjectName");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<org.apache.log4j.Logger: void error(java.lang.Object)>($r30);

        goto label7;

     label6:
        $r31 := @caughtexception;

        $r33 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create ObjectName");

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<org.apache.log4j.Logger: void error(java.lang.Object)>($r35);

     label7:
        $r39 = new javax.management.AttributeNotFoundException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot find ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attribute in ");

        $r43 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName>;

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>($r45);

        throw $r39;

        catch javax.management.JMException from label3 to label4 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
    }

    public void addAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender)
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        org.apache.log4j.Category r1;
        org.apache.log4j.Appender r2;
        java.lang.StringBuilder $r4, $r7, $r8, $r10, $r13, $r15;
        org.apache.log4j.Logger $r5, $r17;
        java.lang.String $r6, $r9, $r11, $r14, $r16;
        javax.management.Notification $r12;
        javax.management.NotificationBroadcasterSupport $r18;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: org.apache.log4j.Category;

        r2 := @parameter1: org.apache.log4j.Appender;

        $r5 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("addAppenderEvent called: logger=");

        $r6 = virtualinvoke r1.<org.apache.log4j.Category: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", appender=");

        $r9 = interfaceinvoke r2.<org.apache.log4j.Appender: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r11);

        $r12 = new javax.management.Notification;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("addAppender.");

        $r14 = virtualinvoke r1.<org.apache.log4j.Category: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<javax.management.Notification: void <init>(java.lang.String,java.lang.Object,long)>($r16, r0, 0L);

        virtualinvoke $r12.<javax.management.Notification: void setUserData(java.lang.Object)>(r2);

        $r17 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        virtualinvoke $r17.<org.apache.log4j.Logger: void debug(java.lang.Object)>("sending notification.");

        $r18 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.NotificationBroadcasterSupport nbs>;

        virtualinvoke $r18.<javax.management.NotificationBroadcasterSupport: void sendNotification(javax.management.Notification)>($r12);

        return;
    }

    public void removeAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender)
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        org.apache.log4j.Category r1;
        org.apache.log4j.Appender r2;
        java.lang.StringBuilder $r3, $r6, $r7, $r9;
        org.apache.log4j.Logger $r4;
        java.lang.String $r5, $r8, $r10;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: org.apache.log4j.Category;

        r2 := @parameter1: org.apache.log4j.Appender;

        $r4 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("removeAppenderCalled: logger=");

        $r5 = virtualinvoke r1.<org.apache.log4j.Category: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", appender=");

        $r8 = interfaceinvoke r2.<org.apache.log4j.Appender: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r10);

        return;
    }

    public void postRegister(java.lang.Boolean)
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        java.lang.Boolean r1;
        org.apache.log4j.Logger r2, $r3;
        org.apache.log4j.spi.LoggerRepository $r4, $r5;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: java.lang.Boolean;

        $r3 = <org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.Logger log>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void debug(java.lang.Object)>("postRegister is called.");

        $r4 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.spi.LoggerRepository hierarchy>;

        interfaceinvoke $r4.<org.apache.log4j.spi.LoggerRepository: void addHierarchyEventListener(org.apache.log4j.spi.HierarchyEventListener)>(r0);

        $r5 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.spi.LoggerRepository hierarchy>;

        r2 = interfaceinvoke $r5.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.ObjectName addLoggerMBean(org.apache.log4j.Logger)>(r2);

        return;
    }

    public void removeNotificationListener(javax.management.NotificationListener) throws javax.management.ListenerNotFoundException
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        javax.management.NotificationListener r1;
        javax.management.NotificationBroadcasterSupport $r2;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: javax.management.NotificationListener;

        $r2 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: javax.management.NotificationBroadcasterSupport nbs>;

        virtualinvoke $r2.<javax.management.NotificationBroadcasterSupport: void removeNotificationListener(javax.management.NotificationListener)>(r1);

        return;
    }

    public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.HierarchyDynamicMBean r0;
        javax.management.Attribute r1;
        java.lang.String r2, $r6, $r12, $r15, $r19, $r22;
        java.lang.Object r3;
        org.apache.log4j.Level r4, $r7;
        boolean $z0;
        org.apache.log4j.spi.LoggerRepository $r5, $r8;
        javax.management.RuntimeOperationsException $r9, $r16;
        java.lang.IllegalArgumentException $r10, $r17;
        java.lang.StringBuilder $r11, $r13, $r14, $r18, $r20, $r21;

        r0 := @this: org.apache.log4j.jmx.HierarchyDynamicMBean;

        r1 := @parameter0: javax.management.Attribute;

        if r1 != null goto label1;

        $r16 = new javax.management.RuntimeOperationsException;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute cannot be null");

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke a setter of ");

        $r19 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r17, $r22);

        throw $r16;

     label1:
        r2 = virtualinvoke r1.<javax.management.Attribute: java.lang.String getName()>();

        r3 = virtualinvoke r1.<javax.management.Attribute: java.lang.Object getValue()>();

        if r2 != null goto label2;

        $r9 = new javax.management.RuntimeOperationsException;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke the setter of ");

        $r12 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: java.lang.String dClassName>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute name");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r10, $r15);

        throw $r9;

     label2:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("threshold");

        if $z0 == 0 goto label3;

        $r6 = (java.lang.String) r3;

        $r5 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.spi.LoggerRepository hierarchy>;

        $r7 = interfaceinvoke $r5.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Level getThreshold()>();

        r4 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r6, $r7);

        $r8 = r0.<org.apache.log4j.jmx.HierarchyDynamicMBean: org.apache.log4j.spi.LoggerRepository hierarchy>;

        interfaceinvoke $r8.<org.apache.log4j.spi.LoggerRepository: void setThreshold(org.apache.log4j.Level)>(r4);

     label3:
        return;
    }
}
