public class org.apache.log4j.pattern.PatternParserTest extends junit.framework.TestCase
{
    private final org.apache.log4j.Logger logger;
    private final org.apache.log4j.spi.LoggingEvent event;

    public void <init>(java.lang.String)
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1;
        org.apache.log4j.Logger $r2, $r5;
        org.apache.log4j.spi.LoggingEvent $r3;
        org.apache.log4j.Level $r4;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("org.foobar");

        r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.Logger logger> = $r2;

        $r3 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.Logger logger>;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r3.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("org.apache.log4j.Logger", $r5, $r4, "msg 1", null);

        r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event> = $r3;

        return;
    }

    private static java.lang.String convert(java.lang.String, java.util.Map, org.apache.log4j.spi.LoggingEvent)
    {
        java.lang.String r0, $r16;
        java.util.Map r1, $r10;
        org.apache.log4j.spi.LoggingEvent r2;
        java.util.Iterator r6, r7;
        int i0, $i1, $i2;
        java.util.ArrayList $r8, $r9;
        java.lang.StringBuffer $r11;
        boolean $z0;
        java.lang.Object $r12, $r14;
        org.apache.log4j.pattern.PatternConverter $r13;
        org.apache.log4j.pattern.FormattingInfo $r15;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: org.apache.log4j.spi.LoggingEvent;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.util.Map getPatternLayoutRules()>();

        staticinvoke <org.apache.log4j.pattern.PatternParser: void parse(java.lang.String,java.util.List,java.util.List,java.util.Map,java.util.Map)>(r0, $r8, $r9, r1, $r10);

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(int,int)>($i1, $i2);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        r6 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        r7 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        i0 = virtualinvoke $r11.<java.lang.StringBuffer: int length()>();

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (org.apache.log4j.pattern.PatternConverter) $r12;

        virtualinvoke $r13.<org.apache.log4j.pattern.PatternConverter: void format(java.lang.Object,java.lang.StringBuffer)>(r2, $r11);

        $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (org.apache.log4j.pattern.FormattingInfo) $r14;

        virtualinvoke $r15.<org.apache.log4j.pattern.FormattingInfo: void format(int,java.lang.StringBuffer)>(i0, $r11);

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r16 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }

    public void testNewWord() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r2, $r5;
        java.util.HashMap $r3;
        java.lang.Class $r4;
        org.apache.log4j.spi.LoggingEvent $r7;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(5);

        $r4 = class "org/apache/log4j/pattern/Num343PatternConverter";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("z343", $r5);

        $r7 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r2 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("%z343", $r3, $r7);

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>("343", r2);

        return;
    }

    public void testNewWord2() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r2, $r5;
        java.util.HashMap $r3;
        java.lang.Class $r4;
        org.apache.log4j.spi.LoggingEvent $r7;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(5);

        $r4 = class "org/apache/log4j/pattern/Num343PatternConverter";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("n343", $r5);

        $r7 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r2 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("%n343", $r3, $r7);

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>("343", r2);

        return;
    }

    public void testBogusWord1() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1;
        org.apache.log4j.spi.LoggingEvent $r2;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r2 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("%, foobar", null, $r2);

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>("%, foobar", r1);

        return;
    }

    public void testBogusWord2() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1;
        org.apache.log4j.spi.LoggingEvent $r2;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r2 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("xyz %, foobar", null, $r2);

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>("xyz %, foobar", r1);

        return;
    }

    public void testBasic1() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1, $r4, $r6;
        org.apache.log4j.spi.LoggingEvent $r2;
        java.lang.StringBuilder $r3, $r5;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r2 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("hello %-5level - %m%n", null, $r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("hello INFO  - msg 1");

        $r4 = <org.apache.log4j.Layout: java.lang.String LINE_SEP>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>($r6, r1);

        return;
    }

    public void testBasic2() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1, $r5, $r8, $r11, $r13;
        long l0, $l1, $l2;
        org.apache.log4j.spi.LoggingEvent $r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r9, $r10, $r12;
        org.apache.log4j.Logger $r7;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r2 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("%relative %-5level [%thread] %logger - %m%n", null, $r2);

        $r3 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        $l1 = $r3.<org.apache.log4j.spi.LoggingEvent: long timeStamp>;

        $l2 = staticinvoke <org.apache.log4j.spi.LoggingEvent: long getStartTime()>();

        l0 = $l1 - $l2;

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INFO  [main] ");

        $r7 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.Logger logger>;

        $r8 = virtualinvoke $r7.<org.apache.log4j.Logger: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - msg 1");

        $r11 = <org.apache.log4j.Layout: java.lang.String LINE_SEP>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>($r13, r1);

        return;
    }

    public void testMultiOption() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1, r3, r4, $r17;
        org.apache.log4j.spi.LoggingEvent $r6, $r9, $r12;
        java.text.SimpleDateFormat $r7;
        java.util.Date $r8, $r11;
        long $l0, $l1;
        java.util.TimeZone $r10;
        java.lang.StringBuffer $r13;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r6 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("%d{HH:mm:ss}{GMT} %d{HH:mm:ss} %c  - %m", null, $r6);

        $r7 = new java.text.SimpleDateFormat;

        specialinvoke $r7.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss");

        $r8 = new java.util.Date;

        $r9 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        $l0 = $r9.<org.apache.log4j.spi.LoggingEvent: long timeStamp>;

        specialinvoke $r8.<java.util.Date: void <init>(long)>($l0);

        r3 = virtualinvoke $r7.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r8);

        $r10 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r7.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r10);

        $r11 = new java.util.Date;

        $r12 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        $l1 = $r12.<org.apache.log4j.spi.LoggingEvent: long timeStamp>;

        specialinvoke $r11.<java.util.Date: void <init>(long)>($l1);

        r4 = virtualinvoke $r7.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r11);

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(java.lang.String)>(r4);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" org.foobar  - msg 1");

        $r17 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>($r17, r1);

        return;
    }

    public void testBogus() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1;
        org.apache.log4j.spi.LoggingEvent $r2;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r2 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("%bogus", null, $r2);

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>("%bogus", r1);

        return;
    }

    public void testMore() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1;
        org.apache.log4j.spi.LoggingEvent $r2;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r2 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("%more", null, $r2);

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>("msg 1ore", r1);

        return;
    }

    public void testMalformedOption()
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.lang.String r1;
        org.apache.log4j.spi.LoggingEvent $r2;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r2 = r0.<org.apache.log4j.pattern.PatternParserTest: org.apache.log4j.spi.LoggingEvent event>;

        r1 = staticinvoke <org.apache.log4j.pattern.PatternParserTest: java.lang.String convert(java.lang.String,java.util.Map,org.apache.log4j.spi.LoggingEvent)>("foo%m{yyyy.MM.dd", null, $r2);

        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertEquals(java.lang.String,java.lang.String)>("foomsg 1{yyyy.MM.dd", r1);

        return;
    }

    private void assertFactories(java.util.Map) throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.lang.Object[] r4;
        java.lang.Class r5, $r10;
        java.lang.reflect.Method r6;
        java.lang.Object r7, $r11;
        int $i0;
        java.util.Collection $r8;
        java.lang.Class[] $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertTrue(boolean)>($z0);

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = newarray (java.lang.Class)[1];

        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("[Ljava.lang.String;");

        $r9[0] = $r10;

        r4 = newarray (java.lang.Object)[1];

        goto label6;

     label3:
        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r11;

        r6 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newInstance", $r9);

        r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r4);

        if r7 == null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <org.apache.log4j.pattern.PatternParserTest: void assertTrue(boolean)>($z1);

     label6:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        return;
    }

    public void testPatternLayoutFactories() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.util.Map $r1;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r1 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.util.Map getPatternLayoutRules()>();

        specialinvoke r0.<org.apache.log4j.pattern.PatternParserTest: void assertFactories(java.util.Map)>($r1);

        return;
    }

    public void testFileNamePatternFactories() throws java.lang.Exception
    {
        org.apache.log4j.pattern.PatternParserTest r0;
        java.util.Map $r1;

        r0 := @this: org.apache.log4j.pattern.PatternParserTest;

        $r1 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.util.Map getFileNamePatternRules()>();

        specialinvoke r0.<org.apache.log4j.pattern.PatternParserTest: void assertFactories(java.util.Map)>($r1);

        return;
    }
}
