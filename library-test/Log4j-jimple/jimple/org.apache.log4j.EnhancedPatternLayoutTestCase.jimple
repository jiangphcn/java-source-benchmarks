public class org.apache.log4j.EnhancedPatternLayoutTestCase extends junit.framework.TestCase
{
    static java.lang.String TEMP;
    static java.lang.String FILTERED;
    static java.lang.String EXCEPTION1;
    static java.lang.String EXCEPTION2;
    static java.lang.String EXCEPTION3;
    static java.lang.String EXCEPTION4;
    static java.lang.String PAT0;
    static java.lang.String PAT1;
    static java.lang.String PAT2;
    static java.lang.String PAT3;
    static java.lang.String PAT4;
    static java.lang.String PAT5;
    static java.lang.String PAT6;
    static java.lang.String PAT11a;
    static java.lang.String PAT11b;
    static java.lang.String PAT12;
    static java.lang.String PAT13;
    static java.lang.String PAT14;
    static java.lang.String PAT_MDC_1;
    org.apache.log4j.Logger root;
    org.apache.log4j.Logger logger;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        java.lang.String $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP> = "output/temp";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED> = "output/filtered";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1> = "java.lang.Exception: Just testing";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2> = "\\s*at .*\\(.*\\)";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3> = "\\s*at .*\\((Native Method|Unknown Source)\\)";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION4> = "\\s*at .*\\(.*Compiled Code\\)";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT0> = "\\[main]\\ (DEBUG|INFO|WARN|ERROR|FATAL) .* - Message \\d{1,2}";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3} ");

        $r1 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT0>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT1> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{1,2} .{2,6}\\.? 2\\d{3} \\d{2}:\\d{2}:\\d{2},\\d{3} ");

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT0>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT2> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{2}:\\d{2}:\\d{2},\\d{3} ");

        $r9 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT0>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT3> = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{1,10} ");

        $r13 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT0>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT4> = $r15;

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT5> = "\\[main]\\ (DEBUG|INFO|WARN|ERROR|FATAL) .* : Message \\d{1,2}";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT6> = "\\[main]\\ (DEBUG|INFO |WARN |ERROR|FATAL) org.apache.log4j.EnhancedPatternLayoutTestCase.common\\(EnhancedPatternLayoutTestCase.java(:\\d{1,4})?\\): Message \\d{1,2}";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT11a> = "^(DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ log4j.EnhancedPatternLayoutTest: Message \\d{1,2}";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT11b> = "^(DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ root: Message \\d{1,2}";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT12> = "^\\[main]\\ (DEBUG|INFO |WARN |ERROR|FATAL) org.apache.log4j.EnhancedPatternLayoutTestCase.common\\(EnhancedPatternLayoutTestCase.java:\\d{3}\\): Message \\d{1,2}";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT13> = "^\\[main]\\ (DEBUG|INFO |WARN |ERROR|FATAL) apache.log4j.EnhancedPatternLayoutTestCase.common\\(EnhancedPatternLayoutTestCase.java:\\d{3}\\): Message \\d{1,2}";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT14> = "^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL)\\ \\d{1,2}\\ *- Message \\d{1,2}";

        <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT_MDC_1> = "";

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.Logger $r1, $r2;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root> = $r1;

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/EnhancedPatternLayoutTest");

        r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger> = $r2;

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.spi.LoggerRepository $r2;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        $r1 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        return;
    }

    private static void configure(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>(r0);

        return;
    }

    private static boolean compare(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>(r0, r1);

        return $z0;
    }

    public void test1() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.Filter[] $r1;
        org.apache.log4j.util.EnhancedLineNumberFilter $r2;
        java.lang.String $r3, $r4, $r7;
        org.apache.log4j.util.SunReflectFilter $r5;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r6;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout1.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r3 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r1 = newarray (org.apache.log4j.util.Filter)[3];

        $r2 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r2.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r1[0] = $r2;

        $r5 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r5.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r1[1] = $r5;

        $r6 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r6.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r1[2] = $r6;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r3, $r4, $r1);

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r7, "witness/pattern/enhancedPatternLayout.1");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test2() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r15;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.ISO8601Filter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout2.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT1>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[5];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.ISO8601Filter;

        specialinvoke $r12.<org.apache.log4j.util.ISO8601Filter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[3] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[4] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.2");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test3() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r15;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.ISO8601Filter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout3.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT1>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[5];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.ISO8601Filter;

        specialinvoke $r12.<org.apache.log4j.util.ISO8601Filter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[3] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[4] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.3");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test4() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r15;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.AbsoluteDateAndTimeFilter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout4.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT2>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[5];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.AbsoluteDateAndTimeFilter;

        specialinvoke $r12.<org.apache.log4j.util.AbsoluteDateAndTimeFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[3] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[4] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.4");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test5() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r15;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.AbsoluteDateAndTimeFilter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout5.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT2>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[5];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.AbsoluteDateAndTimeFilter;

        specialinvoke $r12.<org.apache.log4j.util.AbsoluteDateAndTimeFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[3] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[4] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.5");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test6() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r15;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.AbsoluteTimeFilter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout6.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT3>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[5];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.AbsoluteTimeFilter;

        specialinvoke $r12.<org.apache.log4j.util.AbsoluteTimeFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[3] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[4] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.6");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test7() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r15;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.AbsoluteTimeFilter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout7.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT3>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[5];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.AbsoluteTimeFilter;

        specialinvoke $r12.<org.apache.log4j.util.AbsoluteTimeFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[3] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[4] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.7");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test8() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r15;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.RelativeTimeFilter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout8.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT4>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[5];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.RelativeTimeFilter;

        specialinvoke $r12.<org.apache.log4j.util.RelativeTimeFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[3] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[4] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.8");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test9() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r14;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.SunReflectFilter $r12;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r13;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout9.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT5>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[4];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r12.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r13.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[3] = $r13;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r14 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r14, "witness/pattern/enhancedPatternLayout.9");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test10() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r14;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.SunReflectFilter $r12;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r13;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout10.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT6>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[4];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r12.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r13.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[3] = $r13;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r14 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r14, "witness/pattern/enhancedPatternLayout.10");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test11() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r15;
        org.apache.log4j.util.Filter[] $r9;
        org.apache.log4j.util.EnhancedLineNumberFilter $r10;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout11.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[5];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT11a>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT11b>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[4] = $r8;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r12 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r9 = newarray (org.apache.log4j.util.Filter)[4];

        $r9[0] = $r2;

        $r10 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r10.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r9[1] = $r10;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r9[2] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r9[3] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r11, $r12, $r9);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.11");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test12() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r14;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.SunReflectFilter $r12;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r13;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout12.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT12>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[4];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r12.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r13.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[3] = $r13;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r14 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r14, "witness/pattern/enhancedPatternLayout.12");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test13() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r10, $r11, $r14;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.EnhancedLineNumberFilter $r9;
        org.apache.log4j.util.SunReflectFilter $r12;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r13;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout13.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[4];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT13>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r10 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[4];

        $r8[0] = $r2;

        $r9 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r8[1] = $r9;

        $r12 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r12.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r8[2] = $r12;

        $r13 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r13.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r8[3] = $r13;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r14 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r14, "witness/pattern/enhancedPatternLayout.13");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test14() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.Filter[] $r1;
        org.apache.log4j.util.EnhancedLineNumberFilter $r2;
        java.lang.String $r3, $r4, $r7;
        org.apache.log4j.util.SunReflectFilter $r5;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r6;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout14.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r3 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r1 = newarray (org.apache.log4j.util.Filter)[3];

        $r2 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r2.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r1[0] = $r2;

        $r5 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r5.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r1[1] = $r5;

        $r6 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r6.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r1[2] = $r6;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r3, $r4, $r1);

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r7, "witness/pattern/enhancedPatternLayout.14");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    private static void clearMDC() throws java.lang.Exception
    {
        java.util.Hashtable r0;

        r0 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r0 == null goto label1;

        virtualinvoke r0.<java.util.Hashtable: void clear()>();

     label1:
        return;
    }

    public void testMDC1() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.util.Filter[] $r2;
        org.apache.log4j.util.EnhancedLineNumberFilter $r3;
        java.lang.String $r4, $r5, $r9;
        org.apache.log4j.util.SunReflectFilter $r6;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r7;
        org.apache.log4j.MDCOrderFilter $r8;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout.mdc.1.properties");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void clearMDC()>();

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key1", "va11");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key2", "va12");

        $r1 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Hello World");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key1");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key2");

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r2 = newarray (org.apache.log4j.util.Filter)[4];

        $r3 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r3.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r2[0] = $r3;

        $r6 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r6.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r2[1] = $r6;

        $r7 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r7.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r2[2] = $r7;

        $r8 = new org.apache.log4j.MDCOrderFilter;

        specialinvoke $r8.<org.apache.log4j.MDCOrderFilter: void <init>()>();

        $r2[3] = $r8;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r4, $r5, $r2);

        $r9 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r9, "witness/pattern/enhancedPatternLayout.mdc.1");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test15() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r15;
        org.apache.log4j.util.Filter[] $r9;
        org.apache.log4j.util.EnhancedLineNumberFilter $r10;
        org.apache.log4j.util.SunReflectFilter $r13;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r14;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout15.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[5];

        $r4 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String PAT14>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r11 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String TEMP>;

        $r12 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r9 = newarray (org.apache.log4j.util.Filter)[4];

        $r9[0] = $r2;

        $r10 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r10.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r9[1] = $r10;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r9[2] = $r13;

        $r14 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r14.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r9[3] = $r14;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r11, $r12, $r9);

        $r15 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r15, "witness/pattern/enhancedPatternLayout.15");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test16() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        long l0, l1, $l4, $l5, $l7, $l8, $l10, $l11, $l13, $l14;
        char[] r2;
        java.util.Date r5, r7, $r8, $r9;
        java.io.FileReader $r10;
        int $i2;
        java.text.SimpleDateFormat $r11;
        java.util.TimeZone $r12, $r16;
        java.lang.String $r13, $r15;
        java.text.ParsePosition $r14, $r17;
        byte $b6, $b9, $b12, $b15;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>()>();

        l0 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void configure(java.lang.String)>("input/pattern/enhancedPatternLayout16.properties");

        virtualinvoke r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: void common()>();

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        l1 = virtualinvoke $r9.<java.util.Date: long getTime()>();

        $r10 = new java.io.FileReader;

        specialinvoke $r10.<java.io.FileReader: void <init>(java.lang.String)>("output/patternLayout16.log");

        r2 = newarray (char)[50];

        $i2 = lengthof r2;

        virtualinvoke $r10.<java.io.FileReader: int read(char[],int,int)>(r2, 0, $i2);

        virtualinvoke $r10.<java.io.FileReader: void close()>();

        $r11 = new java.text.SimpleDateFormat;

        specialinvoke $r11.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r12 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+0");

        virtualinvoke $r11.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r12);

        $r13 = new java.lang.String;

        specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>(r2, 0, 19);

        $r14 = new java.text.ParsePosition;

        specialinvoke $r14.<java.text.ParsePosition: void <init>(int)>(0);

        r5 = virtualinvoke $r11.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r13, $r14);

        $l4 = virtualinvoke r5.<java.util.Date: long getTime()>();

        $l5 = l0 - 1000L;

        $b6 = $l4 cmp $l5;

        if $b6 < 0 goto label1;

        $l10 = virtualinvoke r5.<java.util.Date: long getTime()>();

        $l11 = l1 + 1000L;

        $b12 = $l10 cmp $l11;

        if $b12 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        $r15 = new java.lang.String;

        specialinvoke $r15.<java.lang.String: void <init>(char[],int,int)>(r2, 21, 19);

        $r16 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT-6");

        virtualinvoke $r11.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r16);

        $r17 = new java.text.ParsePosition;

        specialinvoke $r17.<java.text.ParsePosition: void <init>(int)>(0);

        r7 = virtualinvoke $r11.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r15, $r17);

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertFalse(boolean)>($z1);

        $l13 = virtualinvoke r7.<java.util.Date: long getTime()>();

        $l14 = l0 - 1000L;

        $b15 = $l13 cmp $l14;

        if $b15 < 0 goto label3;

        $l7 = virtualinvoke r7.<java.util.Date: long getTime()>();

        $l8 = l1 + 1000L;

        $b9 = $l7 cmp $l8;

        if $b9 >= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z2);

        return;
    }

    void common()
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        java.lang.StringBuilder $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r37, $r39, $r42, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r64;
        org.apache.log4j.Logger $r3, $r7, $r11, $r15, $r19, $r23, $r27, $r31, $r35, $r40, $r46, $r50, $r54, $r58, $r62;
        java.lang.String $r5, $r9, $r13, $r17, $r21, $r25, $r29, $r33, $r38, $r43, $r48, $r52, $r56, $r60, $r65;
        org.apache.log4j.Level $r36, $r41, $r63;
        java.lang.Exception $r44;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        $r3 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i1 = -1 + 1;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r5);

        $r7 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r9);

        $r11 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i2 = i1 + 1;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.log4j.Logger: void info(java.lang.Object)>($r13);

        $r15 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<org.apache.log4j.Logger: void info(java.lang.Object)>($r17);

        $r19 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i3 = i2 + 1;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r21);

        $r23 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r25);

        $r27 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i4 = i3 + 1;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<org.apache.log4j.Logger: void error(java.lang.Object)>($r29);

        $r31 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<org.apache.log4j.Logger: void error(java.lang.Object)>($r33);

        $r35 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r36 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i5 = i4 + 1;

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r36, $r38);

        $r40 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r41 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r41, $r43);

        $r44 = new java.lang.Exception;

        specialinvoke $r44.<java.lang.Exception: void <init>(java.lang.String)>("Just testing");

        $r46 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i6 = i5 + 1;

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>($r48, $r44);

        $r50 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i7 = i6 + 1;

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<org.apache.log4j.Logger: void info(java.lang.Object,java.lang.Throwable)>($r52, $r44);

        $r54 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i8 = i7 + 1;

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>($r56, $r44);

        $r58 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i9 = i8 + 1;

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r58.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r60, $r44);

        $r62 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r63 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i10 = i9 + 1;

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r62.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r63, $r65, $r44);

        return;
    }

    public void testMDC2() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        org.apache.log4j.EnhancedPatternLayout $r10;
        org.apache.log4j.FileAppender $r11;
        org.apache.log4j.Logger $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        org.apache.log4j.Level $r13;
        org.apache.log4j.util.Filter[] $r27;
        org.apache.log4j.util.EnhancedLineNumberFilter $r28;
        java.lang.String $r29, $r33;
        org.apache.log4j.util.SunReflectFilter $r30;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r31;
        org.apache.log4j.MDCOrderFilter $r32;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        $r10 = new org.apache.log4j.EnhancedPatternLayout;

        specialinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void <init>(java.lang.String)>("%m%n");

        $r11 = new org.apache.log4j.FileAppender;

        specialinvoke $r11.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r10, "output/patternLayout.mdc.2", 0);

        $r12 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r12.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r11);

        $r14 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r13 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke $r14.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r13);

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void clearMDC()>();

        $r15 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r15.<org.apache.log4j.Logger: void debug(java.lang.Object)>("starting mdc pattern test");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r16 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r16.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, no key specified in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r17 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r17.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key1 in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key2}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r18 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r18.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key2 in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key3}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r19 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r19.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key3 in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1},%X{key2},%X{key3}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r20 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r20.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key1, key2, and key3 in pattern");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key1", "value1");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key2", "value2");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r21 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r21.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, no key specified in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r22 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r22.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key1 in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key2}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r23 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r23.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key2 in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key3}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r24 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r24.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key3 in pattern");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1},%X{key2},%X{key3}%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r25 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r25.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key1, key2, and key3 in pattern");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key1");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key2");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m%n");

        virtualinvoke $r10.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r26 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r26.<org.apache.log4j.Logger: void debug(java.lang.Object)>("finished mdc pattern test");

        $r29 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r27 = newarray (org.apache.log4j.util.Filter)[4];

        $r28 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r28.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r27[0] = $r28;

        $r30 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r30.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r27[1] = $r30;

        $r31 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r31.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r27[2] = $r31;

        $r32 = new org.apache.log4j.MDCOrderFilter;

        specialinvoke $r32.<org.apache.log4j.MDCOrderFilter: void <init>()>();

        $r27[3] = $r32;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>("output/patternLayout.mdc.2", $r29, $r27);

        $r33 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r33, "witness/pattern/enhancedPatternLayout.mdc.2");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testThrowable() throws java.lang.Exception
    {
        org.apache.log4j.EnhancedPatternLayoutTestCase r0;
        java.lang.String[] r6;
        org.apache.log4j.EnhancedPatternLayout $r7;
        org.apache.log4j.FileAppender $r8;
        org.apache.log4j.Logger $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r33, $r34;
        org.apache.log4j.Level $r10;
        java.lang.Exception $r13;
        org.apache.log4j.spi.ThrowableInformation $r28;
        java.lang.StringBuilder $r29, $r30, $r31;
        int $i0, $i1;
        java.lang.String $r32, $r37, $r41;
        org.apache.log4j.util.Filter[] $r35;
        org.apache.log4j.util.EnhancedLineNumberFilter $r36;
        org.apache.log4j.util.SunReflectFilter $r38;
        org.apache.log4j.util.EnhancedJunitTestRunnerFilter $r39;
        org.apache.log4j.MDCOrderFilter $r40;
        boolean $z0;

        r0 := @this: org.apache.log4j.EnhancedPatternLayoutTestCase;

        $r7 = new org.apache.log4j.EnhancedPatternLayout;

        specialinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void <init>(java.lang.String)>("%m%n");

        $r8 = new org.apache.log4j.FileAppender;

        specialinvoke $r8.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r7, "output/patternLayout.throwable", 0);

        $r9 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r9.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r8);

        $r11 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r10 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke $r11.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r10);

        $r12 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r12.<org.apache.log4j.Logger: void debug(java.lang.Object)>("starting throwable pattern test");

        $r13 = new java.lang.Exception;

        specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>("Test Exception");

        $r14 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r14.<org.apache.log4j.Logger: void debug(java.lang.Object)>("plain pattern, no exception");

        $r15 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r15.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("plain pattern, with exception", $r13);

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m%n%throwable");

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r16 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r16.<org.apache.log4j.Logger: void debug(java.lang.Object)>("%throwable, no exception");

        $r17 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r17.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("%throwable, with exception", $r13);

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m%n%throwable{short}");

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r18 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r18.<org.apache.log4j.Logger: void debug(java.lang.Object)>("%throwable{short}, no exception");

        $r19 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r19.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("%throwable{short}, with exception", $r13);

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m%n%throwable{none}");

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r20 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r20.<org.apache.log4j.Logger: void debug(java.lang.Object)>("%throwable{none}, no exception");

        $r21 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r21.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("%throwable{none}, with exception", $r13);

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m%n%throwable{0}");

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r22 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r22.<org.apache.log4j.Logger: void debug(java.lang.Object)>("%throwable{0}, no exception");

        $r23 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r23.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("%throwable{0}, with exception", $r13);

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m%n%throwable{1}");

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r24 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r24.<org.apache.log4j.Logger: void debug(java.lang.Object)>("%throwable{1}, no exception");

        $r25 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r25.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("%throwable{1}, with exception", $r13);

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>("%m%n%throwable{100}");

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r26 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r26.<org.apache.log4j.Logger: void debug(java.lang.Object)>("%throwable{100}, no exception");

        $r27 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r27.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("%throwable{100}, with exception", $r13);

        $r28 = new org.apache.log4j.spi.ThrowableInformation;

        specialinvoke $r28.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r13);

        r6 = virtualinvoke $r28.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("%m%n%throwable{");

        $i0 = lengthof r6;

        $i1 = 2 - $i0;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void setConversionPattern(java.lang.String)>($r32);

        virtualinvoke $r7.<org.apache.log4j.EnhancedPatternLayout: void activateOptions()>();

        $r33 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r33.<org.apache.log4j.Logger: void debug(java.lang.Object)>("%throwable{-n}, no exception");

        $r34 = r0.<org.apache.log4j.EnhancedPatternLayoutTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r34.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("%throwable{-n}, with exception", $r13);

        $r37 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $r35 = newarray (org.apache.log4j.util.Filter)[4];

        $r36 = new org.apache.log4j.util.EnhancedLineNumberFilter;

        specialinvoke $r36.<org.apache.log4j.util.EnhancedLineNumberFilter: void <init>()>();

        $r35[0] = $r36;

        $r38 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r38.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r35[1] = $r38;

        $r39 = new org.apache.log4j.util.EnhancedJunitTestRunnerFilter;

        specialinvoke $r39.<org.apache.log4j.util.EnhancedJunitTestRunnerFilter: void <init>()>();

        $r35[2] = $r39;

        $r40 = new org.apache.log4j.MDCOrderFilter;

        specialinvoke $r40.<org.apache.log4j.MDCOrderFilter: void <init>()>();

        $r35[3] = $r40;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>("output/patternLayout.throwable", $r37, $r35);

        $r41 = <org.apache.log4j.EnhancedPatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: boolean compare(java.lang.String,java.lang.String)>($r41, "witness/pattern/enhancedPatternLayout.throwable");

        staticinvoke <org.apache.log4j.EnhancedPatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }
}
