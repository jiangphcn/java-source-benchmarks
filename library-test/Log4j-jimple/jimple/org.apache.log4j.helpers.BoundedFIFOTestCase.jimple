public class org.apache.log4j.helpers.BoundedFIFOTestCase extends junit.framework.TestCase
{
    static org.apache.log4j.Logger cat;
    static int MAX;
    static org.apache.log4j.spi.LoggingEvent[] e;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;
        int $i0;
        org.apache.log4j.spi.LoggingEvent[] $r1;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("x");

        <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.Logger cat> = $r0;

        <org.apache.log4j.helpers.BoundedFIFOTestCase: int MAX> = 1000;

        $i0 = <org.apache.log4j.helpers.BoundedFIFOTestCase: int MAX>;

        $r1 = newarray (org.apache.log4j.spi.LoggingEvent)[$i0];

        <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;
        java.lang.String r1, $r8;
        int $i0, i1;
        org.apache.log4j.spi.LoggingEvent $r2;
        java.lang.StringBuilder $r3, $r7;
        org.apache.log4j.spi.LoggingEvent[] $r4;
        org.apache.log4j.Logger $r5;
        org.apache.log4j.Level $r6;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        i1 = 0;

        goto label2;

     label1:
        $r4 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r2 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.Logger cat>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("e");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("", $r5, $r6, $r8, null);

        $r4[i1] = $r2;

        i1 = i1 + 1;

     label2:
        $i0 = <org.apache.log4j.helpers.BoundedFIFOTestCase: int MAX>;

        if i1 < $i0 goto label1;

        return;
    }

    public void setUp()
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        return;
    }

    public void test1()
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, $i10, i11, i12, $i13;
        org.apache.log4j.spi.LoggingEvent r2, $r4, $r6, $r8;
        org.apache.log4j.helpers.BoundedFIFO $r3;
        org.apache.log4j.spi.LoggingEvent[] $r5, $r7;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        i6 = 1;

        goto label16;

     label01:
        $r3 = new org.apache.log4j.helpers.BoundedFIFO;

        specialinvoke $r3.<org.apache.log4j.helpers.BoundedFIFO: void <init>(int)>(i6);

        $i1 = virtualinvoke $r3.<org.apache.log4j.helpers.BoundedFIFO: int getMaxSize()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i1, i6);

        $r4 = virtualinvoke $r3.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertNull(java.lang.Object)>($r4);

        i7 = 1;

        goto label15;

     label02:
        i8 = 0;

        goto label06;

     label03:
        $r5 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r6 = $r5[i8];

        virtualinvoke $r3.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r6);

        $i3 = virtualinvoke $r3.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        if i8 >= i6 goto label04;

        $i9 = i8 + 1;

        goto label05;

     label04:
        $i9 = i6;

     label05:
        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i3, $i9);

        i8 = i8 + 1;

     label06:
        if i8 < i7 goto label03;

        if i6 >= i8 goto label07;

        $i10 = i6;

        goto label08;

     label07:
        $i10 = i8;

     label08:
        i0 = $i10;

        i11 = i8 + -1;

        i12 = 0;

        goto label14;

     label09:
        $i4 = virtualinvoke $r3.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        $i5 = i0 - i12;

        if $i5 <= 0 goto label10;

        $i13 = i0 - i12;

        goto label11;

     label10:
        $i13 = 0;

     label11:
        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i4, $i13);

        r2 = virtualinvoke $r3.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        if i12 < i6 goto label12;

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertNull(java.lang.Object)>(r2);

        goto label13;

     label12:
        $r7 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r8 = $r7[i12];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r8);

     label13:
        i12 = i12 + 1;

     label14:
        if i12 <= i11 goto label09;

        i7 = i7 + 1;

     label15:
        $i2 = 2 * i6;

        if i7 < $i2 goto label02;

        i6 = i6 * 2;

     label16:
        if i6 <= 128 goto label01;

        return;
    }

    public void test2()
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;
        org.apache.log4j.helpers.BoundedFIFO $r2;
        org.apache.log4j.spi.LoggingEvent[] $r3, $r6, $r9, $r11, $r13, $r16, $r19, $r22;
        org.apache.log4j.spi.LoggingEvent $r4, $r5, $r7, $r8, $r10, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        $r2 = new org.apache.log4j.helpers.BoundedFIFO;

        specialinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void <init>(int)>(3);

        $r3 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r4 = $r3[0];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r4);

        $r5 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        $r6 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r7 = $r6[0];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        $r8 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertNull(java.lang.Object)>($r8);

        $r9 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r10 = $r9[1];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r10);

        $i1 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i1, 1);

        $r11 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r12 = $r11[2];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r12);

        $i2 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i2, 2);

        $r13 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r14 = $r13[3];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r14);

        $i3 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i3, 3);

        $r15 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        $r16 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r17 = $r16[1];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        $i4 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i4, 2);

        $r18 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        $r19 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r20 = $r19[2];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r20);

        $i5 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i5, 1);

        $r21 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        $r22 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r23 = $r22[3];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r23);

        $i6 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i6, 0);

        $r24 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertNull(java.lang.Object)>($r24);

        $i7 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i7, 0);

        return;
    }

    int min(int, int)
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    public void testResize1()
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;
        int $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9;
        org.apache.log4j.helpers.BoundedFIFO $r2;
        org.apache.log4j.spi.LoggingEvent[] $r3, $r6;
        org.apache.log4j.spi.LoggingEvent $r4, $r5, $r7;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        i5 = 1;

        goto label8;

     label1:
        i6 = 0;

        goto label7;

     label2:
        $r2 = new org.apache.log4j.helpers.BoundedFIFO;

        specialinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void <init>(int)>(10);

        i7 = 0;

        goto label4;

     label3:
        $r3 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r4 = $r3[i7];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r4);

        i7 = i7 + 1;

     label4:
        if i7 < i6 goto label3;

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void resize(int)>(i5);

        $i3 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFOTestCase: int min(int,int)>(i6, 10);

        i8 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFOTestCase: int min(int,int)>(i5, $i3);

        $i4 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i4, i8);

        i9 = 0;

        goto label6;

     label5:
        $r5 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        $r6 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r7 = $r6[i9];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        i9 = i9 + 1;

     label6:
        if i9 < i8 goto label5;

        i6 = i6 + 1;

     label7:
        $i2 = 10 * 2;

        if i6 < $i2 goto label2;

        i5 = i5 + 1;

     label8:
        $i1 = 10 * 2;

        if i5 < $i1 goto label1;

        return;
    }

    public void testResize2()
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;
        int i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13;
        org.apache.log4j.helpers.BoundedFIFO $r2;
        org.apache.log4j.spi.LoggingEvent[] $r3, $r7;
        org.apache.log4j.spi.LoggingEvent $r4, $r6, $r8, $r9;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        i7 = 1;

        goto label12;

     label01:
        i8 = 0;

        goto label11;

     label02:
        i9 = 0;

        goto label10;

     label03:
        $r2 = new org.apache.log4j.helpers.BoundedFIFO;

        specialinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void <init>(int)>(10);

        i10 = 0;

        goto label05;

     label04:
        $r3 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r4 = $r3[i10];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r4);

        i10 = i10 + 1;

     label05:
        if i10 < i8 goto label04;

        i11 = 0;

        goto label07;

     label06:
        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        i11 = i11 + 1;

     label07:
        if i11 < i9 goto label06;

        i12 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void resize(int)>(i7);

        i1 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFOTestCase: int min(int,int)>(i7, i12);

        $i5 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i5, i1);

        i13 = 0;

        goto label09;

     label08:
        $r6 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        $r7 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $i6 = i13 + i9;

        $r8 = $r7[$i6];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        i13 = i13 + 1;

     label09:
        if i13 < i1 goto label08;

        $r9 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertNull(java.lang.Object)>($r9);

        i9 = i9 + 1;

     label10:
        $i4 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFOTestCase: int min(int,int)>(i8, 10);

        if i9 < $i4 goto label03;

        i8 = i8 + 1;

     label11:
        $i3 = 10 * 2;

        if i8 < $i3 goto label02;

        i7 = i7 + 1;

     label12:
        $i2 = 10 * 2;

        if i7 < $i2 goto label01;

        return;
    }

    public void testResize3()
    {
        org.apache.log4j.helpers.BoundedFIFOTestCase r0;
        int i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, i13, i14;
        org.apache.log4j.helpers.BoundedFIFO $r2;
        org.apache.log4j.spi.LoggingEvent[] $r3, $r6, $r9;
        org.apache.log4j.spi.LoggingEvent $r4, $r7, $r8, $r10;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFOTestCase;

        i6 = 1;

        goto label16;

     label01:
        i7 = 0;

        goto label15;

     label02:
        i8 = 0;

        goto label14;

     label03:
        i9 = 0;

        goto label13;

     label04:
        $r2 = new org.apache.log4j.helpers.BoundedFIFO;

        specialinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void <init>(int)>(10);

        i10 = 0;

        goto label06;

     label05:
        $r3 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r4 = $r3[i10];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r4);

        i10 = i10 + 1;

     label06:
        if i10 < i7 goto label05;

        i11 = 0;

        goto label08;

     label07:
        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        i11 = i11 + 1;

     label08:
        if i11 < i8 goto label07;

        i12 = 0;

        goto label10;

     label09:
        $r6 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $i3 = i7 + i12;

        $r7 = $r6[$i3];

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void put(org.apache.log4j.spi.LoggingEvent)>($r7);

        i12 = i12 + 1;

     label10:
        if i12 < i9 goto label09;

        i13 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: void resize(int)>(i6);

        i1 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFOTestCase: int min(int,int)>(i6, i13);

        $i4 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: int length()>();

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(int,int)>($i4, i1);

        i14 = 0;

        goto label12;

     label11:
        $r8 = virtualinvoke $r2.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent get()>();

        $r9 = <org.apache.log4j.helpers.BoundedFIFOTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $i5 = i14 + i8;

        $r10 = $r9[$i5];

        staticinvoke <org.apache.log4j.helpers.BoundedFIFOTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r10);

        i14 = i14 + 1;

     label12:
        if i14 < i1 goto label11;

        i9 = i9 + 1;

     label13:
        if i9 < i8 goto label04;

        i8 = i8 + 1;

     label14:
        if i8 < i7 goto label03;

        i7 = i7 + 1;

     label15:
        if i7 < 10 goto label02;

        i6 = i6 + 1;

     label16:
        $i2 = 10 * 2;

        if i6 < $i2 goto label01;

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r1;
        org.apache.log4j.helpers.BoundedFIFOTestCase $r2, $r3, $r4, $r5, $r6;

        $r1 = new junit.framework.TestSuite;

        specialinvoke $r1.<junit.framework.TestSuite: void <init>()>();

        $r2 = new org.apache.log4j.helpers.BoundedFIFOTestCase;

        specialinvoke $r2.<org.apache.log4j.helpers.BoundedFIFOTestCase: void <init>(java.lang.String)>("test1");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        $r3 = new org.apache.log4j.helpers.BoundedFIFOTestCase;

        specialinvoke $r3.<org.apache.log4j.helpers.BoundedFIFOTestCase: void <init>(java.lang.String)>("test2");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r3);

        $r4 = new org.apache.log4j.helpers.BoundedFIFOTestCase;

        specialinvoke $r4.<org.apache.log4j.helpers.BoundedFIFOTestCase: void <init>(java.lang.String)>("testResize1");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r4);

        $r5 = new org.apache.log4j.helpers.BoundedFIFOTestCase;

        specialinvoke $r5.<org.apache.log4j.helpers.BoundedFIFOTestCase: void <init>(java.lang.String)>("testResize2");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r5);

        $r6 = new org.apache.log4j.helpers.BoundedFIFOTestCase;

        specialinvoke $r6.<org.apache.log4j.helpers.BoundedFIFOTestCase: void <init>(java.lang.String)>("testResize3");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r6);

        return $r1;
    }
}
