public final class org.apache.log4j.pattern.CachedDateFormatTest extends junit.framework.TestCase
{
    private static final java.util.TimeZone GMT;
    private static final java.util.TimeZone CHICAGO;

    static void <clinit>()
    {
        java.util.TimeZone $r0, $r1;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("America/Chicago");

        <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone CHICAGO> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    private static java.text.DateFormat createAbsoluteTimeDateFormat(java.util.TimeZone)
    {
        java.util.TimeZone r0;
        java.text.SimpleDateFormat $r2;

        r0 := @parameter0: java.util.TimeZone;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss,SSS");

        virtualinvoke $r2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r0);

        return $r2;
    }

    public void test1()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        org.apache.log4j.pattern.CachedDateFormat $r7;
        java.util.TimeZone $r8;
        java.text.DateFormat $r9;
        java.util.Date $r10, $r12, $r14, $r16, $r18;
        java.lang.String $r11, $r13, $r15, $r17, $r19;
        long $l1, $l2, $l3, $l4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r7 = new org.apache.log4j.pattern.CachedDateFormat;

        $r8 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT>;

        $r9 = staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: java.text.DateFormat createAbsoluteTimeDateFormat(java.util.TimeZone)>($r8);

        specialinvoke $r7.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r9, 1000);

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>(long)>(1088726400000L);

        $r11 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r10);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,000", $r11);

        $r12 = new java.util.Date;

        $l1 = 1088726400000L + 8L;

        specialinvoke $r12.<java.util.Date: void <init>(long)>($l1);

        $r13 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r12);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,008", $r13);

        $r14 = new java.util.Date;

        $l2 = 1088726400000L + 17L;

        specialinvoke $r14.<java.util.Date: void <init>(long)>($l2);

        $r15 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r14);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,017", $r15);

        $r16 = new java.util.Date;

        $l3 = 1088726400000L + 237L;

        specialinvoke $r16.<java.util.Date: void <init>(long)>($l3);

        $r17 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r16);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,237", $r17);

        $r18 = new java.util.Date;

        $l4 = 1088726400000L + 1415L;

        specialinvoke $r18.<java.util.Date: void <init>(long)>($l4);

        $r19 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r18);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:01,415", $r19);

        return;
    }

    public void test2()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.util.Date $r4;
        org.apache.log4j.pattern.CachedDateFormat $r5, $r8;
        java.util.TimeZone $r6, $r9;
        java.text.DateFormat $r7, $r10;
        java.lang.String $r11, $r12, $r13;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(1088812800000L);

        $r5 = new org.apache.log4j.pattern.CachedDateFormat;

        $r6 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT>;

        $r7 = staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: java.text.DateFormat createAbsoluteTimeDateFormat(java.util.TimeZone)>($r6);

        specialinvoke $r5.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r7, 1000);

        $r8 = new org.apache.log4j.pattern.CachedDateFormat;

        $r9 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone CHICAGO>;

        $r10 = staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: java.text.DateFormat createAbsoluteTimeDateFormat(java.util.TimeZone)>($r9);

        specialinvoke $r8.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r10, 1000);

        $r11 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r4);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,000", $r11);

        $r12 = virtualinvoke $r8.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r4);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("19:00:00,000", $r12);

        $r13 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r4);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,000", $r13);

        return;
    }

    public void test3()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        org.apache.log4j.pattern.CachedDateFormat $r7;
        java.util.TimeZone $r8;
        java.text.DateFormat $r9;
        java.util.Date $r10, $r12, $r14, $r16, $r18;
        long $l1, $l2, $l3, $l4, $l5;
        java.lang.String $r11, $r13, $r15, $r17, $r19;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r7 = new org.apache.log4j.pattern.CachedDateFormat;

        $r8 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT>;

        $r9 = staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: java.text.DateFormat createAbsoluteTimeDateFormat(java.util.TimeZone)>($r8);

        specialinvoke $r7.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r9, 1000);

        $r10 = new java.util.Date;

        $l1 = -604800000L + 8L;

        specialinvoke $r10.<java.util.Date: void <init>(long)>($l1);

        $r11 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r10);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,008", $r11);

        $r12 = new java.util.Date;

        $l2 = -604800000L + 16L;

        specialinvoke $r12.<java.util.Date: void <init>(long)>($l2);

        $r13 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r12);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,016", $r13);

        $r14 = new java.util.Date;

        $l3 = -604800000L + 23L;

        specialinvoke $r14.<java.util.Date: void <init>(long)>($l3);

        $r15 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r14);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,023", $r15);

        $r16 = new java.util.Date;

        $l4 = -604800000L + 245L;

        specialinvoke $r16.<java.util.Date: void <init>(long)>($l4);

        $r17 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r16);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,245", $r17);

        $r18 = new java.util.Date;

        $l5 = -604800000L + 1423L;

        specialinvoke $r18.<java.util.Date: void <init>(long)>($l5);

        $r19 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r18);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:01,423", $r19);

        return;
    }

    public void test4()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.text.SimpleDateFormat $r8;
        java.util.Locale $r9;
        org.apache.log4j.pattern.CachedDateFormat $r10;
        java.util.Date $r11, $r14, $r19, $r22, $r25;
        java.lang.String $r12, $r13, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27;
        long $l1, $l2, $l3, $l4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r8 = new java.text.SimpleDateFormat;

        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, MMM dd, HH:mm:ss.SSS z", $r9);

        $r10 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r10.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r8, 1000);

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>(long)>(962582400000L);

        $r12 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r11);

        $r13 = virtualinvoke $r10.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r11);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r12, $r13);

        $r14 = new java.util.Date;

        $l1 = 962582400000L + 8L;

        specialinvoke $r14.<java.util.Date: void <init>(long)>($l1);

        virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r14);

        virtualinvoke $r10.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r14);

        $r17 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r14);

        $r18 = virtualinvoke $r10.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r14);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r17, $r18);

        $r19 = new java.util.Date;

        $l2 = 962582400000L + 17L;

        specialinvoke $r19.<java.util.Date: void <init>(long)>($l2);

        $r20 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r19);

        $r21 = virtualinvoke $r10.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r19);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r20, $r21);

        $r22 = new java.util.Date;

        $l3 = 962582400000L + 237L;

        specialinvoke $r22.<java.util.Date: void <init>(long)>($l3);

        $r23 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r22);

        $r24 = virtualinvoke $r10.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r22);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r23, $r24);

        $r25 = new java.util.Date;

        $l4 = 962582400000L + 1415L;

        specialinvoke $r25.<java.util.Date: void <init>(long)>($l4);

        $r26 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r25);

        $r27 = virtualinvoke $r10.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r25);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r26, $r27);

        return;
    }

    public void test5()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.util.Locale $r9;
        java.text.SimpleDateFormat $r10;
        org.apache.log4j.pattern.CachedDateFormat $r11;
        java.util.Date $r12, $r21, $r26, $r29, $r32;
        java.io.PrintStream $r13, $r15, $r17, $r19, $r22, $r24;
        java.lang.String $r14, $r16, $r18, $r20, $r23, $r25, $r27, $r28, $r30, $r31, $r33, $r34, r35, r36, r37;
        long $l1, $l2, $l3, $l4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r9 = new java.util.Locale;

        specialinvoke $r9.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("th", "TH");

        $r10 = new java.text.SimpleDateFormat;

        specialinvoke $r10.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, MMM dd, HH:mm:ss.SSS z", $r9);

        $r11 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r11.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r10, 1000);

        $r12 = new java.util.Date;

        specialinvoke $r12.<java.util.Date: void <init>(long)>(962582400000L);

        r35 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r12);

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r14 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r12);

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(r35);

        $r16 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r12);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r16, r35);

        r36 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r12);

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r18 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r12);

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>(r36);

        $r20 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r12);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r20, r36);

        $r21 = new java.util.Date;

        $l1 = 962582400000L + 8L;

        specialinvoke $r21.<java.util.Date: void <init>(long)>($l1);

        r37 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r21);

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r23 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r21);

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r23);

        $r24 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>(r37);

        $r25 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r21);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r25, r37);

        $r26 = new java.util.Date;

        $l2 = 962582400000L + 17L;

        specialinvoke $r26.<java.util.Date: void <init>(long)>($l2);

        $r27 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r26);

        $r28 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r26);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r27, $r28);

        $r29 = new java.util.Date;

        $l3 = 962582400000L + 237L;

        specialinvoke $r29.<java.util.Date: void <init>(long)>($l3);

        $r30 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r29);

        $r31 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r29);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r30, $r31);

        $r32 = new java.util.Date;

        $l4 = 962582400000L + 1415L;

        specialinvoke $r32.<java.util.Date: void <init>(long)>($l4);

        $r33 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r32);

        $r34 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r32);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>($r33, $r34);

        return;
    }

    public void test6()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        org.apache.log4j.pattern.CachedDateFormat $r1;
        java.text.SimpleDateFormat $r2;
        java.text.NumberFormat $r3;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r1 = new org.apache.log4j.pattern.CachedDateFormat;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>()>();

        specialinvoke $r1.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r2, 1000);

        $r3 = virtualinvoke $r1.<org.apache.log4j.pattern.CachedDateFormat: java.text.NumberFormat getNumberFormat()>();

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertNotNull(java.lang.Object)>($r3);

        return;
    }

    public void test8()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.text.SimpleDateFormat $r4;
        java.util.TimeZone $r5, $r9;
        org.apache.log4j.pattern.CachedDateFormat $r6;
        java.util.Date $r7;
        java.lang.String $r8, $r10;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss,SSS");

        $r5 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT>;

        virtualinvoke $r4.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r5);

        $r6 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r6.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r4, 1000);

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>(long)>(1088899200000L);

        $r8 = virtualinvoke $r6.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r7);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("2004-07-04 00:00:00,000", $r8);

        $r9 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT-6");

        virtualinvoke $r6.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r9);

        $r10 = virtualinvoke $r6.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r7);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("2004-07-03 18:00:00,000", $r10);

        return;
    }

    public void test9()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.util.TimeZone r3;
        java.util.Calendar r4;
        java.text.SimpleDateFormat $r5;
        java.util.Locale $r6;
        org.apache.log4j.pattern.CachedDateFormat $r7;
        java.util.Date $r8, $r9, $r10, $r11;
        java.lang.String r12, r13, r14, r15;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r5 = new java.text.SimpleDateFormat;

        $r6 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MMMM-dd HH:mm:ss,SS z", $r6);

        $r7 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r7.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r5, 1000);

        r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+1");

        virtualinvoke $r7.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r3);

        r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r4.<java.util.Calendar: void set(int,int,int,int,int)>(2004, 11, 12, 20, 0);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(13, 37);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(14, 23);

        virtualinvoke r4.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r3);

        $r8 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r12 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r8);

        $r9 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r13 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r9);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>(r12, r13);

        virtualinvoke r4.<java.util.Calendar: void set(int,int,int,int,int)>(2005, 0, 1, 0, 0);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(13, 13);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(14, 905);

        $r10 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r14 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r10);

        $r11 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r15 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r11);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>(r14, r15);

        return;
    }

    public void test10()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.util.TimeZone r3;
        java.util.Calendar r4;
        java.text.SimpleDateFormat $r5;
        java.util.Locale $r6;
        org.apache.log4j.pattern.CachedDateFormat $r7;
        java.util.Date $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String r14, r15, r16, r17, r18, r19;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r5 = new java.text.SimpleDateFormat;

        $r6 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("MMMM SSS EEEEEE", $r6);

        $r7 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r7.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r5, 1000);

        r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+1");

        virtualinvoke $r7.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r3);

        r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r4.<java.util.Calendar: void set(int,int,int,int,int)>(2004, 9, 5, 20, 0);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(13, 37);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(14, 23);

        virtualinvoke r4.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r3);

        $r8 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r14 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r8);

        $r9 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r15 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r9);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>(r14, r15);

        virtualinvoke r4.<java.util.Calendar: void set(int,int,int,int,int)>(2004, 10, 1, 0, 0);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(14, 23);

        $r10 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r16 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r10);

        $r11 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r17 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r11);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>(r16, r17);

        virtualinvoke r4.<java.util.Calendar: void set(int,int)>(14, 984);

        $r12 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r18 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r12);

        $r13 = virtualinvoke r4.<java.util.Calendar: java.util.Date getTime()>();

        r19 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r13);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>(r18, r19);

        return;
    }

    public void test11()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.text.SimpleDateFormat $r6, $r7;
        org.apache.log4j.pattern.CachedDateFormat $r8;
        java.util.TimeZone $r9, $r10;
        java.util.Date $r11;
        long $l1, $l2;
        java.lang.String $r12, $r13, r14, r15;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r6 = new java.text.SimpleDateFormat;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("ss,SS0");

        $r7 = new java.text.SimpleDateFormat;

        specialinvoke $r7.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("ss,SS0");

        $r8 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r8.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r6, 1000);

        $r9 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT>;

        virtualinvoke $r8.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r9);

        $r10 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT>;

        virtualinvoke $r7.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r10);

        $r11 = new java.util.Date;

        $l1 = 962668800000L + 120L;

        specialinvoke $r11.<java.util.Date: void <init>(long)>($l1);

        r14 = virtualinvoke $r7.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r11);

        $r12 = virtualinvoke $r8.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r11);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>(r14, $r12);

        $l2 = 962668800000L + 87L;

        virtualinvoke $r11.<java.util.Date: void setTime(long)>($l2);

        r15 = virtualinvoke $r7.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r11);

        $r13 = virtualinvoke $r8.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r11);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>(r15, $r13);

        return;
    }

    public void test12()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.lang.String r2;
        int i1;
        java.text.SimpleDateFormat $r3;
        java.util.Date $r4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss,SSS");

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(962668800000L);

        r2 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        i1 = staticinvoke <org.apache.log4j.pattern.CachedDateFormat: int findMillisecondStart(long,java.lang.String,java.text.DateFormat)>(962668800000L, r2, $r3);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(int,int)>(20, i1);

        return;
    }

    public void test13()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.lang.String r2;
        int i1;
        java.text.SimpleDateFormat $r3;
        java.util.Date $r4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(962668800000L);

        r2 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        i1 = staticinvoke <org.apache.log4j.pattern.CachedDateFormat: int findMillisecondStart(long,java.lang.String,java.text.DateFormat)>(962668800000L, r2, $r3);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(int,int)>(-2, i1);

        return;
    }

    public void test14()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.lang.String r2;
        int i1;
        java.text.SimpleDateFormat $r3;
        java.util.Date $r4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss,SSS");

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(962668800000L);

        r2 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        i1 = staticinvoke <org.apache.log4j.pattern.CachedDateFormat: int findMillisecondStart(long,java.lang.String,java.text.DateFormat)>(962668800000L, r2, $r3);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(int,int)>(9, i1);

        return;
    }

    public void test15()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.lang.String r2;
        int i1;
        java.text.SimpleDateFormat $r3;
        java.util.Date $r4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss,S");

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(962668800000L);

        r2 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        i1 = staticinvoke <org.apache.log4j.pattern.CachedDateFormat: int findMillisecondStart(long,java.lang.String,java.text.DateFormat)>(962668800000L, r2, $r3);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(int,int)>(-1, i1);

        return;
    }

    public void test16()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        java.lang.String r2;
        int i1;
        java.text.SimpleDateFormat $r3;
        java.util.Date $r4;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss,SS");

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(962668800000L);

        r2 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        i1 = staticinvoke <org.apache.log4j.pattern.CachedDateFormat: int findMillisecondStart(long,java.lang.String,java.text.DateFormat)>(962668800000L, r2, $r3);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(int,int)>(-1, i1);

        return;
    }

    public void test17()
    {
        org.apache.log4j.pattern.CachedDateFormatTest r0;
        int i0;
        java.util.Date $r5;
        java.text.SimpleDateFormat $r6;
        java.util.TimeZone $r7;
        org.apache.log4j.pattern.CachedDateFormat $r8;
        long $l1, $l2;
        java.lang.String $r9, r10;

        r0 := @this: org.apache.log4j.pattern.CachedDateFormatTest;

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>(long)>(1088812800000L);

        $r6 = new java.text.SimpleDateFormat;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss,SSS HH:mm:ss,SSS");

        $r7 = <org.apache.log4j.pattern.CachedDateFormatTest: java.util.TimeZone GMT>;

        virtualinvoke $r6.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r7);

        $r8 = new org.apache.log4j.pattern.CachedDateFormat;

        specialinvoke $r8.<org.apache.log4j.pattern.CachedDateFormat: void <init>(java.text.DateFormat,int)>($r6, 1000);

        r10 = virtualinvoke $r8.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r5);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,000 00:00:00,000", r10);

        $l1 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $l2 = $l1 + 120L;

        virtualinvoke $r5.<java.util.Date: void setTime(long)>($l2);

        $r9 = virtualinvoke $r6.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r5);

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(java.lang.String,java.lang.String)>("00:00:00,120 00:00:00,120", $r9);

        virtualinvoke $r8.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r5);

        i0 = staticinvoke <org.apache.log4j.pattern.CachedDateFormat: int getMaximumCacheValidity(java.lang.String)>("HH:mm:ss,SSS HH:mm:ss,SSS");

        staticinvoke <org.apache.log4j.pattern.CachedDateFormatTest: void assertEquals(int,int)>(1, i0);

        return;
    }

    public static junit.framework.Test xsuite()
    {
        junit.framework.TestSuite $r1;
        org.apache.log4j.pattern.CachedDateFormatTest $r2;

        $r1 = new junit.framework.TestSuite;

        specialinvoke $r1.<junit.framework.TestSuite: void <init>()>();

        $r2 = new org.apache.log4j.pattern.CachedDateFormatTest;

        specialinvoke $r2.<org.apache.log4j.pattern.CachedDateFormatTest: void <init>(java.lang.String)>("test5");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        return $r1;
    }
}
