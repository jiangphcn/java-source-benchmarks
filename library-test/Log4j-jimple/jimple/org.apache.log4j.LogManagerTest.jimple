public class org.apache.log4j.LogManagerTest extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.LogManagerTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.LogManagerTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void testDefaultConfigurationFile()
    {
        org.apache.log4j.LogManagerTest r0;

        r0 := @this: org.apache.log4j.LogManagerTest;

        staticinvoke <org.apache.log4j.LogManagerTest: void assertEquals(java.lang.String,java.lang.String)>("log4j.properties", "log4j.properties");

        return;
    }

    public void testDefaultXmlConfigurationFile()
    {
        org.apache.log4j.LogManagerTest r0;

        r0 := @this: org.apache.log4j.LogManagerTest;

        staticinvoke <org.apache.log4j.LogManagerTest: void assertEquals(java.lang.String,java.lang.String)>("log4j.xml", "log4j.xml");

        return;
    }

    public void testDefaultConfigurationKey()
    {
        org.apache.log4j.LogManagerTest r0;

        r0 := @this: org.apache.log4j.LogManagerTest;

        staticinvoke <org.apache.log4j.LogManagerTest: void assertEquals(java.lang.String,java.lang.String)>("log4j.configuration", "log4j.configuration");

        return;
    }

    public void testConfiguratorClassKey()
    {
        org.apache.log4j.LogManagerTest r0;

        r0 := @this: org.apache.log4j.LogManagerTest;

        staticinvoke <org.apache.log4j.LogManagerTest: void assertEquals(java.lang.String,java.lang.String)>("log4j.configuratorClass", "log4j.configuratorClass");

        return;
    }

    public void testDefaultInitOverrideKey()
    {
        org.apache.log4j.LogManagerTest r0;

        r0 := @this: org.apache.log4j.LogManagerTest;

        staticinvoke <org.apache.log4j.LogManagerTest: void assertEquals(java.lang.String,java.lang.String)>("log4j.defaultInitOverride", "log4j.defaultInitOverride");

        return;
    }
}
