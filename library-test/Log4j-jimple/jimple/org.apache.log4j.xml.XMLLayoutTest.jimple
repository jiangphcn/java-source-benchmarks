public class org.apache.log4j.xml.XMLLayoutTest extends org.apache.log4j.LayoutTest
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.LayoutTest: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, "text/plain", 0, null, null);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        java.util.Hashtable $r1, $r2;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        staticinvoke <org.apache.log4j.NDC: void clear()>();

        $r1 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if $r1 == null goto label1;

        $r2 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        virtualinvoke $r2.<java.util.Hashtable: void clear()>();

     label1:
        return;
    }

    public void tearDown()
    {
        org.apache.log4j.xml.XMLLayoutTest r0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void setUp()>();

        return;
    }

    protected org.apache.log4j.Layout createLayout()
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.xml.XMLLayout $r1;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        $r1 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r1.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        return $r1;
    }

    private org.w3c.dom.Element parse(java.lang.String) throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        java.lang.String r1;
        javax.xml.parsers.DocumentBuilderFactory r2;
        javax.xml.parsers.DocumentBuilder r3;
        org.w3c.dom.Document r5;
        java.io.StringReader $r6;
        org.xml.sax.InputSource $r7;
        org.w3c.dom.Element $r8;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r2.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(0);

        virtualinvoke r2.<javax.xml.parsers.DocumentBuilderFactory: void setCoalescing(boolean)>(1);

        r3 = virtualinvoke r2.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r6 = new java.io.StringReader;

        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r7 = new org.xml.sax.InputSource;

        specialinvoke $r7.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r6);

        r5 = virtualinvoke r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r7);

        $r8 = interfaceinvoke r5.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        return $r8;
    }

    private void checkEventElement(org.w3c.dom.Element, org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.w3c.dom.Element r1;
        org.apache.log4j.spi.LoggingEvent r2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12;
        long $l0;
        org.apache.log4j.Level $r8;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.apache.log4j.spi.LoggingEvent;

        $r3 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("log4j:event", $r3);

        $r4 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        $r5 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("logger");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>($r4, $r5);

        $l0 = r2.<org.apache.log4j.spi.LoggingEvent: long timeStamp>;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r7 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("timestamp");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>($r6, $r7);

        $r8 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r9 = virtualinvoke $r8.<org.apache.log4j.Level: java.lang.String toString()>();

        $r10 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("level");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>($r9, $r10);

        $r11 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        $r12 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("thread");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>($r11, $r12);

        return;
    }

    private void checkMessageElement(org.w3c.dom.Element, java.lang.String)
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.w3c.dom.Element r1;
        java.lang.String r2, $r4, $r5;
        org.w3c.dom.Node r3, $r6;
        short $s0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r4 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("log4j:message", $r4);

        r3 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertNotNull(java.lang.Object)>(r3);

        $s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(short,short)>(3, $s0);

        $r5 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>(r2, $r5);

        $r6 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertNull(java.lang.Object)>($r6);

        return;
    }

    private void checkNDCElement(org.w3c.dom.Element, java.lang.String)
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.w3c.dom.Element r1;
        java.lang.String r2, $r4, $r5;
        org.w3c.dom.Node r3, $r6;
        short $s0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r4 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("log4j:NDC", $r4);

        r3 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertNotNull(java.lang.Object)>(r3);

        $s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(short,short)>(3, $s0);

        $r5 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>(r2, $r5);

        $r6 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertNull(java.lang.Object)>($r6);

        return;
    }

    private void checkThrowableElement(org.w3c.dom.Element, java.lang.Exception)
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.w3c.dom.Element r1;
        java.lang.Exception r2;
        org.w3c.dom.Node r3, $r8;
        java.lang.String r4, $r5, $r6, $r7;
        short $s0;
        int $i1;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.Exception;

        $r5 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("log4j:throwable", $r5);

        r3 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertNotNull(java.lang.Object)>(r3);

        $s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(short,short)>(3, $s0);

        r4 = virtualinvoke r2.<java.lang.Exception: java.lang.String toString()>();

        $r6 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>(r4, $r7);

        $r8 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertNull(java.lang.Object)>($r8);

        return;
    }

    private void checkPropertiesElement(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.w3c.dom.Element r1, r4;
        java.lang.String r2, r3, $r5, $r6, $r7, $r8;
        short $s0;
        int i1;
        org.w3c.dom.Node r9;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("log4j:properties", $r5);

        i1 = 0;

        r9 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r6 = interfaceinvoke r9.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("log4j:data", $r6);

        r4 = (org.w3c.dom.Element) r9;

        $r7 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>(r2, $r7);

        $r8 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>(r3, $r8);

        i1 = i1 + 1;

     label2:
        r9 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r9 != null goto label1;

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(int,int)>(1, i1);

        return;
    }

    public void testFormat() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.xml.XMLLayout r3;
        java.lang.String r4;
        org.w3c.dom.Element r5, $r9;
        org.apache.log4j.spi.LoggingEvent $r6;
        org.apache.log4j.Level $r7;
        org.apache.log4j.Layout $r8;
        short $s0;
        int i1;
        org.w3c.dom.Node r10;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("org.apache.log4j.xml.XMLLayoutTest");

        $r6 = new org.apache.log4j.spi.LoggingEvent;

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r6.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("org.apache.log4j.Logger", r1, $r7, "Hello, World", null);

        $r8 = virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r3 = (org.apache.log4j.xml.XMLLayout) $r8;

        r4 = virtualinvoke r3.<org.apache.log4j.xml.XMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r6);

        r5 = specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.w3c.dom.Element parse(java.lang.String)>(r4);

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkEventElement(org.w3c.dom.Element,org.apache.log4j.spi.LoggingEvent)>(r5, $r6);

        i1 = 0;

        r10 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        goto label7;

     label1:
        $s0 = interfaceinvoke r10.<org.w3c.dom.Node: short getNodeType()>();

        lookupswitch($s0)
        {
            case 1: goto label2;
            case 3: goto label4;
            case 8: goto label3;
            default: goto label5;
        };

     label2:
        i1 = i1 + 1;

        $r9 = (org.w3c.dom.Element) r10;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkMessageElement(org.w3c.dom.Element,java.lang.String)>($r9, "Hello, World");

        goto label6;

     label3:
        goto label6;

     label4:
        goto label6;

     label5:
        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void fail(java.lang.String)>("Unexpected node type");

     label6:
        r10 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label7:
        if r10 != null goto label1;

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(int,int)>(1, i1);

        return;
    }

    public void testFormatWithException() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.xml.XMLLayout r4;
        java.lang.String r5;
        org.w3c.dom.Element r6, $r11, $r12;
        java.lang.IllegalArgumentException $r7;
        org.apache.log4j.spi.LoggingEvent $r8;
        org.apache.log4j.Level $r9;
        org.apache.log4j.Layout $r10;
        short $s0;
        int i1;
        org.w3c.dom.Node r13;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("org.apache.log4j.xml.XMLLayoutTest");

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'foo\' is not a valid name");

        $r8 = new org.apache.log4j.spi.LoggingEvent;

        $r9 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r8.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("org.apache.log4j.Logger", r1, $r9, "Hello, World", $r7);

        $r10 = virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r4 = (org.apache.log4j.xml.XMLLayout) $r10;

        r5 = virtualinvoke r4.<org.apache.log4j.xml.XMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r8);

        r6 = specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.w3c.dom.Element parse(java.lang.String)>(r5);

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkEventElement(org.w3c.dom.Element,org.apache.log4j.spi.LoggingEvent)>(r6, $r8);

        i1 = 0;

        r13 = interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        goto label8;

     label1:
        $s0 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        lookupswitch($s0)
        {
            case 1: goto label2;
            case 3: goto label5;
            case 8: goto label4;
            default: goto label6;
        };

     label2:
        i1 = i1 + 1;

        if i1 != 1 goto label3;

        $r12 = (org.w3c.dom.Element) r13;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkMessageElement(org.w3c.dom.Element,java.lang.String)>($r12, "Hello, World");

        goto label7;

     label3:
        $r11 = (org.w3c.dom.Element) r13;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkThrowableElement(org.w3c.dom.Element,java.lang.Exception)>($r11, $r7);

        goto label7;

     label4:
        goto label7;

     label5:
        goto label7;

     label6:
        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void fail(java.lang.String)>("Unexpected node type");

     label7:
        r13 = interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label8:
        if r13 != null goto label1;

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(int,int)>(2, i1);

        return;
    }

    public void testFormatWithNDC() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.xml.XMLLayout r3;
        java.lang.String r4;
        org.w3c.dom.Element r5, $r10, $r11;
        org.apache.log4j.spi.LoggingEvent $r6;
        org.apache.log4j.Level $r7;
        org.apache.log4j.Layout $r8;
        short $s0;
        int i1;
        org.w3c.dom.Node r12;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("org.apache.log4j.xml.XMLLayoutTest");

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>("NDC goes here");

        $r6 = new org.apache.log4j.spi.LoggingEvent;

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r6.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("org.apache.log4j.Logger", r1, $r7, "Hello, World", null);

        $r8 = virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r3 = (org.apache.log4j.xml.XMLLayout) $r8;

        r4 = virtualinvoke r3.<org.apache.log4j.xml.XMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r6);

        staticinvoke <org.apache.log4j.NDC: java.lang.String pop()>();

        r5 = specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.w3c.dom.Element parse(java.lang.String)>(r4);

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkEventElement(org.w3c.dom.Element,org.apache.log4j.spi.LoggingEvent)>(r5, $r6);

        i1 = 0;

        r12 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        goto label8;

     label1:
        $s0 = interfaceinvoke r12.<org.w3c.dom.Node: short getNodeType()>();

        lookupswitch($s0)
        {
            case 1: goto label2;
            case 3: goto label5;
            case 8: goto label4;
            default: goto label6;
        };

     label2:
        i1 = i1 + 1;

        if i1 != 1 goto label3;

        $r11 = (org.w3c.dom.Element) r12;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkMessageElement(org.w3c.dom.Element,java.lang.String)>($r11, "Hello, World");

        goto label7;

     label3:
        $r10 = (org.w3c.dom.Element) r12;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkNDCElement(org.w3c.dom.Element,java.lang.String)>($r10, "NDC goes here");

        goto label7;

     label4:
        goto label7;

     label5:
        goto label7;

     label6:
        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void fail(java.lang.String)>("Unexpected node type");

     label7:
        r12 = interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label8:
        if r12 != null goto label1;

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(int,int)>(2, i1);

        return;
    }

    public void testGetSetLocationInfo()
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.xml.XMLLayout $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        $r2 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r2.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        $z0 = virtualinvoke $r2.<org.apache.log4j.xml.XMLLayout: boolean getLocationInfo()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(boolean,boolean)>(0, $z0);

        virtualinvoke $r2.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1);

        $z1 = virtualinvoke $r2.<org.apache.log4j.xml.XMLLayout: boolean getLocationInfo()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(boolean,boolean)>(1, $z1);

        virtualinvoke $r2.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(0);

        $z2 = virtualinvoke $r2.<org.apache.log4j.xml.XMLLayout: boolean getLocationInfo()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(boolean,boolean)>(0, $z2);

        return;
    }

    public void testActivateOptions()
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.xml.XMLLayout $r2;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        $r2 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r2.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        virtualinvoke $r2.<org.apache.log4j.xml.XMLLayout: void activateOptions()>();

        return;
    }

    public void testProblemCharacters() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.Logger r2;
        java.lang.String r5, r8;
        org.apache.log4j.xml.XMLLayout r7;
        org.w3c.dom.Element r9, $r17, $r18, $r19, $r20;
        org.apache.log4j.xml.XMLLayoutTest$ProblemLevel $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.Thread $r12, $r13, $r16;
        org.apache.log4j.spi.LoggingEvent $r14;
        org.apache.log4j.Layout $r15;
        short $s0;
        java.util.Hashtable r21, r22;
        int i1;
        org.w3c.dom.Node r23;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("com.example.bar<>&\"\'");

        $r10 = new org.apache.log4j.xml.XMLLayoutTest$ProblemLevel;

        specialinvoke $r10.<org.apache.log4j.xml.XMLLayoutTest$ProblemLevel: void <init>(java.lang.String)>("com.example.bar<>&\"\'");

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("com.example.bar<>&\"\'");

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r5 = virtualinvoke $r12.<java.lang.Thread: java.lang.String getName()>();

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void setName(java.lang.String)>("com.example.bar<>&\"\'");

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>("com.example.bar<>&\"\'");

        r21 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r21 == null goto label01;

        virtualinvoke r21.<java.util.Hashtable: void clear()>();

     label01:
        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("com.example.bar<>&\"\'", "com.example.bar<>&\"\'");

        $r14 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r14.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("com.example.bar<>&\"\'", r2, $r10, "com.example.bar<>&\"\'", $r11);

        $r15 = virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r7 = (org.apache.log4j.xml.XMLLayout) $r15;

        virtualinvoke r7.<org.apache.log4j.xml.XMLLayout: void setProperties(boolean)>(1);

        r8 = virtualinvoke r7.<org.apache.log4j.xml.XMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r14);

        r22 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r22 == null goto label02;

        virtualinvoke r22.<java.util.Hashtable: void clear()>();

     label02:
        $r16 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r16.<java.lang.Thread: void setName(java.lang.String)>(r5);

        r9 = specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.w3c.dom.Element parse(java.lang.String)>(r8);

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkEventElement(org.w3c.dom.Element,org.apache.log4j.spi.LoggingEvent)>(r9, $r14);

        i1 = 0;

        r23 = interfaceinvoke r9.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        goto label14;

     label03:
        $s0 = interfaceinvoke r23.<org.w3c.dom.Node: short getNodeType()>();

        lookupswitch($s0)
        {
            case 1: goto label04;
            case 3: goto label11;
            case 8: goto label10;
            default: goto label12;
        };

     label04:
        i1 = i1 + 1;

        tableswitch(i1)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            default: goto label09;
        };

     label05:
        $r17 = (org.w3c.dom.Element) r23;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkMessageElement(org.w3c.dom.Element,java.lang.String)>($r17, "com.example.bar<>&\"\'");

        goto label13;

     label06:
        $r20 = (org.w3c.dom.Element) r23;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkNDCElement(org.w3c.dom.Element,java.lang.String)>($r20, "com.example.bar<>&\"\'");

        goto label13;

     label07:
        $r19 = (org.w3c.dom.Element) r23;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkThrowableElement(org.w3c.dom.Element,java.lang.Exception)>($r19, $r11);

        goto label13;

     label08:
        $r18 = (org.w3c.dom.Element) r23;

        specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: void checkPropertiesElement(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r18, "com.example.bar<>&\"\'", "com.example.bar<>&\"\'");

        goto label13;

     label09:
        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void fail(java.lang.String)>("Unexpected element");

        goto label13;

     label10:
        goto label13;

     label11:
        goto label13;

     label12:
        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void fail(java.lang.String)>("Unexpected node type");

     label13:
        r23 = interfaceinvoke r23.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label14:
        if r23 != null goto label03;

        return;
    }

    public void testNDCWithCDATA() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.Level r2;
        org.apache.log4j.Layout r5;
        java.lang.String r6, $r13, $r15;
        org.w3c.dom.Element r7;
        org.w3c.dom.NodeList r8;
        org.apache.log4j.spi.LoggingEvent $r10;
        int $i0;
        java.lang.StringBuffer $r11;
        org.w3c.dom.Node $r12, r16;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("com.example.bar");

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>("<envelope><faultstring><![CDATA[The EffectiveDate]]></faultstring><envelope>");

        $r10 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r10.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("com.example.bar", r1, r2, "Hello, World", null);

        r5 = virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r6 = virtualinvoke r5.<org.apache.log4j.Layout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r10);

        staticinvoke <org.apache.log4j.NDC: void clear()>();

        r7 = specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.w3c.dom.Element parse(java.lang.String)>(r6);

        r8 = interfaceinvoke r7.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("log4j:NDC");

        $i0 = interfaceinvoke r8.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(int,int)>(1, $i0);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = interfaceinvoke r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r16 = interfaceinvoke $r12.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r13 = interfaceinvoke r16.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        r16 = interfaceinvoke r16.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r16 != null goto label1;

        $r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("<envelope><faultstring><![CDATA[The EffectiveDate]]></faultstring><envelope>", $r15);

        return;
    }

    public void testExceptionWithCDATA() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.Level r2;
        org.apache.log4j.Layout r5;
        java.lang.String r6, $r14, $r16;
        org.w3c.dom.Element r7;
        org.w3c.dom.NodeList r8;
        org.apache.log4j.spi.LoggingEvent $r10;
        java.lang.Exception $r11;
        int $i0, $i1;
        java.lang.StringBuffer $r12;
        org.w3c.dom.Node $r13, r17;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("com.example.bar");

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r10 = new org.apache.log4j.spi.LoggingEvent;

        $r11 = new java.lang.Exception;

        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>("<envelope><faultstring><![CDATA[The EffectiveDate]]></faultstring><envelope>");

        specialinvoke $r10.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("com.example.bar", r1, r2, "Hello, World", $r11);

        r5 = virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r6 = virtualinvoke r5.<org.apache.log4j.Layout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r10);

        r7 = specialinvoke r0.<org.apache.log4j.xml.XMLLayoutTest: org.w3c.dom.Element parse(java.lang.String)>(r6);

        r8 = interfaceinvoke r7.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("log4j:throwable");

        $i0 = interfaceinvoke r8.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertEquals(int,int)>(1, $i0);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = interfaceinvoke r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r17 = interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r14 = interfaceinvoke r17.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        r17 = interfaceinvoke r17.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r17 != null goto label1;

        $r16 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke $r16.<java.lang.String: int indexOf(java.lang.String)>("<envelope><faultstring><![CDATA[The EffectiveDate]]></faultstring><envelope>");

        if $i1 == -1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.apache.log4j.xml.XMLLayoutTest: void assertTrue(boolean)>($z0);

        return;
    }
}
