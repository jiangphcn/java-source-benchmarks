public class org.apache.log4j.net.ShortSocketServer extends java.lang.Object
{
    static org.apache.log4j.Logger cat;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/net/ShortSocketServer");

        <org.apache.log4j.net.ShortSocketServer: org.apache.log4j.Logger cat> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.log4j.net.ShortSocketServer r0;

        r0 := @this: org.apache.log4j.net.ShortSocketServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        java.net.Socket r2;
        int $i0, i1, i2;
        java.net.ServerSocket $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r11, $r13;
        java.lang.String $r7, $r10, $r14, $r18, r19;
        java.net.InetAddress $r12;
        org.apache.log4j.net.SocketNode $r15;
        org.apache.log4j.spi.LoggerRepository $r16;
        java.lang.Thread $r17;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

        r19 = null;

        $i0 = lengthof r0;

        if $i0 != 2 goto label1;

        $r18 = r0[0];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18);

        r19 = r0[1];

        goto label2;

     label1:
        staticinvoke <org.apache.log4j.net.ShortSocketServer: void usage(java.lang.String)>("Wrong number of arguments.");

     label2:
        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Listening on port 12345");

        $r5 = new java.net.ServerSocket;

        specialinvoke $r5.<java.net.ServerSocket: void <init>(int)>(12345);

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("hostID", "shortSocketServer");

        i2 = 1;

        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r19);

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".properties");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>($r10);

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Waiting to accept a new client.");

        r2 = virtualinvoke $r5.<java.net.ServerSocket: java.net.Socket accept()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Connected to client at ");

        $r12 = virtualinvoke r2.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r14);

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Starting new socket node.");

        $r15 = new org.apache.log4j.net.SocketNode;

        $r16 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        specialinvoke $r15.<org.apache.log4j.net.SocketNode: void <init>(java.net.Socket,org.apache.log4j.spi.LoggerRepository)>(r2, $r16);

        $r17 = new java.lang.Thread;

        specialinvoke $r17.<java.lang.Thread: void <init>(java.lang.Runnable)>($r15);

        virtualinvoke $r17.<java.lang.Thread: void start()>();

        virtualinvoke $r17.<java.lang.Thread: void join()>();

        i2 = i2 + 1;

     label4:
        if i2 <= i1 goto label3;

        return;
    }

    static void usage(java.lang.String)
    {
        java.lang.String r0, $r5, $r8;
        java.io.PrintStream $r1, $r3;
        java.lang.StringBuilder $r2, $r6, $r7;
        java.lang.Class $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Usage: java ");

        $r4 = class "org/apache/log4j/net/ShortSocketServer";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" totalTests configFilePrefix");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }
}
