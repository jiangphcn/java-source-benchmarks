public class org.apache.log4j.jmx.LoggerDynamicMBean extends org.apache.log4j.jmx.AbstractDynamicMBean implements javax.management.NotificationListener
{
    private javax.management.MBeanConstructorInfo[] dConstructors;
    private javax.management.MBeanOperationInfo[] dOperations;
    private java.util.Vector dAttributes;
    private java.lang.String dClassName;
    private java.lang.String dDescription;
    private static org.apache.log4j.Logger cat;
    private org.apache.log4j.Logger logger;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/jmx/LoggerDynamicMBean");

        <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat> = $r0;

        return;
    }

    public void <init>(org.apache.log4j.Logger)
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        org.apache.log4j.Logger r1;
        javax.management.MBeanConstructorInfo[] $r2;
        javax.management.MBeanOperationInfo[] $r3;
        java.util.Vector $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: org.apache.log4j.Logger;

        specialinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: void <init>()>();

        $r2 = newarray (javax.management.MBeanConstructorInfo)[1];

        r0.<org.apache.log4j.jmx.LoggerDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors> = $r2;

        $r3 = newarray (javax.management.MBeanOperationInfo)[1];

        r0.<org.apache.log4j.jmx.LoggerDynamicMBean: javax.management.MBeanOperationInfo[] dOperations> = $r3;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.util.Vector dAttributes> = $r4;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dClassName> = $r6;

        r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dDescription> = "This MBean acts as a management facade for a org.apache.log4j.Logger instance.";

        r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger> = r1;

        specialinvoke r0.<org.apache.log4j.jmx.LoggerDynamicMBean: void buildDynamicMBeanInfo()>();

        return;
    }

    public void handleNotification(javax.management.Notification, java.lang.Object)
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        javax.management.Notification r1;
        java.lang.Object r2, $r8;
        java.lang.StringBuilder $r3, $r6;
        org.apache.log4j.Logger $r4;
        java.lang.String $r5, $r7;
        org.apache.log4j.Appender $r9;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: javax.management.Notification;

        r2 := @parameter1: java.lang.Object;

        $r4 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Received notification: ");

        $r5 = virtualinvoke r1.<javax.management.Notification: java.lang.String getType()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r7);

        $r8 = virtualinvoke r1.<javax.management.Notification: java.lang.Object getUserData()>();

        $r9 = (org.apache.log4j.Appender) $r8;

        virtualinvoke r0.<org.apache.log4j.jmx.LoggerDynamicMBean: void registerAppenderMBean(org.apache.log4j.Appender)>($r9);

        return;
    }

    private void buildDynamicMBeanInfo()
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        java.lang.reflect.Constructor[] r1;
        javax.management.MBeanParameterInfo[] r2;
        java.lang.Class $r3;
        javax.management.MBeanConstructorInfo $r4;
        java.lang.reflect.Constructor $r5;
        javax.management.MBeanConstructorInfo[] $r6;
        javax.management.MBeanAttributeInfo $r7, $r9;
        java.util.Vector $r8, $r10;
        javax.management.MBeanParameterInfo $r11, $r12;
        javax.management.MBeanOperationInfo $r13;
        javax.management.MBeanOperationInfo[] $r14;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r6 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r4 = new javax.management.MBeanConstructorInfo;

        $r5 = r1[0];

        specialinvoke $r4.<javax.management.MBeanConstructorInfo: void <init>(java.lang.String,java.lang.reflect.Constructor)>("HierarchyDynamicMBean(): Constructs a HierarchyDynamicMBean instance", $r5);

        $r6[0] = $r4;

        $r8 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.util.Vector dAttributes>;

        $r7 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r7.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("name", "java.lang.String", "The name of this Logger.", 1, 0, 0);

        virtualinvoke $r8.<java.util.Vector: boolean add(java.lang.Object)>($r7);

        $r10 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.util.Vector dAttributes>;

        $r9 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r9.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("priority", "java.lang.String", "The priority of this logger.", 1, 1, 0);

        virtualinvoke $r10.<java.util.Vector: boolean add(java.lang.Object)>($r9);

        r2 = newarray (javax.management.MBeanParameterInfo)[2];

        $r11 = new javax.management.MBeanParameterInfo;

        specialinvoke $r11.<javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>("class name", "java.lang.String", "add an appender to this logger");

        r2[0] = $r11;

        $r12 = new javax.management.MBeanParameterInfo;

        specialinvoke $r12.<javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>("appender name", "java.lang.String", "name of the appender");

        r2[1] = $r12;

        $r14 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r13 = new javax.management.MBeanOperationInfo;

        specialinvoke $r13.<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanParameterInfo[],java.lang.String,int)>("addAppender", "addAppender(): add an appender", r2, "void", 1);

        $r14[0] = $r13;

        return;
    }

    protected org.apache.log4j.Logger getLogger()
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        org.apache.log4j.Logger $r1;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        $r1 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger>;

        return $r1;
    }

    public javax.management.MBeanInfo getMBeanInfo()
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        javax.management.MBeanAttributeInfo[] r1;
        java.util.Vector $r3, $r4;
        int $i0;
        javax.management.MBeanInfo $r6;
        javax.management.MBeanNotificationInfo[] $r7;
        javax.management.MBeanOperationInfo[] $r8;
        javax.management.MBeanConstructorInfo[] $r9;
        java.lang.String $r10, $r11;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        $r3 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.util.Vector dAttributes>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        r1 = newarray (javax.management.MBeanAttributeInfo)[$i0];

        $r4 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.util.Vector dAttributes>;

        virtualinvoke $r4.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        $r6 = new javax.management.MBeanInfo;

        $r11 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dClassName>;

        $r10 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dDescription>;

        $r9 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r8 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r7 = newarray (javax.management.MBeanNotificationInfo)[0];

        specialinvoke $r6.<javax.management.MBeanInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanAttributeInfo[],javax.management.MBeanConstructorInfo[],javax.management.MBeanOperationInfo[],javax.management.MBeanNotificationInfo[])>($r11, $r10, r1, $r9, $r8, $r7);

        return $r6;
    }

    public java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        java.lang.String r1, $r6, $r7;
        java.lang.Object[] r2;
        java.lang.String[] r3;
        boolean $z0;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.lang.String[];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("addAppender");

        if $z0 == 0 goto label1;

        $r4 = r2[0];

        $r7 = (java.lang.String) $r4;

        $r5 = r2[1];

        $r6 = (java.lang.String) $r5;

        virtualinvoke r0.<org.apache.log4j.jmx.LoggerDynamicMBean: void addAppender(java.lang.String,java.lang.String)>($r7, $r6);

        return "Hello world.";

     label1:
        return null;
    }

    public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        java.lang.String r1, $r5, $r7, $r9, $r13, $r16, $r21, $r26, $r34, $r36;
        boolean $z0, $z1, $z2;
        javax.management.ObjectName $r2;
        java.lang.StringBuilder $r3, $r4, $r12, $r14, $r15, $r18, $r20, $r23, $r25, $r31, $r32, $r33, $r35;
        org.apache.log4j.Logger $r6, $r8, $r19, $r24;
        javax.management.RuntimeOperationsException $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.RuntimeException $r17;
        javax.management.MalformedObjectNameException $r22;
        org.apache.log4j.Level r27;
        javax.management.AttributeNotFoundException $r30;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r10 = new javax.management.RuntimeOperationsException;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke a getter of ");

        $r13 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dClassName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute name");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r11, $r16);

        throw $r10;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("name");

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger>;

        $r9 = virtualinvoke $r8.<org.apache.log4j.Logger: java.lang.String getName()>();

        return $r9;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("priority");

        if $z1 == 0 goto label4;

        $r6 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger>;

        r27 = virtualinvoke $r6.<org.apache.log4j.Logger: org.apache.log4j.Level getLevel()>();

        if r27 != null goto label3;

        return null;

     label3:
        $r7 = virtualinvoke r27.<org.apache.log4j.Level: java.lang.String toString()>();

        return $r7;

     label4:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("appender=");

        if $z2 == 0 goto label9;

     label5:
        $r2 = new javax.management.ObjectName;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.management.ObjectName: void <init>(java.lang.String)>($r5);

     label6:
        return $r2;

     label7:
        $r22 := @caughtexception;

        $r24 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create ObjectName");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<org.apache.log4j.Logger: void error(java.lang.Object)>($r26);

        goto label9;

     label8:
        $r17 := @caughtexception;

        $r19 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create ObjectName");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.apache.log4j.Logger: void error(java.lang.Object)>($r21);

     label9:
        $r30 = new javax.management.AttributeNotFoundException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot find ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attribute in ");

        $r34 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dClassName>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>($r36);

        throw $r30;

        catch javax.management.MalformedObjectNameException from label5 to label6 with label7;
        catch java.lang.RuntimeException from label5 to label6 with label8;
    }

    void addAppender(java.lang.String, java.lang.String)
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        java.lang.String r1, r2, $r9;
        org.apache.log4j.Appender r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        org.apache.log4j.Logger $r5, $r11;
        java.lang.Object $r10;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("addAppender called with ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r9);

        $r10 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>(r1, class "org/apache/log4j/Appender", null);

        r3 = (org.apache.log4j.Appender) $r10;

        interfaceinvoke r3.<org.apache.log4j.Appender: void setName(java.lang.String)>(r2);

        $r11 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger>;

        virtualinvoke $r11.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r3);

        return;
    }

    public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        javax.management.Attribute r1;
        java.lang.String r2, r4, $r10, $r12, $r18, $r21, $r25, $r28;
        java.lang.Object r3;
        boolean $z0, $z1, $z2;
        javax.management.AttributeNotFoundException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r17, $r19, $r20, $r24, $r26, $r27;
        java.lang.Class $r9;
        org.apache.log4j.Logger $r13, $r14;
        javax.management.RuntimeOperationsException $r15, $r22;
        java.lang.IllegalArgumentException $r16, $r23;
        org.apache.log4j.Level r29, r30;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: javax.management.Attribute;

        if r1 != null goto label1;

        $r22 = new javax.management.RuntimeOperationsException;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute cannot be null");

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke a setter of ");

        $r25 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dClassName>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r23, $r28);

        throw $r22;

     label1:
        r2 = virtualinvoke r1.<javax.management.Attribute: java.lang.String getName()>();

        r3 = virtualinvoke r1.<javax.management.Attribute: java.lang.Object getValue()>();

        if r2 != null goto label2;

        $r15 = new javax.management.RuntimeOperationsException;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke the setter of ");

        $r18 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String dClassName>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute name");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r16, $r21);

        throw $r15;

     label2:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("priority");

        if $z0 == 0 goto label5;

        $z1 = r3 instanceof java.lang.String;

        if $z1 == 0 goto label6;

        r4 = (java.lang.String) r3;

        $r13 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger>;

        r29 = virtualinvoke $r13.<org.apache.log4j.Logger: org.apache.log4j.Level getLevel()>();

        $z2 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NULL");

        if $z2 == 0 goto label3;

        r30 = null;

        goto label4;

     label3:
        r30 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>(r4, r29);

     label4:
        $r14 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger>;

        virtualinvoke $r14.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r30);

        goto label6;

     label5:
        $r5 = new javax.management.AttributeNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Attribute ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in ");

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label6:
        return;
    }

    void appenderMBeanRegistration()
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        java.util.Enumeration r1;
        org.apache.log4j.Appender r2;
        org.apache.log4j.Logger $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        $r3 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger logger>;

        r1 = virtualinvoke $r3.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (org.apache.log4j.Appender) $r4;

        virtualinvoke r0.<org.apache.log4j.jmx.LoggerDynamicMBean: void registerAppenderMBean(org.apache.log4j.Appender)>(r2);

     label2:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return;
    }

    void registerAppenderMBean(org.apache.log4j.Appender)
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        org.apache.log4j.Appender r1;
        java.lang.String r2, $r6, $r14, $r18, $r24, $r30, $r36;
        java.lang.StringBuilder $r3, $r5, $r11, $r13, $r15, $r16, $r17, $r20, $r22, $r23, $r26, $r28, $r29, $r32, $r34, $r35;
        org.apache.log4j.Logger $r4, $r21, $r27, $r33;
        org.apache.log4j.jmx.AppenderDynamicMBean $r7;
        javax.management.ObjectName $r8;
        javax.management.MBeanServer $r9;
        boolean $z0;
        javax.management.MBeanAttributeInfo $r10;
        java.util.Vector $r12;
        java.lang.RuntimeException $r19;
        java.beans.IntrospectionException $r25;
        javax.management.JMException $r31;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: org.apache.log4j.Appender;

        r2 = staticinvoke <org.apache.log4j.jmx.LoggerDynamicMBean: java.lang.String getAppenderName(org.apache.log4j.Appender)>(r1);

        $r4 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Adding AppenderMBean for appender named ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r6);

     label1:
        $r7 = new org.apache.log4j.jmx.AppenderDynamicMBean;

        specialinvoke $r7.<org.apache.log4j.jmx.AppenderDynamicMBean: void <init>(org.apache.log4j.Appender)>(r1);

        $r8 = new javax.management.ObjectName;

        specialinvoke $r8.<javax.management.ObjectName: void <init>(java.lang.String,java.lang.String,java.lang.String)>("log4j", "appender", r2);

        $r9 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: javax.management.MBeanServer server>;

        $z0 = interfaceinvoke $r9.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>($r8);

        if $z0 != 0 goto label6;

        virtualinvoke r0.<org.apache.log4j.jmx.LoggerDynamicMBean: void registerMBean(java.lang.Object,javax.management.ObjectName)>($r7, $r8);

        $r12 = r0.<org.apache.log4j.jmx.LoggerDynamicMBean: java.util.Vector dAttributes>;

        $r10 = new javax.management.MBeanAttributeInfo;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("appender=");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("The ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appender.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>($r14, "javax.management.ObjectName", $r18, 1, 1, 0);

        virtualinvoke $r12.<java.util.Vector: boolean add(java.lang.Object)>($r10);

     label2:
        goto label6;

     label3:
        $r31 := @caughtexception;

        $r33 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add appenderMBean for [");

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r36, $r31);

        goto label6;

     label4:
        $r25 := @caughtexception;

        $r27 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add appenderMBean for [");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r30, $r25);

        goto label6;

     label5:
        $r19 := @caughtexception;

        $r21 = <org.apache.log4j.jmx.LoggerDynamicMBean: org.apache.log4j.Logger cat>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add appenderMBean for [");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r24, $r19);

     label6:
        return;

        catch javax.management.JMException from label1 to label2 with label3;
        catch java.beans.IntrospectionException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label5;
    }

    public void postRegister(java.lang.Boolean)
    {
        org.apache.log4j.jmx.LoggerDynamicMBean r0;
        java.lang.Boolean r1;

        r0 := @this: org.apache.log4j.jmx.LoggerDynamicMBean;

        r1 := @parameter0: java.lang.Boolean;

        virtualinvoke r0.<org.apache.log4j.jmx.LoggerDynamicMBean: void appenderMBeanRegistration()>();

        return;
    }
}
