public class org.apache.log4j.helpers.OptionConverter extends java.lang.Object
{
    static java.lang.String DELIM_START;
    static char DELIM_STOP;
    static int DELIM_START_LEN;
    static int DELIM_STOP_LEN;

    static void <clinit>()
    {
        <org.apache.log4j.helpers.OptionConverter: java.lang.String DELIM_START> = "${";

        <org.apache.log4j.helpers.OptionConverter: char DELIM_STOP> = 125;

        <org.apache.log4j.helpers.OptionConverter: int DELIM_START_LEN> = 2;

        <org.apache.log4j.helpers.OptionConverter: int DELIM_STOP_LEN> = 1;

        return;
    }

    private void <init>()
    {
        org.apache.log4j.helpers.OptionConverter r0;

        r0 := @this: org.apache.log4j.helpers.OptionConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] concatanateArrays(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r0, r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        i0 = $i2 + $i1;

        r2 = newarray (java.lang.String)[i0];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static java.lang.String convertSpecialChars(java.lang.String)
    {
        java.lang.String r0, $r4;
        int i0, $i1, $i2, i3;
        java.lang.StringBuffer $r2;
        char c4;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(i0);

        i3 = 0;

        goto label10;

     label01:
        $i1 = i3;

        i3 = i3 + 1;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        if c4 != 92 goto label09;

        $i2 = i3;

        i3 = i3 + 1;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        if c4 != 110 goto label02;

        c4 = 10;

        goto label09;

     label02:
        if c4 != 114 goto label03;

        c4 = 13;

        goto label09;

     label03:
        if c4 != 116 goto label04;

        c4 = 9;

        goto label09;

     label04:
        if c4 != 102 goto label05;

        c4 = 12;

        goto label09;

     label05:
        if c4 != 8 goto label06;

        c4 = 8;

        goto label09;

     label06:
        if c4 != 34 goto label07;

        c4 = 34;

        goto label09;

     label07:
        if c4 != 39 goto label08;

        c4 = 39;

        goto label09;

     label08:
        if c4 != 92 goto label09;

        c4 = 92;

     label09:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

     label10:
        if i3 < i0 goto label01;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getSystemProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3, $r8;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Was not allowed to read system property \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8);

        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object instantiateByKey(java.util.Properties, java.lang.String, java.lang.Class, java.lang.Object)
    {
        java.util.Properties r0;
        java.lang.String r1, r4, $r5, $r9;
        java.lang.Class r2;
        java.lang.Object r3, $r6;
        java.lang.StringBuilder $r7, $r8;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Object;

        r4 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r1, r0);

        if r4 != null goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find value for key ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r9);

        return r3;

     label1:
        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r5, r2, r3);

        return $r6;
    }

    public static boolean toBoolean(java.lang.String, boolean)
    {
        java.lang.String r0, r1, $r2, $r3;
        boolean z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        return z0;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = "true";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = "false";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return z0;
    }

    public static int toInt(java.lang.String, int)
    {
        java.lang.String r0, r1, $r8;
        int i0, $i1;
        java.lang.Integer $r3;
        java.lang.NumberFormatException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 == null goto label4;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not in proper int form.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r8);

        virtualinvoke $r4.<java.lang.NumberFormatException: void printStackTrace()>();

     label4:
        return i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static org.apache.log4j.Level toLevel(java.lang.String, org.apache.log4j.Level)
    {
        org.apache.log4j.Level r0, $r18, r53;
        int i0, $i1;
        java.lang.String r1, r2, $r7, $r14, $r17, $r25, $r30, $r35, $r45, $r50, r51, r52, $r62;
        java.lang.reflect.Method r4;
        java.lang.Object r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r20, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r32, $r33, $r34, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r58, $r59, $r60, $r61;
        java.lang.Class[] $r15;
        java.lang.Object[] $r16;
        java.lang.RuntimeException $r19;
        java.lang.IllegalAccessException $r26;
        java.lang.ClassCastException $r31;
        java.lang.reflect.InvocationTargetException $r36;
        java.lang.Throwable $r37, $r39;
        java.lang.Thread $r38;
        java.lang.NoSuchMethodException $r40;
        java.lang.ClassNotFoundException $r46;
        java.lang.Class r54;

        r51 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.log4j.Level;

        if r51 != null goto label01;

        return r0;

     label01:
        r52 = virtualinvoke r51.<java.lang.String: java.lang.String trim()>();

        i0 = virtualinvoke r52.<java.lang.String: int indexOf(int)>(35);

        if i0 != -1 goto label03;

        $r17 = "NULL";

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r52);

        if $z1 == 0 goto label02;

        return null;

     label02:
        $r18 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>(r52, r0);

        return $r18;

     label03:
        r53 = r0;

        $i1 = i0 + 1;

        r1 = virtualinvoke r52.<java.lang.String: java.lang.String substring(int)>($i1);

        r2 = virtualinvoke r52.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r7 = "NULL";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 == 0 goto label04;

        return null;

     label04:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("toLevel:class=[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":pri=[");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r14);

     label05:
        r54 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r15 = newarray (java.lang.Class)[2];

        $r15[0] = class "java/lang/String";

        $r15[1] = class "org/apache/log4j/Level";

        r4 = virtualinvoke r54.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toLevel", $r15);

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r2;

        $r16[1] = r0;

        r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r16);

        r53 = (org.apache.log4j.Level) r6;

     label06:
        goto label15;

     label07:
        $r46 := @caughtexception;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>("custom level class [");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found.");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r50);

        goto label15;

     label08:
        $r40 := @caughtexception;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("custom level class [");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a class function toLevel(String, Level)");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r45, $r40);

        goto label15;

     label09:
        $r36 := @caughtexception;

        $r37 = virtualinvoke $r36.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r37 instanceof java.lang.InterruptedException;

        if $z2 != 0 goto label10;

        $r39 = virtualinvoke $r36.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z3 = $r39 instanceof java.io.InterruptedIOException;

        if $z3 == 0 goto label11;

     label10:
        $r38 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r38.<java.lang.Thread: void interrupt()>();

     label11:
        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>(java.lang.String)>("custom level class [");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be instantiated");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r62, $r36);

        goto label15;

     label12:
        $r31 := @caughtexception;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("class [");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a subclass of org.apache.log4j.Level");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r35, $r31);

        goto label15;

     label13:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("class [");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot be instantiated due to access restrictions");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r30, $r26);

        goto label15;

     label14:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("class [");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], level [");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] conversion failed.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r25, $r19);

     label15:
        return r53;

        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
        catch java.lang.NoSuchMethodException from label05 to label06 with label08;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label09;
        catch java.lang.ClassCastException from label05 to label06 with label12;
        catch java.lang.IllegalAccessException from label05 to label06 with label13;
        catch java.lang.RuntimeException from label05 to label06 with label14;
    }

    public static long toFileSize(java.lang.String, long)
    {
        java.lang.String r0, $r2, $r8, $r12, r13;
        long l0, $l4, $l5, l6;
        int $i1, $i2, $i3;
        java.lang.Long $r3;
        java.lang.NumberFormatException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        if r0 != null goto label1;

        return l0;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        r13 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        l6 = 1L;

        $i1 = virtualinvoke r13.<java.lang.String: int indexOf(java.lang.String)>("KB");

        if $i1 == -1 goto label2;

        l6 = 1024L;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label4;

     label2:
        $i2 = virtualinvoke r13.<java.lang.String: int indexOf(java.lang.String)>("MB");

        if $i2 == -1 goto label3;

        l6 = 1048576L;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        goto label4;

     label3:
        $i3 = virtualinvoke r13.<java.lang.String: int indexOf(java.lang.String)>("GB");

        if $i3 == -1 goto label4;

        l6 = 1073741824L;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label4:
        if r13 == null goto label8;

     label5:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r13);

        $l4 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $l5 = $l4 * l6;

     label6:
        return $l5;

     label7:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not in proper int form.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not in expected format.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r12, $r4);

     label8:
        return l0;

        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    public static java.lang.String findAndSubst(java.lang.String, java.util.Properties)
    {
        java.lang.String r0, r2, $r4, $r9;
        java.util.Properties r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Properties;

        r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>(r2, r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bad option value [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r9, $r5);

        return r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static java.lang.Object instantiateByClassName(java.lang.String, java.lang.Class, java.lang.Object)
    {
        java.lang.String r0, $r7, $r10, $r12, $r15, $r20, $r22, $r28, $r33, $r38, $r43, $r48;
        java.lang.Class r1, r49;
        java.lang.Object r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r18, $r19, $r21, $r23, $r24, $r26, $r27, $r30, $r31, $r32, $r35, $r36, $r37, $r40, $r41, $r42, $r45, $r46, $r47;
        java.lang.ClassLoader $r17, $r25;
        java.lang.InstantiationException $r29;
        java.lang.IllegalAccessException $r34;
        java.lang.ClassNotFoundException $r39;
        java.lang.RuntimeException $r44;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        if r0 == null goto label9;

     label1:
        r49 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>(r0);

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r49);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("A \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" object is not assignable to a \"");

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" variable.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("The class \"");

        $r12 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" was loaded by ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r17 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] whereas object of type ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("\"");

        $r22 = virtualinvoke r49.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" was loaded by [");

        $r25 = virtualinvoke r49.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r28);

     label2:
        return r2;

     label3:
        $r3 = virtualinvoke r49.<java.lang.Class: java.lang.Object newInstance()>();

     label4:
        return $r3;

     label5:
        $r39 := @caughtexception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate class [");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r43, $r39);

        goto label9;

     label6:
        $r34 := @caughtexception;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate class [");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r38, $r34);

        goto label9;

     label7:
        $r29 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate class [");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r33, $r29);

        goto label9;

     label8:
        $r44 := @caughtexception;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate class [");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r48, $r44);

     label9:
        return r2;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.InstantiationException from label1 to label2 with label7;
        catch java.lang.InstantiationException from label3 to label4 with label7;
        catch java.lang.RuntimeException from label1 to label2 with label8;
        catch java.lang.RuntimeException from label3 to label4 with label8;
    }

    public static java.lang.String substVars(java.lang.String, java.util.Properties) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, r3, r4, $r6, $r7, $r12, $r17, $r18, $r20, r21;
        java.util.Properties r1;
        int i0, $i2, $i3, $i4, i5, i6, i7;
        java.lang.StringBuffer $r5;
        char $c1;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Properties;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        i5 = 0;

     label1:
        $r6 = <org.apache.log4j.helpers.OptionConverter: java.lang.String DELIM_START>;

        i6 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>($r6, i5);

        if i6 != -1 goto label3;

        if i5 != 0 goto label2;

        return r0;

     label2:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $r18 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, $i4);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r20;

     label3:
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, i6);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $c1 = <org.apache.log4j.helpers.OptionConverter: char DELIM_STOP>;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>($c1, i6);

        if i0 != -1 goto label4;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(34);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" has no closing brace. Opening brace at position ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r10;

     label4:
        $i2 = <org.apache.log4j.helpers.OptionConverter: int DELIM_START_LEN>;

        i7 = i6 + $i2;

        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i7, i0);

        r21 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>(r3, null);

        if r21 != null goto label5;

        if r1 == null goto label5;

        r21 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

     label5:
        if r21 == null goto label6;

        r4 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>(r21, r1);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

     label6:
        $i3 = <org.apache.log4j.helpers.OptionConverter: int DELIM_STOP_LEN>;

        i5 = i0 + $i3;

        goto label1;
    }

    public static void selectAndConfigure(java.io.InputStream, java.lang.String, org.apache.log4j.spi.LoggerRepository)
    {
        java.io.InputStream r0;
        java.lang.String r1, $r6, $r11;
        org.apache.log4j.spi.LoggerRepository r2;
        org.apache.log4j.PropertyConfigurator $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r10;
        java.lang.Object $r7;
        org.apache.log4j.spi.Configurator r12;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.log4j.spi.LoggerRepository;

        if r1 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Preferred configurator class: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r6);

        $r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>(r1, class "org/apache/log4j/spi/Configurator", null);

        r12 = (org.apache.log4j.spi.Configurator) $r7;

        if r12 != null goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate configurator [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r11);

        return;

     label1:
        $r3 = new org.apache.log4j.PropertyConfigurator;

        specialinvoke $r3.<org.apache.log4j.PropertyConfigurator: void <init>()>();

        r12 = $r3;

     label2:
        interfaceinvoke r12.<org.apache.log4j.spi.Configurator: void doConfigure(java.io.InputStream,org.apache.log4j.spi.LoggerRepository)>(r0, r2);

        return;
    }

    public static void selectAndConfigure(java.net.URL, java.lang.String, org.apache.log4j.spi.LoggerRepository)
    {
        java.net.URL r0;
        org.apache.log4j.spi.LoggerRepository r1;
        java.lang.String r2, $r6, $r11, r12;
        org.apache.log4j.PropertyConfigurator $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r10;
        java.lang.Object $r7;
        boolean $z0;
        org.apache.log4j.spi.Configurator r13;

        r0 := @parameter0: java.net.URL;

        r12 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.log4j.spi.LoggerRepository;

        r2 = virtualinvoke r0.<java.net.URL: java.lang.String getFile()>();

        if r12 != null goto label1;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label1;

        r12 = "org.apache.log4j.xml.DOMConfigurator";

     label1:
        if r12 == null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Preferred configurator class: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r6);

        $r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>(r12, class "org/apache/log4j/spi/Configurator", null);

        r13 = (org.apache.log4j.spi.Configurator) $r7;

        if r13 != null goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate configurator [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r11);

        return;

     label2:
        $r3 = new org.apache.log4j.PropertyConfigurator;

        specialinvoke $r3.<org.apache.log4j.PropertyConfigurator: void <init>()>();

        r13 = $r3;

     label3:
        interfaceinvoke r13.<org.apache.log4j.spi.Configurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>(r0, r1);

        return;
    }
}
