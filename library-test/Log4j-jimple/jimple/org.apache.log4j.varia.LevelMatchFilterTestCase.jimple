public class org.apache.log4j.varia.LevelMatchFilterTestCase extends junit.framework.TestCase
{
    static java.lang.String ACCEPT_FILE;
    static java.lang.String ACCEPT_FILTERED;
    static java.lang.String ACCEPT_WITNESS;
    static java.lang.String DENY_FILE;
    static java.lang.String DENY_FILTERED;
    static java.lang.String DENY_WITNESS;
    org.apache.log4j.Logger root;
    org.apache.log4j.Logger logger;

    static void <clinit>()
    {
        <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_FILE> = "output/LevelMatchFilter_accept";

        <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_FILTERED> = "output/LevelMatchFilter_accept_filtered";

        <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_WITNESS> = "witness/LevelMatchFilter_accept";

        <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_FILE> = "output/LevelMatchFilter_deny";

        <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_FILTERED> = "output/LevelMatchFilter_deny_filtered";

        <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_WITNESS> = "witness/LevelMatchFilter_deny";

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.varia.LevelMatchFilterTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.varia.LevelMatchFilterTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.varia.LevelMatchFilterTestCase r0;
        org.apache.log4j.Logger $r1, $r2;

        r0 := @this: org.apache.log4j.varia.LevelMatchFilterTestCase;

        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: org.apache.log4j.Logger root> = $r1;

        $r2 = r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void removeAllAppenders()>();

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.varia.LevelMatchFilterTestCase r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.spi.LoggerRepository $r2;

        r0 := @this: org.apache.log4j.varia.LevelMatchFilterTestCase;

        $r1 = r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: org.apache.log4j.Logger root>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        return;
    }

    public void accept() throws java.lang.Exception
    {
        org.apache.log4j.varia.LevelMatchFilterTestCase r0;
        org.apache.log4j.SimpleLayout $r5;
        org.apache.log4j.FileAppender $r6;
        java.lang.String $r7, $r21, $r26, $r29, $r31, $r32, $r33, $r34;
        org.apache.log4j.varia.LevelMatchFilter $r8;
        org.apache.log4j.varia.DenyAllFilter $r9;
        org.apache.log4j.Logger $r10, $r12;
        org.apache.log4j.Level $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r25;
        org.apache.log4j.Level[] $r13;
        int $i0, i1;
        java.lang.StringBuilder $r22, $r23, $r24, $r27, $r28;
        org.apache.log4j.util.LineNumberFilter $r30;
        boolean $z0;

        r0 := @this: org.apache.log4j.varia.LevelMatchFilterTestCase;

        $r5 = new org.apache.log4j.SimpleLayout;

        specialinvoke $r5.<org.apache.log4j.SimpleLayout: void <init>()>();

        $r6 = new org.apache.log4j.FileAppender;

        $r7 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_FILE>;

        specialinvoke $r6.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r5, $r7, 0);

        $r8 = new org.apache.log4j.varia.LevelMatchFilter;

        specialinvoke $r8.<org.apache.log4j.varia.LevelMatchFilter: void <init>()>();

        interfaceinvoke $r6.<org.apache.log4j.Appender: void addFilter(org.apache.log4j.spi.Filter)>($r8);

        $r9 = new org.apache.log4j.varia.DenyAllFilter;

        specialinvoke $r9.<org.apache.log4j.varia.DenyAllFilter: void <init>()>();

        interfaceinvoke $r6.<org.apache.log4j.Appender: void addFilter(org.apache.log4j.spi.Filter)>($r9);

        $r10 = r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r10.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r6);

        $r12 = r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: org.apache.log4j.Logger root>;

        $r11 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        virtualinvoke $r12.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r11);

        $r13 = newarray (org.apache.log4j.Level)[6];

        $r14 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $r13[0] = $r14;

        $r15 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r13[1] = $r15;

        $r16 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r13[2] = $r16;

        $r17 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r13[3] = $r17;

        $r18 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r13[4] = $r18;

        $r19 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r13[5] = $r19;

        i1 = 0;

        goto label2;

     label1:
        $r20 = $r13[i1];

        $r21 = virtualinvoke $r20.<org.apache.log4j.Level: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.log4j.varia.LevelMatchFilter: void setLevelToMatch(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("pass ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; filter set to accept only ");

        $r25 = $r13[i1];

        $r26 = virtualinvoke $r25.<org.apache.log4j.Level: java.lang.String toString()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" msgs");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: void common(java.lang.String)>($r29);

        i1 = i1 + 1;

     label2:
        $i0 = lengthof $r13;

        if i1 < $i0 goto label1;

        $r31 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_FILE>;

        $r32 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_FILTERED>;

        $r30 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r30.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter)>($r31, $r32, $r30);

        $r34 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_FILTERED>;

        $r33 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String ACCEPT_WITNESS>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r34, $r33);

        staticinvoke <org.apache.log4j.varia.LevelMatchFilterTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void deny() throws java.lang.Exception
    {
        org.apache.log4j.varia.LevelMatchFilterTestCase r0;
        org.apache.log4j.SimpleLayout $r5;
        org.apache.log4j.FileAppender $r6;
        java.lang.String $r7, $r20, $r25, $r28, $r30, $r31, $r32, $r33;
        org.apache.log4j.varia.LevelMatchFilter $r8;
        org.apache.log4j.Logger $r9, $r11;
        org.apache.log4j.Level $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r24;
        org.apache.log4j.Level[] $r12;
        int $i0, i1;
        java.lang.StringBuilder $r21, $r22, $r23, $r26, $r27;
        org.apache.log4j.util.LineNumberFilter $r29;
        boolean $z0;

        r0 := @this: org.apache.log4j.varia.LevelMatchFilterTestCase;

        $r5 = new org.apache.log4j.SimpleLayout;

        specialinvoke $r5.<org.apache.log4j.SimpleLayout: void <init>()>();

        $r6 = new org.apache.log4j.FileAppender;

        $r7 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_FILE>;

        specialinvoke $r6.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r5, $r7, 0);

        $r8 = new org.apache.log4j.varia.LevelMatchFilter;

        specialinvoke $r8.<org.apache.log4j.varia.LevelMatchFilter: void <init>()>();

        virtualinvoke $r8.<org.apache.log4j.varia.LevelMatchFilter: void setAcceptOnMatch(boolean)>(0);

        interfaceinvoke $r6.<org.apache.log4j.Appender: void addFilter(org.apache.log4j.spi.Filter)>($r8);

        $r9 = r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r9.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r6);

        $r11 = r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: org.apache.log4j.Logger root>;

        $r10 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        virtualinvoke $r11.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r10);

        $r12 = newarray (org.apache.log4j.Level)[6];

        $r13 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $r12[0] = $r13;

        $r14 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r12[1] = $r14;

        $r15 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r12[2] = $r15;

        $r16 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r12[3] = $r16;

        $r17 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r12[4] = $r17;

        $r18 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r12[5] = $r18;

        i1 = 0;

        goto label2;

     label1:
        $r19 = $r12[i1];

        $r20 = virtualinvoke $r19.<org.apache.log4j.Level: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.log4j.varia.LevelMatchFilter: void setLevelToMatch(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("pass ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; filter set to deny only ");

        $r24 = $r12[i1];

        $r25 = virtualinvoke $r24.<org.apache.log4j.Level: java.lang.String toString()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" msgs");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.log4j.varia.LevelMatchFilterTestCase: void common(java.lang.String)>($r28);

        i1 = i1 + 1;

     label2:
        $i0 = lengthof $r12;

        if i1 < $i0 goto label1;

        $r30 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_FILE>;

        $r31 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_FILTERED>;

        $r29 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r29.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter)>($r30, $r31, $r29);

        $r33 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_FILTERED>;

        $r32 = <org.apache.log4j.varia.LevelMatchFilterTestCase: java.lang.String DENY_WITNESS>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r33, $r32);

        staticinvoke <org.apache.log4j.varia.LevelMatchFilterTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    void common(java.lang.String)
    {
        org.apache.log4j.varia.LevelMatchFilterTestCase r0;
        java.lang.String r1;
        org.apache.log4j.Logger r2;

        r0 := @this: org.apache.log4j.varia.LevelMatchFilterTestCase;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("test");

        virtualinvoke r2.<org.apache.log4j.Logger: void trace(java.lang.Object)>(r1);

        virtualinvoke r2.<org.apache.log4j.Logger: void debug(java.lang.Object)>(r1);

        virtualinvoke r2.<org.apache.log4j.Logger: void info(java.lang.Object)>(r1);

        virtualinvoke r2.<org.apache.log4j.Logger: void warn(java.lang.Object)>(r1);

        virtualinvoke r2.<org.apache.log4j.Logger: void error(java.lang.Object)>(r1);

        virtualinvoke r2.<org.apache.log4j.Logger: void fatal(java.lang.Object)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r1;
        org.apache.log4j.varia.LevelMatchFilterTestCase $r2, $r3;

        $r1 = new junit.framework.TestSuite;

        specialinvoke $r1.<junit.framework.TestSuite: void <init>()>();

        $r2 = new org.apache.log4j.varia.LevelMatchFilterTestCase;

        specialinvoke $r2.<org.apache.log4j.varia.LevelMatchFilterTestCase: void <init>(java.lang.String)>("accept");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        $r3 = new org.apache.log4j.varia.LevelMatchFilterTestCase;

        specialinvoke $r3.<org.apache.log4j.varia.LevelMatchFilterTestCase: void <init>(java.lang.String)>("deny");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r3);

        return $r1;
    }
}
