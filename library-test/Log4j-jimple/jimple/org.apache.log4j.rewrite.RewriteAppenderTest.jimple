public class org.apache.log4j.rewrite.RewriteAppenderTest extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.rewrite.RewriteAppenderTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.rewrite.RewriteAppenderTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.rewrite.RewriteAppenderTest r0;
        java.util.Hashtable r1;
        org.apache.log4j.spi.LoggerRepository $r2;

        r0 := @this: org.apache.log4j.rewrite.RewriteAppenderTest;

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        r1 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r1 == null goto label1;

        virtualinvoke r1.<java.util.Hashtable: void clear()>();

     label1:
        return;
    }

    public void tearDown()
    {
        org.apache.log4j.rewrite.RewriteAppenderTest r0;
        org.apache.log4j.spi.LoggerRepository $r1;

        r0 := @this: org.apache.log4j.rewrite.RewriteAppenderTest;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: void shutdown()>();

        return;
    }

    public void configure(java.lang.String) throws java.lang.Exception
    {
        org.apache.log4j.rewrite.RewriteAppenderTest r0;
        java.lang.String r1;
        java.io.InputStream r2;
        javax.xml.parsers.DocumentBuilderFactory r3;
        javax.xml.parsers.DocumentBuilder r4;
        org.w3c.dom.Document r5;
        java.lang.Class $r6;
        org.w3c.dom.Element $r7;

        r0 := @this: org.apache.log4j.rewrite.RewriteAppenderTest;

        r1 := @parameter0: java.lang.String;

        $r6 = class "org/apache/log4j/rewrite/RewriteAppenderTest";

        r2 = virtualinvoke $r6.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        r3 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r3.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(0);

        r4 = virtualinvoke r3.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        r5 = virtualinvoke r4.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>(r2);

        $r7 = interfaceinvoke r5.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void configure(org.w3c.dom.Element)>($r7);

        return;
    }

    public void testMapPolicy() throws java.lang.Exception
    {
        org.apache.log4j.rewrite.RewriteAppenderTest r0;
        org.apache.log4j.Logger r1;
        java.util.TreeMap $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.rewrite.RewriteAppenderTest;

        virtualinvoke r0.<org.apache.log4j.rewrite.RewriteAppenderTest: void configure(java.lang.String)>("map.xml");

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/rewrite/RewriteAppenderTest");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>("Message 0");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("p1", "Hola");

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p1", "Hello");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p2", "World");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("x1", "Mundo");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>($r3);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", "Message 1");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>($r3);

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.Class,java.lang.String,java.lang.String)>(class "org/apache/log4j/rewrite/RewriteAppenderTest", "temp", "map.log");

        staticinvoke <org.apache.log4j.rewrite.RewriteAppenderTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testReflectionPolicy() throws java.lang.Exception
    {
        org.apache.log4j.rewrite.RewriteAppenderTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.rewrite.RewriteAppenderTest$BaseBean $r2;
        org.apache.log4j.rewrite.RewriteAppenderTest$MessageBean $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.rewrite.RewriteAppenderTest;

        virtualinvoke r0.<org.apache.log4j.rewrite.RewriteAppenderTest: void configure(java.lang.String)>("reflection.xml");

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/rewrite/RewriteAppenderTest");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>("Message 0");

        $r2 = new org.apache.log4j.rewrite.RewriteAppenderTest$BaseBean;

        specialinvoke $r2.<org.apache.log4j.rewrite.RewriteAppenderTest$BaseBean: void <init>(java.lang.Object,java.lang.Object)>("Hello", "World");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>($r2);

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("p1", "Hola");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("p2", "p2");

        $r3 = new org.apache.log4j.rewrite.RewriteAppenderTest$MessageBean;

        specialinvoke $r3.<org.apache.log4j.rewrite.RewriteAppenderTest$MessageBean: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>("Welcome to The Hub", "Hello", "World");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>($r3);

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.Class,java.lang.String,java.lang.String)>(class "org/apache/log4j/rewrite/RewriteAppenderTest", "temp", "reflection.log");

        staticinvoke <org.apache.log4j.rewrite.RewriteAppenderTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testPropertyPolicy() throws java.lang.Exception
    {
        org.apache.log4j.rewrite.RewriteAppenderTest r0;
        org.apache.log4j.Logger r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.rewrite.RewriteAppenderTest;

        virtualinvoke r0.<org.apache.log4j.rewrite.RewriteAppenderTest: void configure(java.lang.String)>("property.xml");

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/rewrite/RewriteAppenderTest");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>("Message 0");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("p1", "Hola");

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>("Message 1");

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.Class,java.lang.String,java.lang.String)>(class "org/apache/log4j/rewrite/RewriteAppenderTest", "temp", "property.log");

        staticinvoke <org.apache.log4j.rewrite.RewriteAppenderTest: void assertTrue(boolean)>($z0);

        return;
    }
}
