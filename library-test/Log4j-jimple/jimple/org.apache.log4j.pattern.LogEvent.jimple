public class org.apache.log4j.pattern.LogEvent extends java.lang.Object implements java.io.Serializable
{
    private static long startTime;
    public final transient java.lang.String fqnOfCategoryClass;
    private transient org.apache.log4j.Category logger;
    public final java.lang.String categoryName;
    public transient org.apache.log4j.Priority level;
    private java.lang.String ndc;
    private java.util.Hashtable mdcCopy;
    private boolean ndcLookupRequired;
    private boolean mdcCopyLookupRequired;
    private transient java.lang.Object message;
    private java.lang.String renderedMessage;
    private java.lang.String threadName;
    private org.apache.log4j.spi.ThrowableInformation throwableInfo;
    public final long timeStamp;
    private org.apache.log4j.spi.LocationInfo locationInfo;
    static final long serialVersionUID;
    static final java.lang.Integer[] PARAM_ARRAY;
    static final java.lang.String TO_LEVEL;
    static final java.lang.Class[] TO_LEVEL_PARAMS;
    static final java.util.Hashtable methodCache;

    static void <clinit>()
    {
        long $l0;
        java.lang.Integer[] $r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        java.util.Hashtable $r3;

        <org.apache.log4j.pattern.LogEvent: java.lang.String TO_LEVEL> = "toLevel";

        <org.apache.log4j.pattern.LogEvent: long serialVersionUID> = -868428216207166145L;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        <org.apache.log4j.pattern.LogEvent: long startTime> = $l0;

        $r0 = newarray (java.lang.Integer)[1];

        <org.apache.log4j.pattern.LogEvent: java.lang.Integer[] PARAM_ARRAY> = $r0;

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[0] = $r2;

        <org.apache.log4j.pattern.LogEvent: java.lang.Class[] TO_LEVEL_PARAMS> = $r1;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>(int)>(3);

        <org.apache.log4j.pattern.LogEvent: java.util.Hashtable methodCache> = $r3;

        return;
    }

    public void <init>(java.lang.String, org.apache.log4j.Category, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String r1, $r6;
        org.apache.log4j.Category r2;
        org.apache.log4j.Priority r3;
        java.lang.Object r4;
        java.lang.Throwable r5;
        long $l0;
        org.apache.log4j.spi.ThrowableInformation $r7;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.log4j.Category;

        r3 := @parameter2: org.apache.log4j.Priority;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.pattern.LogEvent: boolean ndcLookupRequired> = 1;

        r0.<org.apache.log4j.pattern.LogEvent: boolean mdcCopyLookupRequired> = 1;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String fqnOfCategoryClass> = r1;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Category logger> = r2;

        $r6 = virtualinvoke r2.<org.apache.log4j.Category: java.lang.String getName()>();

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String categoryName> = $r6;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level> = r3;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message> = r4;

        if r5 == null goto label1;

        $r7 = new org.apache.log4j.spi.ThrowableInformation;

        specialinvoke $r7.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>(r5);

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.ThrowableInformation throwableInfo> = $r7;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.log4j.pattern.LogEvent: long timeStamp> = $l0;

        return;
    }

    public void <init>(java.lang.String, org.apache.log4j.Category, long, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String r1, $r6;
        org.apache.log4j.Category r2;
        long l0;
        org.apache.log4j.Priority r3;
        java.lang.Object r4;
        java.lang.Throwable r5;
        org.apache.log4j.spi.ThrowableInformation $r7;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.log4j.Category;

        l0 := @parameter2: long;

        r3 := @parameter3: org.apache.log4j.Priority;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.pattern.LogEvent: boolean ndcLookupRequired> = 1;

        r0.<org.apache.log4j.pattern.LogEvent: boolean mdcCopyLookupRequired> = 1;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String fqnOfCategoryClass> = r1;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Category logger> = r2;

        $r6 = virtualinvoke r2.<org.apache.log4j.Category: java.lang.String getName()>();

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String categoryName> = $r6;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level> = r3;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message> = r4;

        if r5 == null goto label1;

        $r7 = new org.apache.log4j.spi.ThrowableInformation;

        specialinvoke $r7.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>(r5);

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.ThrowableInformation throwableInfo> = $r7;

     label1:
        r0.<org.apache.log4j.pattern.LogEvent: long timeStamp> = l0;

        return;
    }

    public void <init>(java.lang.String, org.apache.log4j.Logger, long, org.apache.log4j.Level, java.lang.Object, java.lang.String, org.apache.log4j.spi.ThrowableInformation, java.lang.String, org.apache.log4j.spi.LocationInfo, java.util.Map)
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String r1, r5, r7, $r11;
        org.apache.log4j.Logger r2;
        long l0;
        org.apache.log4j.Level r3;
        java.lang.Object r4;
        org.apache.log4j.spi.ThrowableInformation r6;
        org.apache.log4j.spi.LocationInfo r8;
        java.util.Map r9;
        java.util.Hashtable $r10;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.log4j.Logger;

        l0 := @parameter2: long;

        r3 := @parameter3: org.apache.log4j.Level;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: org.apache.log4j.spi.ThrowableInformation;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: org.apache.log4j.spi.LocationInfo;

        r9 := @parameter9: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.pattern.LogEvent: boolean ndcLookupRequired> = 1;

        r0.<org.apache.log4j.pattern.LogEvent: boolean mdcCopyLookupRequired> = 1;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String fqnOfCategoryClass> = r1;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Category logger> = r2;

        if r2 == null goto label1;

        $r11 = virtualinvoke r2.<org.apache.log4j.Logger: java.lang.String getName()>();

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String categoryName> = $r11;

        goto label2;

     label1:
        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String categoryName> = null;

     label2:
        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level> = r3;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message> = r4;

        if r6 == null goto label3;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.ThrowableInformation throwableInfo> = r6;

     label3:
        r0.<org.apache.log4j.pattern.LogEvent: long timeStamp> = l0;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String threadName> = r5;

        r0.<org.apache.log4j.pattern.LogEvent: boolean ndcLookupRequired> = 0;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String ndc> = r7;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.LocationInfo locationInfo> = r8;

        r0.<org.apache.log4j.pattern.LogEvent: boolean mdcCopyLookupRequired> = 0;

        if r9 == null goto label4;

        $r10 = new java.util.Hashtable;

        specialinvoke $r10.<java.util.Hashtable: void <init>(java.util.Map)>(r9);

        r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy> = $r10;

     label4:
        return;
    }

    public org.apache.log4j.spi.LocationInfo getLocationInformation()
    {
        org.apache.log4j.pattern.LogEvent r0;
        org.apache.log4j.spi.LocationInfo $r1, $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.LocationInfo locationInfo>;

        if $r1 != null goto label1;

        $r3 = new org.apache.log4j.spi.LocationInfo;

        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

        $r5 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String fqnOfCategoryClass>;

        specialinvoke $r3.<org.apache.log4j.spi.LocationInfo: void <init>(java.lang.Throwable,java.lang.String)>($r4, $r5);

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.LocationInfo locationInfo> = $r3;

     label1:
        $r2 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.LocationInfo locationInfo>;

        return $r2;
    }

    public org.apache.log4j.Level getLevel()
    {
        org.apache.log4j.pattern.LogEvent r0;
        org.apache.log4j.Priority $r1;
        org.apache.log4j.Level $r2;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level>;

        $r2 = (org.apache.log4j.Level) $r1;

        return $r2;
    }

    public java.lang.String getLoggerName()
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String categoryName>;

        return $r1;
    }

    public java.lang.Object getMessage()
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.Object $r1, $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message>;

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: java.lang.String getRenderedMessage()>();

        return $r2;
    }

    public java.lang.String getNDC()
    {
        org.apache.log4j.pattern.LogEvent r0;
        boolean $z0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $z0 = r0.<org.apache.log4j.pattern.LogEvent: boolean ndcLookupRequired>;

        if $z0 == 0 goto label1;

        r0.<org.apache.log4j.pattern.LogEvent: boolean ndcLookupRequired> = 0;

        $r2 = staticinvoke <org.apache.log4j.NDC: java.lang.String get()>();

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String ndc> = $r2;

     label1:
        $r1 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String ndc>;

        return $r1;
    }

    public java.lang.Object getMDC(java.lang.String)
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.util.Hashtable $r3, $r5;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy>;

        if $r3 == null goto label1;

        $r5 = r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy>;

        r2 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r4 = staticinvoke <org.apache.log4j.MDC: java.lang.Object get(java.lang.String)>(r1);

        return $r4;
    }

    public void getMDCCopy()
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.util.Hashtable r1, $r3;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $z0 = r0.<org.apache.log4j.pattern.LogEvent: boolean mdcCopyLookupRequired>;

        if $z0 == 0 goto label1;

        r0.<org.apache.log4j.pattern.LogEvent: boolean mdcCopyLookupRequired> = 0;

        r1 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object clone()>();

        $r3 = (java.util.Hashtable) $r2;

        r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy> = $r3;

     label1:
        return;
    }

    public java.lang.String getRenderedMessage()
    {
        org.apache.log4j.pattern.LogEvent r0;
        org.apache.log4j.spi.LoggerRepository r1;
        org.apache.log4j.spi.RendererSupport r2;
        java.lang.String $r3, $r8, $r11, $r13, $r14;
        java.lang.Object $r4, $r5, $r7, $r10, $r12;
        boolean $z0, $z1;
        org.apache.log4j.Category $r6;
        org.apache.log4j.or.RendererMap $r9;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r3 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String renderedMessage>;

        if $r3 != null goto label3;

        $r4 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message>;

        if $r4 == null goto label3;

        $r5 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message>;

        $z0 = $r5 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r12 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message>;

        $r13 = (java.lang.String) $r12;

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String renderedMessage> = $r13;

        goto label3;

     label1:
        $r6 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Category logger>;

        r1 = virtualinvoke $r6.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        $z1 = r1 instanceof org.apache.log4j.spi.RendererSupport;

        if $z1 == 0 goto label2;

        r2 = (org.apache.log4j.spi.RendererSupport) r1;

        $r9 = interfaceinvoke r2.<org.apache.log4j.spi.RendererSupport: org.apache.log4j.or.RendererMap getRendererMap()>();

        $r10 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message>;

        $r11 = virtualinvoke $r9.<org.apache.log4j.or.RendererMap: java.lang.String findAndRender(java.lang.Object)>($r10);

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String renderedMessage> = $r11;

        goto label3;

     label2:
        $r7 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object message>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String renderedMessage> = $r8;

     label3:
        $r14 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String renderedMessage>;

        return $r14;
    }

    public static long getStartTime()
    {
        long $l0;

        $l0 = <org.apache.log4j.pattern.LogEvent: long startTime>;

        return $l0;
    }

    public java.lang.String getThreadName()
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.Thread $r3;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String threadName>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>();

        r0.<org.apache.log4j.pattern.LogEvent: java.lang.String threadName> = $r4;

     label1:
        $r2 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String threadName>;

        return $r2;
    }

    public org.apache.log4j.spi.ThrowableInformation getThrowableInformation()
    {
        org.apache.log4j.pattern.LogEvent r0;
        org.apache.log4j.spi.ThrowableInformation $r1;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.ThrowableInformation throwableInfo>;

        return $r1;
    }

    public java.lang.String[] getThrowableStrRep()
    {
        org.apache.log4j.pattern.LogEvent r0;
        org.apache.log4j.spi.ThrowableInformation $r1, $r2;
        java.lang.String[] $r3;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.ThrowableInformation throwableInfo>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.ThrowableInformation throwableInfo>;

        $r3 = virtualinvoke $r2.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        return $r3;
    }

    private void readLevel(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.io.ObjectInputStream r1;
        int i0;
        java.lang.Class r2;
        java.lang.Object $r3, $r5, $r9;
        java.util.Hashtable $r4, $r12;
        java.lang.Integer $r6;
        java.lang.Integer[] $r7, $r8;
        org.apache.log4j.Level $r10, $r14, $r16;
        java.lang.Class[] $r11;
        java.lang.Exception $r15;
        java.lang.String r17;
        java.lang.reflect.Method r18;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.io.ObjectInputStream;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

     label1:
        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r17 = (java.lang.String) $r3;

        if r17 != null goto label2;

        $r14 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(int)>(i0);

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level> = $r14;

        goto label6;

     label2:
        $r4 = <org.apache.log4j.pattern.LogEvent: java.util.Hashtable methodCache>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (java.lang.reflect.Method) $r5;

        if r18 != null goto label3;

        r2 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>(r17);

        $r11 = <org.apache.log4j.pattern.LogEvent: java.lang.Class[] TO_LEVEL_PARAMS>;

        r18 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("toLevel", $r11);

        $r12 = <org.apache.log4j.pattern.LogEvent: java.util.Hashtable methodCache>;

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r18);

     label3:
        $r7 = <org.apache.log4j.pattern.LogEvent: java.lang.Integer[] PARAM_ARRAY>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0);

        $r7[0] = $r6;

        $r8 = <org.apache.log4j.pattern.LogEvent: java.lang.Integer[] PARAM_ARRAY>;

        $r9 = virtualinvoke r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

        $r10 = (org.apache.log4j.Level) $r9;

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level> = $r10;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>("Level deserialization failed, reverting to default.", $r15);

        $r16 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(int)>(i0);

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level> = $r16;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.io.ObjectInputStream r1;
        org.apache.log4j.spi.LocationInfo $r2, $r3;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        specialinvoke r0.<org.apache.log4j.pattern.LogEvent: void readLevel(java.io.ObjectInputStream)>(r1);

        $r2 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.LocationInfo locationInfo>;

        if $r2 != null goto label1;

        $r3 = new org.apache.log4j.spi.LocationInfo;

        specialinvoke $r3.<org.apache.log4j.spi.LocationInfo: void <init>(java.lang.Throwable,java.lang.String)>(null, null);

        r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.LocationInfo locationInfo> = $r3;

     label1:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.io.ObjectOutputStream r1;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: java.lang.String getThreadName()>();

        virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: java.lang.String getRenderedMessage()>();

        virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: java.lang.String getNDC()>();

        virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: void getMDCCopy()>();

        virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: java.lang.String[] getThrowableStrRep()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        specialinvoke r0.<org.apache.log4j.pattern.LogEvent: void writeLevel(java.io.ObjectOutputStream)>(r1);

        return;
    }

    private void writeLevel(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.io.ObjectOutputStream r1;
        java.lang.Class r2;
        org.apache.log4j.Priority $r3, $r4;
        int $i0;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r3 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level>;

        $i0 = virtualinvoke $r3.<org.apache.log4j.Priority: int toInt()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r4 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.Priority level>;

        r2 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        if r2 != class "org/apache/log4j/Level" goto label1;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        goto label2;

     label1:
        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

     label2:
        return;
    }

    public final void setProperty(java.lang.String, java.lang.String)
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String r1, r2;
        java.util.Hashtable $r3, $r4, $r5, $r7;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy>;

        if $r3 != null goto label1;

        virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: void getMDCCopy()>();

     label1:
        $r4 = r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy>;

        if $r4 != null goto label2;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy> = $r7;

     label2:
        $r5 = r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public final java.lang.String getProperty(java.lang.String)
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String r1, r3;
        java.lang.Object r2;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: java.lang.Object getMDC(java.lang.String)>(r1);

        r3 = null;

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

     label1:
        return r3;
    }

    public final boolean locationInformationExists()
    {
        org.apache.log4j.pattern.LogEvent r0;
        org.apache.log4j.spi.LocationInfo $r1;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: org.apache.log4j.spi.LocationInfo locationInfo>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final long getTimeStamp()
    {
        org.apache.log4j.pattern.LogEvent r0;
        long $l0;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $l0 = r0.<org.apache.log4j.pattern.LogEvent: long timeStamp>;

        return $l0;
    }

    public java.util.Set getPropertyKeySet()
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: java.util.Map getProperties()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Map getProperties()
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.util.Hashtable $r1;
        java.util.Map $r2, r4;
        java.util.HashMap $r3;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        virtualinvoke r0.<org.apache.log4j.pattern.LogEvent: void getMDCCopy()>();

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r4 = $r3;

        goto label2;

     label1:
        r4 = r0.<org.apache.log4j.pattern.LogEvent: java.util.Hashtable mdcCopy>;

     label2:
        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r4);

        return $r2;
    }

    public java.lang.String getFQNOfLoggerClass()
    {
        org.apache.log4j.pattern.LogEvent r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.pattern.LogEvent;

        $r1 = r0.<org.apache.log4j.pattern.LogEvent: java.lang.String fqnOfCategoryClass>;

        return $r1;
    }
}
