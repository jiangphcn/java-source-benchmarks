public final class org.apache.log4j.pattern.PatternParser extends java.lang.Object
{
    private static final char ESCAPE_CHAR;
    private static final int LITERAL_STATE;
    private static final int CONVERTER_STATE;
    private static final int DOT_STATE;
    private static final int MIN_STATE;
    private static final int MAX_STATE;
    private static final java.util.Map PATTERN_LAYOUT_RULES;
    private static final java.util.Map FILENAME_PATTERN_RULES;

    static void <clinit>()
    {
        java.util.HashMap $r2, $r33;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap $r32, $r38;

        <org.apache.log4j.pattern.PatternParser: int MAX_STATE> = 5;

        <org.apache.log4j.pattern.PatternParser: int MIN_STATE> = 4;

        <org.apache.log4j.pattern.PatternParser: int DOT_STATE> = 3;

        <org.apache.log4j.pattern.PatternParser: int CONVERTER_STATE> = 1;

        <org.apache.log4j.pattern.PatternParser: int LITERAL_STATE> = 0;

        <org.apache.log4j.pattern.PatternParser: char ESCAPE_CHAR> = 37;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(17);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", class "org/apache/log4j/pattern/LoggerPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logger", class "org/apache/log4j/pattern/LoggerPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("C", class "org/apache/log4j/pattern/ClassNamePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("class", class "org/apache/log4j/pattern/ClassNamePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("d", class "org/apache/log4j/pattern/DatePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("date", class "org/apache/log4j/pattern/DatePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("F", class "org/apache/log4j/pattern/FileLocationPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("file", class "org/apache/log4j/pattern/FileLocationPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("l", class "org/apache/log4j/pattern/FullLocationPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("L", class "org/apache/log4j/pattern/LineLocationPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("line", class "org/apache/log4j/pattern/LineLocationPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("m", class "org/apache/log4j/pattern/MessagePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", class "org/apache/log4j/pattern/MessagePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("n", class "org/apache/log4j/pattern/LineSeparatorPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("M", class "org/apache/log4j/pattern/MethodLocationPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("method", class "org/apache/log4j/pattern/MethodLocationPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p", class "org/apache/log4j/pattern/LevelPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("level", class "org/apache/log4j/pattern/LevelPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("r", class "org/apache/log4j/pattern/RelativeTimePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("relative", class "org/apache/log4j/pattern/RelativeTimePatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("t", class "org/apache/log4j/pattern/ThreadPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("thread", class "org/apache/log4j/pattern/ThreadPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("x", class "org/apache/log4j/pattern/NDCPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndc", class "org/apache/log4j/pattern/NDCPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("X", class "org/apache/log4j/pattern/PropertiesPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("properties", class "org/apache/log4j/pattern/PropertiesPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sn", class "org/apache/log4j/pattern/SequenceNumberPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sequenceNumber", class "org/apache/log4j/pattern/SequenceNumberPatternConverter");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("throwable", class "org/apache/log4j/pattern/ThrowableInformationPatternConverter");

        $r32 = new org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        specialinvoke $r32.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: void <init>(java.util.Map)>($r2);

        <org.apache.log4j.pattern.PatternParser: java.util.Map PATTERN_LAYOUT_RULES> = $r32;

        $r33 = new java.util.HashMap;

        specialinvoke $r33.<java.util.HashMap: void <init>(int)>(4);

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("d", class "org/apache/log4j/pattern/FileDatePatternConverter");

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("date", class "org/apache/log4j/pattern/FileDatePatternConverter");

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("i", class "org/apache/log4j/pattern/IntegerPatternConverter");

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("index", class "org/apache/log4j/pattern/IntegerPatternConverter");

        $r38 = new org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        specialinvoke $r38.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: void <init>(java.util.Map)>($r33);

        <org.apache.log4j.pattern.PatternParser: java.util.Map FILENAME_PATTERN_RULES> = $r38;

        return;
    }

    private void <init>()
    {
        org.apache.log4j.pattern.PatternParser r0;

        r0 := @this: org.apache.log4j.pattern.PatternParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Map getPatternLayoutRules()
    {
        java.util.Map $r0;

        $r0 = <org.apache.log4j.pattern.PatternParser: java.util.Map PATTERN_LAYOUT_RULES>;

        return $r0;
    }

    public static java.util.Map getFileNamePatternRules()
    {
        java.util.Map $r0;

        $r0 = <org.apache.log4j.pattern.PatternParser: java.util.Map FILENAME_PATTERN_RULES>;

        return $r0;
    }

    private static int extractConverter(char, java.lang.String, int, java.lang.StringBuffer, java.lang.StringBuffer)
    {
        char c0, $c2, $c3, $c4;
        java.lang.String r0;
        java.lang.StringBuffer r1, r2;
        boolean $z0, $z1;
        int $i1, i5;

        c0 := @parameter0: char;

        r0 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        r1 := @parameter3: java.lang.StringBuffer;

        r2 := @parameter4: java.lang.StringBuffer;

        virtualinvoke r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierStart(char)>(c0);

        if $z0 != 0 goto label1;

        return i5;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        goto label3;

     label2:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i5 = i5 + 1;

     label3:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierPart(char)>($c2);

        if $z1 != 0 goto label2;

     label4:
        return i5;
    }

    private static int extractOptions(java.lang.String, int, java.util.List)
    {
        java.lang.String r0, r2;
        java.util.List r1;
        int i0, $i1, $i3, i4;
        char $c2;

        r0 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        goto label3;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(125, i4);

        if i0 != -1 goto label2;

        goto label4;

     label2:
        $i3 = i4 + 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, i0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        i4 = i0 + 1;

     label3:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        if $c2 == 123 goto label1;

     label4:
        return i4;
    }

    public static void parse(java.lang.String, java.util.List, java.util.List, java.util.Map, java.util.Map)
    {
        java.lang.String r0, $r11, $r24, $r31;
        java.util.List r1, r2;
        java.util.Map r3, r4;
        int i0, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i25;
        char c1, $c3;
        java.lang.StringBuffer $r6;
        org.apache.log4j.pattern.LiteralPatternConverter $r10, $r30;
        org.apache.log4j.pattern.FormattingInfo $r12, $r15, $r17, $r25, $r27, $r28, $r29, $r32, r34;
        boolean $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23;
        java.lang.NullPointerException $r33;
        byte b24;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.Map;

        r4 := @parameter4: java.util.Map;

        if r0 != null goto label01;

        $r33 = new java.lang.NullPointerException;

        specialinvoke $r33.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern");

        throw $r33;

     label01:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>(32);

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        b24 = 0;

        i25 = 0;

        r34 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        goto label22;

     label02:
        $i2 = i25;

        i25 = i25 + 1;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        tableswitch(b24)
        {
            case 0: goto label03;
            case 1: goto label09;
            case 2: goto label22;
            case 3: goto label18;
            case 4: goto label15;
            case 5: goto label20;
            default: goto label22;
        };

     label03:
        if i25 != i0 goto label04;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        goto label22;

     label04:
        if c1 != 37 goto label08;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i25);

        tableswitch($c3)
        {
            case 37: goto label05;
            default: goto label06;
        };

     label05:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        i25 = i25 + 1;

        goto label22;

     label06:
        $i4 = virtualinvoke $r6.<java.lang.StringBuffer: int length()>();

        if $i4 == 0 goto label07;

        $r10 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r11 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r11);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r12 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

     label07:
        virtualinvoke $r6.<java.lang.StringBuffer: void setLength(int)>(0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        b24 = 1;

        r34 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        goto label22;

     label08:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        goto label22;

     label09:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        lookupswitch(c1)
        {
            case 33: goto label11;
            case 45: goto label10;
            case 46: goto label12;
            default: goto label13;
        };

     label10:
        $r27 = new org.apache.log4j.pattern.FormattingInfo;

        $z8 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isRightTruncated()>();

        $i17 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i18 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        specialinvoke $r27.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,boolean,int,int)>(1, $z8, $i17, $i18);

        r34 = $r27;

        goto label22;

     label11:
        $r28 = new org.apache.log4j.pattern.FormattingInfo;

        $z9 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $i19 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i20 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        specialinvoke $r28.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,boolean,int,int)>($z9, 1, $i19, $i20);

        r34 = $r28;

        goto label22;

     label12:
        b24 = 3;

        goto label22;

     label13:
        if c1 < 48 goto label14;

        if c1 > 57 goto label14;

        $r29 = new org.apache.log4j.pattern.FormattingInfo;

        $z10 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $z11 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isRightTruncated()>();

        $i21 = c1 - 48;

        $i22 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        specialinvoke $r29.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,boolean,int,int)>($z10, $z11, $i21, $i22);

        r34 = $r29;

        b24 = 4;

        goto label22;

     label14:
        i25 = staticinvoke <org.apache.log4j.pattern.PatternParser: int finalizeConverter(char,java.lang.String,int,java.lang.StringBuffer,org.apache.log4j.pattern.FormattingInfo,java.util.Map,java.util.Map,java.util.List,java.util.List)>(c1, r0, i25, $r6, r34, r3, r4, r1, r2);

        b24 = 0;

        r34 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        virtualinvoke $r6.<java.lang.StringBuffer: void setLength(int)>(0);

        goto label22;

     label15:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        if c1 < 48 goto label16;

        if c1 > 57 goto label16;

        $r17 = new org.apache.log4j.pattern.FormattingInfo;

        $z4 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $z5 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isRightTruncated()>();

        $i10 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i12 = $i10 * 10;

        $i11 = c1 - 48;

        $i13 = $i12 + $i11;

        $i14 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        specialinvoke $r17.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,boolean,int,int)>($z4, $z5, $i13, $i14);

        r34 = $r17;

        goto label22;

     label16:
        if c1 != 46 goto label17;

        b24 = 3;

        goto label22;

     label17:
        i25 = staticinvoke <org.apache.log4j.pattern.PatternParser: int finalizeConverter(char,java.lang.String,int,java.lang.StringBuffer,org.apache.log4j.pattern.FormattingInfo,java.util.Map,java.util.Map,java.util.List,java.util.List)>(c1, r0, i25, $r6, r34, r3, r4, r1, r2);

        b24 = 0;

        r34 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        virtualinvoke $r6.<java.lang.StringBuffer: void setLength(int)>(0);

        goto label22;

     label18:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        if c1 < 48 goto label19;

        if c1 > 57 goto label19;

        $r25 = new org.apache.log4j.pattern.FormattingInfo;

        $z6 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $z7 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isRightTruncated()>();

        $i15 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i16 = c1 - 48;

        specialinvoke $r25.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,boolean,int,int)>($z6, $z7, $i15, $i16);

        r34 = $r25;

        b24 = 5;

        goto label22;

     label19:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error occured in position ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n Was expecting digit, instead got char \"");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r24);

        b24 = 0;

        goto label22;

     label20:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        if c1 < 48 goto label21;

        if c1 > 57 goto label21;

        $r15 = new org.apache.log4j.pattern.FormattingInfo;

        $z2 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $z3 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: boolean isRightTruncated()>();

        $i5 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i6 = virtualinvoke r34.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        $i8 = $i6 * 10;

        $i7 = c1 - 48;

        $i9 = $i8 + $i7;

        specialinvoke $r15.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,boolean,int,int)>($z2, $z3, $i5, $i9);

        r34 = $r15;

        goto label22;

     label21:
        i25 = staticinvoke <org.apache.log4j.pattern.PatternParser: int finalizeConverter(char,java.lang.String,int,java.lang.StringBuffer,org.apache.log4j.pattern.FormattingInfo,java.util.Map,java.util.Map,java.util.List,java.util.List)>(c1, r0, i25, $r6, r34, r3, r4, r1, r2);

        b24 = 0;

        r34 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        virtualinvoke $r6.<java.lang.StringBuffer: void setLength(int)>(0);

     label22:
        if i25 < i0 goto label02;

        $i23 = virtualinvoke $r6.<java.lang.StringBuffer: int length()>();

        if $i23 == 0 goto label23;

        $r30 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r31 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r31);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r30);

        $r32 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r32);

     label23:
        return;
    }

    private static org.apache.log4j.pattern.PatternConverter createConverter(java.lang.String, java.lang.StringBuffer, java.util.Map, java.util.Map, java.util.List)
    {
        java.lang.String r0, $r9, $r10, $r16, $r19, $r24, $r28, $r33, $r37, r39;
        java.lang.StringBuffer r1;
        java.util.Map r2, r3;
        java.util.List r4;
        java.lang.Object r5, $r38, r40;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8, $r15, $r17, $r18, $r21, $r22, $r23, $r26, $r27, $r30, $r31, $r32, $r35, $r36;
        java.lang.Class[] $r11;
        java.lang.Class $r12, r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.Object[] $r13, $r14;
        org.apache.log4j.pattern.PatternConverter $r20, r47;
        java.lang.Exception $r25, $r34;
        java.lang.ClassNotFoundException $r29;
        java.lang.reflect.Method r43;
        java.lang.String[] r44, r45;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.StringBuffer;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.Map;

        r4 := @parameter4: java.util.List;

        r39 = r0;

        r40 = null;

        i11 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label04;

     label01:
        r39 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>(0, i11);

        if r2 == null goto label02;

        r40 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r39);

     label02:
        if r40 != null goto label03;

        if r3 == null goto label03;

        r40 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r39);

     label03:
        i11 = i11 + -1;

     label04:
        if i11 <= 0 goto label05;

        if r40 == null goto label01;

     label05:
        if r40 != null goto label06;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unrecognized format specifier [");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r24);

        return null;

     label06:
        $z0 = r40 instanceof java.lang.Class;

        if $z0 == 0 goto label07;

        r41 = (java.lang.Class) r40;

        goto label12;

     label07:
        $z1 = r40 instanceof java.lang.String;

        if $z1 == 0 goto label11;

     label08:
        $r10 = (java.lang.String) r40;

        r41 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r10);

     label09:
        goto label12;

     label10:
        $r29 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class for conversion pattern %");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r33, $r29);

        return null;

     label11:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bad map entry for conversion pattern %");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r9);

        return null;

     label12:
        $r11 = newarray (java.lang.Class)[1];

        $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("[Ljava.lang.String;");

        $r11[0] = $r12;

        r43 = virtualinvoke r41.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newInstance", $r11);

        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        r44 = newarray (java.lang.String)[$i0];

        $r13 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r44);

        r45 = (java.lang.String[]) $r13;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r45;

        r5 = virtualinvoke r43.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r14);

        $z2 = r5 instanceof org.apache.log4j.pattern.PatternConverter;

        if $z2 == 0 goto label14;

        $i1 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = virtualinvoke r39.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $i5 = $i1 - $i4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i5);

        $r20 = (org.apache.log4j.pattern.PatternConverter) r5;

     label13:
        return $r20;

     label14:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class ");

        $r16 = virtualinvoke r41.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend PatternConverter.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r19);

     label15:
        goto label20;

     label16:
        $r34 := @caughtexception;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error creating converter for ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r37, $r34);

     label17:
        $r38 = virtualinvoke r41.<java.lang.Class: java.lang.Object newInstance()>();

        r47 = (org.apache.log4j.pattern.PatternConverter) $r38;

        $i6 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        $i8 = virtualinvoke r39.<java.lang.String: int length()>();

        $i9 = $i7 - $i8;

        $i10 = $i6 - $i9;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i10);

     label18:
        return r47;

     label19:
        $r25 := @caughtexception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error creating converter for ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r28, $r25);

     label20:
        return null;

        catch java.lang.ClassNotFoundException from label08 to label09 with label10;
        catch java.lang.Exception from label12 to label13 with label16;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Exception from label17 to label18 with label19;
    }

    private static int finalizeConverter(char, java.lang.String, int, java.lang.StringBuffer, org.apache.log4j.pattern.FormattingInfo, java.util.Map, java.util.Map, java.util.List, java.util.List)
    {
        char c0;
        java.lang.String r0, r8, $r14, $r17, $r20, $r22;
        java.lang.StringBuffer r1, $r11, $r16, $r24, r27;
        org.apache.log4j.pattern.FormattingInfo r2, $r15, $r23;
        java.util.Map r3, r4;
        java.util.List r5, r6;
        org.apache.log4j.pattern.PatternConverter r10;
        java.util.ArrayList $r12;
        int $i1, $i2, i3, i4, i5;
        org.apache.log4j.pattern.LiteralPatternConverter $r13, $r21;

        c0 := @parameter0: char;

        r0 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        r1 := @parameter3: java.lang.StringBuffer;

        r2 := @parameter4: org.apache.log4j.pattern.FormattingInfo;

        r3 := @parameter5: java.util.Map;

        r4 := @parameter6: java.util.Map;

        r5 := @parameter7: java.util.List;

        r6 := @parameter8: java.util.List;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        i4 = staticinvoke <org.apache.log4j.pattern.PatternParser: int extractConverter(char,java.lang.String,int,java.lang.StringBuffer,java.lang.StringBuffer)>(c0, r0, i3, $r11, r1);

        r8 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        i5 = staticinvoke <org.apache.log4j.pattern.PatternParser: int extractOptions(java.lang.String,int,java.util.List)>(r0, i4, $r12);

        r10 = staticinvoke <org.apache.log4j.pattern.PatternParser: org.apache.log4j.pattern.PatternConverter createConverter(java.lang.String,java.lang.StringBuffer,java.util.Map,java.util.Map,java.util.List)>(r8, r1, r3, r4, $r12);

        if r10 != null goto label4;

        if r8 == null goto label1;

        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

     label1:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>(java.lang.String)>("Empty conversion specifier starting at position ");

        r27 = $r16;

        goto label3;

     label2:
        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>(java.lang.String)>("Unrecognized conversion specifier [");

        r27 = $r24;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] starting at position ");

     label3:
        $r17 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i5);

        virtualinvoke r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        virtualinvoke r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in conversion pattern.");

        $r20 = virtualinvoke r27.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r20);

        $r21 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r22 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r22);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r23 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label5;

     label4:
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r10);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2);

        $i1 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        if $i1 <= 0 goto label5;

        $r13 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r14 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r14);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r15 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r15);

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: void setLength(int)>(0);

        return i5;
    }
}
