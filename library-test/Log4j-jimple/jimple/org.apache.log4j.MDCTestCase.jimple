public class org.apache.log4j.MDCTestCase extends junit.framework.TestCase
{

    public void <init>()
    {
        org.apache.log4j.MDCTestCase r0;

        r0 := @this: org.apache.log4j.MDCTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.log4j.MDCTestCase r0;

        r0 := @this: org.apache.log4j.MDCTestCase;

        staticinvoke <org.apache.log4j.MDC: void clear()>();

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.MDCTestCase r0;

        r0 := @this: org.apache.log4j.MDCTestCase;

        staticinvoke <org.apache.log4j.MDC: void clear()>();

        return;
    }

    public void testPut() throws java.lang.Exception
    {
        org.apache.log4j.MDCTestCase r0;
        java.lang.Object $r1;
        java.util.Hashtable $r2;
        int $i0;

        r0 := @this: org.apache.log4j.MDCTestCase;

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key", "some value");

        $r1 = staticinvoke <org.apache.log4j.MDC: java.lang.Object get(java.lang.String)>("key");

        staticinvoke <org.apache.log4j.MDCTestCase: void assertEquals(java.lang.Object,java.lang.Object)>("some value", $r1);

        $r2 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>();

        staticinvoke <org.apache.log4j.MDCTestCase: void assertEquals(int,int)>(1, $i0);

        return;
    }

    public void testRemoveLastKey() throws java.lang.Exception
    {
        org.apache.log4j.MDCTestCase r0;

        r0 := @this: org.apache.log4j.MDCTestCase;

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key", "some value");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key");

        specialinvoke r0.<org.apache.log4j.MDCTestCase: void checkThreadLocalsForLeaks()>();

        return;
    }

    private void checkThreadLocalsForLeaks() throws java.lang.Exception
    {
        org.apache.log4j.MDCTestCase r0;
        java.lang.reflect.Field r1, r2, r4;
        java.lang.Class r3, $r6, $r7;
        java.lang.Thread r5;
        java.lang.Object r8, r9;

        r0 := @this: org.apache.log4j.MDCTestCase;

        $r6 = class "java/lang/Thread";

        r1 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocals");

        virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r7 = class "java/lang/Thread";

        r2 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("inheritableThreadLocals");

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.ThreadLocal$ThreadLocalMap");

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("table");

        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r8 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r5);

        specialinvoke r0.<org.apache.log4j.MDCTestCase: void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)>(r8, r4);

        r9 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r5);

        specialinvoke r0.<org.apache.log4j.MDCTestCase: void checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)>(r9, r4);

        return;
    }

    private void checkThreadLocalMapForLeaks(java.lang.Object, java.lang.reflect.Field) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException
    {
        org.apache.log4j.MDCTestCase r0;
        java.lang.Object r1, r4, $r6, $r7, $r8;
        java.lang.reflect.Field r2;
        java.lang.Object[] r3;
        java.lang.String r5, $r15;
        java.lang.ref.Reference $r9;
        java.lang.Class $r10, $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        int i0, $i1;

        r0 := @this: org.apache.log4j.MDCTestCase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        if r1 == null goto label4;

        $r6 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.Object[]) $r6;

        if r3 == null goto label4;

        i0 = 0;

        goto label3;

     label1:
        $r7 = r3[i0];

        if $r7 == null goto label2;

        $r8 = r3[i0];

        $r9 = (java.lang.ref.Reference) $r8;

        r4 = virtualinvoke $r9.<java.lang.ref.Reference: java.lang.Object get()>();

        $r10 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        r5 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        if $r11 != class "org/apache/log4j/helpers/ThreadLocalMap" goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found a ThreadLocal with key of type [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.MDCTestCase: void fail(java.lang.String)>($r15);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = lengthof r3;

        if i0 < $i1 goto label1;

     label4:
        return;
    }
}
