public class org.apache.log4j.pattern.FormattingInfoTest extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.pattern.FormattingInfoTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.pattern.FormattingInfoTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void testGetDefault()
    {
        org.apache.log4j.pattern.FormattingInfoTest r0;
        org.apache.log4j.pattern.FormattingInfo r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.log4j.pattern.FormattingInfoTest;

        r1 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertNotNull(java.lang.Object)>(r1);

        $i0 = virtualinvoke r1.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(int,int)>(0, $i0);

        $i1 = virtualinvoke r1.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(int,int)>(2147483647, $i1);

        $z0 = virtualinvoke r1.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(boolean,boolean)>(0, $z0);

        return;
    }

    public void testConstructor()
    {
        org.apache.log4j.pattern.FormattingInfoTest r0;
        org.apache.log4j.pattern.FormattingInfo $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.log4j.pattern.FormattingInfoTest;

        $r2 = new org.apache.log4j.pattern.FormattingInfo;

        specialinvoke $r2.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>(1, 3, 6);

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertNotNull(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r2.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(int,int)>(3, $i0);

        $i1 = virtualinvoke $r2.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(int,int)>(6, $i1);

        $z0 = virtualinvoke $r2.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(boolean,boolean)>(1, $z0);

        return;
    }

    public void testTruncate()
    {
        org.apache.log4j.pattern.FormattingInfoTest r0;
        java.lang.StringBuffer $r3;
        org.apache.log4j.pattern.FormattingInfo $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.pattern.FormattingInfoTest;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>("foobar");

        $r4 = new org.apache.log4j.pattern.FormattingInfo;

        specialinvoke $r4.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>(1, 0, 3);

        virtualinvoke $r4.<org.apache.log4j.pattern.FormattingInfo: void format(int,java.lang.StringBuffer)>(2, $r3);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(java.lang.String,java.lang.String)>("fobar", $r5);

        return;
    }

    public void testPadLeft()
    {
        org.apache.log4j.pattern.FormattingInfoTest r0;
        java.lang.StringBuffer $r3;
        org.apache.log4j.pattern.FormattingInfo $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.pattern.FormattingInfoTest;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>("foobar");

        $r4 = new org.apache.log4j.pattern.FormattingInfo;

        specialinvoke $r4.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>(0, 5, 10);

        virtualinvoke $r4.<org.apache.log4j.pattern.FormattingInfo: void format(int,java.lang.StringBuffer)>(2, $r3);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(java.lang.String,java.lang.String)>("fo obar", $r5);

        return;
    }

    public void testPadRight()
    {
        org.apache.log4j.pattern.FormattingInfoTest r0;
        java.lang.StringBuffer $r3;
        org.apache.log4j.pattern.FormattingInfo $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.pattern.FormattingInfoTest;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>("foobar");

        $r4 = new org.apache.log4j.pattern.FormattingInfo;

        specialinvoke $r4.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>(1, 5, 10);

        virtualinvoke $r4.<org.apache.log4j.pattern.FormattingInfo: void format(int,java.lang.StringBuffer)>(2, $r3);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.pattern.FormattingInfoTest: void assertEquals(java.lang.String,java.lang.String)>("foobar ", $r5);

        return;
    }
}
