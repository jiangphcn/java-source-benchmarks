public class org.apache.log4j.rewrite.ReflectionRewritePolicy extends java.lang.Object implements org.apache.log4j.rewrite.RewritePolicy
{

    public void <init>()
    {
        org.apache.log4j.rewrite.ReflectionRewritePolicy r0;

        r0 := @this: org.apache.log4j.rewrite.ReflectionRewritePolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.log4j.spi.LoggingEvent rewrite(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.rewrite.ReflectionRewritePolicy r0;
        org.apache.log4j.spi.LoggingEvent r1, $r16;
        java.lang.Object r2, r32, r34;
        boolean $z0, $z1;
        java.util.HashMap $r4;
        java.util.Map $r5;
        java.lang.Class $r6;
        java.beans.BeanInfo $r7;
        int $i0, i2, $i3;
        java.beans.PropertyDescriptor $r8, $r10, $r13, $r27;
        java.lang.reflect.Method $r9;
        java.lang.String $r11, $r12, $r14, $r17, $r19, $r21, $r23, $r28, $r30;
        org.apache.log4j.Category $r18, $r36;
        long $l1;
        org.apache.log4j.Level $r20;
        org.apache.log4j.spi.ThrowableInformation $r22;
        org.apache.log4j.spi.LocationInfo $r24;
        java.lang.Exception $r25, $r31;
        java.lang.StringBuilder $r26, $r29;
        java.beans.PropertyDescriptor[] r33;

        r0 := @this: org.apache.log4j.rewrite.ReflectionRewritePolicy;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        r2 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        $z0 = r2 instanceof java.lang.String;

        if $z0 != 0 goto label12;

        r32 = r2;

        $r4 = new java.util.HashMap;

        $r5 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.util.Map getProperties()>();

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>($r5);

     label01:
        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class)>($r6, class "java/lang/Object");

        r33 = interfaceinvoke $r7.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        $i0 = lengthof r33;

        if $i0 <= 0 goto label12;

        i2 = 0;

        goto label07;

     label02:
        $r8 = r33[i2];

        $r9 = virtualinvoke $r8.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        r34 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, null);

        $r11 = "message";

        $r10 = r33[i2];

        $r12 = virtualinvoke $r10.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r12);

        if $z1 == 0 goto label03;

        r32 = r34;

        goto label06;

     label03:
        $r13 = r33[i2];

        $r14 = virtualinvoke $r13.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r34);

     label04:
        goto label06;

     label05:
        $r25 := @caughtexception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to evaluate property ");

        $r27 = r33[i2];

        $r28 = virtualinvoke $r27.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r30, $r25);

     label06:
        i2 = i2 + 1;

     label07:
        $i3 = lengthof r33;

        if i2 < $i3 goto label02;

        $r16 = new org.apache.log4j.spi.LoggingEvent;

        $r17 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getFQNOfLoggerClass()>();

        $r18 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Category getLogger()>();

        if $r18 == null goto label08;

        $r36 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Category getLogger()>();

        goto label09;

     label08:
        $r19 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        $r36 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>($r19);

     label09:
        $l1 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: long getTimeStamp()>();

        $r20 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        $r21 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        $r22 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.ThrowableInformation getThrowableInformation()>();

        $r23 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getNDC()>();

        $r24 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

        specialinvoke $r16.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,long,org.apache.log4j.Level,java.lang.Object,java.lang.String,org.apache.log4j.spi.ThrowableInformation,java.lang.String,org.apache.log4j.spi.LocationInfo,java.util.Map)>($r17, $r36, $l1, $r20, r32, $r21, $r22, $r23, $r24, $r4);

     label10:
        return $r16;

     label11:
        $r31 := @caughtexception;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>("Unable to get property descriptors", $r31);

     label12:
        return r1;

        catch java.lang.Exception from label02 to label04 with label05;
        catch java.lang.Exception from label01 to label10 with label11;
    }
}
