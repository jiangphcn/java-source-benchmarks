public class org.apache.log4j.PatternLayoutTestCase extends junit.framework.TestCase
{
    static java.lang.String TEMP;
    static java.lang.String FILTERED;
    org.apache.log4j.Logger root;
    org.apache.log4j.Logger logger;
    static java.lang.String EXCEPTION1;
    static java.lang.String EXCEPTION2;
    static java.lang.String EXCEPTION3;
    static java.lang.String EXCEPTION4;
    static java.lang.String EXCEPTION5;
    static java.lang.String PAT0;
    static java.lang.String PAT1;
    static java.lang.String PAT2;
    static java.lang.String PAT3;
    static java.lang.String PAT4;
    static java.lang.String PAT5;
    static java.lang.String PAT6;
    static java.lang.String PAT11a;
    static java.lang.String PAT11b;
    static java.lang.String PAT12;
    static java.lang.String PAT13;
    static java.lang.String PAT14;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        java.lang.String $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP> = "output/temp";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED> = "output/filtered";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1> = "java.lang.Exception: Just testing";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2> = "\\s*at .*\\(.*\\)";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3> = "\\s*at .*\\(Native Method\\)";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4> = "\\s*at .*\\(.*Compiled Code\\)";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5> = "\\s*at .*\\(.*libgcj.*\\)";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT0> = "\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) .* - Message \\d{1,2}";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3} ");

        $r1 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT0>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT1> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{1,2} .{2,6}\\.? 2\\d{3} \\d{2}:\\d{2}:\\d{2},\\d{3} ");

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT0>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT2> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{2}:\\d{2}:\\d{2},\\d{3} ");

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT0>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT3> = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("^\\d{1,10} ");

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT0>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT4> = $r15;

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT5> = "\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) .* : Message \\d{1,2}";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT6> = "\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) org.apache.log4j.PatternLayoutTestCase.common\\(PatternLayoutTestCase.java(:\\d{1,4})?\\): Message \\d{1,2}";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT11a> = "^(TRACE|DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ log4j.PatternLayoutTestCase: Message \\d{1,2}";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT11b> = "^(TRACE|DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ root: Message \\d{1,2}";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT12> = "^\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) org.apache.log4j.PatternLayoutTestCase.common\\(PatternLayoutTestCase.java:\\d{3}\\): Message \\d{1,2}";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT13> = "^\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) apache.log4j.PatternLayoutTestCase.common\\(PatternLayoutTestCase.java:\\d{3}\\): Message \\d{1,2}";

        <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT14> = "^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL)\\ \\d{1,2}\\ *- Message \\d{1,2}";

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.Logger $r1, $r2;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root> = $r1;

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/PatternLayoutTestCase");

        r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger> = $r2;

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.spi.LoggerRepository $r2;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        $r1 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        return;
    }

    public void test1() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.Filter[] $r1;
        org.apache.log4j.util.LineNumberFilter $r2;
        java.lang.String $r3, $r4, $r7;
        org.apache.log4j.util.SunReflectFilter $r5;
        org.apache.log4j.util.JunitTestRunnerFilter $r6;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout1.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r3 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r1 = newarray (org.apache.log4j.util.Filter)[3];

        $r2 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r2.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r1[0] = $r2;

        $r5 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r5.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r1[1] = $r5;

        $r6 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r6.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r1[2] = $r6;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r3, $r4, $r1);

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r7, "witness/patternLayout.1");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test2() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.ISO8601Filter $r14;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout2.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT1>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[5];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.ISO8601Filter;

        specialinvoke $r14.<org.apache.log4j.util.ISO8601Filter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[3] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[4] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.2");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test3() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.ISO8601Filter $r14;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout3.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT1>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[5];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.ISO8601Filter;

        specialinvoke $r14.<org.apache.log4j.util.ISO8601Filter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[3] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[4] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.3");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test4() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.AbsoluteDateAndTimeFilter $r14;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout4.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT2>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[5];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.AbsoluteDateAndTimeFilter;

        specialinvoke $r14.<org.apache.log4j.util.AbsoluteDateAndTimeFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[3] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[4] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.4");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test5() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.AbsoluteDateAndTimeFilter $r14;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout5.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT2>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[5];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.AbsoluteDateAndTimeFilter;

        specialinvoke $r14.<org.apache.log4j.util.AbsoluteDateAndTimeFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[3] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[4] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.5");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test6() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.AbsoluteTimeFilter $r14;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout6.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT3>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[5];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.AbsoluteTimeFilter;

        specialinvoke $r14.<org.apache.log4j.util.AbsoluteTimeFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[3] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[4] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.6");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test7() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.AbsoluteTimeFilter $r14;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout7.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT3>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[5];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.AbsoluteTimeFilter;

        specialinvoke $r14.<org.apache.log4j.util.AbsoluteTimeFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[3] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[4] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.7");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test8() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.RelativeTimeFilter $r14;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout8.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT4>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[5];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.RelativeTimeFilter;

        specialinvoke $r14.<org.apache.log4j.util.RelativeTimeFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[3] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[4] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.8");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test9() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r16;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.SunReflectFilter $r14;
        org.apache.log4j.util.JunitTestRunnerFilter $r15;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout9.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT5>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[4];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r14.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r15.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[3] = $r15;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r16 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r16, "witness/patternLayout.9");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test10() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r16;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.SunReflectFilter $r14;
        org.apache.log4j.util.JunitTestRunnerFilter $r15;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout10.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT6>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[4];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r14.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r15.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[3] = $r15;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r16 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r16, "witness/patternLayout.10");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test11() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r17;
        org.apache.log4j.util.Filter[] $r11;
        org.apache.log4j.util.LineNumberFilter $r12;
        org.apache.log4j.util.SunReflectFilter $r15;
        org.apache.log4j.util.JunitTestRunnerFilter $r16;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout11.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[7];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT11a>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT11b>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[5] = $r9;

        $r10 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[6] = $r10;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r14 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r11 = newarray (org.apache.log4j.util.Filter)[4];

        $r11[0] = $r2;

        $r12 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r12.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r11[1] = $r12;

        $r15 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r15.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r11[2] = $r15;

        $r16 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r16.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r11[3] = $r16;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r13, $r14, $r11);

        $r17 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r17, "witness/patternLayout.11");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test12() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r16;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.SunReflectFilter $r14;
        org.apache.log4j.util.JunitTestRunnerFilter $r15;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout12.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT12>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[4];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r14.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r15.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[3] = $r15;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r16 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r16, "witness/patternLayout.12");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test13() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r16;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.SunReflectFilter $r14;
        org.apache.log4j.util.JunitTestRunnerFilter $r15;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout13.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT13>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[4];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r14.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r15.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[3] = $r15;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r16 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r16, "witness/patternLayout.13");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test14() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.util.ControlFilter $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r16;
        org.apache.log4j.util.Filter[] $r10;
        org.apache.log4j.util.LineNumberFilter $r11;
        org.apache.log4j.util.SunReflectFilter $r14;
        org.apache.log4j.util.JunitTestRunnerFilter $r15;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout14.properties");

        virtualinvoke r0.<org.apache.log4j.PatternLayoutTestCase: void common()>();

        $r2 = new org.apache.log4j.util.ControlFilter;

        $r3 = newarray (java.lang.String)[6];

        $r4 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String PAT14>;

        $r3[0] = $r4;

        $r5 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION1>;

        $r3[1] = $r5;

        $r6 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION2>;

        $r3[2] = $r6;

        $r7 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION3>;

        $r3[3] = $r7;

        $r8 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION4>;

        $r3[4] = $r8;

        $r9 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String EXCEPTION5>;

        $r3[5] = $r9;

        specialinvoke $r2.<org.apache.log4j.util.ControlFilter: void <init>(java.lang.String[])>($r3);

        $r12 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $r13 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $r10 = newarray (org.apache.log4j.util.Filter)[4];

        $r10[0] = $r2;

        $r11 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r11.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r10[1] = $r11;

        $r14 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r14.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r10[2] = $r14;

        $r15 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r15.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r10[3] = $r15;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r12, $r13, $r10);

        $r16 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r16, "witness/patternLayout.14");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMDC1() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.Logger $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout.mdc.1.properties");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key1", "va11");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key2", "va12");

        $r1 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Hello World");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key1");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key2");

        $r2 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r2, "witness/patternLayout.mdc.1");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMDCClear() throws java.lang.Exception
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        org.apache.log4j.Logger $r1, $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>("input/patternLayout.mdc.1.properties");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key1", "va11");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key2", "va12");

        $r1 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Hello World");

        staticinvoke <org.apache.log4j.MDC: void clear()>();

        $r2 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Hello World");

        $r3 = <org.apache.log4j.PatternLayoutTestCase: java.lang.String TEMP>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r3, "witness/patternLayout.mdc.clear");

        staticinvoke <org.apache.log4j.PatternLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    void common()
    {
        org.apache.log4j.PatternLayoutTestCase r0;
        java.lang.String r1, $r8, $r12, $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r44, $r49, $r54, $r59, $r63, $r67, $r71, $r75, $r80;
        java.lang.Thread $r3, $r4, $r81;
        java.lang.StringBuilder $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r48, $r50, $r53, $r56, $r58, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r76, $r79;
        org.apache.log4j.Logger $r6, $r10, $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r46, $r51, $r57, $r61, $r65, $r69, $r73, $r77;
        org.apache.log4j.Level $r47, $r52, $r78;
        java.lang.Exception $r55;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12;

        r0 := @this: org.apache.log4j.PatternLayoutTestCase;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void setName(java.lang.String)>("main");

        $r6 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i1 = -1 + 1;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r8);

        $r10 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r12);

        $r14 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i2 = i1 + 1;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r16);

        $r18 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r20);

        $r22 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i3 = i2 + 1;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<org.apache.log4j.Logger: void info(java.lang.Object)>($r24);

        $r26 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<org.apache.log4j.Logger: void info(java.lang.Object)>($r28);

        $r30 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i4 = i3 + 1;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r32);

        $r34 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r36);

        $r38 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i5 = i4 + 1;

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<org.apache.log4j.Logger: void error(java.lang.Object)>($r40);

        $r42 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<org.apache.log4j.Logger: void error(java.lang.Object)>($r44);

        $r46 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r47 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i6 = i5 + 1;

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r47, $r49);

        $r51 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger root>;

        $r52 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r51.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r52, $r54);

        $r55 = new java.lang.Exception;

        specialinvoke $r55.<java.lang.Exception: void <init>(java.lang.String)>("Just testing");

        $r57 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i7 = i6 + 1;

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)>($r59, $r55);

        $r61 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i8 = i7 + 1;

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r61.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>($r63, $r55);

        $r65 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i9 = i8 + 1;

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r65.<org.apache.log4j.Logger: void info(java.lang.Object,java.lang.Throwable)>($r67, $r55);

        $r69 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i10 = i9 + 1;

        $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r69.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>($r71, $r55);

        $r73 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i11 = i10 + 1;

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r73.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r75, $r55);

        $r77 = r0.<org.apache.log4j.PatternLayoutTestCase: org.apache.log4j.Logger logger>;

        $r78 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i12 = i11 + 1;

        $r79 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r77.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r78, $r80, $r55);

        $r81 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r81.<java.lang.Thread: void setName(java.lang.String)>(r1);

        return;
    }
}
