public class org.apache.log4j.RollingFileAppender extends org.apache.log4j.FileAppender
{
    protected long maxFileSize;
    protected int maxBackupIndex;
    private long nextRollover;

    public void <init>()
    {
        org.apache.log4j.RollingFileAppender r0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        specialinvoke r0.<org.apache.log4j.FileAppender: void <init>()>();

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = 10485760L;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = 1;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

        return;
    }

    public void <init>(org.apache.log4j.Layout, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.log4j.RollingFileAppender r0;
        org.apache.log4j.Layout r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: org.apache.log4j.Layout;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>(r1, r2, z0);

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = 10485760L;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = 1;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

        return;
    }

    public void <init>(org.apache.log4j.Layout, java.lang.String) throws java.io.IOException
    {
        org.apache.log4j.RollingFileAppender r0;
        org.apache.log4j.Layout r1;
        java.lang.String r2;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: org.apache.log4j.Layout;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r1, r2);

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = 10485760L;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = 1;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

        return;
    }

    public int getMaxBackupIndex()
    {
        org.apache.log4j.RollingFileAppender r0;
        int $i0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        $i0 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        return $i0;
    }

    public long getMaximumFileSize()
    {
        org.apache.log4j.RollingFileAppender r0;
        long $l0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        $l0 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        return $l0;
    }

    public void rollOver()
    {
        org.apache.log4j.RollingFileAppender r0;
        org.apache.log4j.helpers.QuietWriter $r1, $r47;
        java.lang.StringBuilder $r2, $r3, $r7, $r10, $r11, $r14, $r17, $r18, $r22, $r23, $r24, $r25, $r29, $r32, $r33, $r36, $r39, $r40, $r42, $r43, $r44, $r45, $r49, $r50, $r53, $r55, $r56, $r60, $r62, $r63;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i10;
        java.lang.String $r4, $r5, $r8, $r9, $r12, $r15, $r16, $r19, $r21, $r26, $r27, $r30, $r31, $r34, $r37, $r38, $r41, $r46, $r51, $r54, $r57, $r61, $r64;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.io.File $r6, $r13, $r20, $r28, $r35;
        org.apache.log4j.helpers.CountingQuietWriter $r48;
        long $l7, $l8, l9;
        java.io.IOException $r52, $r59;
        java.lang.Thread $r58, $r65;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        $r1 = r0.<org.apache.log4j.RollingFileAppender: org.apache.log4j.helpers.QuietWriter qw>;

        if $r1 == null goto label01;

        $r47 = r0.<org.apache.log4j.RollingFileAppender: org.apache.log4j.helpers.QuietWriter qw>;

        $r48 = (org.apache.log4j.helpers.CountingQuietWriter) $r47;

        l9 = virtualinvoke $r48.<org.apache.log4j.helpers.CountingQuietWriter: long getCount()>();

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("rolling over count=");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l9);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r51);

        $l7 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        $l8 = l9 + $l7;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = $l8;

     label01:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("maxBackupIndex=");

        $i0 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r4);

        z6 = 1;

        $i1 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        if $i1 <= 0 goto label11;

        $r6 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        $r8 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i3 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r12);

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label02;

        z6 = virtualinvoke $r6.<java.io.File: boolean delete()>();

     label02:
        $i4 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        i10 = $i4 - 1;

        goto label05;

     label03:
        $r28 = new java.io.File;

        $r29 = new java.lang.StringBuilder;

        $r30 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r30);

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>($r31);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.File: void <init>(java.lang.String)>($r34);

        $z3 = virtualinvoke $r28.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label04;

        $r35 = new java.io.File;

        $r36 = new java.lang.StringBuilder;

        $r37 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $r38 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r37);

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>($r38);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i6 = i10 + 1;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.io.File: void <init>(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("Renaming file ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r46);

        z6 = virtualinvoke $r28.<java.io.File: boolean renameTo(java.io.File)>($r35);

     label04:
        i10 = i10 + -1;

     label05:
        if i10 < 1 goto label06;

        if z6 != 0 goto label03;

     label06:
        if z6 == 0 goto label11;

        $r13 = new java.io.File;

        $r14 = new java.lang.StringBuilder;

        $r15 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r19);

        virtualinvoke r0.<org.apache.log4j.RollingFileAppender: void closeFile()>();

        $r20 = new java.io.File;

        $r21 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Renaming file ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26);

        z6 = virtualinvoke $r20.<java.io.File: boolean renameTo(java.io.File)>($r13);

        if z6 != 0 goto label11;

     label07:
        $r27 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $z2 = r0.<org.apache.log4j.RollingFileAppender: boolean bufferedIO>;

        $i5 = r0.<org.apache.log4j.RollingFileAppender: int bufferSize>;

        virtualinvoke r0.<org.apache.log4j.RollingFileAppender: void setFile(java.lang.String,boolean,boolean,int)>($r27, 1, $z2, $i5);

     label08:
        goto label11;

     label09:
        $r52 := @caughtexception;

        $z4 = $r52 instanceof java.io.InterruptedIOException;

        if $z4 == 0 goto label10;

        $r58 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r58.<java.lang.Thread: void interrupt()>();

     label10:
        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFile(");

        $r54 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", true) call failed.");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r57, $r52);

     label11:
        if z6 == 0 goto label16;

     label12:
        $r5 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $z0 = r0.<org.apache.log4j.RollingFileAppender: boolean bufferedIO>;

        $i2 = r0.<org.apache.log4j.RollingFileAppender: int bufferSize>;

        virtualinvoke r0.<org.apache.log4j.RollingFileAppender: void setFile(java.lang.String,boolean,boolean,int)>($r5, 0, $z0, $i2);

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

     label13:
        goto label16;

     label14:
        $r59 := @caughtexception;

        $z5 = $r59 instanceof java.io.InterruptedIOException;

        if $z5 == 0 goto label15;

        $r65 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r65.<java.lang.Thread: void interrupt()>();

     label15:
        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFile(");

        $r61 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", false) call failed.");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r64, $r59);

     label16:
        return;

        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label12 to label13 with label14;
    }

    public synchronized void setFile(java.lang.String, boolean, boolean, int) throws java.io.IOException
    {
        org.apache.log4j.RollingFileAppender r0;
        java.lang.String r1;
        boolean z0, z1, $z2;
        int i0, $i1;
        java.io.File $r3;
        org.apache.log4j.helpers.QuietWriter $r4;
        org.apache.log4j.helpers.CountingQuietWriter $r5;
        long $l2;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        $z2 = r0.<org.apache.log4j.RollingFileAppender: boolean bufferedIO>;

        $i1 = r0.<org.apache.log4j.RollingFileAppender: int bufferSize>;

        specialinvoke r0.<org.apache.log4j.FileAppender: void setFile(java.lang.String,boolean,boolean,int)>(r1, z0, $z2, $i1);

        if z0 == 0 goto label1;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);

        $r4 = r0.<org.apache.log4j.RollingFileAppender: org.apache.log4j.helpers.QuietWriter qw>;

        $r5 = (org.apache.log4j.helpers.CountingQuietWriter) $r4;

        $l2 = virtualinvoke $r3.<java.io.File: long length()>();

        virtualinvoke $r5.<org.apache.log4j.helpers.CountingQuietWriter: void setCount(long)>($l2);

     label1:
        return;
    }

    public void setMaxBackupIndex(int)
    {
        org.apache.log4j.RollingFileAppender r0;
        int i0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        i0 := @parameter0: int;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = i0;

        return;
    }

    public void setMaximumFileSize(long)
    {
        org.apache.log4j.RollingFileAppender r0;
        long l0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        l0 := @parameter0: long;

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = l0;

        return;
    }

    public void setMaxFileSize(java.lang.String)
    {
        org.apache.log4j.RollingFileAppender r0;
        java.lang.String r1;
        long $l0, $l1, $l2;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        $l1 = $l0 + 1L;

        $l2 = staticinvoke <org.apache.log4j.helpers.OptionConverter: long toFileSize(java.lang.String,long)>(r1, $l1);

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = $l2;

        return;
    }

    protected void setQWForFiles(java.io.Writer)
    {
        org.apache.log4j.RollingFileAppender r0;
        java.io.Writer r1;
        org.apache.log4j.helpers.CountingQuietWriter $r2;
        org.apache.log4j.spi.ErrorHandler $r3;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: java.io.Writer;

        $r2 = new org.apache.log4j.helpers.CountingQuietWriter;

        $r3 = r0.<org.apache.log4j.RollingFileAppender: org.apache.log4j.spi.ErrorHandler errorHandler>;

        specialinvoke $r2.<org.apache.log4j.helpers.CountingQuietWriter: void <init>(java.io.Writer,org.apache.log4j.spi.ErrorHandler)>(r1, $r3);

        r0.<org.apache.log4j.RollingFileAppender: org.apache.log4j.helpers.QuietWriter qw> = $r2;

        return;
    }

    protected void subAppend(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.RollingFileAppender r0;
        org.apache.log4j.spi.LoggingEvent r1;
        long l0, $l1, $l3;
        java.lang.String $r2;
        org.apache.log4j.helpers.QuietWriter $r3, $r4;
        org.apache.log4j.helpers.CountingQuietWriter $r5;
        byte $b2, $b4;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        specialinvoke r0.<org.apache.log4j.FileAppender: void subAppend(org.apache.log4j.spi.LoggingEvent)>(r1);

        $r2 = r0.<org.apache.log4j.RollingFileAppender: java.lang.String fileName>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.log4j.RollingFileAppender: org.apache.log4j.helpers.QuietWriter qw>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.log4j.RollingFileAppender: org.apache.log4j.helpers.QuietWriter qw>;

        $r5 = (org.apache.log4j.helpers.CountingQuietWriter) $r4;

        l0 = virtualinvoke $r5.<org.apache.log4j.helpers.CountingQuietWriter: long getCount()>();

        $l1 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $l3 = r0.<org.apache.log4j.RollingFileAppender: long nextRollover>;

        $b4 = l0 cmp $l3;

        if $b4 < 0 goto label1;

        virtualinvoke r0.<org.apache.log4j.RollingFileAppender: void rollOver()>();

     label1:
        return;
    }
}
