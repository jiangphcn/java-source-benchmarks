public class org.apache.log4j.Logger extends org.apache.log4j.Category
{
    private static final java.lang.String FQCN;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "org/apache/log4j/Logger";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <org.apache.log4j.Logger: java.lang.String FQCN> = $r1;

        return;
    }

    protected void <init>(java.lang.String)
    {
        org.apache.log4j.Logger r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.Logger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.Category: void <init>(java.lang.String)>(r1);

        return;
    }

    public static org.apache.log4j.Logger getLogger(java.lang.String)
    {
        java.lang.String r0;
        org.apache.log4j.Logger $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r0);

        return $r1;
    }

    public static org.apache.log4j.Logger getLogger(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.apache.log4j.Logger $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.log4j.Logger getRootLogger()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getRootLogger()>();

        return $r0;
    }

    public static org.apache.log4j.Logger getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory)
    {
        java.lang.String r0;
        org.apache.log4j.spi.LoggerFactory r1;
        org.apache.log4j.Logger $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.log4j.spi.LoggerFactory;

        $r2 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r0, r1);

        return $r2;
    }

    public void trace(java.lang.Object)
    {
        org.apache.log4j.Logger r0;
        java.lang.Object r1;
        org.apache.log4j.spi.LoggerRepository $r2;
        boolean $z0, $z1;
        org.apache.log4j.Level $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.log4j.Logger;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(5000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $r4 = virtualinvoke r0.<org.apache.log4j.Logger: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r3.<org.apache.log4j.Level: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r4);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.log4j.Logger: java.lang.String FQCN>;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        virtualinvoke r0.<org.apache.log4j.Logger: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, $r5, r1, null);

     label2:
        return;
    }

    public void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.log4j.Logger r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        org.apache.log4j.spi.LoggerRepository $r3;
        boolean $z0, $z1;
        org.apache.log4j.Level $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.log4j.Logger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r3.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(5000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $r5 = virtualinvoke r0.<org.apache.log4j.Logger: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r4.<org.apache.log4j.Level: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r5);

        if $z1 == 0 goto label2;

        $r7 = <org.apache.log4j.Logger: java.lang.String FQCN>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        virtualinvoke r0.<org.apache.log4j.Logger: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r7, $r6, r1, r2);

     label2:
        return;
    }

    public boolean isTraceEnabled()
    {
        org.apache.log4j.Logger r0;
        org.apache.log4j.spi.LoggerRepository $r1;
        boolean $z0, $z1;
        org.apache.log4j.Level $r2, $r3;

        r0 := @this: org.apache.log4j.Logger;

        $r1 = r0.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(5000);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Logger: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Level: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        return $z1;
    }
}
