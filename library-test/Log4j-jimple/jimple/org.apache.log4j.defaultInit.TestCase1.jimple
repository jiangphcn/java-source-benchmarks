public class org.apache.log4j.defaultInit.TestCase1 extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.defaultInit.TestCase1 r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.defaultInit.TestCase1;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.defaultInit.TestCase1 r0;

        r0 := @this: org.apache.log4j.defaultInit.TestCase1;

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.defaultInit.TestCase1 r0;

        r0 := @this: org.apache.log4j.defaultInit.TestCase1;

        staticinvoke <org.apache.log4j.LogManager: void shutdown()>();

        return;
    }

    public void noneTest()
    {
        org.apache.log4j.defaultInit.TestCase1 r0;
        org.apache.log4j.Logger r1;
        boolean z0, $z1;
        java.util.Enumeration $r2;

        r0 := @this: org.apache.log4j.defaultInit.TestCase1;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        $r2 = virtualinvoke r1.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>();

        z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        staticinvoke <org.apache.log4j.defaultInit.TestCase1: void assertTrue(boolean)>($z1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r1;
        org.apache.log4j.defaultInit.TestCase1 $r2;

        $r1 = new junit.framework.TestSuite;

        specialinvoke $r1.<junit.framework.TestSuite: void <init>()>();

        $r2 = new org.apache.log4j.defaultInit.TestCase1;

        specialinvoke $r2.<org.apache.log4j.defaultInit.TestCase1: void <init>(java.lang.String)>("noneTest");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        return $r1;
    }
}
