public class org.apache.log4j.LevelTest extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.LevelTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void testSerializeINFO() throws java.lang.Exception
    {
        org.apache.log4j.LevelTest r0;
        int[] r1;
        org.apache.log4j.Level $r2;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = newarray (int)[0];

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        staticinvoke <org.apache.log4j.util.SerializationTestHelper: void assertSerializationEquals(java.lang.String,java.lang.Object,int[],int)>("witness/serialization/info.bin", $r2, r1, 2147483647);

        return;
    }

    public void testDeserializeINFO() throws java.lang.Exception
    {
        org.apache.log4j.LevelTest r0;
        java.lang.Object r1;
        org.apache.log4j.Level r2, $r5;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <org.apache.log4j.util.SerializationTestHelper: java.lang.Object deserializeStream(java.lang.String)>("witness/serialization/info.bin");

        $z0 = r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        r2 = (org.apache.log4j.Level) r1;

        $r3 = virtualinvoke r2.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("INFO", $r3);

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("1.1.");

        if $z1 != 0 goto label3;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        if r1 != $r5 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z2);

     label3:
        return;
    }

    public void testCustomLevelSerialization() throws java.lang.Exception
    {
        org.apache.log4j.LevelTest r0;
        java.lang.Object r2;
        org.apache.log4j.LevelTest$CustomLevel r3, $r4;
        boolean $z0;
        org.apache.log4j.Level $r5, $r6, $r9;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7, $r8;

        r0 := @this: org.apache.log4j.LevelTest;

        $r4 = new org.apache.log4j.LevelTest$CustomLevel;

        specialinvoke $r4.<org.apache.log4j.LevelTest$CustomLevel: void <init>()>();

        r2 = staticinvoke <org.apache.log4j.util.SerializationTestHelper: java.lang.Object serializeClone(java.lang.Object)>($r4);

        $z0 = r2 instanceof org.apache.log4j.LevelTest$CustomLevel;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        r3 = (org.apache.log4j.LevelTest$CustomLevel) r2;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $i1 = $r5.<org.apache.log4j.Level: int level>;

        $i0 = r3.<org.apache.log4j.LevelTest$CustomLevel: int level>;

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(int,int)>($i1, $i0);

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r8 = $r6.<org.apache.log4j.Level: java.lang.String levelStr>;

        $r7 = r3.<org.apache.log4j.LevelTest$CustomLevel: java.lang.String levelStr>;

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>($r8, $r7);

        $r9 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $i3 = $r9.<org.apache.log4j.Level: int syslogEquivalent>;

        $i2 = r3.<org.apache.log4j.LevelTest$CustomLevel: int syslogEquivalent>;

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(int,int)>($i3, $i2);

        return;
    }

    public void testTraceInt()
    {
        org.apache.log4j.LevelTest r0;

        r0 := @this: org.apache.log4j.LevelTest;

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(int,int)>(5000, 5000);

        return;
    }

    public void testTrace()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1, $r3, $r4;
        java.lang.String $r2;
        int $i0, $i1;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("TRACE", $r2);

        $r3 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $i0 = virtualinvoke $r3.<org.apache.log4j.Level: int toInt()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(int,int)>(5000, $i0);

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $i1 = virtualinvoke $r4.<org.apache.log4j.Level: int getSyslogEquivalent()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(int,int)>(7, $i1);

        return;
    }

    public void testIntToTrace()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(int)>(5000);

        $r2 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("TRACE", $r2);

        return;
    }

    public void testStringToTrace()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String)>("TRACE");

        $r2 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("TRACE", $r2);

        return;
    }

    public void testLevelExtendsPriority()
    {
        org.apache.log4j.LevelTest r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = class "org/apache/log4j/Priority";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "org/apache/log4j/Level");

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testOFF()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level OFF>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testFATAL()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testERROR()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testWARN()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testINFO()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testDEBUG()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testTRACE()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testALL()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.LevelTest;

        $r1 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        $z0 = $r1 instanceof org.apache.log4j.Level;

        staticinvoke <org.apache.log4j.LevelTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testSerialVersionUID()
    {
        org.apache.log4j.LevelTest r0;

        r0 := @this: org.apache.log4j.LevelTest;

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(long,long)>(3491141966387921974L, 3491141966387921974L);

        return;
    }

    public void testIntToAll()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(int)>(-2147483648);

        $r2 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("ALL", $r2);

        return;
    }

    public void testIntToFatal()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(int)>(50000);

        $r2 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("FATAL", $r2);

        return;
    }

    public void testIntToOff()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(int)>(2147483647);

        $r2 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("OFF", $r2);

        return;
    }

    public void testToLevelUnrecognizedInt()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.log4j.LevelTest;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(int,org.apache.log4j.Level)>(17, $r2);

        $r3 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("FATAL", $r3);

        return;
    }

    public void testToLevelNull()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.log4j.LevelTest;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>(null, $r2);

        $r3 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("FATAL", $r3);

        return;
    }

    public void testDotlessLowerI()
    {
        org.apache.log4j.LevelTest r0;
        org.apache.log4j.Level r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String)>("\u0131nfo");

        $r2 = virtualinvoke r1.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("INFO", $r2);

        return;
    }

    public void testDottedLowerI()
    {
        org.apache.log4j.LevelTest r0;
        java.util.Locale r1, $r4;
        org.apache.log4j.Level r3;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.LevelTest;

        r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r4 = new java.util.Locale;

        specialinvoke $r4.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("tr", "TR");

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($r4);

        r3 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String)>("info");

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>(r1);

        $r5 = virtualinvoke r3.<org.apache.log4j.Level: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.LevelTest: void assertEquals(java.lang.String,java.lang.String)>("INFO", $r5);

        return;
    }
}
