class org.apache.log4j.helpers.PatternParser$LiteralPatternConverter extends org.apache.log4j.helpers.PatternConverter
{
    private java.lang.String literal;

    void <init>(java.lang.String)
    {
        org.apache.log4j.helpers.PatternParser$LiteralPatternConverter r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.helpers.PatternParser$LiteralPatternConverter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.helpers.PatternConverter: void <init>()>();

        r0.<org.apache.log4j.helpers.PatternParser$LiteralPatternConverter: java.lang.String literal> = r1;

        return;
    }

    public final void format(java.lang.StringBuffer, org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.helpers.PatternParser$LiteralPatternConverter r0;
        java.lang.StringBuffer r1;
        org.apache.log4j.spi.LoggingEvent r2;
        java.lang.String $r3;

        r0 := @this: org.apache.log4j.helpers.PatternParser$LiteralPatternConverter;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.apache.log4j.spi.LoggingEvent;

        $r3 = r0.<org.apache.log4j.helpers.PatternParser$LiteralPatternConverter: java.lang.String literal>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        return;
    }

    public java.lang.String convert(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.helpers.PatternParser$LiteralPatternConverter r0;
        org.apache.log4j.spi.LoggingEvent r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.helpers.PatternParser$LiteralPatternConverter;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r2 = r0.<org.apache.log4j.helpers.PatternParser$LiteralPatternConverter: java.lang.String literal>;

        return $r2;
    }
}
