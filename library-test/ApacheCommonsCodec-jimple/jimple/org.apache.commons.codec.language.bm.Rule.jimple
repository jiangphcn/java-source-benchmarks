public class org.apache.commons.codec.language.bm.Rule extends java.lang.Object
{
    public static final org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER;
    public static final java.lang.String ALL;
    private static final java.lang.String DOUBLE_QUOTE;
    private static final java.lang.String HASH_INCLUDE;
    private static final java.util.Map RULES;
    private final org.apache.commons.codec.language.bm.Rule$RPattern lContext;
    private final java.lang.String pattern;
    private final org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme;
    private final org.apache.commons.codec.language.bm.Rule$RPattern rContext;

    static void <clinit>()
    {
        org.apache.commons.codec.language.bm.NameType r0;
        int i0, i1, i2, i3;
        org.apache.commons.codec.language.bm.RuleType r3, $r22;
        org.apache.commons.codec.language.bm.Languages r6;
        java.lang.String r7, $r19, $r26, $r35, $r37;
        java.util.Iterator r8;
        org.apache.commons.codec.language.bm.Rule$1 $r10;
        java.util.EnumMap $r11, $r13;
        org.apache.commons.codec.language.bm.NameType[] $r12;
        org.apache.commons.codec.language.bm.RuleType[] $r14;
        java.util.HashMap $r15;
        java.util.Set $r16;
        boolean $z0, $z1;
        java.lang.Object $r17;
        java.util.Scanner $r18, $r25;
        java.util.Map $r20, $r23, $r27, $r29, $r30;
        java.lang.IllegalStateException $r32, $r33;
        java.lang.StringBuilder $r34, $r36;

        <org.apache.commons.codec.language.bm.Rule: java.lang.String HASH_INCLUDE> = "#include";

        <org.apache.commons.codec.language.bm.Rule: java.lang.String DOUBLE_QUOTE> = "\"";

        <org.apache.commons.codec.language.bm.Rule: java.lang.String ALL> = "ALL";

        $r10 = new org.apache.commons.codec.language.bm.Rule$1;

        specialinvoke $r10.<org.apache.commons.codec.language.bm.Rule$1: void <init>()>();

        <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER> = $r10;

        $r11 = new java.util.EnumMap;

        specialinvoke $r11.<java.util.EnumMap: void <init>(java.lang.Class)>(class "org/apache/commons/codec/language/bm/NameType");

        <org.apache.commons.codec.language.bm.Rule: java.util.Map RULES> = $r11;

        $r12 = staticinvoke <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType[] values()>();

        i0 = lengthof $r12;

        i2 = 0;

        goto label10;

     label01:
        r0 = $r12[i2];

        $r13 = new java.util.EnumMap;

        specialinvoke $r13.<java.util.EnumMap: void <init>(java.lang.Class)>(class "org/apache/commons/codec/language/bm/RuleType");

        $r14 = staticinvoke <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType[] values()>();

        i1 = lengthof $r14;

        i3 = 0;

        goto label09;

     label02:
        r3 = $r14[i3];

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r6 = staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType)>(r0);

        $r16 = virtualinvoke r6.<org.apache.commons.codec.language.bm.Languages: java.util.Set getLanguages()>();

        r8 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

        goto label07;

     label03:
        $r17 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r17;

     label04:
        $r18 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r3, r7);

        $r19 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r3, r7);

        $r20 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map parseRules(java.util.Scanner,java.lang.String)>($r18, $r19);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r20);

     label05:
        goto label07;

     label06:
        $r32 := @caughtexception;

        $r33 = new java.lang.IllegalStateException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Problem processing ");

        $r35 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r3, r7);

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r32);

        throw $r33;

     label07:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

        $r22 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        $z1 = virtualinvoke r3.<org.apache.commons.codec.language.bm.RuleType: boolean equals(java.lang.Object)>($r22);

        if $z1 != 0 goto label08;

        $r25 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r3, "common");

        $r26 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r3, "common");

        $r27 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map parseRules(java.util.Scanner,java.lang.String)>($r25, $r26);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("common", $r27);

     label08:
        $r23 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r15);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r23);

        i3 = i3 + 1;

     label09:
        if i3 < i1 goto label02;

        $r29 = <org.apache.commons.codec.language.bm.Rule: java.util.Map RULES>;

        $r30 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r13);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r30);

        i2 = i2 + 1;

     label10:
        if i2 < i0 goto label01;

        return;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
    }

    private static boolean contains(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        char c0, $c2;
        int $i1, i3;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i3 = 0;

        goto label3;

     label1:
        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        if $c2 != c0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

     label3:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i3 < $i1 goto label1;

        return 0;
    }

    private static java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        org.apache.commons.codec.language.bm.RuleType r1;
        java.lang.String r2, $r4, $r5, $r6;
        java.lang.Object[] $r3;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        r2 := @parameter2: java.lang.String;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = virtualinvoke r0.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r1.<org.apache.commons.codec.language.bm.RuleType: java.lang.String getName()>();

        $r3[1] = $r5;

        $r3[2] = r2;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("org/apache/commons/codec/language/bm/%s_%s_%s.txt", $r3);

        return $r6;
    }

    private static java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        org.apache.commons.codec.language.bm.RuleType r1;
        java.lang.String r2, r3, $r11;
        java.io.InputStream r4;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        java.util.Scanner $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r1, r2);

        $r5 = class "org/apache/commons/codec/language/bm/Languages";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r4 = virtualinvoke $r6.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r3);

        if r4 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load resource: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label1:
        $r7 = new java.util.Scanner;

        specialinvoke $r7.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r4, "UTF-8");

        return $r7;
    }

    private static java.util.Scanner createScanner(java.lang.String)
    {
        java.lang.String r0, r1, $r10;
        java.io.InputStream r2;
        java.lang.Object[] $r3;
        java.lang.Class $r4;
        java.lang.ClassLoader $r5;
        java.util.Scanner $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9;

        r0 := @parameter0: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("org/apache/commons/codec/language/bm/%s.txt", $r3);

        $r4 = class "org/apache/commons/codec/language/bm/Languages";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load resource: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label1:
        $r6 = new java.util.Scanner;

        specialinvoke $r6.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r2, "UTF-8");

        return $r6;
    }

    private static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1, $i2, $i3, i6, i7;
        char $c4, $c5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i6 = $i2 - 1;

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i7 = $i3 - 1;

        goto label4;

     label2:
        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i6);

        $c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i7);

        if $c4 == $c5 goto label3;

        return 0;

     label3:
        i6 = i6 + -1;

        i7 = i7 + -1;

     label4:
        if i7 >= 0 goto label2;

        return 1;
    }

    public static java.util.List getInstance(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        org.apache.commons.codec.language.bm.RuleType r1;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r2;
        java.util.Map r3;
        java.util.List r5;
        java.util.Iterator r6;
        java.util.ArrayList $r7;
        java.util.Collection $r8;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        r2 := @parameter2: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r0, r1, r2);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>();

        r6 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.List) $r9;

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>(r5);

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r7;
    }

    public static java.util.List getInstance(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        org.apache.commons.codec.language.bm.RuleType r1;
        java.lang.String r2;
        java.util.HashSet $r3;
        java.lang.String[] $r4;
        java.util.List $r5, $r7;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r6;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        r2 := @parameter2: java.lang.String;

        $r3 = new java.util.HashSet;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r2;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet 'from'(java.util.Set)>($r3);

        $r7 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r0, r1, $r6);

        return $r7;
    }

    public static java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        org.apache.commons.codec.language.bm.RuleType r1;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r2;
        boolean $z0;
        java.lang.String $r3;
        java.util.Map $r4;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        r2 := @parameter2: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        $z0 = virtualinvoke r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: java.lang.String getAny()>();

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r1, $r3);

        goto label2;

     label1:
        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>(r0, r1, "any");

     label2:
        return $r4;
    }

    public static java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, java.lang.String)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        org.apache.commons.codec.language.bm.RuleType r1;
        java.lang.String r2, $r12, $r13, $r14;
        java.util.Map r3, $r4, $r6, $r8;
        java.lang.Object $r5, $r7, $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.Object[] $r11;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r1 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        r2 := @parameter2: java.lang.String;

        $r4 = <org.apache.commons.codec.language.bm.Rule: java.util.Map RULES>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (java.util.Map) $r5;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (java.util.Map) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.util.Map) $r9;

        if r3 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = newarray (java.lang.Object)[3];

        $r12 = virtualinvoke r0.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>();

        $r11[0] = $r12;

        $r13 = virtualinvoke r1.<org.apache.commons.codec.language.bm.RuleType: java.lang.String getName()>();

        $r11[1] = $r13;

        $r11[2] = r2;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No rules found for %s, %s, %s.", $r11);

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        return r3;
    }

    private static org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)
    {
        java.lang.String r0, r1, r2;
        int i0, $i1, $i2, $i3;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r4, $r9;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r5, $r10;
        boolean $z0;
        java.util.HashSet $r6;
        java.lang.String[] $r7;
        java.util.List $r8;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("[");

        if i0 < 0 goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Phoneme expression contains a \'[\' but does not end in \']\'");

        throw $r11;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3);

        $r6 = new java.util.HashSet;

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("[+]");

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        specialinvoke $r6.<java.util.HashSet: void <init>(java.util.Collection)>($r8);

        $r9 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r10 = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet 'from'(java.util.Set)>($r6);

        specialinvoke $r9.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r1, $r10);

        return $r9;

     label2:
        $r4 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r5 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>;

        specialinvoke $r4.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r0, $r5);

        return $r4;
    }

    private static org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String)
    {
        java.lang.String r0, r2, r3;
        int i0, $i1, $i2, i3;
        boolean $z0, $z1, $z3, $z5;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r5, $r8, $r9;
        java.util.ArrayList $r6;
        java.lang.String[] $r7;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r10;
        java.lang.IllegalArgumentException $r11;
        org.apache.commons.codec.language.bm.Rule$PhonemeList $r12;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z0 == 0 goto label6;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(")");

        if $z1 != 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Phoneme starts with \'(\' so must end with \')\'");

        throw $r11;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("[|]");

        i0 = lengthof $r7;

        i3 = 0;

        goto label3;

     label2:
        r3 = $r7[i3];

        $r8 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)>(r3);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label2;

        $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("|");

        if $z3 != 0 goto label4;

        $z5 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("|");

        if $z5 == 0 goto label5;

     label4:
        $r9 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r10 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>;

        specialinvoke $r9.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>("", $r10);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9);

     label5:
        $r12 = new org.apache.commons.codec.language.bm.Rule$PhonemeList;

        specialinvoke $r12.<org.apache.commons.codec.language.bm.Rule$PhonemeList: void <init>(java.util.List)>($r6);

        return $r12;

     label6:
        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String)>(r0);

        return $r5;
    }

    private static java.util.Map parseRules(java.util.Scanner, java.lang.String)
    {
        java.util.Scanner r0, $r30;
        java.lang.String r1, r3, r4, r5, r8, $r10, $r11, $r12, $r13, $r14, $r16, $r27, $r28, $r29, $r32, $r35, $r42, $r49, r50, r51, r52, r54;
        int i0, $i2, $i3, $i4, $i5, i6;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr r6;
        java.util.HashMap $r9;
        boolean $z0, $z1, $z3, $z4, z5, $z6;
        org.apache.commons.codec.language.bm.Rule$2 $r15;
        java.lang.Object $r17;
        java.util.ArrayList $r18;
        java.lang.IllegalArgumentException $r20, $r37, $r43;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r25, $r26, $r31, $r33, $r34, $r38, $r39, $r40, $r41, $r45, $r46, $r47, $r48;
        java.util.Map $r36;
        java.lang.IllegalStateException $r44;
        java.lang.String[] r53;
        java.util.List r55;

        r0 := @parameter0: java.util.Scanner;

        r1 := @parameter1: java.lang.String;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        i6 = 0;

        z5 = 0;

        goto label12;

     label01:
        i6 = i6 + 1;

        r3 = virtualinvoke r0.<java.util.Scanner: java.lang.String nextLine()>();

        r50 = r3;

        if z5 == 0 goto label02;

        $z4 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z4 == 0 goto label12;

        z5 = 0;

        goto label12;

     label02:
        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("/*");

        if $z0 == 0 goto label03;

        z5 = 1;

        goto label12;

     label03:
        i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>("//");

        if i0 < 0 goto label04;

        r50 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label04:
        r51 = virtualinvoke r50.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke r51.<java.lang.String: int length()>();

        if $i2 != 0 goto label05;

        goto label12;

     label05:
        $z1 = virtualinvoke r51.<java.lang.String: boolean startsWith(java.lang.String)>("#include");

        if $z1 == 0 goto label07;

        $r28 = "#include";

        $i5 = virtualinvoke $r28.<java.lang.String: int length()>();

        $r29 = virtualinvoke r51.<java.lang.String: java.lang.String substring(int)>($i5);

        r52 = virtualinvoke $r29.<java.lang.String: java.lang.String trim()>();

        $z3 = virtualinvoke r52.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z3 == 0 goto label06;

        $r37 = new java.lang.IllegalArgumentException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed import statement \'");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r42);

        throw $r37;

     label06:
        $r30 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Scanner createScanner(java.lang.String)>(r52);

        $r31 = new java.lang.StringBuilder;

        $r32 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>($r32);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map parseRules(java.util.Scanner,java.lang.String)>($r30, $r35);

        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>($r36);

        goto label12;

     label07:
        r53 = virtualinvoke r51.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i3 = lengthof r53;

        if $i3 == 4 goto label08;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed rule statement split into ");

        $i4 = lengthof r53;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parts: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r20;

     label08:
        $r10 = r53[0];

        r54 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($r10);

        $r11 = r53[1];

        r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($r11);

        $r12 = r53[2];

        r5 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($r12);

        $r13 = r53[3];

        $r14 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)>($r13);

        r6 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String)>($r14);

        $r15 = new org.apache.commons.codec.language.bm.Rule$2;

        specialinvoke $r15.<org.apache.commons.codec.language.bm.Rule$2: void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r54, r4, r5, r6, i6, r1, r54, r4, r5);

        $r16 = $r15.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>;

        r8 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r17 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r55 = (java.util.List) $r17;

        if r55 != null goto label09;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r55 = $r18;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r18);

     label09:
        interfaceinvoke r55.<java.util.List: boolean add(java.lang.Object)>($r15);

     label10:
        goto label12;

     label11:
        $r43 := @caughtexception;

        $r44 = new java.lang.IllegalStateException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Problem parsing line \'");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r49, $r43);

        throw $r44;

     label12:
        $z6 = virtualinvoke r0.<java.util.Scanner: boolean hasNextLine()>();

        if $z6 != 0 goto label01;

        return $r9;

        catch java.lang.IllegalArgumentException from label08 to label10 with label11;
    }

    private static org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)
    {
        java.lang.String r0, r1, r2, r12;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i4, $i8;
        org.apache.commons.codec.language.bm.Rule$9 $r3;
        org.apache.commons.codec.language.bm.Rule$8 $r4;
        org.apache.commons.codec.language.bm.Rule$7 $r5;
        org.apache.commons.codec.language.bm.Rule$6 $r6;
        org.apache.commons.codec.language.bm.Rule$5 $r7;
        org.apache.commons.codec.language.bm.Rule$RPattern $r8;
        org.apache.commons.codec.language.bm.Rule$4 $r9;
        org.apache.commons.codec.language.bm.Rule$3 $r10;
        byte $b7;
        org.apache.commons.codec.language.bm.Rule$10 $r13;

        r0 := @parameter0: java.lang.String;

        z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("$");

        if z0 == 0 goto label01;

        $b7 = 1;

        goto label02;

     label01:
        $b7 = 0;

     label02:
        if z1 == 0 goto label03;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i8 = $i4 - 1;

        goto label04;

     label03:
        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

     label04:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($b7, $i8);

        z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");

        if z2 != 0 goto label10;

        if z0 == 0 goto label06;

        if z1 == 0 goto label06;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 != 0 goto label05;

        $r10 = new org.apache.commons.codec.language.bm.Rule$3;

        specialinvoke $r10.<org.apache.commons.codec.language.bm.Rule$3: void <init>()>();

        return $r10;

     label05:
        $r9 = new org.apache.commons.codec.language.bm.Rule$4;

        specialinvoke $r9.<org.apache.commons.codec.language.bm.Rule$4: void <init>(java.lang.String)>(r1);

        return $r9;

     label06:
        if z0 != 0 goto label07;

        if z1 == 0 goto label08;

     label07:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label08;

        $r8 = <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER>;

        return $r8;

     label08:
        if z0 == 0 goto label09;

        $r7 = new org.apache.commons.codec.language.bm.Rule$5;

        specialinvoke $r7.<org.apache.commons.codec.language.bm.Rule$5: void <init>(java.lang.String)>(r1);

        return $r7;

     label09:
        if z1 == 0 goto label16;

        $r6 = new org.apache.commons.codec.language.bm.Rule$6;

        specialinvoke $r6.<org.apache.commons.codec.language.bm.Rule$6: void <init>(java.lang.String)>(r1);

        return $r6;

     label10:
        z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        z4 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if z3 == 0 goto label16;

        if z4 == 0 goto label16;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $z7 = virtualinvoke r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");

        if $z7 != 0 goto label16;

        z5 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        if z5 == 0 goto label11;

        r12 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int)>(1);

     label11:
        r2 = r12;

        if z5 == 0 goto label12;

        $z8 = 0;

        goto label13;

     label12:
        $z8 = 1;

     label13:
        z6 = $z8;

        if z0 == 0 goto label14;

        if z1 == 0 goto label14;

        $r5 = new org.apache.commons.codec.language.bm.Rule$7;

        specialinvoke $r5.<org.apache.commons.codec.language.bm.Rule$7: void <init>(java.lang.String,boolean)>(r2, $z8);

        return $r5;

     label14:
        if z0 == 0 goto label15;

        $r4 = new org.apache.commons.codec.language.bm.Rule$8;

        specialinvoke $r4.<org.apache.commons.codec.language.bm.Rule$8: void <init>(java.lang.String,boolean)>(r2, z6);

        return $r4;

     label15:
        if z1 == 0 goto label16;

        $r3 = new org.apache.commons.codec.language.bm.Rule$9;

        specialinvoke $r3.<org.apache.commons.codec.language.bm.Rule$9: void <init>(java.lang.String,boolean)>(r2, z6);

        return $r3;

     label16:
        $r13 = new org.apache.commons.codec.language.bm.Rule$10;

        specialinvoke $r13.<org.apache.commons.codec.language.bm.Rule$10: void <init>(java.lang.String)>(r0);

        return $r13;
    }

    private static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1, $i2, i5;
        char $c3, $c4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        i5 = 0;

        goto label4;

     label2:
        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        $c4 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i5);

        if $c3 == $c4 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

     label4:
        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i5 < $i2 goto label2;

        return 1;
    }

    private static java.lang.String stripQuotes(java.lang.String)
    {
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label2:
        return r0;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, org.apache.commons.codec.language.bm.Rule$PhonemeExpr)
    {
        org.apache.commons.codec.language.bm.Rule r0;
        java.lang.String r1, r2, r3, $r6, $r8, $r12;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr r4;
        java.lang.StringBuilder $r5, $r7, $r10, $r11;
        org.apache.commons.codec.language.bm.Rule$RPattern $r9, $r13;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.commons.codec.language.bm.Rule$PhonemeExpr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern> = r1;

        $r5 = new java.lang.StringBuilder;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)>($r8);

        r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext> = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("^");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String)>($r12);

        r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext> = $r13;

        r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme> = r4;

        return;
    }

    public org.apache.commons.codec.language.bm.Rule$RPattern getLContext()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        org.apache.commons.codec.language.bm.Rule$RPattern $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        $r1 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext>;

        return $r1;
    }

    public java.lang.String getPattern()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        $r1 = r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        $r1 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.Rule$RPattern getRContext()
    {
        org.apache.commons.codec.language.bm.Rule r0;
        org.apache.commons.codec.language.bm.Rule$RPattern $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        $r1 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext>;

        return $r1;
    }

    public boolean patternAndContextMatches(java.lang.CharSequence, int)
    {
        org.apache.commons.codec.language.bm.Rule r0;
        java.lang.CharSequence r1, $r3, $r6, $r8;
        int i0, i1, i2, $i3, $i4;
        java.lang.String $r2, $r4;
        boolean $z0, $z1, $z2;
        org.apache.commons.codec.language.bm.Rule$RPattern $r5, $r7;
        java.lang.IndexOutOfBoundsException $r9;

        r0 := @this: org.apache.commons.codec.language.bm.Rule;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r9 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Can not match pattern at negative indexes");

        throw $r9;

     label1:
        $r2 = r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>;

        i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        i2 = i0 + i1;

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i2 <= $i3 goto label2;

        return 0;

     label2:
        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i2);

        $r4 = r0.<org.apache.commons.codec.language.bm.Rule: java.lang.String pattern>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r5 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern rContext>;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r6 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i2, $i4);

        $z1 = interfaceinvoke $r5.<org.apache.commons.codec.language.bm.Rule$RPattern: boolean isMatch(java.lang.CharSequence)>($r6);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r7 = r0.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$RPattern lContext>;

        $r8 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, i0);

        $z2 = interfaceinvoke $r7.<org.apache.commons.codec.language.bm.Rule$RPattern: boolean isMatch(java.lang.CharSequence)>($r8);

        return $z2;
    }

    static boolean access$0(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.codec.language.bm.Rule: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>(r0, r1);

        return $z0;
    }

    static boolean access$1(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.codec.language.bm.Rule: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>(r0, r1);

        return $z0;
    }

    static boolean access$2(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        char c0;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.codec.language.bm.Rule: boolean contains(java.lang.CharSequence,char)>(r0, c0);

        return $z0;
    }
}
