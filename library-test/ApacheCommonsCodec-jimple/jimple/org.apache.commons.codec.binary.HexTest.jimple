public class org.apache.commons.codec.binary.HexTest extends java.lang.Object
{
    private static final java.lang.String BAD_ENCODING_NAME;
    private static final boolean LOG;

    public void <init>()
    {
        org.apache.commons.codec.binary.HexTest r0;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private boolean charsetSanityCheck(java.lang.String)
    {
        org.apache.commons.codec.binary.HexTest r0;
        java.lang.String r1, $r4, $r5, $r6, $r9;
        boolean z0;
        java.lang.StringBuilder $r7, $r8;
        java.lang.UnsupportedOperationException $r10;
        java.io.UnsupportedEncodingException $r11;
        byte[] r12;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = "the quick brown dog jumped over the lazy fox";

        r12 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.lang.String)>(r12, r1);

        $r6 = "the quick brown dog jumped over the lazy fox";

        z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if z0 != 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("FAILED charsetSanityCheck=Interesting Java charset oddity: Roundtrip failed for ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void log(java.lang.String)>($r9);

     label2:
        return z0;

     label3:
        $r11 := @caughtexception;

        return 0;

     label4:
        $r10 := @caughtexception;

        return 0;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label1 to label2 with label4;
    }

    private void checkDecodeHexOddCharacters(char[])
    {
        org.apache.commons.codec.binary.HexTest r0;
        char[] r1;
        org.apache.commons.codec.DecoderException $r4;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        r1 := @parameter0: char[];

     label1:
        staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>(r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("An exception wasn\'t thrown when trying to decode an odd number of characters");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    private void log(java.lang.String)
    {
        org.apache.commons.codec.binary.HexTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        r1 := @parameter0: java.lang.String;

        return;
    }

    private void log(java.lang.Throwable)
    {
        org.apache.commons.codec.binary.HexTest r0;
        java.lang.Throwable r1;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        r1 := @parameter0: java.lang.Throwable;

        return;
    }

    public void testCustomCharset() throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.HexTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.SortedMap $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r3 = staticinvoke <java.nio.charset.Charset: java.util.SortedMap availableCharsets()>();

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r5;

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void testCustomCharset(java.lang.String,java.lang.String)>(r1, "testCustomCharset");

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void testCustomCharset(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.HexTest r0;
        java.lang.String r1, r2, $r12, $r15, $r17, $r18, $r20, $r25, $r28, $r30, r31;
        byte[] r5, r6, r7, r9, r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r11, $r13, $r14, $r19, $r21, $r22, $r23, $r24;
        org.apache.commons.codec.binary.Hex $r16, $r26;
        java.lang.Object $r27;
        java.nio.charset.Charset $r29;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.commons.codec.binary.HexTest: boolean charsetSanityCheck(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void log(java.lang.String)>($r15);

        $r16 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r16.<org.apache.commons.codec.binary.Hex: void <init>(java.lang.String)>(r1);

        $r17 = "Hello World";

        r5 = virtualinvoke $r17.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        r6 = virtualinvoke $r16.<org.apache.commons.codec.binary.Hex: byte[] encode(byte[])>(r5);

        r31 = staticinvoke <org.apache.commons.codec.binary.Hex: java.lang.String encodeHexString(byte[])>(r5);

        r7 = virtualinvoke r31.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r7, r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(byte[],java.lang.String)>(r6, r1);

        $r19 = new java.lang.StringBuilder;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectedHexString=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actualStringFromBytes=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r25, r31, $r18);

        $r26 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r26.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r27 = virtualinvoke $r26.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>("48656c6c6f20576f726c64");

        r9 = (byte[]) $r27;

        $r28 = new java.lang.String;

        $r29 = virtualinvoke $r26.<org.apache.commons.codec.binary.Hex: java.nio.charset.Charset getCharset()>();

        specialinvoke $r28.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r9, $r29);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r1, "Hello World", $r28);

        r10 = virtualinvoke $r16.<org.apache.commons.codec.binary.Hex: byte[] decode(byte[])>(r6);

        $r30 = new java.lang.String;

        specialinvoke $r30.<java.lang.String: void <init>(byte[],java.lang.String)>(r10, r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r1, "Hello World", $r30);

        return;
    }

    public void testCustomCharsetBadName()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r1;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r1 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r1.<org.apache.commons.codec.binary.Hex: void <init>(java.lang.String)>("UNKNOWN");

        return;
    }

    public void testCustomCharsetToString()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r1 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r1.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.codec.binary.Hex: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("UTF-8");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testDecodeArrayOddCharacters()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r2;
        byte[] $r3;
        org.apache.commons.codec.DecoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

     label1:
        $r2 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r2.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r3 = newarray (byte)[1];

        $r3[0] = 65;

        virtualinvoke $r2.<org.apache.commons.codec.binary.Hex: byte[] decode(byte[])>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("An exception wasn\'t thrown when trying to decode an odd number of characters");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public void testDecodeBadCharacterPos0()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r2;
        org.apache.commons.codec.DecoderException $r4;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

     label1:
        $r2 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r2.<org.apache.commons.codec.binary.Hex: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>("q0");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("An exception wasn\'t thrown when trying to decode an illegal character");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public void testDecodeBadCharacterPos1()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r2;
        org.apache.commons.codec.DecoderException $r4;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

     label1:
        $r2 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r2.<org.apache.commons.codec.binary.Hex: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>("0q");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("An exception wasn\'t thrown when trying to decode an illegal character");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public void testDecodeClassCastException()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r2;
        int[] $r3;
        org.apache.commons.codec.DecoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

     label1:
        $r2 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r2.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r3 = newarray (int)[1];

        $r3[0] = 65;

        virtualinvoke $r2.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("An exception wasn\'t thrown when trying to decode.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public void testDecodeHexOddCharacters1()
    {
        org.apache.commons.codec.binary.HexTest r0;
        char[] $r1;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r1 = newarray (char)[1];

        $r1[0] = 65;

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void checkDecodeHexOddCharacters(char[])>($r1);

        return;
    }

    public void testDecodeHexOddCharacters3()
    {
        org.apache.commons.codec.binary.HexTest r0;
        char[] $r1;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r1 = newarray (char)[3];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void checkDecodeHexOddCharacters(char[])>($r1);

        return;
    }

    public void testDecodeHexOddCharacters5()
    {
        org.apache.commons.codec.binary.HexTest r0;
        char[] $r1;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r1 = newarray (char)[5];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void checkDecodeHexOddCharacters(char[])>($r1);

        return;
    }

    public void testDecodeStringOddCharacters()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r2;
        org.apache.commons.codec.DecoderException $r4;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

     label1:
        $r2 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r2.<org.apache.commons.codec.binary.Hex: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>("6");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("An exception wasn\'t thrown when trying to decode an odd number of characters");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public void testDencodeEmpty() throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.HexTest r0;
        char[] $r1;
        byte[] $r2, $r3, $r5, $r6, $r7, $r9, $r11;
        boolean $z0, $z1, $z2;
        org.apache.commons.codec.binary.Hex $r4, $r8;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r2 = newarray (byte)[0];

        $r1 = newarray (char)[0];

        $r3 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = newarray (byte)[0];

        $r4 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r4.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r6 = newarray (byte)[0];

        $r7 = virtualinvoke $r4.<org.apache.commons.codec.binary.Hex: byte[] decode(byte[])>($r6);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = newarray (byte)[0];

        $r8 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r8.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r10 = virtualinvoke $r8.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>("");

        $r11 = (byte[]) $r10;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, $r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testEncodeClassCastException()
    {
        org.apache.commons.codec.binary.HexTest r0;
        org.apache.commons.codec.binary.Hex $r2;
        int[] $r3;
        org.apache.commons.codec.EncoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

     label1:
        $r2 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r2.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r3 = newarray (int)[1];

        $r3[0] = 65;

        virtualinvoke $r2.<org.apache.commons.codec.binary.Hex: java.lang.Object encode(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("An exception wasn\'t thrown when trying to encode.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.EncoderException from label1 to label2 with label3;
    }

    public void testEncodeDecodeRandom() throws org.apache.commons.codec.DecoderException, org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.HexTest r0;
        byte[] r3, r5, $r11, $r16, r17, r18, r21, r24;
        char[] r4, r20, r23;
        java.util.Random $r6;
        org.apache.commons.codec.binary.Hex $r7;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r8, $r12, $r14;
        java.lang.Object $r9, $r10, $r13, $r15;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r6 = new java.util.Random;

        specialinvoke $r6.<java.util.Random: void <init>()>();

        $r7 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r7.<org.apache.commons.codec.binary.Hex: void <init>()>();

        i2 = 5;

        goto label2;

     label1:
        $i0 = virtualinvoke $r6.<java.util.Random: int nextInt(int)>(10000);

        $i1 = $i0 + 1;

        r3 = newarray (byte)[$i1];

        virtualinvoke $r6.<java.util.Random: void nextBytes(byte[])>(r3);

        r4 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r3);

        r17 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>(r4);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r3, r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r5 = virtualinvoke $r7.<org.apache.commons.codec.binary.Hex: byte[] encode(byte[])>(r3);

        r18 = virtualinvoke $r7.<org.apache.commons.codec.binary.Hex: byte[] decode(byte[])>(r5);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r3, r18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(char[])>(r4);

        $r9 = virtualinvoke $r7.<org.apache.commons.codec.binary.Hex: java.lang.Object encode(java.lang.Object)>($r8);

        r20 = (char[]) $r9;

        $r10 = virtualinvoke $r7.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>(r20);

        r21 = (byte[]) $r10;

        $r11 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>($r8);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, r21);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r12 = new java.lang.String;

        specialinvoke $r12.<java.lang.String: void <init>(char[])>(r4);

        $r13 = virtualinvoke $r7.<org.apache.commons.codec.binary.Hex: java.lang.Object encode(java.lang.Object)>($r12);

        r23 = (char[]) $r13;

        $r14 = new java.lang.String;

        specialinvoke $r14.<java.lang.String: void <init>(char[])>(r23);

        $r15 = virtualinvoke $r7.<org.apache.commons.codec.binary.Hex: java.lang.Object decode(java.lang.Object)>($r14);

        r24 = (byte[]) $r15;

        $r16 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>($r12);

        $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r16, r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        i2 = i2 + -1;

     label2:
        if i2 > 0 goto label1;

        return;
    }

    public void testEncodeEmpty() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.HexTest r0;
        byte[] $r1, $r5, $r6, $r7;
        char[] $r2, $r3, $r9, $r11;
        boolean $z0, $z1, $z2;
        org.apache.commons.codec.binary.Hex $r4, $r8;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r2 = newarray (char)[0];

        $r1 = newarray (byte)[0];

        $r3 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r2, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = newarray (byte)[0];

        $r4 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r4.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r6 = newarray (byte)[0];

        $r7 = virtualinvoke $r4.<org.apache.commons.codec.binary.Hex: byte[] encode(byte[])>($r6);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = newarray (char)[0];

        $r8 = new org.apache.commons.codec.binary.Hex;

        specialinvoke $r8.<org.apache.commons.codec.binary.Hex: void <init>()>();

        $r10 = virtualinvoke $r8.<org.apache.commons.codec.binary.Hex: java.lang.Object encode(java.lang.Object)>("");

        $r11 = (char[]) $r10;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r9, $r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testEncodeZeroes()
    {
        org.apache.commons.codec.binary.HexTest r0;
        char[] r1;
        byte[] $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        $r2 = newarray (byte)[36];

        r1 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r2);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("000000000000000000000000000000000000000000000000000000000000000000000000", $r3);

        return;
    }

    public void testHelloWorldLowerCaseHex()
    {
        org.apache.commons.codec.binary.HexTest r0;
        byte[] r1;
        java.lang.String $r3, $r4, $r5, $r6;
        boolean $z0;
        char[] r7, r8, r9;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r7 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r1);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("48656c6c6f20576f726c64", $r3);

        r8 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],boolean)>(r1, 1);

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("48656c6c6f20576f726c64", $r4);

        r9 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],boolean)>(r1, 0);

        $r6 = "48656c6c6f20576f726c64";

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[])>(r9);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testHelloWorldUpperCaseHex()
    {
        org.apache.commons.codec.binary.HexTest r0;
        byte[] r1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;
        char[] r9, r10, r11;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r9 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r1);

        $r4 = "48656C6C6F20576F726C64";

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r9);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        r10 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],boolean)>(r1, 1);

        $r6 = "48656C6C6F20576F726C64";

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[])>(r10);

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        r11 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[],boolean)>(r1, 0);

        $r8 = "48656C6C6F20576F726C64";

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>(r11);

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testRequiredCharset() throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.HexTest r0;

        r0 := @this: org.apache.commons.codec.binary.HexTest;

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void testCustomCharset(java.lang.String,java.lang.String)>("UTF-8", "testRequiredCharset");

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void testCustomCharset(java.lang.String,java.lang.String)>("UTF-16", "testRequiredCharset");

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void testCustomCharset(java.lang.String,java.lang.String)>("UTF-16BE", "testRequiredCharset");

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void testCustomCharset(java.lang.String,java.lang.String)>("UTF-16LE", "testRequiredCharset");

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void testCustomCharset(java.lang.String,java.lang.String)>("US-ASCII", "testRequiredCharset");

        specialinvoke r0.<org.apache.commons.codec.binary.HexTest: void testCustomCharset(java.lang.String,java.lang.String)>("ISO8859_1", "testRequiredCharset");

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.codec.binary.HexTest: boolean LOG> = 0;

        <org.apache.commons.codec.binary.HexTest: java.lang.String BAD_ENCODING_NAME> = "UNKNOWN";

        return;
    }
}
