public class org.apache.commons.codec.language.DaitchMokotoffSoundex extends java.lang.Object implements org.apache.commons.codec.StringEncoder
{
    private static final java.lang.String COMMENT;
    private static final java.lang.String DOUBLE_QUOTE;
    private static final java.lang.String MULTILINE_COMMENT_END;
    private static final java.lang.String MULTILINE_COMMENT_START;
    private static final java.lang.String RESOURCE_FILE;
    private static final int MAX_LENGTH;
    private static final java.util.Map RULES;
    private static final java.util.Map FOLDINGS;
    private final boolean folding;

    static void <clinit>()
    {
        java.io.InputStream r0;
        java.util.Map$Entry r2;
        java.util.Iterator r3;
        java.util.List r4;
        java.util.HashMap $r5, $r6;
        java.lang.Class $r7;
        java.lang.ClassLoader $r8;
        java.util.Scanner $r9;
        java.util.Map $r10, $r11, $r12;
        java.util.Set $r13;
        boolean $z0;
        java.lang.Object $r14, $r15;
        org.apache.commons.codec.language.DaitchMokotoffSoundex$1 $r16;
        java.lang.IllegalArgumentException $r17;

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: int MAX_LENGTH> = 6;

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String RESOURCE_FILE> = "org/apache/commons/codec/language/dmrules.txt";

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String MULTILINE_COMMENT_START> = "/*";

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String MULTILINE_COMMENT_END> = "*/";

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String DOUBLE_QUOTE> = "\"";

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String COMMENT> = "//";

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map RULES> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map FOLDINGS> = $r6;

        $r7 = class "org/apache/commons/codec/language/DaitchMokotoffSoundex";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r0 = virtualinvoke $r8.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("org/apache/commons/codec/language/dmrules.txt");

        if r0 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to load resource: org/apache/commons/codec/language/dmrules.txt");

        throw $r17;

     label1:
        $r9 = new java.util.Scanner;

        specialinvoke $r9.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r0, "UTF-8");

        $r11 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map RULES>;

        $r10 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map FOLDINGS>;

        staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: void parseRules(java.util.Scanner,java.lang.String,java.util.Map,java.util.Map)>($r9, "org/apache/commons/codec/language/dmrules.txt", $r11, $r10);

        virtualinvoke $r9.<java.util.Scanner: void close()>();

        $r12 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map RULES>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.util.List) $r15;

        $r16 = new org.apache.commons.codec.language.DaitchMokotoffSoundex$1;

        specialinvoke $r16.<org.apache.commons.codec.language.DaitchMokotoffSoundex$1: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r16);

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return;
    }

    private static void parseRules(java.util.Scanner, java.lang.String, java.util.Map, java.util.Map)
    {
        java.util.Scanner r0;
        java.lang.String r1, r4, r5, r6, $r8, $r9, $r10, $r11, $r13, $r26, $r32, $r43, $r50, r51, r52, r54, r55, r57, r58;
        java.util.Map r2, r3;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i10, i11;
        char c1, $c8, $c9;
        boolean $z0, $z1, $z3, z4, $z5;
        org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule $r12;
        java.lang.Character $r14, $r17, $r33, $r34;
        java.lang.Object $r15;
        java.util.ArrayList $r16;
        java.lang.IllegalArgumentException $r19, $r27, $r36, $r44;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r37, $r38, $r39, $r40, $r41, $r42, $r46, $r47, $r48, $r49;
        java.lang.IllegalStateException $r45;
        java.lang.String[] r53, r56;
        java.util.List r59;

        r0 := @parameter0: java.util.Scanner;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.Map;

        i11 = 0;

        z4 = 0;

        goto label14;

     label01:
        i11 = i11 + 1;

        r4 = virtualinvoke r0.<java.util.Scanner: java.lang.String nextLine()>();

        r51 = r4;

        if z4 == 0 goto label02;

        $z3 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z3 == 0 goto label14;

        z4 = 0;

        goto label14;

     label02:
        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("/*");

        if $z0 == 0 goto label03;

        z4 = 1;

        goto label14;

     label03:
        i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("//");

        if i0 < 0 goto label04;

        r51 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label04:
        r52 = virtualinvoke r51.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke r52.<java.lang.String: int length()>();

        if $i2 != 0 goto label05;

        goto label14;

     label05:
        $z1 = virtualinvoke r52.<java.lang.String: boolean contains(java.lang.CharSequence)>("=");

        if $z1 == 0 goto label09;

        r53 = virtualinvoke r52.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i5 = lengthof r53;

        if $i5 == 2 goto label06;

        $r36 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed folding statement split into ");

        $i10 = lengthof r53;

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parts: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r43);

        throw $r36;

     label06:
        r54 = r53[0];

        r55 = r53[1];

        $i6 = virtualinvoke r54.<java.lang.String: int length()>();

        if $i6 != 1 goto label07;

        $i7 = virtualinvoke r55.<java.lang.String: int length()>();

        if $i7 == 1 goto label08;

     label07:
        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed folding statement - patterns are not single characters: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label08:
        $c8 = virtualinvoke r54.<java.lang.String: char charAt(int)>(0);

        $r33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c8);

        $c9 = virtualinvoke r55.<java.lang.String: char charAt(int)>(0);

        $r34 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c9);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r34);

        goto label14;

     label09:
        r56 = virtualinvoke r52.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i3 = lengthof r56;

        if $i3 == 4 goto label10;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed rule statement split into ");

        $i4 = lengthof r56;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parts: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r19;

     label10:
        $r8 = r56[0];

        r57 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($r8);

        $r9 = r56[1];

        r58 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($r9);

        $r10 = r56[2];

        r5 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($r10);

        $r11 = r56[3];

        r6 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String stripQuotes(java.lang.String)>($r11);

        $r12 = new org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule;

        specialinvoke $r12.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r57, r58, r5, r6);

        $r13 = staticinvoke <org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String access$0(org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule)>($r12);

        c1 = virtualinvoke $r13.<java.lang.String: char charAt(int)>(0);

        $r14 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);

        $r15 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r59 = (java.util.List) $r15;

        if r59 != null goto label11;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r59 = $r16;

        $r17 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r16);

     label11:
        interfaceinvoke r59.<java.util.List: boolean add(java.lang.Object)>($r12);

     label12:
        goto label14;

     label13:
        $r44 := @caughtexception;

        $r45 = new java.lang.IllegalStateException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("Problem parsing line \'");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r50, $r44);

        throw $r45;

     label14:
        $z5 = virtualinvoke r0.<java.util.Scanner: boolean hasNextLine()>();

        if $z5 != 0 goto label01;

        return;

        catch java.lang.IllegalArgumentException from label10 to label12 with label13;
    }

    private static java.lang.String stripQuotes(java.lang.String)
    {
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label2:
        return r0;
    }

    public void <init>()
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex r0;

        r0 := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;

        specialinvoke r0.<org.apache.commons.codec.language.DaitchMokotoffSoundex: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex r0;
        boolean z0;

        r0 := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.language.DaitchMokotoffSoundex: boolean folding> = z0;

        return;
    }

    private java.lang.String cleanup(java.lang.String)
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex r0;
        java.lang.String r1, $r13;
        int i0, i1;
        java.lang.StringBuilder $r4;
        char[] $r5;
        boolean $z0, $z1, $z2;
        java.util.Map $r7, $r9;
        java.lang.Character $r8, $r10, $r12;
        java.lang.Object $r11;
        char c2, c3;

        r0 := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof $r5;

        i1 = 0;

        goto label5;

     label1:
        c2 = $r5[i1];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c2);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c2);

        $z1 = r0.<org.apache.commons.codec.language.DaitchMokotoffSoundex: boolean folding>;

        if $z1 == 0 goto label3;

        $r7 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map FOLDINGS>;

        $r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);

        $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z2 == 0 goto label3;

        $r9 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map FOLDINGS>;

        $r10 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Character) $r11;

        c3 = virtualinvoke $r12.<java.lang.Character: char charValue()>();

     label3:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label1;

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r2, $r3;
        org.apache.commons.codec.EncoderException $r4;

        r0 := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r4.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String");

        throw $r4;

     label1:
        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String encode(java.lang.String)>($r2);

        return $r3;
    }

    public java.lang.String encode(java.lang.String)
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex r0;
        java.lang.String r1, $r3;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String[] soundex(java.lang.String,boolean)>(r1, 0);

        $r3 = $r2[0];

        return $r3;
    }

    public java.lang.String soundex(java.lang.String)
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex r0;
        java.lang.String r1, r4, $r9;
        java.lang.String[] r2;
        int i0, $i1, i2, i3;
        java.lang.StringBuilder $r6;

        r0 := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String[] soundex(java.lang.String,boolean)>(r1, 1);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

        i0 = lengthof r2;

        i3 = 0;

        goto label3;

     label1:
        r4 = r2[i3];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        i2 = i2 + 1;

        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private java.lang.String[] soundex(java.lang.String, boolean)
    {
        org.apache.commons.codec.language.DaitchMokotoffSoundex r0;
        java.lang.String r1, r2, r10, $r23, r24;
        boolean z0, z1, $z4, $z5, $z6, $z9, $z10, $z11, $z12, $z13;
        java.util.List r4, r25, $r26;
        org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule r5;
        java.util.Iterator r6, r9, r29;
        java.lang.String[] r7, r28;
        org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch r8, r12, $r27, r30, r32;
        int i0, $i1, $i2, $i3, $i4, $i5, i7, i9, $i10, i11;
        java.util.Map $r15;
        java.lang.Character $r16;
        java.lang.Object $r17, $r18, $r19, $r22;
        char c6, c8;
        java.util.LinkedHashSet r31;
        java.util.ArrayList r33;

        r0 := @this: org.apache.commons.codec.language.DaitchMokotoffSoundex;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r1 != null goto label01;

        return null;

     label01:
        r2 = specialinvoke r0.<org.apache.commons.codec.language.DaitchMokotoffSoundex: java.lang.String cleanup(java.lang.String)>(r1);

        r31 = new java.util.LinkedHashSet;

        specialinvoke r31.<java.util.LinkedHashSet: void <init>()>();

        r32 = new org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch;

        specialinvoke r32.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: void <init>(org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch)>(null);

        interfaceinvoke r31.<java.util.Set: boolean add(java.lang.Object)>(r32);

        c6 = 0;

        i7 = 0;

        goto label27;

     label02:
        c8 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i7);

        $z4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c8);

        if $z4 == 0 goto label03;

        goto label26;

     label03:
        r24 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i7);

        $r15 = <org.apache.commons.codec.language.DaitchMokotoffSoundex: java.util.Map RULES>;

        $r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c8);

        $r17 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r25 = (java.util.List) $r17;

        if r25 != null goto label04;

        goto label26;

     label04:
        if z0 == 0 goto label05;

        r33 = new java.util.ArrayList;

        $r26 = r33;

        specialinvoke r33.<java.util.ArrayList: void <init>()>();

        goto label06;

     label05:
        $r26 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label06:
        r4 = $r26;

        r6 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

        goto label24;

     label07:
        $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule) $r18;

        $z6 = virtualinvoke r5.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: boolean matches(java.lang.String)>(r24);

        if $z6 == 0 goto label24;

        if z0 == 0 goto label08;

        interfaceinvoke r4.<java.util.List: void clear()>();

     label08:
        if c6 != 0 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        r7 = virtualinvoke r5.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: java.lang.String[] getReplacements(java.lang.String,boolean)>(r24, $z10);

        $i1 = lengthof r7;

        if $i1 <= 1 goto label11;

        if z0 == 0 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        z1 = $z11;

        r9 = interfaceinvoke r31.<java.util.Set: java.util.Iterator iterator()>();

        goto label22;

     label13:
        $r19 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch) $r19;

        i0 = lengthof r7;

        i9 = 0;

        goto label21;

     label14:
        r10 = r7[i9];

        if z1 == 0 goto label15;

        $r27 = virtualinvoke r8.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch createBranch()>();

        goto label16;

     label15:
        $r27 = r8;

     label16:
        r12 = $r27;

        if c6 != 109 goto label17;

        if c8 == 110 goto label19;

     label17:
        if c6 != 110 goto label18;

        if c8 == 109 goto label19;

     label18:
        $z12 = 0;

        goto label20;

     label19:
        $z12 = 1;

     label20:
        virtualinvoke r12.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: void processNextReplacement(java.lang.String,boolean)>(r10, $z12);

        if z0 == 0 goto label22;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r12);

        i9 = i9 + 1;

     label21:
        if i9 < i0 goto label14;

     label22:
        $z13 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z13 != 0 goto label13;

        if z0 == 0 goto label23;

        interfaceinvoke r31.<java.util.Set: void clear()>();

        interfaceinvoke r31.<java.util.Set: boolean addAll(java.util.Collection)>(r4);

     label23:
        $i2 = virtualinvoke r5.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule: int getPatternLength()>();

        $i3 = $i2 - 1;

        i7 = i7 + $i3;

        goto label25;

     label24:
        $z5 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label07;

     label25:
        c6 = c8;

     label26:
        i7 = i7 + 1;

     label27:
        $i10 = virtualinvoke r2.<java.lang.String: int length()>();

        if i7 < $i10 goto label02;

        $i4 = interfaceinvoke r31.<java.util.Set: int size()>();

        r28 = newarray (java.lang.String)[$i4];

        i11 = 0;

        r29 = interfaceinvoke r31.<java.util.Set: java.util.Iterator iterator()>();

        goto label29;

     label28:
        $r22 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch) $r22;

        virtualinvoke r30.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: void finish()>();

        $i5 = i11;

        i11 = i11 + 1;

        $r23 = virtualinvoke r30.<org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch: java.lang.String toString()>();

        r28[$i5] = $r23;

     label29:
        $z9 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z9 != 0 goto label28;

        return r28;
    }
}
