public class org.apache.commons.codec.binary.Base64OutputStreamTest extends java.lang.Object
{
    private static final byte[] CRLF;
    private static final byte[] LF;
    private static final java.lang.String STRING_FIXTURE;

    static void <clinit>()
    {
        byte[] $r0, $r1;

        <org.apache.commons.codec.binary.Base64OutputStreamTest: java.lang.String STRING_FIXTURE> = "Hello World";

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] CRLF> = $r0;

        $r1 = newarray (byte)[1];

        $r1[0] = 10;

        <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] LF> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCodec98NPE() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        byte[] r1, r2, r5;
        java.lang.String r6;
        int $i0;
        java.io.ByteArrayOutputStream $r7;
        org.apache.commons.codec.binary.Base64OutputStream $r8;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM");

        r2 = newarray (byte)[1024];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i0);

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        $r8 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r8.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean)>($r7, 0);

        virtualinvoke $r8.<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>(r2, 0, 1024);

        virtualinvoke $r8.<org.apache.commons.codec.binary.Base64OutputStream: void close()>();

        r5 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r6 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("codec-98 NPE Base64OutputStream", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123", r6);

        return;
    }

    public void testBase64EmptyOutputStreamMimeChunkSize() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testBase64EmptyOutputStream(int)>(76);

        return;
    }

    public void testBase64EmptyOutputStreamPemChunkSize() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testBase64EmptyOutputStream(int)>(64);

        return;
    }

    private void testBase64EmptyOutputStream(int) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        int i0;
        byte[] r1, r2, $r3, $r4;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        i0 := @parameter0: int;

        r1 = newarray (byte)[0];

        r2 = newarray (byte)[0];

        $r3 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r1, r2, i0, $r3);

        $r4 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r1, r2, i0, $r4);

        return;
    }

    public void testBase64OutputStreamByChunk() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        java.lang.String r1, $r6;
        byte[][] r2;
        byte[] $r3, $r4, $r5, $r7, $r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("SGVsbG8gV29ybGQ=\r\n");

        r10 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r3 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r9, r10, 76, $r3);

        r11 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("AA==\r\n");

        r12 = newarray (byte)[1];

        $r4 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r11, r12, 76, $r4);

        r13 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n");

        r14 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r5 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r13, r14, 64, $r5);

        $r6 = "9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n";

        r1 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "");

        r15 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);

        r16 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r7 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r15, r16, 0, $r7);

        i0 = 0;

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[][] randomData(int,boolean)>(i0, 0);

        r17 = r2[1];

        r18 = r2[0];

        $r8 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r17, r18, 0, $r8);

        i0 = i0 + 1;

     label2:
        if i0 <= 150 goto label1;

        return;
    }

    public void testBase64OutputStreamByteByByte() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        java.lang.String r1, $r6;
        byte[][] r2;
        byte[] $r3, $r4, $r5, $r7, $r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("SGVsbG8gV29ybGQ=\r\n");

        r10 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r3 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r9, r10, 76, $r3);

        r11 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("AA==\r\n");

        r12 = newarray (byte)[1];

        $r4 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r11, r12, 76, $r4);

        r13 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n");

        r14 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r5 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r13, r14, 64, $r5);

        $r6 = "9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n";

        r1 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "");

        r15 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);

        r16 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r7 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r15, r16, 0, $r7);

        i0 = 0;

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[][] randomData(int,boolean)>(i0, 0);

        r17 = r2[1];

        r18 = r2[0];

        $r8 = <org.apache.commons.codec.binary.Base64OutputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64OutputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r17, r18, 0, $r8);

        i0 = i0 + 1;

     label2:
        if i0 <= 150 goto label1;

        return;
    }

    private void testByChunk(byte[], byte[], int, byte[]) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        byte[] r1, r2, r3, r13, r16, r20;
        int i0, i1;
        java.io.ByteArrayOutputStream $r4, $r6, $r8;
        org.apache.commons.codec.binary.Base64OutputStream $r5, $r7, $r9, $r10;
        boolean $z0, $z1, $z2;
        java.io.OutputStream r18;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean,int,byte[])>($r4, 1, i0, r3);

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>(r2);

        virtualinvoke $r5.<java.io.OutputStream: void close()>();

        r13 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r13, r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming chunked base64 encode", $z0);

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r7.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean)>($r6, 0);

        virtualinvoke $r7.<java.io.OutputStream: void write(byte[])>(r1);

        virtualinvoke $r7.<java.io.OutputStream: void close()>();

        r16 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r16, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming chunked base64 decode", $z1);

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        r18 = $r8;

        i1 = 0;

        goto label2;

     label1:
        $r9 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean)>(r18, 0);

        $r10 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r10.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean,int,byte[])>($r9, 1, i0, r3);

        r18 = $r10;

        i1 = i1 + 1;

     label2:
        if i1 < 10 goto label1;

        virtualinvoke r18.<java.io.OutputStream: void write(byte[])>(r2);

        virtualinvoke r18.<java.io.OutputStream: void close()>();

        r20 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r20, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming chunked base64 wrap-wrap-wrap!", $z2);

        return;
    }

    private void testByteByByte(byte[], byte[], int, byte[]) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        byte[] r1, r2, r3, r16, r20, r24, r29;
        int i0, i1, i2, i4, i5, i7, i8, i10, i11, i12;
        java.io.ByteArrayOutputStream $r4, $r6, $r8, $r10;
        org.apache.commons.codec.binary.Base64OutputStream $r5, $r7, $r9, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        byte b3, b6, b9, b13;
        java.io.OutputStream r26;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean,int,byte[])>($r4, 1, i0, r3);

        i1 = lengthof r2;

        i2 = 0;

        goto label02;

     label01:
        b3 = r2[i2];

        virtualinvoke $r5.<java.io.OutputStream: void write(int)>(b3);

        i2 = i2 + 1;

     label02:
        if i2 < i1 goto label01;

        virtualinvoke $r5.<java.io.OutputStream: void close()>();

        r16 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r16, r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming byte-by-byte base64 encode", $z0);

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r7.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean)>($r6, 0);

        i4 = lengthof r1;

        i5 = 0;

        goto label04;

     label03:
        b6 = r1[i5];

        virtualinvoke $r7.<java.io.OutputStream: void write(int)>(b6);

        i5 = i5 + 1;

     label04:
        if i5 < i4 goto label03;

        virtualinvoke $r7.<java.io.OutputStream: void close()>();

        r20 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r20, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming byte-by-byte base64 decode", $z1);

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean)>($r8, 0);

        i7 = lengthof r1;

        i8 = 0;

        goto label06;

     label05:
        b9 = r1[i8];

        virtualinvoke $r9.<java.io.OutputStream: void write(int)>(b9);

        virtualinvoke $r9.<java.io.OutputStream: void flush()>();

        i8 = i8 + 1;

     label06:
        if i8 < i7 goto label05;

        virtualinvoke $r9.<java.io.OutputStream: void close()>();

        r24 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r24, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming byte-by-byte flush() base64 decode", $z2);

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        r26 = $r10;

        i10 = 0;

        goto label08;

     label07:
        $r11 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r11.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean)>(r26, 0);

        $r12 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r12.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream,boolean,int,byte[])>($r11, 1, i0, r3);

        r26 = $r12;

        i10 = i10 + 1;

     label08:
        if i10 < 10 goto label07;

        i11 = lengthof r2;

        i12 = 0;

        goto label10;

     label09:
        b13 = r2[i12];

        virtualinvoke r26.<java.io.OutputStream: void write(int)>(b13);

        i12 = i12 + 1;

     label10:
        if i12 < i11 goto label09;

        virtualinvoke r26.<java.io.OutputStream: void close()>();

        r29 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r29, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming byte-by-byte base64 wrap-wrap-wrap!", $z3);

        return;
    }

    public void testWriteOutOfBounds() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        byte[] r1;
        java.io.ByteArrayOutputStream $r4;
        org.apache.commons.codec.binary.Base64OutputStream $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        r1 = newarray (byte)[1024];

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream)>($r4);

     label01:
        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>(r1, -1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base64OutputStream.write(buf, -1, 1) to throw a IndexOutOfBoundsException");

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

     label04:
        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>(r1, 1, -1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base64OutputStream.write(buf, 1, -1) to throw a IndexOutOfBoundsException");

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

     label07:
        $i0 = lengthof r1;

        $i1 = $i0 + 1;

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>(r1, $i1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base64OutputStream.write(buf, buf.length + 1, 0) to throw a IndexOutOfBoundsException");

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

     label10:
        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>(r1, $i3, 2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base64OutputStream.write(buf, buf.length - 1, 2) to throw a IndexOutOfBoundsException");

     label11:
        goto label13;

     label12:
        $r9 := @caughtexception;

     label13:
        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64OutputStream: void close()>();

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
    }

    public void testWriteToNullCoverage() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64OutputStreamTest r0;
        java.io.ByteArrayOutputStream $r5;
        org.apache.commons.codec.binary.Base64OutputStream $r6;
        java.lang.Throwable $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.codec.binary.Base64OutputStreamTest;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream)>($r5);

     label1:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>(null, 0, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expcted Base64OutputStream.write(null) to throw a NullPointerException");

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64OutputStream: void close()>();

        goto label7;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64OutputStream: void close()>();

        throw $r7;

     label6:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64OutputStream: void close()>();

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }
}
