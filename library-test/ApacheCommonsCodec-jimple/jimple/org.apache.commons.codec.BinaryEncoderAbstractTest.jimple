public abstract class org.apache.commons.codec.BinaryEncoderAbstractTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.codec.BinaryEncoderAbstractTest r0;

        r0 := @this: org.apache.commons.codec.BinaryEncoderAbstractTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract org.apache.commons.codec.BinaryEncoder makeEncoder();

    public void testEncodeEmpty() throws java.lang.Exception
    {
        org.apache.commons.codec.BinaryEncoderAbstractTest r0;
        org.apache.commons.codec.BinaryEncoder r1;
        byte[] $r2;

        r0 := @this: org.apache.commons.codec.BinaryEncoderAbstractTest;

        r1 = virtualinvoke r0.<org.apache.commons.codec.BinaryEncoderAbstractTest: org.apache.commons.codec.BinaryEncoder makeEncoder()>();

        $r2 = newarray (byte)[0];

        interfaceinvoke r1.<org.apache.commons.codec.BinaryEncoder: byte[] encode(byte[])>($r2);

        return;
    }

    public void testEncodeNull() throws java.lang.Exception
    {
        org.apache.commons.codec.BinaryEncoderAbstractTest r0;
        org.apache.commons.codec.BinaryEncoder r1;
        org.apache.commons.codec.EncoderException $r4;

        r0 := @this: org.apache.commons.codec.BinaryEncoderAbstractTest;

        r1 = virtualinvoke r0.<org.apache.commons.codec.BinaryEncoderAbstractTest: org.apache.commons.codec.BinaryEncoder makeEncoder()>();

     label1:
        interfaceinvoke r1.<org.apache.commons.codec.BinaryEncoder: byte[] encode(byte[])>(null);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.EncoderException from label1 to label2 with label3;
    }
}
