public class org.apache.commons.codec.binary.BaseNCodecTest extends java.lang.Object
{
    org.apache.commons.codec.binary.BaseNCodec codec;

    public void <init>()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        org.apache.commons.codec.binary.BaseNCodecTest$1 $r1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $r1 = new org.apache.commons.codec.binary.BaseNCodecTest$1;

        specialinvoke $r1.<org.apache.commons.codec.binary.BaseNCodecTest$1: void <init>(org.apache.commons.codec.binary.BaseNCodecTest,int,int,int,int)>(r0, 0, 0, 0, 0);

        r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec> = $r1;

        return;
    }

    public void testBaseNCodec()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        org.apache.commons.codec.binary.BaseNCodec $r1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r1);

        return;
    }

    public void testIsWhiteSpace()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $z0 = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: boolean isWhiteSpace(byte)>(32);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: boolean isWhiteSpace(byte)>(10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: boolean isWhiteSpace(byte)>(13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: boolean isWhiteSpace(byte)>(9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testIsInAlphabetByte()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        org.apache.commons.codec.binary.BaseNCodec $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $z0 = virtualinvoke $r1.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $z1 = virtualinvoke $r2.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(97);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $z2 = virtualinvoke $r3.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(79);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $z3 = virtualinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(75);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testIsInAlphabetByteArrayBoolean()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        byte[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        org.apache.commons.codec.binary.BaseNCodec $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r1 = newarray (byte)[0];

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r1, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r3 = newarray (byte)[1];

        $r3[0] = 79;

        $z1 = virtualinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r3, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r6 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r5 = newarray (byte)[2];

        $r5[0] = 79;

        $r5[1] = 32;

        $z2 = virtualinvoke $r6.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r5, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r8 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r7 = newarray (byte)[1];

        $r7[0] = 32;

        $z3 = virtualinvoke $r8.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r7, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r10 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r9 = newarray (byte)[0];

        $z4 = virtualinvoke $r10.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r9, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r12 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r11 = newarray (byte)[1];

        $r11[0] = 79;

        $z5 = virtualinvoke $r12.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r11, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r14 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r13 = newarray (byte)[2];

        $r13[0] = 79;

        $r13[1] = 32;

        $z6 = virtualinvoke $r14.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r13, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r16 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r15 = newarray (byte)[1];

        $r15[0] = 32;

        $z7 = virtualinvoke $r16.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r15, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        return;
    }

    public void testIsInAlphabetString()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        org.apache.commons.codec.binary.BaseNCodec $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $z0 = virtualinvoke $r1.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(java.lang.String)>("OK");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $z1 = virtualinvoke $r2.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(java.lang.String)>("O=K= \t\n\r");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testContainsAlphabetOrPad()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        org.apache.commons.codec.binary.BaseNCodec $r1, $r3, $r5, $r8, $r11, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte[] $r2, $r6, $r9, $r12, $r13;
        java.lang.String $r4, $r7, $r10;
        byte $b0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $z0 = virtualinvoke $r1.<org.apache.commons.codec.binary.BaseNCodec: boolean containsAlphabetOrPad(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r2 = newarray (byte)[0];

        $z1 = virtualinvoke $r3.<org.apache.commons.codec.binary.BaseNCodec: boolean containsAlphabetOrPad(byte[])>($r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r4 = "OK";

        $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        $z2 = virtualinvoke $r5.<org.apache.commons.codec.binary.BaseNCodec: boolean containsAlphabetOrPad(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r8 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r7 = "OK ";

        $r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>();

        $z3 = virtualinvoke $r8.<org.apache.commons.codec.binary.BaseNCodec: boolean containsAlphabetOrPad(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r11 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r10 = "ok ";

        $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes()>();

        $z4 = virtualinvoke $r11.<org.apache.commons.codec.binary.BaseNCodec: boolean containsAlphabetOrPad(byte[])>($r12);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $r15 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $r13 = newarray (byte)[1];

        $r14 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        $b0 = $r14.<org.apache.commons.codec.binary.BaseNCodec: byte pad>;

        $r13[0] = $b0;

        $z5 = virtualinvoke $r15.<org.apache.commons.codec.binary.BaseNCodec: boolean containsAlphabetOrPad(byte[])>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testProvidePaddingByte()
    {
        org.apache.commons.codec.binary.BaseNCodecTest r0;
        byte b0;
        org.apache.commons.codec.binary.BaseNCodecTest$2 $r1;
        org.apache.commons.codec.binary.BaseNCodec $r2;
        long $l1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecTest;

        $r1 = new org.apache.commons.codec.binary.BaseNCodecTest$2;

        specialinvoke $r1.<org.apache.commons.codec.binary.BaseNCodecTest$2: void <init>(org.apache.commons.codec.binary.BaseNCodecTest,int,int,int,int,byte)>(r0, 0, 0, 0, 0, 37);

        r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec> = $r1;

        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecTest: org.apache.commons.codec.binary.BaseNCodec codec>;

        b0 = $r2.<org.apache.commons.codec.binary.BaseNCodec: byte pad>;

        $l1 = (long) b0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(37L, $l1);

        return;
    }
}
