class org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer extends org.apache.commons.codec.language.ColognePhonetic$CologneBuffer
{
    final org.apache.commons.codec.language.ColognePhonetic this$0;

    public void <init>(org.apache.commons.codec.language.ColognePhonetic, int)
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer r0;
        org.apache.commons.codec.language.ColognePhonetic r1;
        int i0;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer;

        r1 := @parameter0: org.apache.commons.codec.language.ColognePhonetic;

        i0 := @parameter1: int;

        r0.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: org.apache.commons.codec.language.ColognePhonetic this$0> = r1;

        specialinvoke r0.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: void <init>(org.apache.commons.codec.language.ColognePhonetic,int)>(r1, i0);

        return;
    }

    public void addRight(char)
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer r0;
        char c0;
        int $i1, $i2, $i3;
        char[] $r1;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer;

        c0 := @parameter0: char;

        $r1 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: char[] data>;

        $i1 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: int length>;

        $r1[$i1] = c0;

        $i2 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: int length>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: int length> = $i3;

        return;
    }

    protected char[] copyData(int, int)
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer r0;
        int i0, i1;
        char[] r1, $r2;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = newarray (char)[i1];

        $r2 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer: char[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, r1, 0, i1);

        return r1;
    }
}
