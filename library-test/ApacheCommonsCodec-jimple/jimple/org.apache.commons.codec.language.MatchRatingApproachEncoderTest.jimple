public class org.apache.commons.codec.language.MatchRatingApproachEncoderTest extends org.apache.commons.codec.StringEncoderAbstractTest
{

    public void <init>()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        specialinvoke r0.<org.apache.commons.codec.StringEncoderAbstractTest: void <init>()>();

        return;
    }

    public final void testAccentRemoval_AllLower_SuccessfullyRemoved()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("\u00e1\u00e9\u00ed\u00f3\u00fa");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aeiou", $r3);

        return;
    }

    public final void testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("\u00e1\u00e9 \u00ed\u00f3  \u00fa");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ae io  u", $r3);

        return;
    }

    public final void testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("\u00c1e\u00ed\u00d3uu");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AeiOuu", $r3);

        return;
    }

    public final void testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("\u00c1-e\'\u00ed.,\u00f3&\u00fa");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("A-e\'i.,o&u", $r3);

        return;
    }

    public final void testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("\u00e4\u00eb\u00f6\u00fc\u00df\u00c4\u00cb\u00d6\u00dc\u00f1\u00d1\u00e0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aeou\u00dfAEOUnNa", $r3);

        return;
    }

    public final void testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("\u00c8,\u00c9,\u00ca,\u00cb,\u00db,\u00d9,\u00cf,\u00ce,\u00c0,\u00c2,\u00d4,\u00e8,\u00e9,\u00ea,\u00eb,\u00fb,\u00f9,\u00ef,\u00ee,\u00e0,\u00e2,\u00f4,\u00e7");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("E,E,E,E,U,U,I,I,A,A,O,e,e,e,e,u,u,i,i,a,a,o,c", $r3);

        return;
    }

    public final void testAccentRemovalNormalString_NoChange()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("Colorless green ideas sleep furiously");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Colorless green ideas sleep furiously", $r3);

        return;
    }

    public final void testAccentRemoval_NINO_NoChange()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r3);

        return;
    }

    public final void testAccentRemoval_NullValue_ReturnNullSuccessfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r3);

        return;
    }

    public final void testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>("BUBBLE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BUBLE", $r3);

        return;
    }

    public final void testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>("MISSISSIPPI");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("MISISIPI", $r3);

        return;
    }

    public final void testRemoveDoubleDoubleVowel_BEETLE_NotRemoved()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>("BEETLE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BEETLE", $r3);

        return;
    }

    public final void testIsVowel_CapitalA_ReturnsTrue()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isVowel(java.lang.String)>("A");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testIsVowel_SmallD_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isVowel(java.lang.String)>("d");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testRemoveVowel_ALESSANDRA_Returns_ALSSNDR()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>("ALESSANDRA");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ALSSNDR", $r3);

        return;
    }

    public final void testRemoveVowel__AIDAN_Returns_ADN()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>("AIDAN");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ADN", $r3);

        return;
    }

    public final void testRemoveVowel__DECLAN_Returns_DCLN()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>("DECLAN");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("DCLN", $r3);

        return;
    }

    public final void testGetFirstLast3__ALEXANDER_Returns_Aleder()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>("Alexzander");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Aleder", $r3);

        return;
    }

    public final void testGetFirstLast3_PETE_Returns_PETE()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>("PETE");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("PETE", $r3);

        return;
    }

    public final void testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)>("ALEXANDER", "ALEXANDRA");

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        return;
    }

    public final void testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)>("EINSTEIN", "MICHAELA");

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public final void testGetMinRating_7_Return4_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(7);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        return;
    }

    public final void testGetMinRating_1_Returns5_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l1);

        return;
    }

    public final void testGetMinRating_2_Returns5_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(2);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l1);

        return;
    }

    public final void testgetMinRating_5_Returns4_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(5);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        return;
    }

    public final void testgetMinRating_5_Returns4_Successfully2()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(5);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        return;
    }

    public final void testgetMinRating_6_Returns4_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(6);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        return;
    }

    public final void testgetMinRating_7_Returns4_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(7);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        return;
    }

    public final void testgetMinRating_8_Returns3_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(8);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        return;
    }

    public final void testgetMinRating_10_Returns3_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(10);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        return;
    }

    public final void testgetMinRating_11_Returns_3_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(11);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        return;
    }

    public final void testGetMinRating_13_Returns_1_Successfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $i0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(13);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        return;
    }

    public final void testcleanName_SuccessfullyClean()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>("This-\u00eds   a t.,es &t");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("THISISATEST", $r3);

        return;
    }

    public final void testisVowel_SingleVowel_ReturnsTrue()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isVowel(java.lang.String)>("I");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("test", "");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("", "test");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("test", " ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>(" ", "test");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("test", null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>(null, "test");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("t", "test");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("test", "t");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testGetEncoding_HARPER_HRPR()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>("HARPER");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("HRPR", $r3);

        return;
    }

    public final void testGetEncoding_SMITH_to_SMTH()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>("Smith");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SMTH", $r3);

        return;
    }

    public final void testGetEncoding_SMYTH_to_SMYTH()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>("Smyth");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SMYTH", $r3);

        return;
    }

    public final void testGetEncoding_Space_to_Nothing()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>(" ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r3);

        return;
    }

    public final void testGetEncoding_NoSpace_to_Nothing()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r3);

        return;
    }

    public final void testGetEncoding_Null_to_Nothing()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r3);

        return;
    }

    public final void testGetEncoding_One_Letter_to_Nothing()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>("E");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r3);

        return;
    }

    public final void testCompareNameNullSpace_ReturnsFalseSuccessfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>(null, " ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompareNameSameNames_ReturnsFalseSuccessfully()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("John", "John");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_SMITH_SMYTH_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("smith", "smyth");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_BURNS_BOURNE_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Burns", "Bourne");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_ShortNames_AL_ED_WorksButNoMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Al", "Ed");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_CATHERINE_KATHRYN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Catherine", "Kathryn");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_BRIAN_BRYAN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Brian", "Bryan");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_SEAN_SHAUN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("S\u00e9an", "Shaun");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("C\u00f3lm.   ", "C-ol\u00edn");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_STEPHEN_STEVEN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Stephen", "Steven");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_STEVEN_STEFAN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Steven", "Stefan");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_STEPHEN_STEFAN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Stephen", "Stefan");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_SAM_SAMUEL_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Sam", "Samuel");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_MICKY_MICHAEL_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Micky", "Michael");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_OONA_OONAGH_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Oona", "Oonagh");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_SOPHIE_SOFIA_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Sophie", "Sofia");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Franciszek", "Frances");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_TOMASZ_TOM_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Tomasz", "tom");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_SmallInput_CARK_Kl_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Kl", "Karl");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompareNameToSingleLetter_KARL_C_DoesNotMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Karl", "C");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_ZACH_ZAKARIA_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Zach", "Zacharia");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_KARL_ALESSANDRO_DoesNotMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Karl", "Alessandro");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("\u00dana", "Oonagh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("O\'Sullivan", "\u00d3 \' S\u00failleabh\u00e1in");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Moriarty", "OMuircheartaigh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("o\'muireadhaigh", "\u00d3 \'Muircheartaigh ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Cooper-Flynn", "Super-Lyn");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Hailey", "Halley");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Auerbach", "Uhrbach");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Moskowitz", "Moskovitz");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("LIPSHITZ", "LIPPSZYC");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("LEWINSKY", "LEVINSKI");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("SZLAMAWICZ", "SHLAMOVITZ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("R o s o ch o w a c ie c", " R o s o k ho v a ts e ts");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>(" P rz e m y s l", " P sh e m e sh i l");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_PETERSON_PETERS_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Peterson", "Peters");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("McGowan", "Mc Geoghegan");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Murphy", " ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Murphy", "");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_SurnameCornerCase_Nulls_NoMatch()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Murphy", "Lynch");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public final void testCompare_Forenames_SEAN_JOHN_MatchExpected()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Sean", "John");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public final void testCompare_Forenames_SEAN_PETE_NoMatchExpected()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.StringEncoder $r1;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.StringEncoder getStringEncoder()>();

        $r2 = (org.apache.commons.codec.language.MatchRatingApproachEncoder) $r1;

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isEncodeEquals(java.lang.String,java.lang.String)>("Sean", "Pete");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    protected org.apache.commons.codec.language.MatchRatingApproachEncoder createStringEncoder()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = new org.apache.commons.codec.language.MatchRatingApproachEncoder;

        specialinvoke $r1.<org.apache.commons.codec.language.MatchRatingApproachEncoder: void <init>()>();

        return $r1;
    }

    protected volatile org.apache.commons.codec.StringEncoder createStringEncoder()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoderTest r0;
        org.apache.commons.codec.language.MatchRatingApproachEncoder $r1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoderTest;

        $r1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoderTest: org.apache.commons.codec.language.MatchRatingApproachEncoder createStringEncoder()>();

        return $r1;
    }
}
