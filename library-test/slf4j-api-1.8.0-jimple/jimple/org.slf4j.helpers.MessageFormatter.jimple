public final class org.slf4j.helpers.MessageFormatter extends java.lang.Object
{
    static final char DELIM_START;
    static final char DELIM_STOP;
    static final java.lang.String DELIM_STR;
    private static final char ESCAPE_CHAR;

    public void <init>()
    {
        org.slf4j.helpers.MessageFormatter r0;

        r0 := @this: org.slf4j.helpers.MessageFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        org.slf4j.helpers.FormattingTuple $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(r0, $r2);

        return $r3;
    }

    public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, r2;
        java.lang.Object[] $r3;
        org.slf4j.helpers.FormattingTuple $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        $r4 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(r0, $r3);

        return $r4;
    }

    static final java.lang.Throwable getThrowableCandidate(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        r1 = r0[$i2];

        $z0 = r1 instanceof java.lang.Throwable;

        if $z0 == 0 goto label3;

        $r2 = (java.lang.Throwable) r1;

        return $r2;

     label3:
        return null;
    }

    public static final org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0;
        java.lang.Object[] r1, r4;
        java.lang.Throwable r2;
        org.slf4j.helpers.FormattingTuple $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        r2 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.Throwable getThrowableCandidate(java.lang.Object[])>(r1);

        r4 = r1;

        if r2 == null goto label1;

        r4 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.Object[] trimmedCopy(java.lang.Object[])>(r1);

     label1:
        $r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)>(r0, r4, r2);

        return $r3;
    }

    private static java.lang.Object[] trimmedCopy(java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, $i1, $i2;
        java.lang.IllegalStateException $r2;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("non-sensical empty or null argument array");

        throw $r2;

     label2:
        $i2 = lengthof r0;

        i0 = $i2 - 1;

        r1 = newarray (java.lang.Object)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        return r1;
    }

    public static final org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String, java.lang.Object[], java.lang.Throwable)
    {
        java.lang.String r0, $r15, $r19;
        java.lang.Object[] r1;
        java.lang.Throwable r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9;
        java.lang.StringBuilder $r4;
        boolean $z0, $z1;
        java.util.HashMap $r6, $r9;
        java.lang.Object $r7, $r10;
        org.slf4j.helpers.FormattingTuple $r14, $r16, $r18, $r20, $r21;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Throwable;

        if r0 != null goto label1;

        $r21 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r21.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(null, r1, r2);

        return $r21;

     label1:
        if r1 != null goto label2;

        $r20 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r20.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String)>(r0);

        return $r20;

     label2:
        i7 = 0;

        $r4 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 + 50;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i2);

        i8 = 0;

        goto label9;

     label3:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("{}", i7);

        if i0 != -1 goto label5;

        if i7 != 0 goto label4;

        $r16 = new org.slf4j.helpers.FormattingTuple;

        specialinvoke $r16.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(r0, r1, r2);

        return $r16;

     label4:
        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i7, $i5);

        $r14 = new org.slf4j.helpers.FormattingTuple;

        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r15, r1, r2);

        return $r14;

     label5:
        $z0 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isEscapedDelimeter(java.lang.String,int)>(r0, i0);

        if $z0 == 0 goto label7;

        $z1 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isDoubleEscaped(java.lang.String,int)>(r0, i0);

        if $z1 != 0 goto label6;

        i8 = i8 + -1;

        $i4 = i0 - 1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i7, $i4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        i7 = i0 + 1;

        goto label8;

     label6:
        $i3 = i0 - 1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i7, $i3);

        $r10 = r1[i8];

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>($r4, $r10, $r9);

        i7 = i0 + 2;

        goto label8;

     label7:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i7, i0);

        $r7 = r1[i8];

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>($r4, $r7, $r6);

        i7 = i0 + 2;

     label8:
        i8 = i8 + 1;

     label9:
        $i9 = lengthof r1;

        if i8 < $i9 goto label3;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i7, $i6);

        $r18 = new org.slf4j.helpers.FormattingTuple;

        $r19 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>($r19, r1, r2);

        return $r18;
    }

    static final boolean isEscapedDelimeter(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i2;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $i2 = i0 - 1;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        if c1 != 92 goto label2;

        return 1;

     label2:
        return 0;
    }

    static final boolean isDoubleEscaped(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;
        char $c2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 2 goto label1;

        $i1 = i0 - 2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 92 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void deeplyAppendParameter(java.lang.StringBuilder, java.lang.Object, java.util.Map)
    {
        java.lang.StringBuilder r0;
        java.lang.Object r1;
        java.util.Map r2;
        java.lang.Class $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] $r4;
        double[] $r5;
        float[] $r6;
        long[] $r7;
        int[] $r8;
        short[] $r9;
        char[] $r10;
        byte[] $r11;
        boolean[] $r12;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        if r1 != null goto label01;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        return;

     label01:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label02;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>(r0, r1);

        goto label11;

     label02:
        $z1 = r1 instanceof boolean[];

        if $z1 == 0 goto label03;

        $r12 = (boolean[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void booleanArrayAppend(java.lang.StringBuilder,boolean[])>(r0, $r12);

        goto label11;

     label03:
        $z2 = r1 instanceof byte[];

        if $z2 == 0 goto label04;

        $r11 = (byte[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void byteArrayAppend(java.lang.StringBuilder,byte[])>(r0, $r11);

        goto label11;

     label04:
        $z3 = r1 instanceof char[];

        if $z3 == 0 goto label05;

        $r10 = (char[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void charArrayAppend(java.lang.StringBuilder,char[])>(r0, $r10);

        goto label11;

     label05:
        $z4 = r1 instanceof short[];

        if $z4 == 0 goto label06;

        $r9 = (short[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void shortArrayAppend(java.lang.StringBuilder,short[])>(r0, $r9);

        goto label11;

     label06:
        $z5 = r1 instanceof int[];

        if $z5 == 0 goto label07;

        $r8 = (int[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void intArrayAppend(java.lang.StringBuilder,int[])>(r0, $r8);

        goto label11;

     label07:
        $z6 = r1 instanceof long[];

        if $z6 == 0 goto label08;

        $r7 = (long[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void longArrayAppend(java.lang.StringBuilder,long[])>(r0, $r7);

        goto label11;

     label08:
        $z7 = r1 instanceof float[];

        if $z7 == 0 goto label09;

        $r6 = (float[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void floatArrayAppend(java.lang.StringBuilder,float[])>(r0, $r6);

        goto label11;

     label09:
        $z8 = r1 instanceof double[];

        if $z8 == 0 goto label10;

        $r5 = (double[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void doubleArrayAppend(java.lang.StringBuilder,double[])>(r0, $r5);

        goto label11;

     label10:
        $r4 = (java.lang.Object[]) r1;

        staticinvoke <org.slf4j.helpers.MessageFormatter: void objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map)>(r0, $r4, r2);

     label11:
        return;
    }

    private static void safeObjectAppend(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder r0, $r4, $r7, $r8;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        java.lang.Class $r5;
        java.lang.String $r6, $r9, r11;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object;

     label1:
        r11 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("SLF4J: Failed toString() invocation on an object of type [");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>($r9, $r3);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[FAILED toString()]");

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void objectArrayAppend(java.lang.StringBuilder, java.lang.Object[], java.util.Map)
    {
        java.lang.StringBuilder r0;
        java.lang.Object[] r1;
        java.util.Map r2;
        int i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.util.Map;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        i0 = lengthof r1;

        i2 = 0;

        goto label3;

     label1:
        $r7 = r1[i2];

        staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>(r0, $r7, r2);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < i0 goto label1;

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        goto label5;

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

     label5:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void booleanArrayAppend(java.lang.StringBuilder, boolean[])
    {
        java.lang.StringBuilder r0;
        boolean[] r1;
        int i0, $i1, i2;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: boolean[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i2 = 0;

        goto label3;

     label1:
        $z0 = r1[i2];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void byteArrayAppend(java.lang.StringBuilder, byte[])
    {
        java.lang.StringBuilder r0;
        byte[] r1;
        int i0, $i2, i3;
        byte $b1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: byte[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

        goto label3;

     label1:
        $b1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void charArrayAppend(java.lang.StringBuilder, char[])
    {
        java.lang.StringBuilder r0;
        char[] r1;
        int i0, $i2, i3;
        char $c1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: char[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

        goto label3;

     label1:
        $c1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void shortArrayAppend(java.lang.StringBuilder, short[])
    {
        java.lang.StringBuilder r0;
        short[] r1;
        int i0, $i2, i3;
        short $s1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: short[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

        goto label3;

     label1:
        $s1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void intArrayAppend(java.lang.StringBuilder, int[])
    {
        java.lang.StringBuilder r0;
        int[] r1;
        int i0, $i1, $i2, i3;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: int[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

        goto label3;

     label1:
        $i1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void longArrayAppend(java.lang.StringBuilder, long[])
    {
        java.lang.StringBuilder r0;
        long[] r1;
        int i0, $i2, i3;
        long $l1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: long[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i3 = 0;

        goto label3;

     label1:
        $l1 = r1[i3];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $i2 = i0 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void floatArrayAppend(java.lang.StringBuilder, float[])
    {
        java.lang.StringBuilder r0;
        float[] r1;
        int i0, $i1, i2;
        float $f0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: float[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i2 = 0;

        goto label3;

     label1:
        $f0 = r1[i2];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void doubleArrayAppend(java.lang.StringBuilder, double[])
    {
        java.lang.StringBuilder r0;
        double[] r1;
        int i0, $i1, i2;
        double $d0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: double[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = lengthof r1;

        i2 = 0;

        goto label3;

     label1:
        $d0 = r1[i2];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $i1 = i0 - 1;

        if i2 == $i1 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    public static void <clinit>()
    {
        <org.slf4j.helpers.MessageFormatter: char ESCAPE_CHAR> = 92;

        <org.slf4j.helpers.MessageFormatter: java.lang.String DELIM_STR> = "{}";

        <org.slf4j.helpers.MessageFormatter: char DELIM_STOP> = 125;

        <org.slf4j.helpers.MessageFormatter: char DELIM_START> = 123;

        return;
    }
}
