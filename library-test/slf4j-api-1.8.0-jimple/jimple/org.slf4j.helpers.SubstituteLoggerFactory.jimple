public class org.slf4j.helpers.SubstituteLoggerFactory extends java.lang.Object implements org.slf4j.ILoggerFactory
{
    volatile boolean postInitialization;
    final java.util.Map loggers;
    final java.util.concurrent.LinkedBlockingQueue eventQueue;

    public void <init>()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.slf4j.helpers.SubstituteLoggerFactory: boolean postInitialization> = 0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers> = $r1;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue> = $r2;

        return;
    }

    public synchronized org.slf4j.Logger getLogger(java.lang.String)
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.lang.String r1;
        java.util.Map $r2, $r6;
        java.lang.Object $r3;
        org.slf4j.helpers.SubstituteLogger $r4, r8;
        boolean $z0;
        java.util.concurrent.LinkedBlockingQueue $r5;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (org.slf4j.helpers.SubstituteLogger) $r3;

        if r8 != null goto label1;

        $r4 = new org.slf4j.helpers.SubstituteLogger;

        $r5 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue>;

        $z0 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: boolean postInitialization>;

        specialinvoke $r4.<org.slf4j.helpers.SubstituteLogger: void <init>(java.lang.String,java.util.Queue,boolean)>(r1, $r5, $z0);

        r8 = $r4;

        $r6 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r8;
    }

    public java.util.List getLoggerNames()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.ArrayList $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r1;
    }

    public java.util.List getLoggers()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.ArrayList $r1;
        java.util.Map $r2;
        java.util.Collection $r3;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r1;
    }

    public java.util.concurrent.LinkedBlockingQueue getEventQueue()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.concurrent.LinkedBlockingQueue $r1;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue>;

        return $r1;
    }

    public void postInitialization()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        r0.<org.slf4j.helpers.SubstituteLoggerFactory: boolean postInitialization> = 1;

        return;
    }

    public void clear()
    {
        org.slf4j.helpers.SubstituteLoggerFactory r0;
        java.util.Map $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 := @this: org.slf4j.helpers.SubstituteLoggerFactory;

        $r1 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.Map loggers>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.concurrent.LinkedBlockingQueue eventQueue>;

        virtualinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void clear()>();

        return;
    }
}
