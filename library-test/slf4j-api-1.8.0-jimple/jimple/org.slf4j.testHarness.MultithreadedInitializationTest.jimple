public abstract class org.slf4j.testHarness.MultithreadedInitializationTest extends java.lang.Object
{
    protected static final int THREAD_COUNT;
    private final java.util.List createdLoggers;
    private final java.util.concurrent.atomic.AtomicLong eventCount;
    private final java.util.concurrent.CyclicBarrier barrier;
    int diff;

    static void <clinit>()
    {
        java.lang.Runtime $r0;
        int $i0, $i1, $i2;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        $i1 = $i0 * 2;

        $i2 = 4 + $i1;

        <org.slf4j.testHarness.MultithreadedInitializationTest: int THREAD_COUNT> = $i2;

        return;
    }

    public void <init>()
    {
        org.slf4j.testHarness.MultithreadedInitializationTest r0;
        java.util.ArrayList $r1;
        java.util.List $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.util.concurrent.CyclicBarrier $r4;
        int $i0, $i1, $i2;
        java.util.Random $r5;

        r0 := @this: org.slf4j.testHarness.MultithreadedInitializationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r1);

        r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.List createdLoggers> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.concurrent.atomic.AtomicLong eventCount> = $r3;

        $r4 = new java.util.concurrent.CyclicBarrier;

        $i0 = <org.slf4j.testHarness.MultithreadedInitializationTest: int THREAD_COUNT>;

        $i1 = $i0 + 1;

        specialinvoke $r4.<java.util.concurrent.CyclicBarrier: void <init>(int)>($i1);

        r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.concurrent.CyclicBarrier barrier> = $r4;

        $r5 = new java.util.Random;

        specialinvoke $r5.<java.util.Random: void <init>()>();

        $i2 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>(10000);

        r0.<org.slf4j.testHarness.MultithreadedInitializationTest: int diff> = $i2;

        return;
    }

    public void multiThreadedInitialization() throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException
    {
        org.slf4j.testHarness.MultithreadedInitializationTest r0;
        org.slf4j.Logger r2;
        long l0, l2, $l4, $l6, $l8, $l9;
        java.lang.Class $r3;
        java.lang.String $r4, $r8, $r11, $r13, $r18;
        java.util.concurrent.atomic.AtomicLong $r5, $r6;
        int $i5;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r14, $r15, $r16, $r17;
        byte $b7, $b10;
        boolean $z0, $z1;

        r0 := @this: org.slf4j.testHarness.MultithreadedInitializationTest;

        specialinvoke r0.<org.slf4j.testHarness.MultithreadedInitializationTest: org.slf4j.LoggerAccessingThread[] harness()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r4);

        interfaceinvoke r2.<org.slf4j.Logger: void info(java.lang.String)>("hello");

        $r5 = r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.concurrent.atomic.AtomicLong eventCount>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        specialinvoke r0.<org.slf4j.testHarness.MultithreadedInitializationTest: void assertAllSubstLoggersAreFixed()>();

        l0 = virtualinvoke r0.<org.slf4j.testHarness.MultithreadedInitializationTest: long getRecordedEventCount()>();

        $r6 = r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.concurrent.atomic.AtomicLong eventCount>;

        $l4 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $i5 = virtualinvoke r0.<org.slf4j.testHarness.MultithreadedInitializationTest: int extraLogEvents()>();

        $l6 = (long) $i5;

        l2 = $l4 + $l6;

        $r7 = new java.lang.StringBuilder;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l2);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $b7 = l2 cmp l0;

        if $b7 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r11, $z0);

        $r12 = new java.lang.StringBuilder;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l2);

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(20);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $l8 = (long) 20;

        $l9 = l0 + $l8;

        $b10 = l2 cmp $l9;

        if $b10 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r18, $z1);

        return;
    }

    protected abstract long getRecordedEventCount();

    protected int extraLogEvents()
    {
        org.slf4j.testHarness.MultithreadedInitializationTest r0;

        r0 := @this: org.slf4j.testHarness.MultithreadedInitializationTest;

        return 0;
    }

    private void assertAllSubstLoggersAreFixed()
    {
        org.slf4j.testHarness.MultithreadedInitializationTest r0;
        org.slf4j.Logger r1, $r6;
        java.util.Iterator r2;
        org.slf4j.helpers.SubstituteLogger r3;
        java.util.List $r4;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: org.slf4j.testHarness.MultithreadedInitializationTest;

        $r4 = r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.List createdLoggers>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (org.slf4j.Logger) $r5;

        $z0 = r1 instanceof org.slf4j.helpers.SubstituteLogger;

        if $z0 == 0 goto label2;

        r3 = (org.slf4j.helpers.SubstituteLogger) r1;

        $r6 = virtualinvoke r3.<org.slf4j.helpers.SubstituteLogger: org.slf4j.Logger delegate()>();

        $z1 = $r6 instanceof org.slf4j.event.EventRecodingLogger;

        if $z1 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("substLogger ");

        $r8 = virtualinvoke r3.<org.slf4j.helpers.SubstituteLogger: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has a delegate of type EventRecodingLogger");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label2:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        return;
    }

    private org.slf4j.LoggerAccessingThread[] harness() throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException
    {
        org.slf4j.testHarness.MultithreadedInitializationTest r0;
        org.slf4j.LoggerAccessingThread[] r1;
        int $i0, $i1, $i3, i4, i5;
        org.slf4j.LoggerAccessingThread $r2, $r6, $r8;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.util.List $r4;
        java.util.concurrent.CyclicBarrier $r5, $r7;

        r0 := @this: org.slf4j.testHarness.MultithreadedInitializationTest;

        $i0 = <org.slf4j.testHarness.MultithreadedInitializationTest: int THREAD_COUNT>;

        r1 = newarray (org.slf4j.LoggerAccessingThread)[$i0];

        i4 = 0;

        goto label2;

     label1:
        $r2 = new org.slf4j.LoggerAccessingThread;

        $r5 = r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.concurrent.CyclicBarrier barrier>;

        $r4 = r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.List createdLoggers>;

        $r3 = r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.concurrent.atomic.AtomicLong eventCount>;

        specialinvoke $r2.<org.slf4j.LoggerAccessingThread: void <init>(java.util.concurrent.CyclicBarrier,java.util.List,int,java.util.concurrent.atomic.AtomicLong)>($r5, $r4, i4, $r3);

        r1[i4] = $r2;

        $r6 = r1[i4];

        virtualinvoke $r6.<org.slf4j.LoggerAccessingThread: void start()>();

        i4 = i4 + 1;

     label2:
        $i1 = <org.slf4j.testHarness.MultithreadedInitializationTest: int THREAD_COUNT>;

        if i4 < $i1 goto label1;

        $r7 = r0.<org.slf4j.testHarness.MultithreadedInitializationTest: java.util.concurrent.CyclicBarrier barrier>;

        virtualinvoke $r7.<java.util.concurrent.CyclicBarrier: int await()>();

        i5 = 0;

        goto label4;

     label3:
        $r8 = r1[i5];

        virtualinvoke $r8.<org.slf4j.LoggerAccessingThread: void join()>();

        i5 = i5 + 1;

     label4:
        $i3 = <org.slf4j.testHarness.MultithreadedInitializationTest: int THREAD_COUNT>;

        if i5 < $i3 goto label3;

        return r1;
    }
}
