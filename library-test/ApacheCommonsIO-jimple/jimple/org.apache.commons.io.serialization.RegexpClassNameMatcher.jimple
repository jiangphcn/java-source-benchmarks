final class org.apache.commons.io.serialization.RegexpClassNameMatcher extends java.lang.Object implements org.apache.commons.io.serialization.ClassNameMatcher
{
    private final java.util.regex.Pattern pattern;

    public void <init>(java.lang.String)
    {
        org.apache.commons.io.serialization.RegexpClassNameMatcher r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;

        r0 := @this: org.apache.commons.io.serialization.RegexpClassNameMatcher;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.commons.io.serialization.RegexpClassNameMatcher: void <init>(java.util.regex.Pattern)>($r2);

        return;
    }

    public void <init>(java.util.regex.Pattern)
    {
        org.apache.commons.io.serialization.RegexpClassNameMatcher r0;
        java.util.regex.Pattern r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.io.serialization.RegexpClassNameMatcher;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null pattern");

        throw $r2;

     label1:
        r0.<org.apache.commons.io.serialization.RegexpClassNameMatcher: java.util.regex.Pattern pattern> = r1;

        return;
    }

    public boolean matches(java.lang.String)
    {
        org.apache.commons.io.serialization.RegexpClassNameMatcher r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.serialization.RegexpClassNameMatcher;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.io.serialization.RegexpClassNameMatcher: java.util.regex.Pattern pattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }
}
