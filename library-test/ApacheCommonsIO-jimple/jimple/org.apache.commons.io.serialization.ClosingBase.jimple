public class org.apache.commons.io.serialization.ClosingBase extends java.lang.Object
{
    private final java.util.List toClose;

    public void <init>()
    {
        org.apache.commons.io.serialization.ClosingBase r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.io.serialization.ClosingBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.io.serialization.ClosingBase: java.util.List toClose> = $r1;

        return;
    }

    protected java.io.Closeable willClose(java.io.Closeable)
    {
        org.apache.commons.io.serialization.ClosingBase r0;
        java.io.Closeable r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.io.serialization.ClosingBase;

        r1 := @parameter0: java.io.Closeable;

        $r2 = r0.<org.apache.commons.io.serialization.ClosingBase: java.util.List toClose>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r1;
    }

    public void setup() throws java.io.IOException
    {
        org.apache.commons.io.serialization.ClosingBase r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.io.serialization.ClosingBase;

        $r1 = r0.<org.apache.commons.io.serialization.ClosingBase: java.util.List toClose>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public void cleanup()
    {
        org.apache.commons.io.serialization.ClosingBase r0;
        java.io.Closeable r1;
        java.util.Iterator r2;
        java.util.List $r4;
        java.lang.Object $r5;
        java.io.IOException $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.io.serialization.ClosingBase;

        $r4 = r0.<org.apache.commons.io.serialization.ClosingBase: java.util.List toClose>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.io.Closeable) $r5;

     label2:
        interfaceinvoke r1.<java.io.Closeable: void close()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }
}
