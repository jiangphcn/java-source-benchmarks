class org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString extends org.apache.commons.io.DirectoryWalker
{

    protected void <init>(java.io.FileFilter, int)
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString r0;
        java.io.FileFilter r1;
        int i0;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString;

        r1 := @parameter0: java.io.FileFilter;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void <init>(java.io.FileFilter,int)>(r1, i0);

        return;
    }

    protected java.util.List find(java.io.File)
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString r0;
        java.io.File r1;
        java.util.ArrayList $r4;
        java.io.IOException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString;

        r1 := @parameter0: java.io.File;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label1:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString: void walk(java.io.File,java.util.Collection)>(r1, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.io.IOException: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r6);

     label4:
        return $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void handleFile(java.io.File, int, java.util.Collection)
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinderString;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        return;
    }
}
