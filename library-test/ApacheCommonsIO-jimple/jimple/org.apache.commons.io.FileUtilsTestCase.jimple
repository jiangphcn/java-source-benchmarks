public class org.apache.commons.io.FileUtilsTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{
    private static final int TEST_DIRECTORY_SIZE;
    private static final java.math.BigInteger TEST_DIRECTORY_SIZE_BI;
    private static final java.math.BigInteger TEST_DIRECTORY_SIZE_GT_ZERO_BI;
    private static final org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER;
    private final java.io.File testFile1;
    private final java.io.File testFile2;
    private final int testFile1Size;
    private final int testFile2Size;

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;
        org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker $r2;

        <org.apache.commons.io.FileUtilsTestCase: int TEST_DIRECTORY_SIZE> = 0;

        $r0 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        <org.apache.commons.io.FileUtilsTestCase: java.math.BigInteger TEST_DIRECTORY_SIZE_BI> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(100L);

        <org.apache.commons.io.FileUtilsTestCase: java.math.BigInteger TEST_DIRECTORY_SIZE_GT_ZERO_BI> = $r1;

        $r2 = new org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker;

        specialinvoke $r2.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: void <init>()>();

        <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER> = $r2;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0, $l2;
        int $i1, $i3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        $r1 = new java.io.File;

        $r2 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "file1-test.txt");

        r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1> = $r1;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "file1a-test.txt");

        r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2> = $r3;

        $r5 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $l0 = virtualinvoke $r5.<java.io.File: long length()>();

        $i1 = (int) $l0;

        r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size> = $i1;

        $r6 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $l2 = virtualinvoke $r6.<java.io.File: long length()>();

        $i3 = (int) $l2;

        r0.<org.apache.commons.io.FileUtilsTestCase: int testFile2Size> = $i3;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r25, $r28, $r34, $r40, $r46;
        boolean $z1, $z2, $z4, $z5;
        java.io.BufferedOutputStream $r6, $r11, $r18, $r23;
        java.io.FileOutputStream $r7, $r12, $r19, $r24;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.io.IOException $r26, $r32, $r38, $r44;
        java.lang.StringBuilder $r27, $r29, $r30, $r33, $r35, $r36, $r39, $r41, $r42, $r45, $r47, $r48;
        java.lang.String $r31, $r37, $r43, $r49;
        java.lang.Throwable $r50, $r51, $r52, $r53;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

        $r4 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r5 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label01;

        $r44 = new java.io.IOException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r46 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>($r49);

        throw $r44;

     label01:
        $r6 = new java.io.BufferedOutputStream;

        $r7 = new java.io.FileOutputStream;

        $r8 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r7);

     label02:
        $i0 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size>;

        $l1 = (long) $i0;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r6, $l1);

        goto label04;

     label03:
        $r51 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r6);

        throw $r51;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r6);

        $r9 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r10 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label05;

        $r38 = new java.io.IOException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r40 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r43);

        throw $r38;

     label05:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        $r13 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r13);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label06:
        $i2 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile2Size>;

        $l3 = (long) $i2;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, $l3);

        goto label08;

     label07:
        $r50 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r50;

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        $r14 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r14);

        $r15 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        virtualinvoke $r15.<java.io.File: boolean mkdirs()>();

        $r16 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r17 = virtualinvoke $r16.<java.io.File: java.io.File getParentFile()>();

        $z4 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        if $z4 != 0 goto label09;

        $r32 = new java.io.IOException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r34 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r32;

     label09:
        $r18 = new java.io.BufferedOutputStream;

        $r19 = new java.io.FileOutputStream;

        $r20 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        specialinvoke $r19.<java.io.FileOutputStream: void <init>(java.io.File)>($r20);

        specialinvoke $r18.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r19);

     label10:
        $i4 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size>;

        $l5 = (long) $i4;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r18, $l5);

        goto label12;

     label11:
        $r53 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r18);

        throw $r53;

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r18);

        $r21 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r22 = virtualinvoke $r21.<java.io.File: java.io.File getParentFile()>();

        $z5 = virtualinvoke $r22.<java.io.File: boolean exists()>();

        if $z5 != 0 goto label13;

        $r26 = new java.io.IOException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r28 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label13:
        $r23 = new java.io.BufferedOutputStream;

        $r24 = new java.io.FileOutputStream;

        $r25 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        specialinvoke $r24.<java.io.FileOutputStream: void <init>(java.io.File)>($r25);

        specialinvoke $r23.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r24);

     label14:
        $i6 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile2Size>;

        $l7 = (long) $i6;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r23, $l7);

        goto label16;

     label15:
        $r52 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r23);

        throw $r52;

     label16:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r23);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r1);

        return;
    }

    private java.lang.String getName()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r2;
    }

    public void testGetFile()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6, $r7, $r9, $r11, $r13;
        java.lang.String[] $r8, $r10, $r12;
        java.lang.NullPointerException $r15;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("src");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "main");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "java");

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "src";

        $r9 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.lang.String[])>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("A", $r5, $r9);

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "src";

        $r10[1] = "main";

        $r11 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.lang.String[])>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("B", $r6, $r11);

        $r12 = newarray (java.lang.String)[3];

        $r12[0] = "src";

        $r12[1] = "main";

        $r12[2] = "java";

        $r13 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.lang.String[])>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("C", $r7, $r13);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.lang.String[])>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException");

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testGetFile_Parent()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6, $r7, $r8, $r10, $r12, $r14;
        java.lang.String[] $r9, $r11, $r13, $r16;
        java.lang.NullPointerException $r18, $r19;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("parent");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "src");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "main");

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "java");

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = "src";

        $r10 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.io.File,java.lang.String[])>($r5, $r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("A", $r6, $r10);

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "src";

        $r11[1] = "main";

        $r12 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.io.File,java.lang.String[])>($r5, $r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("B", $r7, $r12);

        $r13 = newarray (java.lang.String)[3];

        $r13[0] = "src";

        $r13[1] = "main";

        $r13[2] = "java";

        $r14 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.io.File,java.lang.String[])>($r5, $r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("C", $r8, $r14);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.io.File,java.lang.String[])>($r5, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException");

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

     label4:
        $r16 = newarray (java.lang.String)[1];

        $r16[0] = "src";

        staticinvoke <org.apache.commons.io.FileUtils: java.io.File getFile(java.io.File,java.lang.String[])>(null, $r16);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException");

     label5:
        goto label7;

     label6:
        $r18 := @caughtexception;

     label7:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public void testGetTempDirectoryPath()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String getTempDirectoryPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testGetTempDirectory()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getTempDirectory()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r4);

        return;
    }

    public void testGetUserDirectoryPath()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String getUserDirectoryPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testGetUserDirectory()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File getUserDirectory()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r4);

        return;
    }

    public void test_openInputStream_exists() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4;
        java.lang.String[] $r5;
        int $i0;
        long $l1;
        java.lang.Throwable $r6;
        java.io.FileInputStream r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "test.txt");

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "Hello";

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void createLineBasedFile(java.io.File,java.lang.String[])>($r3, $r5);

        r7 = null;

     label1:
        r7 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r3);

        $i0 = virtualinvoke r7.<java.io.FileInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(72L, $l1);

        goto label3;

     label2:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r7);

        throw $r6;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r7);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void test_openInputStream_existsButIsDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5;
        java.lang.Throwable $r6;
        java.io.IOException $r7;
        java.io.FileInputStream r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "subdir");

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        r8 = null;

     label1:
        r8 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8);

        goto label7;

     label5:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8);

        throw $r6;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void test_openInputStream_notExists() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5;
        java.io.IOException $r6;
        java.lang.Throwable $r7;
        java.io.FileInputStream r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "test.txt");

        r8 = null;

     label1:
        r8 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8);

        goto label7;

     label5:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8);

        throw $r7;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    void openOutputStream_noParent(boolean) throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        boolean z0, $z1, $z2, $z3;
        java.io.File $r4, $r5;
        java.lang.String[] $r6;
        java.lang.Throwable $r7, $r8;
        java.io.FileOutputStream r9;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        z0 := @parameter0: boolean;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("test.txt");

        $r5 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r5);

     label1:
        if z0 == 0 goto label2;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "Hello";

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void createLineBasedFile(java.io.File,java.lang.String[])>($r4, $r6);

     label2:
        r9 = null;

     label3:
        r9 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r4);

        virtualinvoke r9.<java.io.FileOutputStream: void write(int)>(0);

        goto label5;

     label4:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r9);

        throw $r7;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r9);

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label8;

     label6:
        $r8 := @caughtexception;

        $z3 = virtualinvoke $r4.<java.io.File: boolean delete()>();

        if $z3 != 0 goto label7;

        virtualinvoke $r4.<java.io.File: void deleteOnExit()>();

     label7:
        throw $r8;

     label8:
        $z2 = virtualinvoke $r4.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label9;

        virtualinvoke $r4.<java.io.File: void deleteOnExit()>();

     label9:
        return;

        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label1 to label6 with label6;
    }

    public void test_openOutputStream_noParentCreateFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        virtualinvoke r0.<org.apache.commons.io.FileUtilsTestCase: void openOutputStream_noParent(boolean)>(1);

        return;
    }

    public void test_openOutputStream_noParentNoFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        virtualinvoke r0.<org.apache.commons.io.FileUtilsTestCase: void openOutputStream_noParent(boolean)>(0);

        return;
    }

    public void test_openOutputStream_exists() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4;
        java.lang.String[] $r5;
        boolean $z0;
        java.lang.Throwable $r6;
        java.io.FileOutputStream r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "test.txt");

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "Hello";

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void createLineBasedFile(java.io.File,java.lang.String[])>($r3, $r5);

        r7 = null;

     label1:
        r7 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r3);

        virtualinvoke r7.<java.io.FileOutputStream: void write(int)>(0);

        goto label3;

     label2:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r7);

        throw $r6;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r7);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void test_openOutputStream_existsButIsDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5;
        java.io.IOException $r6;
        java.lang.Throwable $r7;
        java.io.FileOutputStream r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "subdir");

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        r8 = null;

     label1:
        r8 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r8);

        goto label7;

     label5:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r8);

        throw $r7;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r8);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void test_openOutputStream_notExists() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        java.io.FileOutputStream r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "a/test.txt");

        r6 = null;

     label1:
        r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r3);

        virtualinvoke r6.<java.io.FileOutputStream: void write(int)>(0);

        goto label3;

     label2:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6);

        throw $r5;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r6);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void test_openOutputStream_notExistsCannotCreate() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6;
        java.lang.Throwable $r7;
        java.io.IOException $r8;
        java.io.FileOutputStream r9;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "a/abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz/test.txt");

        r9 = null;

     label1:
        r9 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r5);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r9);

        goto label7;

     label5:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r9);

        throw $r7;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r9);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void testByteCountToDisplaySizeBigInteger()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.math.BigInteger r1, r2, r3, r4, r5, r6, r7, r8, r9, $r10, $r12, $r17, $r18, $r21, $r22, $r24, $r25, $r28, $r29, $r32, $r33, $r39, $r41, $r43;
        java.lang.String $r11, $r13, $r14, $r15, $r16, $r19, $r20, $r23, $r26, $r27, $r30, $r31, $r34, $r35, $r36, $r37, $r38, $r40, $r42, $r44;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1023L);

        r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1025L);

        r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1024L);

        r4 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        r5 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        r6 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r5);

        r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        r8 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        r9 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        $r10 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r11 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, "0 bytes");

        $r12 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r13 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, "1 bytes");

        $r14 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, "1023 bytes");

        $r15 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, "1 KB");

        $r16 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, "1 KB");

        $r17 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r18 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r17);

        $r19 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, "1023 KB");

        $r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, "1 MB");

        $r21 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r22 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r21);

        $r23 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, "1 MB");

        $r24 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r25 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r24);

        $r26 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, "1023 MB");

        $r27 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, "1 GB");

        $r28 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r29 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r28);

        $r30 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r29);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, "1 GB");

        $r31 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, "2 GB");

        $r32 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r33 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r32);

        $r34 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r34, "1 GB");

        $r35 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, "1 TB");

        $r36 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r36, "1 PB");

        $r37 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>(r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, "1 EB");

        $r38 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(9223372036854775807L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, "7 EB");

        $r39 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(65535L);

        $r40 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r40, "63 KB");

        $r41 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(32767L);

        $r42 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r41);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r42, "31 KB");

        $r43 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        $r44 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r43);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, "1 GB");

        return;
    }

    public void testByteCountToDisplaySizeLong()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(0L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, "0 bytes");

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, "1 bytes");

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1023L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, "1023 bytes");

        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1024L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, "1 KB");

        $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1025L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, "1 KB");

        $r6 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1047552L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, "1023 KB");

        $r7 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1048576L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, "1 MB");

        $r8 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1049600L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, "1 MB");

        $r9 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1072693248L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, "1023 MB");

        $r10 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1073741824L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, "1 GB");

        $r11 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1074790400L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, "1 GB");

        $r12 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(2147483648L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, "2 GB");

        $r13 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(2147483647L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, "1 GB");

        $r14 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1099511627776L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, "1 TB");

        $r15 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1125899906842624L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, "1 PB");

        $r16 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(1152921504606846976L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, "1 EB");

        $r17 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(9223372036854775807L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, "7 EB");

        $r18 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(65535L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, "63 KB");

        $r19 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(32767L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, "31 KB");

        $r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(long)>(2147483647L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, "1 GB");

        return;
    }

    public void testToFile1() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r2;
        java.net.URL $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "a/b/c/file.txt");

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>($r3);

        $r4 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("file.txt");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testToFile2() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r2;
        java.net.URL $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "a/b/c/file%20n%61me%2520.tx%74");

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>($r3);

        $r4 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("file name%20.txt");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testToFile3() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r1, $r3;
        java.net.URL $r2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r1);

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("http://jakarta.apache.org");

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>($r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r3);

        return;
    }

    public void testToFile4() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r2;
        java.net.URL $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "a/b/c/file%%20%me.txt%");

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>($r3);

        $r4 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("file% %me.txt%");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testToFile5() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r2;
        java.net.URL $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "both%20are%20100%20%25%20true");

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>($r3);

        $r4 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("both are 100 % true", $r4);

        return;
    }

    public void testToFileUtf8() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r2;
        java.net.URL $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "/home/%C3%A4%C3%B6%C3%BC%C3%9F");

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>($r3);

        $r4 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("\u00e4\u00f6\u00fc\u00df");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testDecodeUrl()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r1);

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $r2);

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("+");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("+", $r3);

        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("%25%20");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("% ", $r4);

        $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("%2520");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("%20", $r5);

        $r6 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("jar:file:/C:/dir/sub dir/1.0/foo-1.0.jar!/org/Bar.class", $r6);

        return;
    }

    public void testDecodeUrlLenient()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>(" ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" ", $r1);

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("\u00e4\u00f6\u00fc\u00df");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\u00e4\u00f6\u00fc\u00df", $r2);

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("%");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("%", $r3);

        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("%%20");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("% ", $r4);

        $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("%2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("%2", $r5);

        $r6 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("%2G");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("%2G", $r6);

        return;
    }

    public void testDecodeUrlNullSafe()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r1);

        return;
    }

    public void testDecodeUrlEncodingUtf8()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>("%C3%A4%C3%B6%C3%BC%C3%9F");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\u00e4\u00f6\u00fc\u00df", $r1);

        return;
    }

    public void testToFiles1() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File[] r2;
        java.net.URL[] $r3;
        java.net.URL $r4, $r5;
        int $i0, $i1;
        long $l2, $l3;
        java.lang.StringBuilder $r6, $r8, $r14, $r16;
        java.io.File $r7, $r11, $r15, $r19;
        java.lang.String $r9, $r12, $r17, $r20;
        java.lang.Boolean $r10, $r13, $r18, $r21;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = newarray (java.net.URL)[2];

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "file1.txt");

        $r3[0] = $r4;

        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "file2.txt");

        $r3[1] = $r5;

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>($r3);

        $i0 = lengthof $r3;

        $l3 = (long) $i0;

        $i1 = lengthof r2;

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("File: ");

        $r7 = r2[0];

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r11 = r2[0];

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String toString()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("file1.txt");

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r9, $r10, $r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("File: ");

        $r15 = r2[1];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r19 = r2[1];

        $r20 = virtualinvoke $r19.<java.io.File: java.lang.String toString()>();

        $z1 = virtualinvoke $r20.<java.lang.String: boolean contains(java.lang.CharSequence)>("file2.txt");

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r17, $r18, $r21);

        return;
    }

    public void testToFiles2() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File[] r2;
        java.net.URL[] $r3;
        java.net.URL $r4;
        int $i0, $i1;
        long $l2, $l3;
        java.lang.StringBuilder $r5, $r7, $r13, $r15;
        java.io.File $r6, $r10, $r14, $r17;
        java.lang.String $r8, $r11, $r16;
        java.lang.Boolean $r9, $r12;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = newarray (java.net.URL)[2];

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "file1.txt");

        $r3[0] = $r4;

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>($r3);

        $i0 = lengthof $r3;

        $l3 = (long) $i0;

        $i1 = lengthof r2;

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("File: ");

        $r6 = r2[0];

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r10 = r2[0];

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String toString()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean contains(java.lang.CharSequence)>("file1.txt");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r8, $r9, $r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("File: ");

        $r14 = r2[1];

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r2[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r16, null, $r17);

        return;
    }

    public void testToFiles3() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File[] r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>(null);

        $i0 = lengthof r1;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testToFiles3a() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.net.URL[] r1;
        java.io.File[] r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = newarray (java.net.URL)[0];

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>(r1);

        $i0 = lengthof r2;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testToFiles4() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.net.URL[] $r3;
        java.net.URL $r4, $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = newarray (java.net.URL)[2];

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, "file1.txt");

        $r3[0] = $r4;

        $r5 = new java.net.URL;

        specialinvoke $r5.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("http", "jakarta.apache.org", "file1.txt");

        $r3[1] = $r5;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>($r3);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testToURLs1() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.net.URL[] r2;
        java.io.File[] $r3;
        java.io.File $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1;
        long $l2, $l3;
        java.net.URL $r10, $r12, $r14, $r16, $r18, $r20;
        java.lang.String $r11, $r13, $r15, $r17, $r19, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = newarray (java.io.File)[3];

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "file1.txt");

        $r3[0] = $r4;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "file2.txt");

        $r3[1] = $r6;

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "test file.txt");

        $r3[2] = $r8;

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.net.URL[] toURLs(java.io.File[])>($r3);

        $i0 = lengthof $r3;

        $l3 = (long) $i0;

        $i1 = lengthof r2;

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        $r10 = r2[0];

        $r11 = virtualinvoke $r10.<java.net.URL: java.lang.String toExternalForm()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r12 = r2[0];

        $r13 = virtualinvoke $r12.<java.net.URL: java.lang.String toExternalForm()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("file1.txt");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r14 = r2[1];

        $r15 = virtualinvoke $r14.<java.net.URL: java.lang.String toExternalForm()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r16 = r2[1];

        $r17 = virtualinvoke $r16.<java.net.URL: java.lang.String toExternalForm()>();

        $z3 = virtualinvoke $r17.<java.lang.String: boolean contains(java.lang.CharSequence)>("file2.txt");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r18 = r2[2];

        $r19 = virtualinvoke $r18.<java.net.URL: java.lang.String toExternalForm()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r20 = r2[2];

        $r21 = virtualinvoke $r20.<java.net.URL: java.lang.String toExternalForm()>();

        $z5 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("test%20file.txt");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testToURLs3a() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File[] r1;
        java.net.URL[] r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = newarray (java.io.File)[0];

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.net.URL[] toURLs(java.io.File[])>(r1);

        $i0 = lengthof r2;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testContentEquals() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6, $r8, $r9, $r15, $r16, $r17, $r18, $r26, $r27, $r35, $r36;
        java.lang.String $r7, $r11, $r12, $r14, $r20, $r21, $r23, $r29, $r30, $r32, $r38, $r39, $r41;
        java.lang.StringBuilder $r10, $r13, $r19, $r22, $r28, $r31, $r37, $r40;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8, $z9, $z10, $z13, $z14;
        java.lang.Class $r24, $r33, $r42;
        java.net.URL $r25, $r34, $r43;
        java.io.IOException $r44;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r7 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r7);

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r10 = new java.lang.StringBuilder;

        $r11 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r14);

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r5, $r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r5, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r8, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r8, $r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label1:
        $r15 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r16 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r15, $r16);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Comparing directories should fail with an IOException");

     label2:
        goto label4;

     label3:
        $r44 := @caughtexception;

     label4:
        $r17 = new java.io.File;

        $r18 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r19 = new java.lang.StringBuilder;

        $r20 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20);

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".object");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, $r23);

        virtualinvoke $r17.<java.io.File: void deleteOnExit()>();

        $r24 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.net.URL getResource(java.lang.String)>("/java/lang/Object.class");

        staticinvoke <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>($r25, $r17);

        $r26 = new java.io.File;

        $r27 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r28 = new java.lang.StringBuilder;

        $r29 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r29);

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>($r30);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".object2");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.File: void <init>(java.io.File,java.lang.String)>($r27, $r32);

        virtualinvoke $r17.<java.io.File: void deleteOnExit()>();

        $r33 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r34 = virtualinvoke $r33.<java.lang.Class: java.net.URL getResource(java.lang.String)>("/java/lang/Object.class");

        staticinvoke <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>($r34, $r26);

        $r35 = new java.io.File;

        $r36 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r37 = new java.lang.StringBuilder;

        $r38 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r39 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r38);

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>($r39);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".collection");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.io.File: void <init>(java.io.File,java.lang.String)>($r36, $r41);

        virtualinvoke $r35.<java.io.File: void deleteOnExit()>();

        $r42 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r43 = virtualinvoke $r42.<java.lang.Class: java.net.URL getResource(java.lang.String)>("/java/util/Collection.class");

        staticinvoke <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>($r43, $r35);

        $z5 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r17, $r35);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $z6 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r26, $r35);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        $z7 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r17, $r26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r17, $r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r26, $r26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $z10 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r35, $r35);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        virtualinvoke $r5.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r8.<java.io.File: boolean createNewFile()>();

        $z13 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r5, $r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $z14 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r5, $r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testContentEqualsIgnoreEOL() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.net.URL r5, r7, r9;
        java.io.File $r11, $r12, $r14, $r15, $r21, $r22, $r23, $r24, $r30, $r31, $r37, $r38, $r45, $r48, $r51;
        java.lang.String $r13, $r17, $r18, $r20, $r26, $r27, $r29, $r33, $r34, $r36, $r40, $r41, $r43, $r46, $r49, $r52;
        java.lang.StringBuilder $r16, $r19, $r25, $r28, $r32, $r35, $r39, $r42;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z28, $z29;
        java.lang.Class $r44, $r47, $r50;
        java.io.IOException $r53;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r13 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, $r13);

        $r14 = new java.io.File;

        $r15 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r16 = new java.lang.StringBuilder;

        $r17 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("2");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, $r20);

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r11, $r11, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r11, $r14, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r14, $r14, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r14, $r11, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label1:
        $r21 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r22 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r21, $r22, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Comparing directories should fail with an IOException");

     label2:
        goto label4;

     label3:
        $r53 := @caughtexception;

     label4:
        $r23 = new java.io.File;

        $r24 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r25 = new java.lang.StringBuilder;

        $r26 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r27);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt1");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.File: void <init>(java.io.File,java.lang.String)>($r24, $r29);

        virtualinvoke $r23.<java.io.File: void deleteOnExit()>();

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)>($r23, "123\r");

        $r30 = new java.io.File;

        $r31 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r32 = new java.lang.StringBuilder;

        $r33 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r33);

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>($r34);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt2");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.File: void <init>(java.io.File,java.lang.String)>($r31, $r36);

        virtualinvoke $r23.<java.io.File: void deleteOnExit()>();

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)>($r30, "123\n");

        $r37 = new java.io.File;

        $r38 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r39 = new java.lang.StringBuilder;

        $r40 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        $r41 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r40);

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>($r41);

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".collection");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.io.File: void <init>(java.io.File,java.lang.String)>($r38, $r43);

        virtualinvoke $r37.<java.io.File: void deleteOnExit()>();

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)>($r37, "123\r\n2");

        $z5 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r23, $r23, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $z6 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r30, $r30, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r37, $r37, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r23, $r30, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r23, $r37, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z9);

        $z10 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r30, $r37, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z10);

        $r44 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r5 = virtualinvoke $r44.<java.lang.Class: java.net.URL getResource(java.lang.String)>("FileUtilsTestDataCR.dat");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r5);

        $r45 = new java.io.File;

        $r46 = virtualinvoke r5.<java.net.URL: java.lang.String getPath()>();

        specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>($r46);

        $z11 = virtualinvoke $r45.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r47 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r7 = virtualinvoke $r47.<java.lang.Class: java.net.URL getResource(java.lang.String)>("FileUtilsTestDataCRLF.dat");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r7);

        $r48 = new java.io.File;

        $r49 = virtualinvoke r7.<java.net.URL: java.lang.String getPath()>();

        specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>($r49);

        $z12 = virtualinvoke $r48.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r50 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r9 = virtualinvoke $r50.<java.lang.Class: java.net.URL getResource(java.lang.String)>("FileUtilsTestDataLF.dat");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r9);

        $r51 = new java.io.File;

        $r52 = virtualinvoke r9.<java.net.URL: java.lang.String getPath()>();

        specialinvoke $r51.<java.io.File: void <init>(java.lang.String)>($r52);

        $z13 = virtualinvoke $r51.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $z14 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r45, $r45, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $z15 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r48, $r48, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $z16 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r51, $r51, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        $z17 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r45, $r48, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $z18 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r45, $r51, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $z19 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r48, $r51, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $z20 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r45, $r45);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

        $z21 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r48, $r48);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        $z22 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r51, $r51);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z22);

        $z23 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r45, $r48);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z23);

        $z24 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r45, $r51);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z24);

        $z25 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>($r48, $r51);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z25);

        virtualinvoke $r11.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r14.<java.io.File: boolean createNewFile()>();

        $z28 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r11, $r11, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z28);

        $z29 = staticinvoke <org.apache.commons.io.FileUtils: boolean contentEqualsIgnoreEOL(java.io.File,java.io.File,java.lang.String)>($r11, $r14, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z29);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testCopyURLToFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6;
        java.lang.String $r7;
        java.lang.Class $r8, $r11;
        java.net.URL $r9;
        java.io.FileInputStream $r10;
        java.io.InputStream $r12;
        boolean $z0;
        java.lang.Throwable $r13;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r7 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r7);

        virtualinvoke $r5.<java.io.File: void deleteOnExit()>();

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.net.URL getResource(java.lang.String)>("/java/lang/Object.class");

        staticinvoke <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>($r9, $r5);

        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

     label1:
        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/java/lang/Object.class");

        $z0 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r12, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content is not equal.", $z0);

        goto label3;

     label2:
        $r13 := @caughtexception;

        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

        throw $r13;

     label3:
        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testCopyURLToFileWithTimeout() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6;
        java.lang.Class $r7, $r10;
        java.net.URL $r8;
        java.io.FileInputStream $r9;
        java.io.InputStream $r11;
        boolean $z0;
        java.lang.Throwable $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "testCopyURLToFileWithTimeout");

        virtualinvoke $r5.<java.io.File: void deleteOnExit()>();

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.net.URL getResource(java.lang.String)>("/java/lang/Object.class");

        staticinvoke <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)>($r8, $r5, 500, 500);

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

     label1:
        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/java/lang/Object.class");

        $z0 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r11, $r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content is not equal.", $z0);

        goto label3;

     label2:
        $r12 := @caughtexception;

        virtualinvoke $r9.<java.io.FileInputStream: void close()>();

        throw $r12;

     label3:
        virtualinvoke $r9.<java.io.FileInputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testForceMkdir() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z1, $z3;
        java.io.IOException $r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>($r3);

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r6 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r6);

        virtualinvoke $r4.<java.io.File: void deleteOnExit()>();

        virtualinvoke $r4.<java.io.File: boolean createNewFile()>();

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Test file does not exist.", $z1);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r4.<java.io.File: boolean delete()>();

        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>($r4);

        $z3 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Directory was not created.", $z3);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testForceMkdirParent() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r6, $r7;
        boolean $z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "testForceMkdirParent");

     label1:
        virtualinvoke $r5.<java.io.File: boolean delete()>();

        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "test.txt");

        $z3 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $z4 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdirParent(java.io.File)>($r7);

        $z5 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $z6 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdirParent(java.io.File)>($r7);

        $z7 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z8);

        goto label3;

     label2:
        $r8 := @caughtexception;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        throw $r8;

     label3:
        virtualinvoke $r5.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testSizeOfDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3;
        java.lang.String $r4;
        long $l2;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r4 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r4);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r2.<java.io.File: void deleteOnExit()>();

     label5:
        staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

     label8:
        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke $r2.<java.io.File: boolean mkdir()>();

        specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: void createCircularSymLink(java.io.File)>($r2);

        $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Unexpected directory size", 0L, $l2);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    private void createCircularSymLink(java.io.File) throws java.io.IOException
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1;
        boolean $z0;
        java.lang.Runtime $r3, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r9, $r17;
        java.io.IOException $r19;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 := @parameter0: java.io.File;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();

        if $z0 != 0 goto label1;

        $r11 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("ln -s ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.. ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/cycle");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>($r17);

        goto label4;

     label1:
        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("mklink /D ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/cycle");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.. ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>($r9);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testSizeOfDirectoryAsBigInteger() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r11, $r15;
        java.lang.String $r6, $r14, $r25;
        java.math.BigInteger $r9, $r10, $r18, $r19, $r20;
        java.lang.StringBuilder $r12, $r13, $r22, $r23, $r24;
        long $l0, $l1;
        boolean $z5;
        java.io.BufferedOutputStream $r16;
        java.io.FileOutputStream $r17;
        java.io.IOException $r21;
        java.lang.IllegalArgumentException $r26, $r28;
        java.lang.Throwable $r27;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r6 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r6);

     label01:
        staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label02:
        goto label04;

     label03:
        $r26 := @caughtexception;

     label04:
        virtualinvoke $r4.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r4.<java.io.File: void deleteOnExit()>();

     label05:
        staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label06:
        goto label08;

     label07:
        $r28 := @caughtexception;

     label08:
        virtualinvoke $r4.<java.io.File: boolean delete()>();

        virtualinvoke $r4.<java.io.File: boolean mkdir()>();

        specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: void createCircularSymLink(java.io.File)>($r4);

        $r9 = <org.apache.commons.io.FileUtilsTestCase: java.math.BigInteger TEST_DIRECTORY_SIZE_BI>;

        $r10 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected directory size", $r9, $r10);

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        virtualinvoke $r4.<java.io.File: boolean mkdir()>();

        $r11 = new java.io.File;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("nonEmptyFile");

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r14);

        $r15 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z5 = virtualinvoke $r15.<java.io.File: boolean exists()>();

        if $z5 != 0 goto label09;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label09:
        $r16 = new java.io.BufferedOutputStream;

        $r17 = new java.io.FileOutputStream;

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        specialinvoke $r16.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r17);

     label10:
        $r18 = <org.apache.commons.io.FileUtilsTestCase: java.math.BigInteger TEST_DIRECTORY_SIZE_GT_ZERO_BI>;

        $l1 = virtualinvoke $r18.<java.math.BigInteger: long longValue()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r16, $l1);

        goto label12;

     label11:
        $r27 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r16);

        throw $r27;

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r16);

        virtualinvoke $r11.<java.io.File: void deleteOnExit()>();

        $r19 = <org.apache.commons.io.FileUtilsTestCase: java.math.BigInteger TEST_DIRECTORY_SIZE_GT_ZERO_BI>;

        $r20 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected directory size", $r19, $r20);

        virtualinvoke $r11.<java.io.File: boolean delete()>();

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void testCompareSizeOf()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, l1, $l2;
        java.math.BigInteger r2;
        java.io.File $r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("src/test/java");

        l0 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r3);

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfAsBigInteger(java.io.File)>($r3);

        l1 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Size should not change", l0, l1);

        $l2 = virtualinvoke r2.<java.math.BigInteger: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("longSize should equal BigSize", l0, $l2);

        return;
    }

    public void testSizeOf() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3, $r5, $r6;
        java.lang.String $r4;
        long $l2, $l4, $l5, $l6;
        int $i3;
        java.lang.IllegalArgumentException $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r4 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r4);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

     label7:
        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r2.<java.io.File: void deleteOnExit()>();

        $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l2);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        $i3 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size>;

        $l4 = (long) $i3;

        $r5 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $l5 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Unexpected files size", $l4, $l5);

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $l6 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Unexpected directory size", 0L, $l6);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testSizeOfAsBigInteger() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3, $r10, $r13;
        java.lang.String $r4;
        java.math.BigInteger $r7, $r8, $r9, $r11, $r12, $r14;
        int $i0;
        long $l1;
        java.lang.IllegalArgumentException $r15;
        java.lang.NullPointerException $r16;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r4 = specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r4);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfAsBigInteger(java.io.File)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfAsBigInteger(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected.");

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

     label7:
        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r2.<java.io.File: void deleteOnExit()>();

        $r7 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r8 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfAsBigInteger(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        $i0 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size>;

        $l1 = (long) $i0;

        $r9 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $r10 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r11 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfAsBigInteger(java.io.File)>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected files size", $r9, $r11);

        $r12 = <org.apache.commons.io.FileUtilsTestCase: java.math.BigInteger TEST_DIRECTORY_SIZE_BI>;

        $r13 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r14 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfAsBigInteger(java.io.File)>($r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected directory size", $r12, $r14);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testIsFileNewerOlder() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z27, $z28;
        java.io.BufferedOutputStream $r15, $r18, $r22;
        java.io.FileOutputStream $r16, $r19, $r23;
        long $l0, $l1, $l3, $l4, l6;
        byte $b2, $b5;
        java.util.Date $r20;
        java.io.IOException $r24, $r29, $r34;
        java.lang.StringBuilder $r25, $r26, $r27, $r30, $r31, $r32, $r35, $r36, $r37, $r46, $r47, $r48, $r49, $r59, $r60, $r61, $r62;
        java.lang.String $r28, $r33, $r38, $r50, $r63, r72, r74, r76;
        java.lang.IllegalArgumentException $r39, $r40, $r41, $r43, $r44, $r45, $r52, $r54, $r57, $r58;
        java.lang.Throwable $r42, $r53, $r55;
        java.lang.InterruptedException $r51, $r56;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "FileUtils-reference.txt");

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "FileUtils-old.txt");

        $r10 = new java.io.File;

        $r11 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "FileUtils-new.txt");

        $r12 = new java.io.File;

        $r13 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "FileUtils-invalid-file.txt");

        $r14 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r34 = new java.io.IOException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>($r38);

        throw $r34;

     label01:
        $r15 = new java.io.BufferedOutputStream;

        $r16 = new java.io.FileOutputStream;

        specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r15.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r16);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r15, 0L);

        goto label04;

     label03:
        $r42 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        throw $r42;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

     label05:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1000L);

     label06:
        goto label08;

     label07:
        $r56 := @caughtexception;

     label08:
        $r17 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label09;

        $r29 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label09:
        $r18 = new java.io.BufferedOutputStream;

        $r19 = new java.io.FileOutputStream;

        specialinvoke $r19.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke $r18.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r19);

     label10:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r18, 0L);

        goto label12;

     label11:
        $r53 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r18);

        throw $r53;

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r18);

        $l0 = virtualinvoke $r8.<java.io.File: long lastModified()>();

        $l1 = virtualinvoke $r6.<java.io.File: long lastModified()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label05;

        $r20 = new java.util.Date;

        specialinvoke $r20.<java.util.Date: void <init>()>();

        l6 = virtualinvoke $r20.<java.util.Date: long getTime()>();

     label13:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1000L);

     label14:
        goto label16;

     label15:
        $r51 := @caughtexception;

     label16:
        $r21 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r21.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label17;

        $r24 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label17:
        $r22 = new java.io.BufferedOutputStream;

        $r23 = new java.io.FileOutputStream;

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r22.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r23);

     label18:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r22, 0L);

        goto label20;

     label19:
        $r55 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r22);

        throw $r55;

     label20:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r22);

        $l3 = virtualinvoke $r6.<java.io.File: long lastModified()>();

        $l4 = virtualinvoke $r10.<java.io.File: long lastModified()>();

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label13;

        $z3 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>($r8, $r6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Old File - Newer - File", $z3);

        $z4 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)>($r8, $r20);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Old File - Newer - Date", $z4);

        $z5 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>($r8, l6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Old File - Newer - Mili", $z5);

        $z6 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>($r10, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("New File - Newer - File", $z6);

        $z7 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)>($r10, $r20);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("New File - Newer - Date", $z7);

        $z8 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>($r10, l6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("New File - Newer - Mili", $z8);

        $z9 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>($r12, $r6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Invalid - Newer - File", $z9);

        r72 = virtualinvoke $r12.<java.io.File: java.lang.String getName()>();

     label21:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>($r10, $r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should have cause IllegalArgumentException");

     label22:
        goto label24;

     label23:
        $r45 := @caughtexception;

        r74 = virtualinvoke $r45.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message should contain: ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was: ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $z27 = virtualinvoke r74.<java.lang.String: boolean contains(java.lang.CharSequence)>(r72);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r50, $z27);

     label24:
        $z11 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>($r8, $r6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Old File - Older - File", $z11);

        $z12 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)>($r8, $r20);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Old File - Older - Date", $z12);

        $z13 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>($r8, l6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Old File - Older - Mili", $z13);

        $z14 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>($r10, $r6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("New File - Older - File", $z14);

        $z15 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)>($r10, $r20);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("New File - Older - Date", $z15);

        $z16 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>($r10, l6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("New File - Older - Mili", $z16);

        $z17 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>($r12, $r6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Invalid - Older - File", $z17);

     label25:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>($r10, $r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should have cause IllegalArgumentException");

     label26:
        goto label28;

     label27:
        $r58 := @caughtexception;

        r76 = virtualinvoke $r58.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message should contain: ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was: ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        $z28 = virtualinvoke r76.<java.lang.String: boolean contains(java.lang.CharSequence)>(r72);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r63, $z28);

     label28:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(null, l6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Newer Null, expected IllegalArgumentExcepion");

     label29:
        goto label31;

     label30:
        $r43 := @caughtexception;

     label31:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>($r8, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Newer Null reference, expected IllegalArgumentExcepion");

     label32:
        goto label34;

     label33:
        $r39 := @caughtexception;

     label34:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.io.File)>($r8, $r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Newer invalid reference, expected IllegalArgumentExcepion");

     label35:
        goto label37;

     label36:
        $r57 := @caughtexception;

     label37:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,java.util.Date)>($r8, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Newer Null date, expected IllegalArgumentExcepion");

     label38:
        goto label40;

     label39:
        $r54 := @caughtexception;

     label40:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(null, l6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Older Null, expected IllegalArgumentExcepion");

     label41:
        goto label43;

     label42:
        $r41 := @caughtexception;

     label43:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>($r8, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Older Null reference, expected IllegalArgumentExcepion");

     label44:
        goto label46;

     label45:
        $r44 := @caughtexception;

     label46:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.io.File)>($r8, $r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Older invalid reference, expected IllegalArgumentExcepion");

     label47:
        goto label49;

     label48:
        $r40 := @caughtexception;

     label49:
        staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,java.util.Date)>($r8, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Older Null date, expected IllegalArgumentExcepion");

     label50:
        goto label52;

     label51:
        $r52 := @caughtexception;

     label52:
        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.InterruptedException from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.IllegalArgumentException from label21 to label22 with label23;
        catch java.lang.IllegalArgumentException from label25 to label26 with label27;
        catch java.lang.IllegalArgumentException from label28 to label29 with label30;
        catch java.lang.IllegalArgumentException from label31 to label32 with label33;
        catch java.lang.IllegalArgumentException from label34 to label35 with label36;
        catch java.lang.IllegalArgumentException from label37 to label38 with label39;
        catch java.lang.IllegalArgumentException from label40 to label41 with label42;
        catch java.lang.IllegalArgumentException from label43 to label44 with label45;
        catch java.lang.IllegalArgumentException from label46 to label47 with label48;
        catch java.lang.IllegalArgumentException from label49 to label50 with label51;
    }

    public void testCopyFile1() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3, $r4;
        boolean $z0;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "copy1.txt");

        $r4 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r4, $r2);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z0);

        $i0 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size>;

        $l1 = (long) $i0;

        $l2 = virtualinvoke $r2.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check Full copy", $l1, $l2);

        return;
    }

    public void testCopyFileToOutputStream() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r2, $r6;
        java.io.ByteArrayOutputStream $r3;
        java.io.File $r4, $r5;
        int $i1, $i3;
        long $l2, $l4;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: long copyFile(java.io.File,java.io.OutputStream)>($r4, $r3);

        $i1 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size>;

        $l2 = (long) $i1;

        $i3 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check Full copy size", $l2, $l4);

        $r5 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        r2 = staticinvoke <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)>($r5);

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,byte[],byte[])>("Check Full copy", r2, $r6);

        return;
    }

    public void testCopyFileLarge() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6, $r7, $r8, $r14;
        java.lang.StringBuilder $r9, $r12, $r17, $r20, $r22, $r25, $r28, $r29, $r30;
        java.io.PrintStream $r10, $r18, $r23;
        java.util.Date $r11, $r19, $r24;
        java.lang.String $r13, $r21, $r26, $r31;
        boolean $z0, $z1;
        java.io.BufferedOutputStream $r15;
        java.io.FileOutputStream $r16;
        long $l0, $l1;
        java.io.IOException $r27;
        java.lang.Throwable $r32;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "large.txt");

        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "copylarge.txt");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("START:   ");

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r14 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label1:
        $r15 = new java.io.BufferedOutputStream;

        $r16 = new java.io.FileOutputStream;

        specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        specialinvoke $r15.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r16);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r15, 1073741824L);

        goto label4;

     label3:
        $r32 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        throw $r32;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("CREATED: ");

        $r19 = new java.util.Date;

        specialinvoke $r19.<java.util.Date: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r21);

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r5, $r7);

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("COPIED:  ");

        $r24 = new java.util.Date;

        specialinvoke $r24.<java.util.Date: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r26);

        $z1 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z1);

        $l0 = virtualinvoke $r5.<java.io.File: long length()>();

        $l1 = virtualinvoke $r7.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check Full copy", $l0, $l1);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testCopyFile2() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3, $r4;
        boolean $z0;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "copy2.txt");

        $r4 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r4, $r2);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z0);

        $i0 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile2Size>;

        $l1 = (long) $i0;

        $l2 = virtualinvoke $r2.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check Full copy", $l1, $l2);

        return;
    }

    public void testCopyToSelf() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r5;
        java.io.IOException $r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "copy3.txt");

        $r5 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r5, $r3);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r3, $r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("file copy to self should not be possible");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testCopyFile2WithoutFileDatePreservation() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3, $r4;
        boolean $z0;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "copy2.txt");

        $r4 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>($r4, $r2, 0);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z0);

        $i0 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile2Size>;

        $l1 = (long) $i0;

        $l2 = virtualinvoke $r2.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check Full copy", $l1, $l2);

        return;
    }

    public void testCopyDirectoryToDirectory_NonExistingDest() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, $l2;
        java.io.File $r6, $r7, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r20, $r22, $r26, $r32, r41;
        boolean $z0, $z1, $z3, $z4, $z5, $z6;
        java.io.BufferedOutputStream $r8, $r13;
        java.io.FileOutputStream $r9, $r14;
        java.lang.String $r19, $r21, $r29, $r35;
        byte $b1;
        java.io.IOException $r24, $r30;
        java.lang.StringBuilder $r25, $r27, $r28, $r31, $r33, $r34;
        java.lang.Throwable $r36, $r37;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r7 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r30 = new java.io.IOException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r32 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label01:
        $r8 = new java.io.BufferedOutputStream;

        $r9 = new java.io.FileOutputStream;

        $r10 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r8.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r9);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r8, 1234L);

        goto label04;

     label03:
        $r36 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r8);

        throw $r36;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r8);

        $r11 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r12 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label05;

        $r24 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r26 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label05:
        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        $r15 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>($r15);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

     label06:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r13, 4321L);

        goto label08;

     label07:
        $r37 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        throw $r37;

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        r41 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>(r41, "sub");

        virtualinvoke $r16.<java.io.File: boolean mkdir()>();

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, "A.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r17, "HELLO WORLD", "UTF8");

        $r18 = new java.io.File;

        $r19 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r19, "tmp-FileUtilsTestCase");

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r18);

        $r20 = new java.io.File;

        $r21 = virtualinvoke r41.<java.io.File: java.lang.String getName()>();

        specialinvoke $r20.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, $r21);

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>(r41, $r18);

        $z3 = virtualinvoke $r18.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check exists", $z3);

        $z4 = virtualinvoke $r20.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check exists", $z4);

        l0 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r41);

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size > 0", $z6);

        $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check size", l0, $l2);

        $r22 = new java.io.File;

        specialinvoke $r22.<java.io.File: void <init>(java.io.File,java.lang.String)>($r20, "sub/A.txt");

        $z5 = virtualinvoke $r22.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r18);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label06 to label07 with label07;
    }

    public void testCopyDirectoryToNonExistingDest() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, $l2;
        java.io.File $r5, $r6, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r19, $r23, $r29, r38;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.io.BufferedOutputStream $r7, $r12;
        java.io.FileOutputStream $r8, $r13;
        java.lang.String $r18, $r26, $r32;
        byte $b1;
        java.io.IOException $r21, $r27;
        java.lang.StringBuilder $r22, $r24, $r25, $r28, $r30, $r31;
        java.lang.Throwable $r33, $r34;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r6 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r29 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label01:
        $r7 = new java.io.BufferedOutputStream;

        $r8 = new java.io.FileOutputStream;

        $r9 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r8);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r7, 1234L);

        goto label04;

     label03:
        $r33 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        throw $r33;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        $r10 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label05;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r23 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r21;

     label05:
        $r12 = new java.io.BufferedOutputStream;

        $r13 = new java.io.FileOutputStream;

        $r14 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.io.File)>($r14);

        specialinvoke $r12.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r13);

     label06:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r12, 4321L);

        goto label08;

     label07:
        $r34 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        throw $r34;

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        r38 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>(r38, "sub");

        virtualinvoke $r15.<java.io.File: boolean mkdir()>();

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "A.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r16, "HELLO WORLD", "UTF8");

        $r17 = new java.io.File;

        $r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r18, "tmp-FileUtilsTestCase");

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r17);

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>(r38, $r17);

        $z3 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check exists", $z3);

        l0 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r38);

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size > 0", $z5);

        $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check size", l0, $l2);

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "sub/A.txt");

        $z4 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r17);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label06 to label07 with label07;
    }

    public void testCopyDirectoryToExistingDest() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, $l2;
        java.io.File $r5, $r6, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r19, $r23, $r29, r38;
        boolean $z0, $z1, $z4, $z5;
        java.io.BufferedOutputStream $r7, $r12;
        java.io.FileOutputStream $r8, $r13;
        java.lang.String $r18, $r26, $r32;
        byte $b1;
        java.io.IOException $r21, $r27;
        java.lang.StringBuilder $r22, $r24, $r25, $r28, $r30, $r31;
        java.lang.Throwable $r33, $r34;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r6 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r29 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label01:
        $r7 = new java.io.BufferedOutputStream;

        $r8 = new java.io.FileOutputStream;

        $r9 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r8);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r7, 1234L);

        goto label04;

     label03:
        $r33 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        throw $r33;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        $r10 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label05;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r23 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r21;

     label05:
        $r12 = new java.io.BufferedOutputStream;

        $r13 = new java.io.FileOutputStream;

        $r14 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile2>;

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.io.File)>($r14);

        specialinvoke $r12.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r13);

     label06:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r12, 4321L);

        goto label08;

     label07:
        $r34 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        throw $r34;

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        r38 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>(r38, "sub");

        virtualinvoke $r15.<java.io.File: boolean mkdir()>();

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "A.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r16, "HELLO WORLD", "UTF8");

        $r17 = new java.io.File;

        $r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r18, "tmp-FileUtilsTestCase");

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r17);

        virtualinvoke $r17.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>(r38, $r17);

        l0 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r38);

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size > 0", $z5);

        $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l2);

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "sub/A.txt");

        $z4 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label06 to label07 with label07;
    }

    public void testCopyDirectoryFiltered() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.util.List r6;
        java.io.File $r7, $r8, $r9, $r10, $r13, $r14, $r17, $r20, $r23;
        org.apache.commons.io.filefilter.NameFileFilter $r11;
        java.lang.String[] $r12;
        org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker $r15;
        int $i0;
        long $l1;
        java.lang.Object $r16, $r19, $r22;
        java.lang.String $r18, $r21, $r24;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "grandparent");

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "parent");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "child");

        specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: void createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)>($r7, $r9, $r10);

        $r11 = new org.apache.commons.io.filefilter.NameFileFilter;

        $r12 = newarray (java.lang.String)[3];

        $r12[0] = "parent";

        $r12[1] = "child";

        $r12[2] = "file3.txt";

        specialinvoke $r11.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[])>($r12);

        $r13 = new java.io.File;

        $r14 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "copydest");

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter)>($r7, $r13, $r11);

        $r15 = <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER>;

        r6 = virtualinvoke $r15.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: java.util.List list(java.io.File)>($r13);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r16 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r17 = (java.io.File) $r16;

        $r18 = virtualinvoke $r17.<java.io.File: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("parent", $r18);

        $r19 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(1);

        $r20 = (java.io.File) $r19;

        $r21 = virtualinvoke $r20.<java.io.File: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("child", $r21);

        $r22 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(2);

        $r23 = (java.io.File) $r22;

        $r24 = virtualinvoke $r23.<java.io.File: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("file3.txt", $r24);

        return;
    }

    public void testCopyDirectoryPreserveDates() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        long $l0, $l2, $l4, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        byte $b1, $b3, $b5;
        boolean $z7, $z8, $z9;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "source");

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "directory");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "hello.txt");

        virtualinvoke $r7.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r9.<java.io.File: boolean mkdir()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r10, "HELLO WORLD", "UTF8");

        virtualinvoke $r10.<java.io.File: boolean setLastModified(long)>(1000000002000L);

        virtualinvoke $r9.<java.io.File: boolean setLastModified(long)>(1000000001000L);

        virtualinvoke $r7.<java.io.File: boolean setLastModified(long)>(1000000000000L);

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "target");

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "directory");

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "hello.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r7, $r11, 0);

        $l0 = virtualinvoke $r11.<java.io.File: long lastModified()>();

        $b1 = 1000000000000L cmp $l0;

        if $b1 == 0 goto label1;

        $z7 = 1;

        goto label2;

     label1:
        $z7 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $l2 = virtualinvoke $r13.<java.io.File: long lastModified()>();

        $b3 = 1000000001000L cmp $l2;

        if $b3 == 0 goto label3;

        $z8 = 1;

        goto label4;

     label3:
        $z8 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $l4 = virtualinvoke $r14.<java.io.File: long lastModified()>();

        $b5 = 1000000002000L cmp $l4;

        if $b5 == 0 goto label5;

        $z9 = 1;

        goto label6;

     label5:
        $z9 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r11);

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r7, $r11, 1);

        $l6 = virtualinvoke $r11.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000000000L, $l6);

        $l7 = virtualinvoke $r13.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000001000L, $l7);

        $l8 = virtualinvoke $r14.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000002000L, $l8);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r11);

        virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r7, $r11, 1);

        $l9 = virtualinvoke $r11.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000000000L, $l9);

        $l10 = virtualinvoke $r13.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000001000L, $l10);

        $l11 = virtualinvoke $r14.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000002000L, $l11);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r11);

        virtualinvoke $r13.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r7, $r11, 1);

        $l12 = virtualinvoke $r11.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000000000L, $l12);

        $l13 = virtualinvoke $r13.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000001000L, $l13);

        $l14 = virtualinvoke $r14.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000000002000L, $l14);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r11);

        return;
    }

    public void testCopyDirectoryToChild() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, l1, $l5, $l6, $l8, $l9;
        java.io.File $r4, $r5, $r6, $r7;
        org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker $r8, $r10, $r12;
        java.util.List $r9, $r11, $r13;
        int $i2, $i3, $i4, $i7;
        byte $b10, $b11;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "grandparent");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "parent");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "child");

        specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: void createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)>($r4, $r6, $r7);

        $r8 = <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER>;

        $r9 = virtualinvoke $r8.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: java.util.List list(java.io.File)>($r4);

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER>;

        $r11 = virtualinvoke $r10.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: java.util.List list(java.io.File)>($r6);

        $i3 = interfaceinvoke $r11.<java.util.List: int size()>();

        $i4 = $i2 + $i3;

        l0 = (long) $i4;

        $l5 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r4);

        $l6 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r6);

        l1 = $l5 + $l6;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r6, $r7);

        $r12 = <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER>;

        $r13 = virtualinvoke $r12.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: java.util.List list(java.io.File)>($r4);

        $i7 = interfaceinvoke $r13.<java.util.List: int size()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l8);

        $l9 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l1, $l9);

        $b10 = l0 cmp 0L;

        if $b10 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Count > 0", $z0);

        $b11 = l1 cmp 0L;

        if $b11 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size > 0", $z1);

        return;
    }

    public void testCopyDirectoryToGrandChild() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, l1, $l4, $l6, $l7;
        java.io.File $r4, $r5, $r6, $r7;
        org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker $r8, $r10;
        java.util.List $r9, $r11;
        int $i2, $i3, $i5;
        byte $b8;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "grandparent");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "parent");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "child");

        specialinvoke r0.<org.apache.commons.io.FileUtilsTestCase: void createFilesForTestCopyDirectory(java.io.File,java.io.File,java.io.File)>($r4, $r6, $r7);

        $r8 = <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER>;

        $r9 = virtualinvoke $r8.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: java.util.List list(java.io.File)>($r4);

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i3 = $i2 * 2;

        l0 = (long) $i3;

        $l4 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r4);

        l1 = $l4 * 2L;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r4, $r7);

        $r10 = <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER>;

        $r11 = virtualinvoke $r10.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: java.util.List list(java.io.File)>($r4);

        $i5 = interfaceinvoke $r11.<java.util.List: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l6);

        $l7 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l1, $l7);

        $b8 = l1 cmp 0L;

        if $b8 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Size > 0", $z0);

        return;
    }

    public void testCopyDirectoryToItself() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3;
        org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker $r4;
        java.util.List $r5;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "itself");

        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>($r2, $r2);

        $r4 = <org.apache.commons.io.FileUtilsTestCase: org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker LIST_WALKER>;

        $r5 = virtualinvoke $r4.<org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker: java.util.List list(java.io.File)>($r2);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        return;
    }

    private void createFilesForTestCopyDirectory(java.io.File, java.io.File, java.io.File) throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, r2, r3, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.io.File;

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "child2");

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "grandChild");

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "grandChild2");

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "file1.txt");

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "file2.txt");

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "file3.txt");

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "file4.txt");

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "file5.txt");

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "file6.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r1);

        virtualinvoke $r14.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r15.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r16, "File 1 in grandparent", "UTF8");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r17, "File 2 in parent", "UTF8");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r18, "File 3 in child", "UTF8");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r19, "File 4 in child2", "UTF8");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r20, "File 5 in grandChild", "UTF8");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r21, "File 6 in grandChild2", "UTF8");

        return;
    }

    public void testCopyDirectoryErrors() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.io.IOException $r11, $r14, $r15, $r16;
        java.lang.NullPointerException $r12, $r13, $r17;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label01:
        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

     label04:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("a");

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r1, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

     label07:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("a");

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>(null, $r2);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

     label10:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("doesnt-exist");

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("a");

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r3, $r4);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

     label13:
        $r6 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("a");

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r6, $r5);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $r14 := @caughtexception;

     label16:
        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r8 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r7, $r8);

        staticinvoke <org.junit.Assert: void fail()>();

     label17:
        goto label19;

     label18:
        $r16 := @caughtexception;

     label19:
        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r10 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r9, $r10);

        staticinvoke <org.junit.Assert: void fail()>();

     label20:
        goto label22;

     label21:
        $r15 := @caughtexception;

     label22:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label19 to label20 with label21;
    }

    public void testForceDeleteAFile1() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3;
        boolean $z1, $z2, $z3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "copy1.txt");

        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Copy1.txt doesn\'t exist to delete", $z1);

        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r2);

        $z2 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label1;

        $z3 = 0;

        goto label2;

     label1:
        $z3 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check No Exist", $z3);

        return;
    }

    public void testForceDeleteAFile2() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3;
        boolean $z1, $z2, $z3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "copy2.txt");

        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Copy2.txt doesn\'t exist to delete", $z1);

        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r2);

        $z2 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label1;

        $z3 = 0;

        goto label2;

     label1:
        $z3 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check No Exist", $z3);

        return;
    }

    public void testForceDeleteAFile3() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4;
        boolean $z0, $z1;
        java.io.FileNotFoundException $r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "no_such_file");

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check No Exist", $z1);

     label3:
        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should generate FileNotFoundException");

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        return;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
    }

    public void testCopyFile1ToDir() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r6, $r7, $r9;
        boolean $z0, $z1;
        java.lang.String $r8;
        int $i0;
        long $l1, $l2;
        java.io.IOException $r10;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "subdir");

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

     label1:
        $r6 = new java.io.File;

        $r7 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r8);

        $r9 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>($r9, $r4);

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z1);

        $i0 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile1Size>;

        $l1 = (long) $i0;

        $l2 = virtualinvoke $r6.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check Full copy", $l1, $l2);

     label2:
        staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>($r6, $r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should not be able to copy a file into the same directory as itself");

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void testCopyFile2ToDir() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r5, $r6, $r8;
        boolean $z0, $z1;
        java.lang.String $r7;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "subdir");

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

     label1:
        $r5 = new java.io.File;

        $r6 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r7);

        $r8 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)>($r8, $r3);

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z1);

        $i0 = r0.<org.apache.commons.io.FileUtilsTestCase: int testFile2Size>;

        $l1 = (long) $i0;

        $l2 = virtualinvoke $r5.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Check Full copy", $l1, $l2);

        return;
    }

    public void testForceDeleteDir() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r2);

        $r4 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check No Exist", $z1);

        return;
    }

    public void testFileUtils() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String r2, r4, r5, $r9;
        java.io.File $r6, $r7, $r11, $r12, $r13;
        java.io.FileOutputStream $r8;
        byte[] $r10;
        boolean $z0, $z1, $z2, $z3;
        long $l0;
        byte $b1;
        java.lang.Throwable $r14;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "test.txt");

        r2 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

     label1:
        $r9 = "This is a test";

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>($r10);

        goto label3;

     label2:
        $r14 := @caughtexception;

        virtualinvoke $r8.<java.io.OutputStream: void close()>();

        throw $r14;

     label3:
        virtualinvoke $r8.<java.io.OutputStream: void close()>();

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "test2.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r11, r2, "UTF-8");

        $z0 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $l0 = virtualinvoke $r11.<java.io.File: long length()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>($r11, "UTF-8");

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Second file\'s contents correct", $z1);

        $z2 = virtualinvoke $r11.<java.io.File: boolean delete()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>(r2);

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>($r13, "UTF-8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("FileUtils.fileRead()", "This is a test", r5);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testTouch() throws java.io.IOException
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l8, $l9, $l11, $l12;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8;
        java.io.File $r3, $r4;
        java.io.FileOutputStream $r6;
        java.util.GregorianCalendar $r7;
        java.util.Date $r8;
        java.lang.Boolean $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19;
        byte $b7, $b10, $b13;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "touch.txt");

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label1:
        $z2 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label2;

        $z5 = 0;

        goto label3;

     label2:
        $z5 = 1;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Bad test: test file still exists", $z5);

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r3);

        $z3 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("FileUtils.touch() created file", $z3);

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        $l2 = virtualinvoke $r3.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Created empty file.", 0L, $l2);

        virtualinvoke $r6.<java.io.FileOutputStream: void write(int)>(0);

        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

        $l3 = virtualinvoke $r3.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrote one byte to file", 1L, $l3);

        $r7 = new java.util.GregorianCalendar;

        specialinvoke $r7.<java.util.GregorianCalendar: void <init>(int,int,int)>(2000, 0, 1);

        $r8 = virtualinvoke $r7.<java.util.GregorianCalendar: java.util.Date getTime()>();

        l0 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        z0 = virtualinvoke $r3.<java.io.File: boolean setLastModified(long)>(l0);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Bad test: set lastModified failed", $r9, $r10);

        $l4 = virtualinvoke $r3.<java.io.File: long lastModified()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Bad test: set lastModified set incorrect value", l0, $l4);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r3);

        $l5 = virtualinvoke $r3.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("FileUtils.touch() didn\'t empty the file.", 1L, $l5);

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $l6 = virtualinvoke $r3.<java.io.File: long lastModified()>();

        $b7 = l0 cmp $l6;

        if $b7 != 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("FileUtils.touch() changed lastModified", $r12, $r13);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $l8 = virtualinvoke $r3.<java.io.File: long lastModified()>();

        $l9 = l1 - 3000L;

        $b10 = $l8 cmp $l9;

        if $b10 < 0 goto label6;

        $z7 = 1;

        goto label7;

     label6:
        $z7 = 0;

     label7:
        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("FileUtils.touch() changed lastModified to more than now-3s", $r15, $r16);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $l11 = virtualinvoke $r3.<java.io.File: long lastModified()>();

        $l12 = l1 + 3000L;

        $b13 = $l11 cmp $l12;

        if $b13 > 0 goto label8;

        $z8 = 1;

        goto label9;

     label8:
        $z8 = 0;

     label9:
        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("FileUtils.touch() changed lastModified to less than now+3s", $r18, $r19);

        return;
    }

    public void testListFiles() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r6, $r7, $r10, $r12, $r24;
        java.lang.String[] $r8;
        int[] $r9;
        int $i0, $i1, $i3, $i5, $i7, $i8, $i9, i12, i13, i14, i15;
        java.lang.String $r11, $r19, $r25, $r26, $r27, $r28;
        boolean $z2, $z3, z5;
        java.io.BufferedOutputStream $r13;
        java.io.FileOutputStream $r14;
        long $l2, $l4, $l6, $l10, $l11;
        java.io.IOException $r15;
        java.lang.StringBuilder $r16, $r17, $r18;
        org.apache.commons.io.filefilter.WildcardFileFilter $r20, $r21;
        java.util.HashMap $r22;
        java.lang.Object $r23;
        java.lang.Throwable $r30;
        java.util.Collection r34;
        java.lang.Object[] r35;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "list_test");

        virtualinvoke $r6.<java.io.File: boolean mkdir()>();

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "subdir");

        virtualinvoke $r7.<java.io.File: boolean mkdir()>();

        $r8 = newarray (java.lang.String)[6];

        $r8[0] = "a.txt";

        $r8[1] = "b.txt";

        $r8[2] = "c.txt";

        $r8[3] = "d.txt";

        $r8[4] = "e.txt";

        $r8[5] = "f.txt";

        $r9 = newarray (int)[6];

        $r9[0] = 123;

        $r9[1] = 234;

        $r9[2] = 345;

        $r9[3] = 456;

        $r9[4] = 678;

        $r9[5] = 789;

        i12 = 0;

        goto label06;

     label01:
        $r10 = new java.io.File;

        $r11 = $r8[i12];

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r11);

        $r12 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label02;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label02:
        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

     label03:
        $i1 = $r9[i12];

        $l2 = (long) $i1;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r13, $l2);

        goto label05;

     label04:
        $r30 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        throw $r30;

     label05:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        i12 = i12 + 1;

     label06:
        $i0 = lengthof $r8;

        if i12 < $i0 goto label01;

        $r20 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r20.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*.*");

        $r21 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r21.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*");

        r34 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r6, $r20, $r21);

        i13 = interfaceinvoke r34.<java.util.Collection: int size()>();

        r35 = interfaceinvoke r34.<java.util.Collection: java.lang.Object[] toArray()>();

        $i3 = lengthof $r8;

        $l4 = (long) $i3;

        $i5 = interfaceinvoke r34.<java.util.Collection: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l6);

        $r22 = new java.util.HashMap;

        specialinvoke $r22.<java.util.HashMap: void <init>()>();

        i14 = 0;

        goto label12;

     label07:
        z5 = 0;

        i15 = 0;

        goto label10;

     label08:
        $r25 = $r8[i15];

        $r23 = r35[i14];

        $r24 = (java.io.File) $r23;

        $r26 = virtualinvoke $r24.<java.io.File: java.lang.String getName()>();

        $z3 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z3 == 0 goto label09;

        $r28 = $r8[i15];

        $r27 = $r8[i15];

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r27);

        z5 = 1;

     label09:
        i15 = i15 + 1;

     label10:
        if z5 != 0 goto label11;

        $i7 = lengthof $r8;

        if i15 < $i7 goto label08;

     label11:
        i14 = i14 + 1;

     label12:
        if i14 < i13 goto label07;

        $i8 = interfaceinvoke $r22.<java.util.Map: int size()>();

        $l11 = (long) $i8;

        $i9 = lengthof $r8;

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, $l10);

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label03 to label04 with label04;
    }

    public void testListFilesWithDirs() throws java.io.IOException
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r7, $r8, $r9, $r10, $r13;
        java.util.Collection r6;
        boolean $z2, $z4, $z5, $z6, $z7;
        java.io.BufferedOutputStream $r11;
        java.io.FileOutputStream $r12;
        org.apache.commons.io.filefilter.WildcardFileFilter $r14, $r15;
        int $i0;
        long $l1;
        java.io.IOException $r16;
        java.lang.StringBuilder $r17, $r18, $r19;
        java.lang.String $r20;
        java.lang.Throwable $r21;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "subdir");

        virtualinvoke $r7.<java.io.File: boolean mkdir()>();

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "subdir2");

        virtualinvoke $r8.<java.io.File: boolean mkdir()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "a.txt");

        $r10 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label1;

        $r16 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label1:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, 100L);

        goto label4;

     label3:
        $r21 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r21;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "subdir3");

        virtualinvoke $r13.<java.io.File: boolean mkdir()>();

        $r14 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r14.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*.*");

        $r15 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r15.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*");

        r6 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r7, $r14, $r15);

        $i0 = interfaceinvoke r6.<java.util.Collection: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $z4 = interfaceinvoke r6.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Should contain the directory.", $z4);

        $z5 = interfaceinvoke r6.<java.util.Collection: boolean contains(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Should contain the directory.", $z5);

        $z6 = interfaceinvoke r6.<java.util.Collection: boolean contains(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Should contain the file.", $z6);

        $z7 = interfaceinvoke r6.<java.util.Collection: boolean contains(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Should contain the directory.", $z7);

        virtualinvoke $r7.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testIterateFiles() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5, $r8, $r10, $r22;
        java.lang.String[] $r6;
        int[] $r7;
        int $i0, $i1, $i3, $i4, $i5, i8, i9;
        java.lang.String $r9, $r17, $r23, $r24, $r25, r33;
        boolean $z1, $z2, z4, $z5;
        java.io.BufferedOutputStream $r11;
        java.io.FileOutputStream $r12;
        long $l2, $l6, $l7;
        java.io.IOException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        org.apache.commons.io.filefilter.WildcardFileFilter $r18, $r19;
        java.util.HashMap $r20;
        java.lang.Object $r21;
        java.lang.Throwable $r27;
        java.util.Iterator r31;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "list_test");

        virtualinvoke $r5.<java.io.File: boolean mkdir()>();

        $r6 = newarray (java.lang.String)[6];

        $r6[0] = "a.txt";

        $r6[1] = "b.txt";

        $r6[2] = "c.txt";

        $r6[3] = "d.txt";

        $r6[4] = "e.txt";

        $r6[5] = "f.txt";

        $r7 = newarray (int)[6];

        $r7[0] = 123;

        $r7[1] = 234;

        $r7[2] = 345;

        $r7[3] = 456;

        $r7[4] = 678;

        $r7[5] = 789;

        i8 = 0;

        goto label06;

     label01:
        $r8 = new java.io.File;

        $r9 = $r6[i8];

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r9);

        $r10 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label02;

        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label02:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label03:
        $i1 = $r7[i8];

        $l2 = (long) $i1;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, $l2);

        goto label05;

     label04:
        $r27 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r27;

     label05:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        i8 = i8 + 1;

     label06:
        $i0 = lengthof $r6;

        if i8 < $i0 goto label01;

        $r18 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r18.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*.*");

        $r19 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r19.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*");

        r31 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Iterator iterateFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r5, $r18, $r19);

        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        goto label11;

     label07:
        z4 = 0;

        $r21 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        $r22 = (java.io.File) $r21;

        r33 = virtualinvoke $r22.<java.io.File: java.lang.String getName()>();

        i9 = 0;

        goto label10;

     label08:
        $r23 = $r6[i9];

        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z2 == 0 goto label09;

        $r25 = $r6[i9];

        $r24 = $r6[i9];

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r24);

        z4 = 1;

     label09:
        i9 = i9 + 1;

     label10:
        if z4 != 0 goto label11;

        $i3 = lengthof $r6;

        if i9 < $i3 goto label08;

     label11:
        $z5 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label07;

        $i4 = interfaceinvoke $r20.<java.util.Map: int size()>();

        $l7 = (long) $i4;

        $i5 = lengthof $r6;

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l6);

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label03 to label04 with label04;
    }

    public void testIterateFilesAndDirs() throws java.io.IOException
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, r8, $r9, $r10, $r11, $r12, $r15;
        java.util.List r6;
        java.util.Iterator r7;
        boolean $z2, $z4, $z5;
        java.io.BufferedOutputStream $r13;
        java.io.FileOutputStream $r14;
        java.io.File[] $r16;
        org.apache.commons.io.filefilter.WildcardFileFilter $r17, $r18;
        java.lang.Object $r19;
        long $l0, $l2;
        int $i1, i3;
        java.io.IOException $r20;
        java.lang.StringBuilder $r21, $r22, $r23;
        java.lang.String $r24;
        java.lang.Throwable $r25;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "subdir");

        virtualinvoke $r9.<java.io.File: boolean mkdir()>();

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "subdir2");

        virtualinvoke $r10.<java.io.File: boolean mkdir()>();

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "a.txt");

        $r12 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label1;

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label1:
        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r13, 100L);

        goto label4;

     label3:
        $r25 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        throw $r25;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "subdir3");

        virtualinvoke $r15.<java.io.File: boolean mkdir()>();

        $r16 = newarray (java.io.File)[4];

        $r16[0] = $r9;

        $r16[1] = $r10;

        $r16[2] = $r11;

        $r16[3] = $r15;

        r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        i3 = 0;

        $r17 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r17.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*.*");

        $r18 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r18.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*");

        r7 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Iterator iterateFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r9, $r17, $r18);

        goto label6;

     label5:
        i3 = i3 + 1;

        $r19 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.io.File) $r19;

        $z5 = interfaceinvoke r6.<java.util.Collection: boolean contains(java.lang.Object)>(r8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Should contain the directory/file", $z5);

     label6:
        $z4 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label5;

        $l0 = (long) i3;

        $i1 = interfaceinvoke r6.<java.util.Collection: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, $l2);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testReadFileToStringWithDefaultEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r3;
        java.lang.String r4, $r8;
        java.io.File $r5, $r6;
        java.io.FileOutputStream $r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "read.obj");

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        $r8 = "Hello /u1234";

        r3 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r7.<java.io.FileOutputStream: void write(byte[])>(r3);

        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Hello /u1234", r4);

        return;
    }

    public void testReadFileToStringWithEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r3;
        java.lang.String r4, $r8;
        java.io.File $r5, $r6;
        java.io.FileOutputStream $r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "read.obj");

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        $r8 = "Hello /u1234";

        r3 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        virtualinvoke $r7.<java.io.FileOutputStream: void write(byte[])>(r3);

        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>($r5, "UTF8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Hello /u1234", r4);

        return;
    }

    public void testReadFileToByteArray() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r3;
        java.io.File $r4, $r5;
        java.io.FileOutputStream $r6;
        int $i0;
        long $l1, $l3, $l5, $l7;
        byte $b2, $b4, $b6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "read.txt");

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        virtualinvoke $r6.<java.io.FileOutputStream: void write(int)>(11);

        virtualinvoke $r6.<java.io.FileOutputStream: void write(int)>(21);

        virtualinvoke $r6.<java.io.FileOutputStream: void write(int)>(31);

        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

        r3 = staticinvoke <org.apache.commons.io.FileUtils: byte[] readFileToByteArray(java.io.File)>($r4);

        $i0 = lengthof r3;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $b2 = r3[0];

        $l3 = (long) $b2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $l3);

        $b4 = r3[1];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(21L, $l5);

        $b6 = r3[2];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(31L, $l7);

        return;
    }

    public void testReadLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r3, $r7;
        java.lang.String[] $r6;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

     label1:
        $r6 = newarray (java.lang.String)[5];

        $r6[0] = "hello";

        $r6[1] = "/u1234";

        $r6[2] = "";

        $r6[3] = "this is";

        $r6[4] = "some text";

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void createLineBasedFile(java.io.File,java.lang.String[])>(r1, $r6);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r1, "UTF-8");

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r3);

        goto label3;

     label2:
        $r8 := @caughtexception;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void deleteFile(java.io.File)>(r1);

        throw $r8;

     label3:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void deleteFile(java.io.File)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testWriteStringToFile1() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r2;
        java.io.File $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "write.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r3, "Hello /u1234", "UTF8");

        $r5 = "Hello /u1234";

        r2 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(byte[],java.io.File)>(r2, $r3);

        return;
    }

    public void testWriteStringToFile2() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r2;
        java.io.File $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "write.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r3, "Hello /u1234", null);

        $r5 = "Hello /u1234";

        r2 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(byte[],java.io.File)>(r2, $r3);

        return;
    }

    public void testWriteStringToFile3() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r2;
        java.io.File $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "write.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset)>($r3, "Hello /u1234", null);

        $r5 = "Hello /u1234";

        r2 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(byte[],java.io.File)>(r2, $r3);

        return;
    }

    public void testWriteCharSequence1() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r2;
        java.io.File $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "write.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String)>($r3, "Hello /u1234", "UTF8");

        $r5 = "Hello /u1234";

        r2 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(byte[],java.io.File)>(r2, $r3);

        return;
    }

    public void testWriteCharSequence2() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r2;
        java.io.File $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "write.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String)>($r3, "Hello /u1234", null);

        $r5 = "Hello /u1234";

        r2 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(byte[],java.io.File)>(r2, $r3);

        return;
    }

    public void testWriteByteArrayToFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4;
        byte[] $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "write.obj");

        $r5 = newarray (byte)[3];

        $r5[0] = 11;

        $r5[1] = 21;

        $r5[2] = 31;

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])>($r3, $r5);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(byte[],java.io.File)>($r5, $r3);

        return;
    }

    public void testWriteByteArrayToFile_WithOffsetAndLength() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        byte[] r3, $r6;
        java.io.File $r4, $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "write.obj");

        $r6 = newarray (byte)[5];

        $r6[0] = 11;

        $r6[1] = 21;

        $r6[2] = 32;

        $r6[3] = 41;

        $r6[4] = 51;

        r3 = newarray (byte)[3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 1, r3, 0, 3);

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int)>($r4, $r6, 1, 3);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(byte[],java.io.File)>(r3, $r4);

        return;
    }

    public void testWriteLines_4arg() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.util.List r2;
        java.io.File r3, $r8;
        java.lang.String r5;
        java.lang.Object[] $r6;
        java.lang.StringBuffer $r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = newarray (java.lang.Object)[6];

        $r6[0] = "hello";

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>("world");

        $r6[1] = $r7;

        $r6[2] = "";

        $r6[3] = "this is";

        $r6[5] = "some text";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r3 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r8, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r3, "US-ASCII", r2, "*");

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>(r3, "US-ASCII");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello*world**this is**some text*", r5);

        return;
    }

    public void testWriteLines_4arg_Writer_nullData() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r2;
        long $l0;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r2, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r1, "US-ASCII", null, "*");

        $l0 = virtualinvoke r1.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", 0L, $l0);

        return;
    }

    public void testWriteLines_4arg_nullSeparator() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.util.List r2;
        java.io.File r3, $r8;
        java.lang.String r4, r5, $r10, $r13, $r15, $r18, $r20, $r23;
        java.lang.Object[] $r6;
        java.lang.StringBuffer $r7;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r21, $r22, $r24;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = newarray (java.lang.Object)[6];

        $r6[0] = "hello";

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>("world");

        $r6[1] = $r7;

        $r6[2] = "";

        $r6[3] = "this is";

        $r6[5] = "some text";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r3 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r8, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r3, "US-ASCII", r2, null);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("hello");

        $r10 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("world");

        $r13 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this is");

        $r18 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("some text");

        $r23 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        r4 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>(r3, "US-ASCII");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r5);

        return;
    }

    public void testWriteLines_3arg_nullSeparator() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.util.List r2;
        java.io.File r3, $r8;
        java.lang.String r4, r5, $r10, $r13, $r15, $r18, $r20, $r23;
        java.lang.Object[] $r6;
        java.lang.StringBuffer $r7;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r21, $r22, $r24;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = newarray (java.lang.Object)[6];

        $r6[0] = "hello";

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>("world");

        $r6[1] = $r7;

        $r6[2] = "";

        $r6[3] = "this is";

        $r6[5] = "some text";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r3 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r8, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r3, "US-ASCII", r2);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("hello");

        $r10 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("world");

        $r13 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this is");

        $r18 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("some text");

        $r23 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        r4 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>(r3, "US-ASCII");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r5);

        return;
    }

    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r1, null, r2, null, 1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("This line was there before you...my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r1, null, r2, null, 0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)>(r1, r2, null, 1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("This line was there before you...my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String,boolean)>(r1, r2, null, 0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)>(r1, null, r2, 1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("This line was there before you...my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,boolean)>(r1, null, r2, 0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,boolean)>(r1, r2, 1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("This line was there before you...my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        java.util.List r2;
        java.lang.String r3, r4, $r8, $r11;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "my first line";

        $r6[1] = "The second Line";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,boolean)>(r1, r2, 0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("my first line");

        $r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The second Line");

        $r11 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)>(r1, "this is brand new data", null, 1);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This line was there before you...this is brand new data", r3);

        return;
    }

    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)>(r1, "this is brand new data", null, 0);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("this is brand new data", r3);

        return;
    }

    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,boolean)>(r1, "this is brand new data", 1);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This line was there before you...this is brand new data", r3);

        return;
    }

    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,boolean)>(r1, "this is brand new data", 0);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("this is brand new data", r3);

        return;
    }

    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)>(r1, "this is brand new data", null, 1);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This line was there before you...this is brand new data", r3);

        return;
    }

    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)>(r1, "this is brand new data", null, 0);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("this is brand new data", r3);

        return;
    }

    public void testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,boolean)>(r1, "this is brand new data", 1);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This line was there before you...this is brand new data", r3);

        return;
    }

    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,boolean)>(r1, "this is brand new data", 0);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("this is brand new data", r3);

        return;
    }

    public void testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3, $r5;
        byte[] $r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r5 = "this is brand new data";

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],boolean)>(r1, $r6, 1);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This line was there before you...this is brand new data", r3);

        return;
    }

    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r4;
        java.lang.String r3, $r5;
        byte[] $r6;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r5 = "this is brand new data";

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],boolean)>(r1, $r6, 0);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("this is brand new data", r3);

        return;
    }

    public void testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        byte[] r2;
        java.lang.String r4, $r7;
        java.nio.charset.Charset $r6, $r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r7 = "SKIP_THIS_this is brand new data_AND_SKIP_THIS";

        $r6 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        r2 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int,boolean)>(r1, r2, 10, 22, 1);

        $r8 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>(r1, $r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This line was there before you...this is brand new data", r4);

        return;
    }

    public void testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5;
        byte[] r2;
        java.lang.String r4, $r7;
        java.nio.charset.Charset $r6, $r8;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "lines.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r1, "This line was there before you...");

        $r7 = "SKIP_THIS_this is brand new data_AND_SKIP_THIS";

        $r6 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        r2 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int,boolean)>(r1, r2, 10, 22, 0);

        $r8 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>(r1, $r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("this is brand new data", r4);

        return;
    }

    public void testChecksumCRC32() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, l1;
        java.io.File $r4, $r5;
        java.util.zip.CRC32 $r6;
        java.lang.String $r7, $r9;
        byte[] $r8;
        int $i2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "checksum-test.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r4, "Imagination is more important than knowledge - Einstein", "US-ASCII");

        $r6 = new java.util.zip.CRC32;

        specialinvoke $r6.<java.util.zip.CRC32: void <init>()>();

        $r7 = "Imagination is more important than knowledge - Einstein";

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r9 = "Imagination is more important than knowledge - Einstein";

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        interfaceinvoke $r6.<java.util.zip.Checksum: void update(byte[],int,int)>($r8, 0, $i2);

        l0 = interfaceinvoke $r6.<java.util.zip.Checksum: long getValue()>();

        l1 = staticinvoke <org.apache.commons.io.FileUtils: long checksumCRC32(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, l1);

        return;
    }

    public void testChecksum() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, l1;
        java.util.zip.Checksum r5;
        java.io.File $r6, $r7;
        java.util.zip.CRC32 $r8, $r12;
        java.lang.String $r9, $r11;
        byte[] $r10;
        int $i2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "checksum-test.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r6, "Imagination is more important than knowledge - Einstein", "US-ASCII");

        $r8 = new java.util.zip.CRC32;

        specialinvoke $r8.<java.util.zip.CRC32: void <init>()>();

        $r9 = "Imagination is more important than knowledge - Einstein";

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r11 = "Imagination is more important than knowledge - Einstein";

        $i2 = virtualinvoke $r11.<java.lang.String: int length()>();

        interfaceinvoke $r8.<java.util.zip.Checksum: void update(byte[],int,int)>($r10, 0, $i2);

        l0 = interfaceinvoke $r8.<java.util.zip.Checksum: long getValue()>();

        $r12 = new java.util.zip.CRC32;

        specialinvoke $r12.<java.util.zip.CRC32: void <init>()>();

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>($r6, $r12);

        l1 = interfaceinvoke r5.<java.util.zip.Checksum: long getValue()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r12, r5);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, l1);

        return;
    }

    public void testChecksumOnNullFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.util.zip.CRC32 $r2;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label1:
        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>(null, $r2);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testChecksumOnNullChecksum() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5;
        java.lang.NullPointerException $r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "checksum-test.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r4, "Imagination is more important than knowledge - Einstein", "US-ASCII");

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>($r4, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testChecksumOnDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2;
        java.util.zip.CRC32 $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label1:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(".");

        $r3 = new java.util.zip.CRC32;

        specialinvoke $r3.<java.util.zip.CRC32: void <init>()>();

        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>($r2, $r3);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testChecksumDouble() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        long l0, l1;
        java.io.File $r7, $r8, $r9, $r10;
        java.util.zip.CRC32 $r11, $r18;
        java.lang.String $r12, $r14, $r15, $r17;
        byte[] $r13, $r16;
        int $i2, $i3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "checksum-test.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r7, "Imagination is more important than knowledge - Einstein", "US-ASCII");

        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "checksum-test2.txt");

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>($r9, "To be or not to be - Shakespeare", "US-ASCII");

        $r11 = new java.util.zip.CRC32;

        specialinvoke $r11.<java.util.zip.CRC32: void <init>()>();

        $r12 = "Imagination is more important than knowledge - Einstein";

        $r13 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r14 = "Imagination is more important than knowledge - Einstein";

        $i2 = virtualinvoke $r14.<java.lang.String: int length()>();

        interfaceinvoke $r11.<java.util.zip.Checksum: void update(byte[],int,int)>($r13, 0, $i2);

        $r15 = "To be or not to be - Shakespeare";

        $r16 = virtualinvoke $r15.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r17 = "To be or not to be - Shakespeare";

        $i3 = virtualinvoke $r17.<java.lang.String: int length()>();

        interfaceinvoke $r11.<java.util.zip.Checksum: void update(byte[],int,int)>($r16, 0, $i3);

        l0 = interfaceinvoke $r11.<java.util.zip.Checksum: long getValue()>();

        $r18 = new java.util.zip.CRC32;

        specialinvoke $r18.<java.util.zip.CRC32: void <init>()>();

        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>($r7, $r18);

        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>($r9, $r18);

        l1 = interfaceinvoke $r18.<java.util.zip.Checksum: long getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, l1);

        return;
    }

    public void testDeleteDirectoryWithNonDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label1:
        $r2 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testDeleteQuietlyForNull()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.Exception $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(null);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testDeleteQuietlyDir() throws java.io.IOException
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r5, $r6, $r7, $r8;
        boolean $z1, $z2, $z3, $z5, $z6;
        java.io.BufferedOutputStream $r9;
        java.io.FileOutputStream $r10;
        java.io.IOException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;
        java.lang.Throwable $r16;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "testDeleteQuietlyDir");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "testDeleteQuietlyFile");

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        $r8 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r9 = new java.io.BufferedOutputStream;

        $r10 = new java.io.FileOutputStream;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r7);

        specialinvoke $r9.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r10);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r9, 0L);

        goto label4;

     label3:
        $r16 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r9);

        throw $r16;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r9);

        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r5);

        $z5 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check No Exist", $z5);

        $z6 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check No Exist", $z6);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testDeleteQuietlyFile() throws java.io.IOException
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r6;
        boolean $z0, $z1, $z3;
        java.io.BufferedOutputStream $r7;
        java.io.FileOutputStream $r8;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        java.lang.Throwable $r14;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "testDeleteQuietlyFile");

        $r6 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $r7 = new java.io.BufferedOutputStream;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r8);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r7, 0L);

        goto label4;

     label3:
        $r14 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        throw $r14;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r4);

        $z3 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check No Exist", $z3);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testDeleteQuietlyNonExistent()
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3;
        boolean $z0;
        java.lang.Exception $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("testDeleteQuietlyNonExistent");

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testMoveFile_Rename() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r2 = new java.io.File;

        $r3 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "move1.txt");

        $r4 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r4, $r2);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z0);

        $r5 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Original deleted", $z2);

        return;
    }

    public void testMoveFile_CopyDelete() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r6;
        org.apache.commons.io.FileUtilsTestCase$1 $r5;
        java.lang.String $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "move2.txt");

        $r5 = new org.apache.commons.io.FileUtilsTestCase$1;

        $r6 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r5.<org.apache.commons.io.FileUtilsTestCase$1: void <init>(org.apache.commons.io.FileUtilsTestCase,java.lang.String)>(r0, $r7);

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r5, $r3);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z0);

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Original deleted", $z2);

        return;
    }

    public void testMoveFile_CopyDelete_Failed() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r7;
        org.apache.commons.io.FileUtilsTestCase$2 $r6;
        java.lang.String $r8;
        java.io.IOException $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "move3.txt");

        $r6 = new org.apache.commons.io.FileUtilsTestCase$2;

        $r7 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r6.<org.apache.commons.io.FileUtilsTestCase$2: void <init>(org.apache.commons.io.FileUtilsTestCase,java.lang.String)>(r0, $r8);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r6, $r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("move should have failed as src has not been deleted");

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z2 = 0;

        goto label5;

     label4:
        $z2 = 1;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Rollback", $z2);

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Original exists", $z1);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testMoveFile_Errors() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16;
        boolean $z0, $z1;
        java.io.BufferedOutputStream $r14, $r17;
        java.io.FileOutputStream $r15, $r18;
        java.io.IOException $r19, $r24, $r31;
        java.lang.StringBuilder $r20, $r21, $r22, $r25, $r26, $r27;
        java.lang.String $r23, $r28;
        java.lang.Throwable $r29, $r32;
        java.io.FileNotFoundException $r30;
        java.lang.NullPointerException $r33, $r35;
        org.apache.commons.io.FileExistsException $r34;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label01:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(null, $r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when source is null");

     label02:
        goto label04;

     label03:
        $r35 := @caughtexception;

     label04:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r4, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when destination is null");

     label05:
        goto label07;

     label06:
        $r33 := @caughtexception;

     label07:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("nonexistant");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r5, $r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected FileNotFoundException for source");

     label08:
        goto label10;

     label09:
        $r30 := @caughtexception;

     label10:
        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r7, $r8);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException when source is a directory");

     label11:
        goto label13;

     label12:
        $r31 := @caughtexception;

     label13:
        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "testMoveFileSource");

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "testMoveFileSource");

        $r13 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label14;

        $r24 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label14:
        $r14 = new java.io.BufferedOutputStream;

        $r15 = new java.io.FileOutputStream;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r14.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r15);

     label15:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r14, 0L);

        goto label17;

     label16:
        $r32 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        throw $r32;

     label17:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        $r16 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label18;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label18:
        $r17 = new java.io.BufferedOutputStream;

        $r18 = new java.io.FileOutputStream;

        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        specialinvoke $r17.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r18);

     label19:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r17, 0L);

        goto label21;

     label20:
        $r29 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r17);

        throw $r29;

     label21:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r17);

     label22:
        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r9, $r11);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected FileExistsException when dest already exists");

     label23:
        goto label25;

     label24:
        $r34 := @caughtexception;

     label25:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.io.FileNotFoundException from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch org.apache.commons.io.FileExistsException from label22 to label23 with label24;
    }

    public void testMoveFileToDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r5, $r6, $r8, $r9;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "moveFileDestDir");

        $r5 = new java.io.File;

        $r6 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r7);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check Exist before", $z0);

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check Exist before", $z1);

        $r8 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>($r8, $r3, 1);

        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist after", $z2);

        $r9 = r0.<org.apache.commons.io.FileUtilsTestCase: java.io.File testFile1>;

        $z3 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label1;

        $z4 = 0;

        goto label2;

     label1:
        $z4 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Original deleted", $z4);

        return;
    }

    public void testMoveFileToDirectory_Errors() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r16, $r17;
        boolean $z0, $z1;
        java.io.BufferedOutputStream $r11, $r14;
        java.io.FileOutputStream $r12, $r15;
        java.io.IOException $r18, $r23, $r28, $r30;
        java.lang.StringBuilder $r19, $r20, $r21, $r24, $r25, $r26;
        java.lang.String $r22, $r27;
        java.lang.NullPointerException $r29, $r32;
        java.lang.Throwable $r31, $r33;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label01:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>(null, $r4, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when source is null");

     label02:
        goto label04;

     label03:
        $r32 := @caughtexception;

     label04:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>($r5, null, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when destination is null");

     label05:
        goto label07;

     label06:
        $r29 := @caughtexception;

     label07:
        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "testMoveFileFile1");

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "testMoveFileFile2");

        $r10 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label08;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label08:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label09:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, 0L);

        goto label11;

     label10:
        $r33 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r33;

     label11:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        $r13 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label12;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label12:
        $r14 = new java.io.BufferedOutputStream;

        $r15 = new java.io.FileOutputStream;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r14.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r15);

     label13:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r14, 0L);

        goto label15;

     label14:
        $r31 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        throw $r31;

     label15:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

     label16:
        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>($r6, $r8, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException when dest not a directory");

     label17:
        goto label19;

     label18:
        $r28 := @caughtexception;

     label19:
        $r16 = new java.io.File;

        $r17 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "testMoveFileNonExistant");

     label20:
        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>($r6, $r16, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException when dest does not exist and create=false");

     label21:
        goto label23;

     label22:
        $r30 := @caughtexception;

     label23:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label20 to label21 with label22;
    }

    public void testMoveDirectory_Rename() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r8, $r9, $r10, $r11, $r14, $r16, $r18;
        boolean $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.BufferedOutputStream $r12;
        java.io.FileOutputStream $r13;
        java.lang.String $r17, $r19, $r24;
        java.io.IOException $r20;
        java.lang.StringBuilder $r21, $r22, $r23;
        java.lang.Throwable $r25;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "testMoveDirectory1Source");

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "foo");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "bar");

        virtualinvoke $r9.<java.io.File: boolean mkdirs()>();

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label1:
        $r12 = new java.io.BufferedOutputStream;

        $r13 = new java.io.FileOutputStream;

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r12.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r13);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r12, 0L);

        goto label4;

     label3:
        $r25 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        throw $r25;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "testMoveDirectory1Dest");

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r14);

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r8, $r14);

        $z2 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z2);

        $z3 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label5;

        $z6 = 0;

        goto label6;

     label5:
        $z6 = 1;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Original deleted", $z6);

        $r16 = new java.io.File;

        $r17 = virtualinvoke $r9.<java.io.File: java.lang.String getName()>();

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, $r17);

        $r18 = new java.io.File;

        $r19 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>();

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, $r19);

        $z4 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check dir moved", $z4);

        $z5 = virtualinvoke $r18.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check file moved", $z5);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testMoveDirectory_CopyDelete() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r9, $r10, $r11, $r14, $r16, $r18;
        org.apache.commons.io.FileUtilsTestCase$3 $r8;
        boolean $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.BufferedOutputStream $r12;
        java.io.FileOutputStream $r13;
        java.lang.String $r17, $r19, $r24;
        java.io.IOException $r20;
        java.lang.StringBuilder $r21, $r22, $r23;
        java.lang.Throwable $r25;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r8 = new org.apache.commons.io.FileUtilsTestCase$3;

        specialinvoke $r8.<org.apache.commons.io.FileUtilsTestCase$3: void <init>(org.apache.commons.io.FileUtilsTestCase,java.io.File,java.lang.String)>(r0, r1, "testMoveDirectory2Source");

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "foo");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "bar");

        virtualinvoke $r9.<java.io.File: boolean mkdirs()>();

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label1:
        $r12 = new java.io.BufferedOutputStream;

        $r13 = new java.io.FileOutputStream;

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r12.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r13);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r12, 0L);

        goto label4;

     label3:
        $r25 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        throw $r25;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "testMoveDirectory1Dest");

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r14);

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r8, $r14);

        $z2 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist", $z2);

        $z3 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label5;

        $z6 = 0;

        goto label6;

     label5:
        $z6 = 1;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Original deleted", $z6);

        $r16 = new java.io.File;

        $r17 = virtualinvoke $r9.<java.io.File: java.lang.String getName()>();

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, $r17);

        $r18 = new java.io.File;

        $r19 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>();

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, $r19);

        $z4 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check dir moved", $z4);

        $z5 = virtualinvoke $r18.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check file moved", $z5);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testMoveDirectory_Errors() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17;
        boolean $z0;
        java.io.BufferedOutputStream $r11;
        java.io.FileOutputStream $r12;
        java.io.IOException $r18, $r25;
        java.lang.StringBuilder $r19, $r20, $r21;
        java.lang.String $r22;
        java.lang.Throwable $r23;
        org.apache.commons.io.FileExistsException $r24;
        java.io.FileNotFoundException $r26;
        java.lang.NullPointerException $r27, $r28;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label01:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>(null, $r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when source is null");

     label02:
        goto label04;

     label03:
        $r28 := @caughtexception;

     label04:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r5, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when destination is null");

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

     label07:
        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("nonexistant");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r6, $r7);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected FileNotFoundException for source");

     label08:
        goto label10;

     label09:
        $r26 := @caughtexception;

     label10:
        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "testMoveDirectoryFile");

        $r10 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label11;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label11:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label12:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, 0L);

        goto label14;

     label13:
        $r23 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r23;

     label14:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

     label15:
        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r8, $r13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException when source is not a directory");

     label16:
        goto label18;

     label17:
        $r25 := @caughtexception;

     label18:
        $r14 = new java.io.File;

        $r15 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "testMoveDirectorySource");

        $r16 = new java.io.File;

        $r17 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "testMoveDirectoryDest");

        virtualinvoke $r14.<java.io.File: boolean mkdir()>();

        virtualinvoke $r16.<java.io.File: boolean mkdir()>();

     label19:
        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r14, $r16);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected FileExistsException when dest already exists");

     label20:
        goto label22;

     label21:
        $r24 := @caughtexception;

     label22:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.io.FileNotFoundException from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.io.IOException from label15 to label16 with label17;
        catch org.apache.commons.io.FileExistsException from label19 to label20 with label21;
    }

    public void testMoveDirectoryToDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r9, $r10, $r11, $r12, $r15, $r17, $r19, $r21;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.BufferedOutputStream $r13;
        java.io.FileOutputStream $r14;
        java.lang.String $r18, $r20, $r22, $r27;
        java.io.IOException $r23;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.lang.Throwable $r28;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "testMoveDirectory1Source");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "foo");

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "bar");

        virtualinvoke $r10.<java.io.File: boolean mkdirs()>();

        $r12 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label1:
        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r13, 0L);

        goto label4;

     label3:
        $r28 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        throw $r28;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "testMoveDirectory1Dest");

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r15);

        $z2 = virtualinvoke $r15.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check Exist before", $z2);

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r9, $r15, 1);

        $z3 = virtualinvoke $r15.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Exist after", $z3);

        $z4 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label5;

        $z8 = 0;

        goto label6;

     label5:
        $z8 = 1;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Original deleted", $z8);

        $r17 = new java.io.File;

        $r18 = virtualinvoke $r9.<java.io.File: java.lang.String getName()>();

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, $r18);

        $r19 = new java.io.File;

        $r20 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>();

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r20);

        $r21 = new java.io.File;

        $r22 = virtualinvoke $r11.<java.io.File: java.lang.String getName()>();

        specialinvoke $r21.<java.io.File: void <init>(java.io.File,java.lang.String)>($r19, $r22);

        $z5 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check dir moved", $z5);

        $z6 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check child dir moved", $z6);

        $z7 = virtualinvoke $r21.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check file moved", $z7);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testMoveDirectoryToDirectory_Errors() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r16, $r17;
        boolean $z0, $z1;
        java.io.BufferedOutputStream $r11, $r14;
        java.io.FileOutputStream $r12, $r15;
        java.io.IOException $r18, $r23, $r30, $r31;
        java.lang.StringBuilder $r19, $r20, $r21, $r24, $r25, $r26;
        java.lang.String $r22, $r27;
        java.lang.Throwable $r28, $r32;
        java.lang.NullPointerException $r29, $r33;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label01:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>(null, $r4, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when source is null");

     label02:
        goto label04;

     label03:
        $r33 := @caughtexception;

     label04:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r5, null, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when destination is null");

     label05:
        goto label07;

     label06:
        $r29 := @caughtexception;

     label07:
        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "testMoveFileFile1");

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "testMoveFileFile2");

        $r10 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label08;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label08:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label09:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, 0L);

        goto label11;

     label10:
        $r28 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r28;

     label11:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        $r13 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label12;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label12:
        $r14 = new java.io.BufferedOutputStream;

        $r15 = new java.io.FileOutputStream;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r14.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r15);

     label13:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r14, 0L);

        goto label15;

     label14:
        $r32 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        throw $r32;

     label15:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

     label16:
        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r6, $r8, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException when dest not a directory");

     label17:
        goto label19;

     label18:
        $r30 := @caughtexception;

     label19:
        $r16 = new java.io.File;

        $r17 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "testMoveFileNonExistant");

     label20:
        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r6, $r16, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException when dest does not exist and create=false");

     label21:
        goto label23;

     label22:
        $r31 := @caughtexception;

     label23:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label20 to label21 with label22;
    }

    public void testMoveToDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r17;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.io.BufferedOutputStream $r13;
        java.io.FileOutputStream $r14;
        java.lang.String $r16, $r18, $r23;
        java.io.IOException $r19;
        java.lang.StringBuilder $r20, $r21, $r22;
        java.lang.Throwable $r24;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "testMoveToDirectoryDestDir");

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "testMoveToDirectoryTestDir");

        $r10 = new java.io.File;

        $r11 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "testMoveToDirectoryTestFile");

        virtualinvoke $r8.<java.io.File: boolean mkdirs()>();

        $r12 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label1:
        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r13, 0L);

        goto label4;

     label3:
        $r24 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        throw $r24;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r13);

        $r15 = new java.io.File;

        $r16 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>();

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r16);

        $r17 = new java.io.File;

        $r18 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>();

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r18);

        $z2 = virtualinvoke $r15.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check File Doesnt exist", $z2);

        $z3 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check Dir Doesnt exist", $z3);

        staticinvoke <org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>($r10, $r6, 1);

        $z4 = virtualinvoke $r15.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check File exists", $z4);

        $z5 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check Original File doesn\'t exist", $z5);

        staticinvoke <org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>($r8, $r6, 1);

        $z6 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check Dir exists", $z6);

        $z7 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Check Original Dir doesn\'t exist", $z7);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testMoveToDirectory_Errors() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r4, $r5, $r6, $r7, $r8;
        java.io.IOException $r9;
        java.lang.NullPointerException $r10, $r11;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

     label01:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>(null, $r3, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when source is null");

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

     label04:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo");

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r4, null, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException when destination is null");

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

     label07:
        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "nonexistant");

        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "MoveToDirectoryDestDir");

     label08:
        staticinvoke <org.apache.commons.io.FileUtils: void moveToDirectory(java.io.File,java.io.File,boolean)>($r5, $r7, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException when source does not exist");

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public void testIO300() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File r1, $r5, $r6;
        boolean $z0, $z1, $z2;
        java.io.IOException $r7;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileUtilsTestCase: java.io.File getTestDirectory()>();

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "dir1");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "dir2");

        $z0 = virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r5, $r6, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expected IOException");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testIO276() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.io.File $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11;
        java.lang.String $r7, $r12;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>("target", "IO276");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not be present");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r7, $z0);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "IO276.txt");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not be present");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r8.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r12, $z1);

        staticinvoke <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>($r3);

        return;
    }

    public void testIncorrectOutputSize() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsTestCase r0;
        java.lang.String r4;
        java.io.File $r6;
        org.apache.commons.io.FileUtilsTestCase$ShorterFile $r7;
        java.lang.Throwable $r8;
        java.lang.Exception $r9;
        boolean $z2;

        r0 := @this: org.apache.commons.io.FileUtilsTestCase;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("pom.xml");

        $r7 = new org.apache.commons.io.FileUtilsTestCase$ShorterFile;

        specialinvoke $r7.<org.apache.commons.io.FileUtilsTestCase$ShorterFile: void <init>(java.lang.String)>("target/pom.tmp");

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r6, $r7);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IOException");

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        r4 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>();

        $z2 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("Failed to copy full contents");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>(r4, $z2);

     label4:
        virtualinvoke $r7.<java.io.File: boolean delete()>();

        goto label7;

     label5:
        $r8 := @caughtexception;

        virtualinvoke $r7.<java.io.File: boolean delete()>();

        throw $r8;

     label6:
        virtualinvoke $r7.<java.io.File: boolean delete()>();

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }
}
