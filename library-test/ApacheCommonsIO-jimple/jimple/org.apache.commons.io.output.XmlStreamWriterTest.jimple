public class org.apache.commons.io.output.XmlStreamWriterTest extends java.lang.Object
{
    private static final java.lang.String TEXT_LATIN1;
    private static final java.lang.String TEXT_LATIN7;
    private static final java.lang.String TEXT_LATIN15;
    private static final java.lang.String TEXT_EUC_JP;
    private static final java.lang.String TEXT_UNICODE;

    public void <init>()
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String createXmlContent(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3, $r7, r11;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r11 = "<?xml version=\"1.0\"?>";

        if r1 == null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("<?xml version=\"1.0\" encoding=\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"?>");

        r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r2 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n<text>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</text>");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static void checkXmlContent(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, r2, $r8;
        byte[] r5, $r9;
        java.io.ByteArrayOutputStream $r6;
        org.apache.commons.io.output.XmlStreamWriter $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new org.apache.commons.io.output.XmlStreamWriter;

        specialinvoke $r7.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r6, r2);

        virtualinvoke $r7.<org.apache.commons.io.output.XmlStreamWriter: void write(java.lang.String)>(r0);

        virtualinvoke $r7.<org.apache.commons.io.output.XmlStreamWriter: void close()>();

        r5 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String getEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r8);

        $r9 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    private static void checkXmlWriter(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, null);

        return;
    }

    private static void checkXmlWriter(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, r2, r3, r4, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: java.lang.String createXmlContent(java.lang.String,java.lang.String)>(r0, r1);

        r4 = r1;

        if r1 != null goto label3;

        if r2 != null goto label1;

        $r5 = "UTF-8";

        goto label2;

     label1:
        $r5 = r2;

     label2:
        r4 = $r5;

     label3:
        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlContent(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r2);

        return;
    }

    public void testNoXmlHeader() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlContent(java.lang.String,java.lang.String,java.lang.String)>("<text>text with no XML header</text>", "UTF-8", null);

        return;
    }

    public void testEmpty() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;
        java.io.ByteArrayOutputStream $r3;
        org.apache.commons.io.output.XmlStreamWriter $r4;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new org.apache.commons.io.output.XmlStreamWriter;

        specialinvoke $r4.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream)>($r3);

        virtualinvoke $r4.<org.apache.commons.io.output.XmlStreamWriter: void flush()>();

        virtualinvoke $r4.<org.apache.commons.io.output.XmlStreamWriter: void write(java.lang.String)>("");

        virtualinvoke $r4.<org.apache.commons.io.output.XmlStreamWriter: void flush()>();

        virtualinvoke $r4.<org.apache.commons.io.output.XmlStreamWriter: void write(java.lang.String)>(".");

        virtualinvoke $r4.<org.apache.commons.io.output.XmlStreamWriter: void flush()>();

        virtualinvoke $r4.<org.apache.commons.io.output.XmlStreamWriter: void close()>();

        return;
    }

    public void testDefaultEncoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", null, null);

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", null, "UTF-8");

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", null, "UTF-16");

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", null, "UTF-16BE");

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", null, "ISO-8859-1");

        return;
    }

    public void testUTF8Encoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", "UTF-8");

        return;
    }

    public void testUTF16Encoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", "UTF-16");

        return;
    }

    public void testUTF16BEEncoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", "UTF-16BE");

        return;
    }

    public void testUTF16LEEncoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042", "UTF-16LE");

        return;
    }

    public void testLatin1Encoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("eacute: \u00e9", "ISO-8859-1");

        return;
    }

    public void testLatin7Encoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("alpha: \u03b1", "ISO-8859-7");

        return;
    }

    public void testLatin15Encoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("euro: \u20ac", "ISO-8859-15");

        return;
    }

    public void testEUC_JPEncoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("hiragana A: \u3042", "EUC-JP");

        return;
    }

    public void testEBCDICEncoding() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriterTest r0;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriterTest;

        staticinvoke <org.apache.commons.io.output.XmlStreamWriterTest: void checkXmlWriter(java.lang.String,java.lang.String)>("simple text in EBCDIC", "CP1047");

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.output.XmlStreamWriterTest: java.lang.String TEXT_UNICODE> = "eacute: \u00e9, alpha: \u03b1, euro: \u20ac, hiragana A: \u3042";

        <org.apache.commons.io.output.XmlStreamWriterTest: java.lang.String TEXT_EUC_JP> = "hiragana A: \u3042";

        <org.apache.commons.io.output.XmlStreamWriterTest: java.lang.String TEXT_LATIN15> = "euro: \u20ac";

        <org.apache.commons.io.output.XmlStreamWriterTest: java.lang.String TEXT_LATIN7> = "alpha: \u03b1";

        <org.apache.commons.io.output.XmlStreamWriterTest: java.lang.String TEXT_LATIN1> = "eacute: \u00e9";

        return;
    }
}
