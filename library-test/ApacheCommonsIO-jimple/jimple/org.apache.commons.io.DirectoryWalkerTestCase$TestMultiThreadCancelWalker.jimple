class org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker extends org.apache.commons.io.DirectoryWalker
{
    private final java.lang.String cancelFileName;
    private final boolean suppressCancel;
    private boolean cancelled;
    public java.util.List results;

    void <init>(java.lang.String, boolean)
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void <init>()>();

        r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: java.lang.String cancelFileName> = r1;

        r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: boolean suppressCancel> = z0;

        return;
    }

    protected java.util.List find(java.io.File) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker r0;
        java.io.File r1;
        java.util.ArrayList $r2;
        java.util.List $r3, $r4;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker;

        r1 := @parameter0: java.io.File;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: java.util.List results> = $r2;

        $r3 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: java.util.List results>;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: void walk(java.io.File,java.util.Collection)>(r1, $r3);

        $r4 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: java.util.List results>;

        return $r4;
    }

    protected void handleDirectoryEnd(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;
        boolean $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $z1 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: boolean cancelled>;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r3 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: java.lang.String cancelFileName>;

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: boolean cancelled> = 1;

     label1:
        return;
    }

    protected void handleFile(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;
        boolean $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $z1 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: boolean cancelled>;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r3 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: java.lang.String cancelFileName>;

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: boolean cancelled> = 1;

     label1:
        return;
    }

    protected boolean handleIsCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;
        boolean $z0;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        $z0 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: boolean cancelled>;

        return $z0;
    }

    protected void handleCancelled(java.io.File, java.util.Collection, org.apache.commons.io.DirectoryWalker$CancelException) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker r0;
        java.io.File r1;
        java.util.Collection r2;
        org.apache.commons.io.DirectoryWalker$CancelException r3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: org.apache.commons.io.DirectoryWalker$CancelException;

        $z0 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker: boolean suppressCancel>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)>(r1, r2, r3);

     label1:
        return;
    }
}
