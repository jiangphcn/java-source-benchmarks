public class org.apache.commons.io.input.ReaderInputStream extends java.io.InputStream
{
    private static final int DEFAULT_BUFFER_SIZE;
    private final java.io.Reader reader;
    private final java.nio.charset.CharsetEncoder encoder;
    private final java.nio.CharBuffer encoderIn;
    private final java.nio.ByteBuffer encoderOut;
    private java.nio.charset.CoderResult lastCoderResult;
    private boolean endOfInput;

    public void <init>(java.io.Reader, java.nio.charset.CharsetEncoder)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader r1;
        java.nio.charset.CharsetEncoder r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.nio.charset.CharsetEncoder;

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)>(r1, r2, 1024);

        return;
    }

    public void <init>(java.io.Reader, java.nio.charset.CharsetEncoder, int)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader r1;
        java.nio.charset.CharsetEncoder r2;
        int i0;
        java.nio.CharBuffer $r3, $r4;
        java.nio.ByteBuffer $r6, $r7;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.nio.charset.CharsetEncoder;

        i0 := @parameter2: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader> = r1;

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CharsetEncoder encoder> = r2;

        $r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(i0);

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn> = $r3;

        $r4 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        virtualinvoke $r4.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(128);

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut> = $r6;

        $r7 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }

    public void <init>(java.io.Reader, java.nio.charset.Charset, int)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader r1;
        java.nio.charset.Charset r2;
        int i0;
        java.nio.charset.CharsetEncoder $r3, $r5, $r7;
        java.nio.charset.CodingErrorAction $r4, $r6;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.nio.charset.Charset;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r5 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)>(r1, $r7, i0);

        return;
    }

    public void <init>(java.io.Reader, java.nio.charset.Charset)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader r1;
        java.nio.charset.Charset r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset,int)>(r1, r2, 1024);

        return;
    }

    public void <init>(java.io.Reader, java.lang.String, int)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader r1;
        java.lang.String r2;
        int i0;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset,int)>(r1, $r3, i0);

        return;
    }

    public void <init>(java.io.Reader, java.lang.String)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader r1;
        java.lang.String r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.lang.String,int)>(r1, r2, 1024);

        return;
    }

    public void <init>(java.io.Reader)
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader r1;
        java.nio.charset.Charset $r2;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset)>(r1, $r2);

        return;
    }

    private void fillBuffer() throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.nio.charset.CoderResult $r3, $r15, $r20;
        java.nio.CharBuffer $r4, $r6, $r7, $r10, $r11, $r13, $r18;
        java.io.Reader $r8;
        char[] $r9;
        java.nio.ByteBuffer $r16, $r19, $r21;
        java.nio.charset.CharsetEncoder $r17;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $z0 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult>;

        if $r3 == null goto label1;

        $r15 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult>;

        $z1 = virtualinvoke $r15.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z1 == 0 goto label4;

     label1:
        $r4 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        virtualinvoke $r4.<java.nio.CharBuffer: java.nio.CharBuffer compact()>();

        $r6 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        i0 = virtualinvoke $r6.<java.nio.CharBuffer: int position()>();

        $r8 = r0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader>;

        $r7 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $r9 = virtualinvoke $r7.<java.nio.CharBuffer: char[] array()>();

        $r10 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $i2 = virtualinvoke $r10.<java.nio.CharBuffer: int remaining()>();

        i1 = virtualinvoke $r8.<java.io.Reader: int read(char[],int,int)>($r9, i0, $i2);

        if i1 != -1 goto label2;

        r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput> = 1;

        goto label3;

     label2:
        $r11 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $i3 = i0 + i1;

        virtualinvoke $r11.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i3);

     label3:
        $r13 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        virtualinvoke $r13.<java.nio.CharBuffer: java.nio.Buffer flip()>();

     label4:
        $r16 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r16.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        $r17 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CharsetEncoder encoder>;

        $r18 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;

        $r19 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z2 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        $r20 = virtualinvoke $r17.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r18, $r19, $z2);

        r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult> = $r20;

        $r21 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r21.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, i4, i5, $i6, i7, $i8;
        java.nio.ByteBuffer $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.NullPointerException $r7;
        java.lang.IndexOutOfBoundsException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: byte[];

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Byte array must not be null");

        throw $r7;

     label1:
        if i5 < 0 goto label2;

        if i4 < 0 goto label2;

        $i2 = i4 + i5;

        $i1 = lengthof r1;

        if $i2 <= $i1 goto label3;

     label2:
        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Array Size=");

        $i6 = lengthof r1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label3:
        i7 = 0;

        if i5 != 0 goto label6;

        return 0;

     label4:
        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z0 = virtualinvoke $r2.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $i3 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i5);

        $r5 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i4, i0);

        i4 = i4 + i0;

        i5 = i5 - i0;

        i7 = i7 + i0;

        goto label6;

     label5:
        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()>();

        $z1 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z1 == 0 goto label6;

        $r3 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z2 = virtualinvoke $r3.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label6;

        goto label7;

     label6:
        if i5 > 0 goto label4;

     label7:
        if i7 != 0 goto label8;

        $z3 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z3 == 0 goto label8;

        $i8 = -1;

        goto label9;

     label8:
        $i8 = i7;

     label9:
        return $i8;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.io.input.ReaderInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        boolean $z0, $z1, $z2;
        java.nio.ByteBuffer $r1, $r2, $r3;
        byte $b0;
        short $s1;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

     label1:
        $r3 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z2 = virtualinvoke $r3.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label2;

        $r2 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $b0 = virtualinvoke $r2.<java.nio.ByteBuffer: byte get()>();

        $s1 = $b0 & 255;

        return $s1;

     label2:
        specialinvoke r0.<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()>();

        $z0 = r0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;

        $z1 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label1;

        return -1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.input.ReaderInputStream r0;
        java.io.Reader $r1;

        r0 := @this: org.apache.commons.io.input.ReaderInputStream;

        $r1 = r0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.input.ReaderInputStream: int DEFAULT_BUFFER_SIZE> = 1024;

        return;
    }
}
