class org.apache.commons.io.output.ChunkedOutputStreamTest$1 extends org.apache.commons.io.output.ByteArrayOutputStream
{
    final org.apache.commons.io.output.ChunkedOutputStreamTest this$0;
    private final java.util.concurrent.atomic.AtomicInteger val$numWrites;

    void <init>(org.apache.commons.io.output.ChunkedOutputStreamTest, java.util.concurrent.atomic.AtomicInteger)
    {
        org.apache.commons.io.output.ChunkedOutputStreamTest$1 r0;
        org.apache.commons.io.output.ChunkedOutputStreamTest r1;
        java.util.concurrent.atomic.AtomicInteger r2;

        r0 := @this: org.apache.commons.io.output.ChunkedOutputStreamTest$1;

        r1 := @parameter0: org.apache.commons.io.output.ChunkedOutputStreamTest;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        r0.<org.apache.commons.io.output.ChunkedOutputStreamTest$1: org.apache.commons.io.output.ChunkedOutputStreamTest this$0> = r1;

        r0.<org.apache.commons.io.output.ChunkedOutputStreamTest$1: java.util.concurrent.atomic.AtomicInteger val$numWrites> = r2;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        return;
    }

    public void write(byte[], int, int)
    {
        org.apache.commons.io.output.ChunkedOutputStreamTest$1 r0;
        byte[] r1;
        int i0, i1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: org.apache.commons.io.output.ChunkedOutputStreamTest$1;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.io.output.ChunkedOutputStreamTest$1: java.util.concurrent.atomic.AtomicInteger val$numWrites>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }
}
