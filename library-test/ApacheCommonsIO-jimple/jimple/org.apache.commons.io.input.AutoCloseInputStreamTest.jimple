public class org.apache.commons.io.input.AutoCloseInputStreamTest extends java.lang.Object
{
    private byte[] data;
    private java.io.InputStream stream;
    private boolean closed;

    public void <init>()
    {
        org.apache.commons.io.input.AutoCloseInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.AutoCloseInputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.io.input.AutoCloseInputStreamTest r0;
        byte[] $r1, $r4;
        org.apache.commons.io.input.AutoCloseInputStream $r2;
        org.apache.commons.io.input.AutoCloseInputStreamTest$1 $r3;

        r0 := @this: org.apache.commons.io.input.AutoCloseInputStreamTest;

        $r1 = newarray (byte)[3];

        $r1[0] = 120;

        $r1[1] = 121;

        $r1[2] = 122;

        r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data> = $r1;

        $r2 = new org.apache.commons.io.input.AutoCloseInputStream;

        $r3 = new org.apache.commons.io.input.AutoCloseInputStreamTest$1;

        $r4 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        specialinvoke $r3.<org.apache.commons.io.input.AutoCloseInputStreamTest$1: void <init>(org.apache.commons.io.input.AutoCloseInputStreamTest,byte[])>(r0, $r4);

        specialinvoke $r2.<org.apache.commons.io.input.AutoCloseInputStream: void <init>(java.io.InputStream)>($r3);

        r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream> = $r2;

        r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed> = 0;

        return;
    }

    public void testClose() throws java.io.IOException
    {
        org.apache.commons.io.input.AutoCloseInputStreamTest r0;
        java.io.InputStream $r1, $r2;
        boolean $z0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.input.AutoCloseInputStreamTest;

        $r1 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        $z0 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("closed", $z0);

        $r2 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read()", -1L, $l1);

        return;
    }

    public void testRead() throws java.io.IOException
    {
        org.apache.commons.io.input.AutoCloseInputStreamTest r0;
        byte b0;
        int i1, $i3, $i5, i7;
        byte[] $r2;
        java.io.InputStream $r3, $r4;
        long $l2, $l4, $l6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.input.AutoCloseInputStreamTest;

        $r2 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        i1 = lengthof $r2;

        i7 = 0;

        goto label2;

     label1:
        b0 = $r2[i7];

        $l2 = (long) b0;

        $r3 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        $i3 = virtualinvoke $r3.<java.io.InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read()", $l2, $l4);

        $z0 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("closed", $z0);

        i7 = i7 + 1;

     label2:
        if i7 < i1 goto label1;

        $r4 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        $i5 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read()", -1L, $l6);

        $z1 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("closed", $z1);

        return;
    }

    public void testReadBuffer() throws java.io.IOException
    {
        org.apache.commons.io.input.AutoCloseInputStreamTest r0;
        byte[] r1, $r2, $r3, $r5;
        int $i0, $i1, $i2, $i7, $i10, i12, i13, i14;
        boolean $z0, $z1;
        byte $b3, $b4;
        long $l5, $l6, $l8, $l9, $l11;
        java.io.InputStream $r4, $r6;

        r0 := @this: org.apache.commons.io.input.AutoCloseInputStreamTest;

        $r2 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        $i0 = lengthof $r2;

        $i1 = $i0 * 2;

        r1 = newarray (byte)[$i1];

        i12 = 0;

        i13 = 0;

        goto label4;

     label1:
        $z0 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("closed", $z0);

        i14 = 0;

        goto label3;

     label2:
        $r3 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        $i2 = i12 + i14;

        $b3 = $r3[$i2];

        $l6 = (long) $b3;

        $b4 = r1[i14];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read(b)", $l6, $l5);

        i14 = i14 + 1;

     label3:
        if i14 < i13 goto label2;

        i12 = i12 + i13;

        $r4 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        i13 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>(r1);

     label4:
        if i13 != -1 goto label1;

        $r5 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        $i7 = lengthof $r5;

        $l9 = (long) $i7;

        $l8 = (long) i12;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read(b)", $l9, $l8);

        $z1 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("closed", $z1);

        $r6 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        $i10 = virtualinvoke $r6.<java.io.InputStream: int read(byte[])>(r1);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read(b)", -1L, $l11);

        return;
    }

    public void testReadBufferOffsetLength() throws java.io.IOException
    {
        org.apache.commons.io.input.AutoCloseInputStreamTest r0;
        byte[] r1, $r2, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i12, $i13, i15, i16, i17;
        boolean $z0, $z1;
        java.io.InputStream $r3, $r7;
        long $l5, $l6, $l10, $l11, $l14;
        byte $b8, $b9;

        r0 := @this: org.apache.commons.io.input.AutoCloseInputStreamTest;

        $r2 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        $i0 = lengthof $r2;

        $i1 = $i0 * 2;

        r1 = newarray (byte)[$i1];

        i15 = 0;

        i16 = 0;

        goto label2;

     label1:
        $z0 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("closed", $z0);

        i15 = i15 + i16;

        $r3 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        $i2 = lengthof r1;

        $i3 = $i2 - i15;

        i16 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>(r1, i15, $i3);

     label2:
        if i16 != -1 goto label1;

        $r4 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        $i4 = lengthof $r4;

        $l6 = (long) $i4;

        $l5 = (long) i15;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read(b, off, len)", $l6, $l5);

        i17 = 0;

        goto label4;

     label3:
        $r6 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        $b8 = $r6[i17];

        $l11 = (long) $b8;

        $b9 = r1[i17];

        $l10 = (long) $b9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read(b, off, len)", $l11, $l10);

        i17 = i17 + 1;

     label4:
        $r5 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: byte[] data>;

        $i7 = lengthof $r5;

        if i17 < $i7 goto label3;

        $z1 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("closed", $z1);

        $r7 = r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: java.io.InputStream stream>;

        $i12 = lengthof r1;

        $i13 = virtualinvoke $r7.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i12);

        $l14 = (long) $i13;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read(b, off, len)", -1L, $l14);

        return;
    }

    static void access$0(org.apache.commons.io.input.AutoCloseInputStreamTest, boolean)
    {
        org.apache.commons.io.input.AutoCloseInputStreamTest r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.io.input.AutoCloseInputStreamTest;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.io.input.AutoCloseInputStreamTest: boolean closed> = z0;

        return;
    }
}
