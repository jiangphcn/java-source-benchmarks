public class org.apache.commons.io.EndianUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.io.EndianUtils r0;

        r0 := @this: org.apache.commons.io.EndianUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static short swapShort(short)
    {
        short s0, $s1, $s2, $s3, $s4, $s8;
        int $i5, $i6, $i7;

        s0 := @parameter0: short;

        $s1 = s0 >> 0;

        $s2 = $s1 & 255;

        $i6 = $s2 << 8;

        $s3 = s0 >> 8;

        $s4 = $s3 & 255;

        $i5 = $s4 << 0;

        $i7 = $i6 + $i5;

        $s8 = (short) $i7;

        return $s8;
    }

    public static int swapInteger(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        i0 := @parameter0: int;

        $i1 = i0 >> 0;

        $i2 = $i1 & 255;

        $i6 = $i2 << 24;

        $i3 = i0 >> 8;

        $i4 = $i3 & 255;

        $i5 = $i4 << 16;

        $i10 = $i6 + $i5;

        $i7 = i0 >> 16;

        $i8 = $i7 & 255;

        $i9 = $i8 << 8;

        $i14 = $i10 + $i9;

        $i11 = i0 >> 24;

        $i12 = $i11 & 255;

        $i13 = $i12 << 0;

        $i15 = $i14 + $i13;

        return $i15;
    }

    public static long swapLong(long)
    {
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31;

        l0 := @parameter0: long;

        $l1 = l0 >> 0;

        $l2 = $l1 & 255L;

        $l6 = $l2 << 56;

        $l3 = l0 >> 8;

        $l4 = $l3 & 255L;

        $l5 = $l4 << 48;

        $l10 = $l6 + $l5;

        $l7 = l0 >> 16;

        $l8 = $l7 & 255L;

        $l9 = $l8 << 40;

        $l14 = $l10 + $l9;

        $l11 = l0 >> 24;

        $l12 = $l11 & 255L;

        $l13 = $l12 << 32;

        $l18 = $l14 + $l13;

        $l15 = l0 >> 32;

        $l16 = $l15 & 255L;

        $l17 = $l16 << 24;

        $l22 = $l18 + $l17;

        $l19 = l0 >> 40;

        $l20 = $l19 & 255L;

        $l21 = $l20 << 16;

        $l26 = $l22 + $l21;

        $l23 = l0 >> 48;

        $l24 = $l23 & 255L;

        $l25 = $l24 << 8;

        $l30 = $l26 + $l25;

        $l27 = l0 >> 56;

        $l28 = $l27 & 255L;

        $l29 = $l28 << 0;

        $l31 = $l30 + $l29;

        return $l31;
    }

    public static float swapFloat(float)
    {
        float f0, $f1;
        int $i0, $i1;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>($i0);

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        return $f1;
    }

    public static double swapDouble(double)
    {
        double d0, $d1;
        long $l0, $l1;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>($l0);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d1;
    }

    public static void writeSwappedShort(byte[], int, short)
    {
        byte[] r0;
        int i0, $i5, $i9;
        short s1, $s2, $s3, $s6, $s7;
        byte $b4, $b8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        s1 := @parameter2: short;

        $i5 = i0 + 0;

        $s2 = s1 >> 0;

        $s3 = $s2 & 255;

        $b4 = (byte) $s3;

        r0[$i5] = $b4;

        $i9 = i0 + 1;

        $s6 = s1 >> 8;

        $s7 = $s6 & 255;

        $b8 = (byte) $s7;

        r0[$i9] = $b8;

        return;
    }

    public static short readSwappedShort(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i4, $i7, $i8, $i9;
        byte $b2, $b5;
        short $s3, $s6, $s10;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 0;

        $b2 = r0[$i1];

        $s3 = $b2 & 255;

        $i8 = $s3 << 0;

        $i4 = i0 + 1;

        $b5 = r0[$i4];

        $s6 = $b5 & 255;

        $i7 = $s6 << 8;

        $i9 = $i8 + $i7;

        $s10 = (short) $i9;

        return $s10;
    }

    public static int readSwappedUnsignedShort(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i4, $i7, $i8, $i9;
        byte $b2, $b5;
        short $s3, $s6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 0;

        $b2 = r0[$i1];

        $s3 = $b2 & 255;

        $i8 = $s3 << 0;

        $i4 = i0 + 1;

        $b5 = r0[$i4];

        $s6 = $b5 & 255;

        $i7 = $s6 << 8;

        $i9 = $i8 + $i7;

        return $i9;
    }

    public static void writeSwappedInteger(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i17;
        byte $b4, $b8, $b12, $b16;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = i0 + 0;

        $i2 = i1 >> 0;

        $i3 = $i2 & 255;

        $b4 = (byte) $i3;

        r0[$i5] = $b4;

        $i9 = i0 + 1;

        $i6 = i1 >> 8;

        $i7 = $i6 & 255;

        $b8 = (byte) $i7;

        r0[$i9] = $b8;

        $i13 = i0 + 2;

        $i10 = i1 >> 16;

        $i11 = $i10 & 255;

        $b12 = (byte) $i11;

        r0[$i13] = $b12;

        $i17 = i0 + 3;

        $i14 = i1 >> 24;

        $i15 = $i14 & 255;

        $b16 = (byte) $i15;

        r0[$i17] = $b16;

        return;
    }

    public static int readSwappedInteger(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i4, $i7, $i8, $i9, $i12, $i13, $i14, $i17, $i18, $i19;
        byte $b2, $b5, $b10, $b15;
        short $s3, $s6, $s11, $s16;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 0;

        $b2 = r0[$i1];

        $s3 = $b2 & 255;

        $i8 = $s3 << 0;

        $i4 = i0 + 1;

        $b5 = r0[$i4];

        $s6 = $b5 & 255;

        $i7 = $s6 << 8;

        $i13 = $i8 + $i7;

        $i9 = i0 + 2;

        $b10 = r0[$i9];

        $s11 = $b10 & 255;

        $i12 = $s11 << 16;

        $i18 = $i13 + $i12;

        $i14 = i0 + 3;

        $b15 = r0[$i14];

        $s16 = $b15 & 255;

        $i17 = $s16 << 24;

        $i19 = $i18 + $i17;

        return $i19;
    }

    public static long readSwappedUnsignedInteger(byte[], int)
    {
        byte[] r0;
        int i0, $i3, $i6, $i9, $i10, $i11, $i14, $i15, $i16, $i17;
        long l1, l2, $l20, $l21, $l22;
        byte $b4, $b7, $b12, $b18;
        short $s5, $s8, $s13, $s19;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i3 = i0 + 0;

        $b4 = r0[$i3];

        $s5 = $b4 & 255;

        $i10 = $s5 << 0;

        $i6 = i0 + 1;

        $b7 = r0[$i6];

        $s8 = $b7 & 255;

        $i9 = $s8 << 8;

        $i15 = $i10 + $i9;

        $i11 = i0 + 2;

        $b12 = r0[$i11];

        $s13 = $b12 & 255;

        $i14 = $s13 << 16;

        $i16 = $i15 + $i14;

        l1 = (long) $i16;

        $i17 = i0 + 3;

        $b18 = r0[$i17];

        $s19 = $b18 & 255;

        l2 = (long) $s19;

        $l21 = l2 << 24;

        $l20 = 4294967295L & l1;

        $l22 = $l21 + $l20;

        return $l22;
    }

    public static void writeSwappedLong(byte[], int, long)
    {
        byte[] r0;
        int i0, $i4, $i6, $i9, $i11, $i14, $i16, $i19, $i21, $i24, $i26, $i29, $i31, $i34, $i36, $i39, $i41;
        long l1, $l2, $l3, $l7, $l8, $l12, $l13, $l17, $l18, $l22, $l23, $l27, $l28, $l32, $l33, $l37, $l38;
        byte $b5, $b10, $b15, $b20, $b25, $b30, $b35, $b40;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $i6 = i0 + 0;

        $l2 = l1 >> 0;

        $l3 = $l2 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        r0[$i6] = $b5;

        $i11 = i0 + 1;

        $l7 = l1 >> 8;

        $l8 = $l7 & 255L;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        r0[$i11] = $b10;

        $i16 = i0 + 2;

        $l12 = l1 >> 16;

        $l13 = $l12 & 255L;

        $i14 = (int) $l13;

        $b15 = (byte) $i14;

        r0[$i16] = $b15;

        $i21 = i0 + 3;

        $l17 = l1 >> 24;

        $l18 = $l17 & 255L;

        $i19 = (int) $l18;

        $b20 = (byte) $i19;

        r0[$i21] = $b20;

        $i26 = i0 + 4;

        $l22 = l1 >> 32;

        $l23 = $l22 & 255L;

        $i24 = (int) $l23;

        $b25 = (byte) $i24;

        r0[$i26] = $b25;

        $i31 = i0 + 5;

        $l27 = l1 >> 40;

        $l28 = $l27 & 255L;

        $i29 = (int) $l28;

        $b30 = (byte) $i29;

        r0[$i31] = $b30;

        $i36 = i0 + 6;

        $l32 = l1 >> 48;

        $l33 = $l32 & 255L;

        $i34 = (int) $l33;

        $b35 = (byte) $i34;

        r0[$i36] = $b35;

        $i41 = i0 + 7;

        $l37 = l1 >> 56;

        $l38 = $l37 & 255L;

        $i39 = (int) $l38;

        $b40 = (byte) $i39;

        r0[$i41] = $b40;

        return;
    }

    public static long readSwappedLong(byte[], int)
    {
        byte[] r0;
        int i0, $i3, $i4, $i5;
        long l1, l2, $l6, $l7, $l8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i3 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(byte[],int)>(r0, i0);

        l1 = (long) $i3;

        $i4 = i0 + 4;

        $i5 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(byte[],int)>(r0, $i4);

        l2 = (long) $i5;

        $l7 = l2 << 32;

        $l6 = 4294967295L & l1;

        $l8 = $l7 + $l6;

        return $l8;
    }

    public static void writeSwappedFloat(byte[], int, float)
    {
        byte[] r0;
        int i0, $i1;
        float f0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(byte[],int,int)>(r0, i0, $i1);

        return;
    }

    public static float readSwappedFloat(byte[], int)
    {
        byte[] r0;
        int i0, $i1;
        float $f0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(byte[],int)>(r0, i0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        return $f0;
    }

    public static void writeSwappedDouble(byte[], int, double)
    {
        byte[] r0;
        int i0;
        double d0;
        long $l1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(byte[],int,long)>(r0, i0, $l1);

        return;
    }

    public static double readSwappedDouble(byte[], int)
    {
        byte[] r0;
        int i0;
        long $l1;
        double $d0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>(r0, i0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }

    public static void writeSwappedShort(java.io.OutputStream, short) throws java.io.IOException
    {
        java.io.OutputStream r0;
        short s0, $s1, $s2, $s4, $s5;
        byte $b3, $b6;

        r0 := @parameter0: java.io.OutputStream;

        s0 := @parameter1: short;

        $s1 = s0 >> 0;

        $s2 = $s1 & 255;

        $b3 = (byte) $s2;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3);

        $s4 = s0 >> 8;

        $s5 = $s4 & 255;

        $b6 = (byte) $s5;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6);

        return;
    }

    public static short readSwappedShort(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        short $s7;

        r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        $i1 = $i0 & 255;

        $i2 = $i1 << 0;

        $i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        $i4 = $i3 & 255;

        $i5 = $i4 << 8;

        $i6 = $i2 + $i5;

        $s7 = (short) $i6;

        return $s7;
    }

    public static int readSwappedUnsignedShort(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: java.io.InputStream;

        i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        $i2 = i0 & 255;

        $i5 = $i2 << 0;

        $i3 = i1 & 255;

        $i4 = $i3 << 8;

        $i6 = $i5 + $i4;

        return $i6;
    }

    public static void writeSwappedInteger(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10, $i11;
        byte $b3, $b6, $b9, $b12;

        r0 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $i1 = i0 >> 0;

        $i2 = $i1 & 255;

        $b3 = (byte) $i2;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b3);

        $i4 = i0 >> 8;

        $i5 = $i4 & 255;

        $b6 = (byte) $i5;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b6);

        $i7 = i0 >> 16;

        $i8 = $i7 & 255;

        $b9 = (byte) $i8;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b9);

        $i10 = i0 >> 24;

        $i11 = $i10 & 255;

        $b12 = (byte) $i11;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12);

        return;
    }

    public static int readSwappedInteger(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @parameter0: java.io.InputStream;

        i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        i2 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        $i4 = i0 & 255;

        $i7 = $i4 << 0;

        $i5 = i1 & 255;

        $i6 = $i5 << 8;

        $i10 = $i7 + $i6;

        $i8 = i2 & 255;

        $i9 = $i8 << 16;

        $i13 = $i10 + $i9;

        $i11 = i3 & 255;

        $i12 = $i11 << 24;

        $i14 = $i13 + $i12;

        return $i14;
    }

    public static long readSwappedUnsignedInteger(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, i2, i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        long l4, l5, $l15, $l16, $l17;

        r0 := @parameter0: java.io.InputStream;

        i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        i2 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        $i6 = i0 & 255;

        $i9 = $i6 << 0;

        $i7 = i1 & 255;

        $i8 = $i7 << 8;

        $i12 = $i9 + $i8;

        $i10 = i2 & 255;

        $i11 = $i10 << 16;

        $i13 = $i12 + $i11;

        l4 = (long) $i13;

        $i14 = i3 & 255;

        l5 = (long) $i14;

        $l16 = l5 << 24;

        $l15 = 4294967295L & l4;

        $l17 = $l16 + $l15;

        return $l17;
    }

    public static void writeSwappedLong(java.io.OutputStream, long) throws java.io.IOException
    {
        java.io.OutputStream r0;
        long l0, $l1, $l2, $l5, $l6, $l9, $l10, $l13, $l14, $l17, $l18, $l21, $l22, $l25, $l26, $l29, $l30;
        int $i3, $i7, $i11, $i15, $i19, $i23, $i27, $i31;
        byte $b4, $b8, $b12, $b16, $b20, $b24, $b28, $b32;

        r0 := @parameter0: java.io.OutputStream;

        l0 := @parameter1: long;

        $l1 = l0 >> 0;

        $l2 = $l1 & 255L;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4);

        $l5 = l0 >> 8;

        $l6 = $l5 & 255L;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b8);

        $l9 = l0 >> 16;

        $l10 = $l9 & 255L;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b12);

        $l13 = l0 >> 24;

        $l14 = $l13 & 255L;

        $i15 = (int) $l14;

        $b16 = (byte) $i15;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b16);

        $l17 = l0 >> 32;

        $l18 = $l17 & 255L;

        $i19 = (int) $l18;

        $b20 = (byte) $i19;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b20);

        $l21 = l0 >> 40;

        $l22 = $l21 & 255L;

        $i23 = (int) $l22;

        $b24 = (byte) $i23;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b24);

        $l25 = l0 >> 48;

        $l26 = $l25 & 255L;

        $i27 = (int) $l26;

        $b28 = (byte) $i27;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b28);

        $l29 = l0 >> 56;

        $l30 = $l29 & 255L;

        $i31 = (int) $l30;

        $b32 = (byte) $i31;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b32);

        return;
    }

    public static long readSwappedLong(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0, i3;
        byte $b1;
        long $l2;

        r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[8];

        i3 = 0;

        goto label2;

     label1:
        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>(r0);

        $b1 = (byte) $i0;

        r1[i3] = $b1;

        i3 = i3 + 1;

     label2:
        if i3 < 8 goto label1;

        $l2 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>(r1, 0);

        return $l2;
    }

    public static void writeSwappedFloat(java.io.OutputStream, float) throws java.io.IOException
    {
        java.io.OutputStream r0;
        float f0;
        int $i0;

        r0 := @parameter0: java.io.OutputStream;

        f0 := @parameter1: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)>(r0, $i0);

        return;
    }

    public static float readSwappedFloat(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i0;
        float $f0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>(r0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }

    public static void writeSwappedDouble(java.io.OutputStream, double) throws java.io.IOException
    {
        java.io.OutputStream r0;
        double d0;
        long $l0;

        r0 := @parameter0: java.io.OutputStream;

        d0 := @parameter1: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)>(r0, $l0);

        return;
    }

    public static double readSwappedDouble(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        long $l0;
        double $d0;

        r0 := @parameter0: java.io.InputStream;

        $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>(r0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    private static int read(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0;
        java.io.EOFException $r1;

        r0 := @parameter0: java.io.InputStream;

        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if -1 != i0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected EOF reached");

        throw $r1;

     label1:
        return i0;
    }
}
