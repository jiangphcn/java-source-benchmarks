public class org.apache.commons.io.filefilter.FileFilterTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{
    static final java.lang.String SVN_DIR_NAME;
    private static final boolean WINDOWS;

    static void <clinit>()
    {
        char $c0;
        boolean $z0;

        <org.apache.commons.io.filefilter.FileFilterTestCase: java.lang.String SVN_DIR_NAME> = ".svn";

        $c0 = <java.io.File: char separatorChar>;

        if $c0 != 92 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <org.apache.commons.io.filefilter.FileFilterTestCase: boolean WINDOWS> = $z0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r1);

        return;
    }

    public void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter, java.io.File, boolean) throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1;
        java.io.File r2, $r24, $r35;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r6, $r7, $r8, $r9, $r10, $r14, $r17, $r18, $r19, $r20, $r25, $r28, $r29, $r30, $r31, $r32;
        java.lang.Class $r4, $r15, $r26;
        java.lang.String $r5, $r11, $r16, $r21, $r27, $r33, $r36, $r38;
        java.lang.Boolean $r12, $r13, $r22, $r23, $r34, $r37;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Filter(File) ");

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $z1 = interfaceinvoke r1.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r2);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r11, $r12, $r13);

        if r2 == null goto label1;

        $r24 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        if $r24 == null goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Filter(File, String) ");

        $r26 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r35 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $r36 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $z3 = interfaceinvoke r1.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r35, $r36);

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r33, $r34, $r37);

        goto label2;

     label1:
        if r2 != null goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Filter(File, String) ");

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for null");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $z2 = interfaceinvoke r1.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r2);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r21, $r22, $r23);

     label2:
        $r38 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r38);

        return;
    }

    public void testSuffix() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.List r3;
        org.apache.commons.io.filefilter.SuffixFileFilter $r5, $r19, $r27, $r32, $r33, $r34;
        java.lang.String[] $r6, $r26;
        java.io.File $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r20, $r21, $r22, $r24, $r28, $r30;
        org.apache.commons.io.filefilter.IOFileFilter[] $r13;
        org.apache.commons.io.filefilter.IOFileFilter $r14, $r15, r39;
        java.lang.String $r23, $r25, $r29, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r35, $r36, $r37;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r5 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "tes";

        $r6[1] = "est";

        specialinvoke $r5.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>($r6);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("test");

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("fred");

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>("fred.tes");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r9, 1);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>("fred.est");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r10, 1);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("fred.EST");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r11, 0);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("fred.exe");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r12, 0);

        $r13 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r14 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)>("tes");

        $r13[0] = $r14;

        $r15 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)>("est");

        $r13[1] = $r15;

        r39 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r13);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>("fred");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r39, $r16, 0);

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>(".tes");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r39, $r17, 1);

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("fred.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r39, $r18, 1);

        $r19 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r19.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>("est");

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r19, $r20, 1);

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>("fred");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r19, $r21, 0);

        $r22 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $r23 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        $z0 = interfaceinvoke $r19.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r22, $r23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r24 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $r25 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        $z1 = interfaceinvoke $r19.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r24, $r25);

        if $z1 == 0 goto label01;

        $z4 = 0;

        goto label02;

     label01:
        $z4 = 1;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r26 = newarray (java.lang.String)[2];

        $r26[0] = "ood";

        $r26[1] = "red";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r26);

        $r27 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r27.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)>(r3);

        $r28 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $r29 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        $z2 = interfaceinvoke $r27.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r28, $r29);

        if $z2 == 0 goto label03;

        $z5 = 0;

        goto label04;

     label03:
        $z5 = 1;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r30 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $r31 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        $z3 = interfaceinvoke $r27.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r30, $r31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label05:
        $r32 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r32.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label06:
        goto label08;

     label07:
        $r35 := @caughtexception;

     label08:
        $r33 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r33.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label09:
        goto label11;

     label10:
        $r37 := @caughtexception;

     label11:
        $r34 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r34.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label12:
        goto label14;

     label13:
        $r36 := @caughtexception;

     label14:
        return;

        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    public void testSuffixCaseInsensitive() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.List r1;
        org.apache.commons.io.filefilter.SuffixFileFilter $r2, $r10, $r15, $r23, $r25, $r27;
        java.lang.String[] $r3, $r14;
        org.apache.commons.io.IOCase $r4, $r11, $r16, $r22, $r24, $r26, $r28, $r31;
        java.io.File $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r17, $r18, $r19, $r20, $r21, $r29, $r30;
        java.lang.IllegalArgumentException $r33, $r34, $r35, $r36;
        org.apache.commons.io.filefilter.IOFileFilter r43;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r2 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "tes";

        $r3[1] = "est";

        $r4 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r2.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r3, $r4);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("foo.tes");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r5, 1);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("foo.est");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r6, 1);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("foo.EST");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r7, 1);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("foo.TES");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r8, 1);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>("foo.exe");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r9, 0);

        $r10 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        $r11 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r10.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>("est", $r11);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r10, $r12, 1);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("TEST");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r10, $r13, 1);

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "tes";

        $r14[1] = "est";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        $r15 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        $r16 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r15.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>(r1, $r16);

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>("bar.tes");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r15, $r17, 1);

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("bar.est");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r15, $r18, 1);

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>("bar.EST");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r15, $r19, 1);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("bar.TES");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r15, $r20, 1);

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>("bar.exe");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r15, $r21, 0);

     label01:
        $r23 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        $r22 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r23.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(null, $r22);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r34 := @caughtexception;

     label04:
        $r25 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        $r24 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r25.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>(null, $r24);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r35 := @caughtexception;

     label07:
        $r27 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        $r26 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r27.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>(null, $r26);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r33 := @caughtexception;

     label10:
        $r28 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        r43 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)>("est", $r28);

        $r29 = new java.io.File;

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>("test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r43, $r29, 1);

        $r30 = new java.io.File;

        specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>("TEST");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r43, $r30, 1);

     label11:
        $r31 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String,org.apache.commons.io.IOCase)>(null, $r31);

        staticinvoke <org.junit.Assert: void fail()>();

     label12:
        goto label14;

     label13:
        $r36 := @caughtexception;

     label14:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    public void testDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.DirectoryFileFilter $r2;
        java.io.File $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.commons.io.filefilter.IOFileFilter $r9, $r10;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r2 = new org.apache.commons.io.filefilter.DirectoryFileFilter;

        specialinvoke $r2.<org.apache.commons.io.filefilter.DirectoryFileFilter: void <init>()>();

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("src/");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r3, 1);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("src/main/java/");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r4, 1);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("pom.xml");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r5, 0);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("imaginary");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r6, 0);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("imaginary/");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r7, 0);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("LICENSE.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r8, 0);

        $r10 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        $r9 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r10, $r9);

        return;
    }

    public void testFiles() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1;
        java.io.File $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("src/");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r2, 0);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("src/java/");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r3, 0);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("pom.xml");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r4, 1);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("imaginary");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r5, 0);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("imaginary/");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r6, 0);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("LICENSE.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r7, 1);

        return;
    }

    public void testPrefix() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.List r3;
        org.apache.commons.io.filefilter.PrefixFileFilter $r5, $r18, $r26, $r31, $r32, $r33;
        java.lang.String[] $r6, $r25;
        java.io.File $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r23, $r27, $r29;
        java.lang.String $r22, $r24, $r28, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r34, $r35, $r36;
        org.apache.commons.io.filefilter.IOFileFilter r38;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r5 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "foo";

        $r6[1] = "bar";

        specialinvoke $r5.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[])>($r6);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("test");

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("fred");

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r9, 1);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>("FOO.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r10, 0);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r11, 1);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("bar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r12, 1);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("food/");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r13, 1);

        r38 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)>("bar");

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("barred\\");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r38, $r14, 1);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>("test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r38, $r15, 0);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>("fo_o.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r38, $r16, 0);

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>("abar.exe");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r38, $r17, 0);

        $r18 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r18.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>("tes");

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>("test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r19, 1);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("fred");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r20, 0);

        $r21 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $r22 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        $z0 = interfaceinvoke $r18.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r21, $r22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r23 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $r24 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        $z1 = interfaceinvoke $r18.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r23, $r24);

        if $z1 == 0 goto label01;

        $z4 = 0;

        goto label02;

     label01:
        $z4 = 1;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r25 = newarray (java.lang.String)[2];

        $r25[0] = "foo";

        $r25[1] = "fre";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        $r26 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r26.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)>(r3);

        $r27 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $r28 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        $z2 = interfaceinvoke $r26.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r27, $r28);

        if $z2 == 0 goto label03;

        $z5 = 0;

        goto label04;

     label03:
        $z5 = 1;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r29 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $r30 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        $z3 = interfaceinvoke $r26.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r29, $r30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label05:
        $r31 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r31.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label06:
        goto label08;

     label07:
        $r34 := @caughtexception;

     label08:
        $r32 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r32.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[])>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label09:
        goto label11;

     label10:
        $r35 := @caughtexception;

     label11:
        $r33 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r33.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label12:
        goto label14;

     label13:
        $r36 := @caughtexception;

     label14:
        return;

        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    public void testPrefixCaseInsensitive() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.List r1;
        org.apache.commons.io.filefilter.PrefixFileFilter $r2, $r9, $r16, $r23, $r25, $r27;
        java.lang.String[] $r3, $r15;
        org.apache.commons.io.IOCase $r4, $r10, $r17, $r22, $r24, $r26, $r28, $r33;
        java.io.File $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r29, $r30, $r31, $r32;
        java.lang.IllegalArgumentException $r35, $r36, $r37, $r38;
        org.apache.commons.io.filefilter.IOFileFilter r45;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r2 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "foo";

        $r3[1] = "bar";

        $r4 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r2.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r3, $r4);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("foo.test1");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r5, 1);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("bar.test1");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r6, 1);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("FOO.test1");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r7, 1);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("BAR.test1");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r8, 1);

        $r9 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        $r10 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r9.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>("bar", $r10);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("foo.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r11, 0);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("bar.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r12, 1);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("FOO.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r13, 0);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("BAR.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r14, 1);

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = "foo";

        $r15[1] = "bar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        $r16 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        $r17 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r16.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>(r1, $r17);

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("foo.test3");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r18, 1);

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>("bar.test3");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r19, 1);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("FOO.test3");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r20, 1);

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>("BAR.test3");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r21, 1);

     label01:
        $r23 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        $r22 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r23.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(null, $r22);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r38 := @caughtexception;

     label04:
        $r25 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        $r24 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r25.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>(null, $r24);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r37 := @caughtexception;

     label07:
        $r27 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        $r26 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r27.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.util.List,org.apache.commons.io.IOCase)>(null, $r26);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r36 := @caughtexception;

     label10:
        $r28 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        r45 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)>("bar", $r28);

        $r29 = new java.io.File;

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>("foo.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r45, $r29, 0);

        $r30 = new java.io.File;

        specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>("bar.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r45, $r30, 1);

        $r31 = new java.io.File;

        specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>("FOO.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r45, $r31, 0);

        $r32 = new java.io.File;

        specialinvoke $r32.<java.io.File: void <init>(java.lang.String)>("BAR.test2");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r45, $r32, 1);

     label11:
        $r33 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String,org.apache.commons.io.IOCase)>(null, $r33);

        staticinvoke <org.junit.Assert: void fail()>();

     label12:
        goto label14;

     label13:
        $r35 := @caughtexception;

     label14:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    public void testNameFilter() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.NameFileFilter $r2, $r7, $r14, $r21, $r28, $r35, $r39;
        java.lang.String[] $r3, $r8, $r15, $r22, $r29;
        java.io.File $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r33, $r36, $r37, $r38, $r40, $r41, $r42, $r43, $r44, $r46, $r47, $r48, $r49, $r50;
        org.apache.commons.io.IOCase $r9, $r16, $r23, $r45;
        boolean $z0, $z1;
        java.util.ArrayList $r34;
        org.apache.commons.io.filefilter.IOFileFilter r58;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r2 = new org.apache.commons.io.filefilter.NameFileFilter;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "foo";

        $r3[1] = "bar";

        specialinvoke $r2.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[])>($r3);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r4, 1);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("bar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r5, 1);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("fred");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r2, $r6, 0);

        $r7 = new org.apache.commons.io.filefilter.NameFileFilter;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "foo";

        $r8[1] = "bar";

        $r9 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        specialinvoke $r7.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r8, $r9);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r10, 1);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("bar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r11, 1);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("FOO");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r12, 0);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("BAR");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r13, 0);

        $r14 = new org.apache.commons.io.filefilter.NameFileFilter;

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = "foo";

        $r15[1] = "bar";

        $r16 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r14.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r15, $r16);

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r17, 1);

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("bar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r18, 1);

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>("FOO");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r19, 1);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("BAR");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r20, 1);

        $r21 = new org.apache.commons.io.filefilter.NameFileFilter;

        $r22 = newarray (java.lang.String)[2];

        $r22[0] = "foo";

        $r22[1] = "bar";

        $r23 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        specialinvoke $r21.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r22, $r23);

        $r24 = new java.io.File;

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r21, $r24, 1);

        $r25 = new java.io.File;

        specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>("bar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r21, $r25, 1);

        $r26 = new java.io.File;

        specialinvoke $r26.<java.io.File: void <init>(java.lang.String)>("FOO");

        $z0 = <org.apache.commons.io.filefilter.FileFilterTestCase: boolean WINDOWS>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r21, $r26, $z0);

        $r27 = new java.io.File;

        specialinvoke $r27.<java.io.File: void <init>(java.lang.String)>("BAR");

        $z1 = <org.apache.commons.io.filefilter.FileFilterTestCase: boolean WINDOWS>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r21, $r27, $z1);

        $r28 = new org.apache.commons.io.filefilter.NameFileFilter;

        $r29 = newarray (java.lang.String)[2];

        $r29[0] = "foo";

        $r29[1] = "bar";

        specialinvoke $r28.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r29, null);

        $r30 = new java.io.File;

        specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r28, $r30, 1);

        $r31 = new java.io.File;

        specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>("bar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r28, $r31, 1);

        $r32 = new java.io.File;

        specialinvoke $r32.<java.io.File: void <init>(java.lang.String)>("FOO");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r28, $r32, 0);

        $r33 = new java.io.File;

        specialinvoke $r33.<java.io.File: void <init>(java.lang.String)>("BAR");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r28, $r33, 0);

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r34.<java.util.ArrayList: boolean add(java.lang.Object)>("foo");

        virtualinvoke $r34.<java.util.ArrayList: boolean add(java.lang.Object)>("bar");

        $r35 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r35.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List)>($r34);

        $r36 = new java.io.File;

        specialinvoke $r36.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r35, $r36, 1);

        $r37 = new java.io.File;

        specialinvoke $r37.<java.io.File: void <init>(java.lang.String)>("bar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r35, $r37, 1);

        $r38 = new java.io.File;

        specialinvoke $r38.<java.io.File: void <init>(java.lang.String)>("fred");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r35, $r38, 0);

        $r39 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r39.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>("foo");

        $r40 = new java.io.File;

        specialinvoke $r40.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r39, $r40, 1);

        $r41 = new java.io.File;

        specialinvoke $r41.<java.io.File: void <init>(java.lang.String)>("FOO");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r39, $r41, 0);

        $r42 = new java.io.File;

        specialinvoke $r42.<java.io.File: void <init>(java.lang.String)>("barfoo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r39, $r42, 0);

        $r43 = new java.io.File;

        specialinvoke $r43.<java.io.File: void <init>(java.lang.String)>("foobar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r39, $r43, 0);

        $r44 = new java.io.File;

        specialinvoke $r44.<java.io.File: void <init>(java.lang.String)>("fred");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r39, $r44, 0);

        $r45 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        r58 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String,org.apache.commons.io.IOCase)>("foo", $r45);

        $r46 = new java.io.File;

        specialinvoke $r46.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r58, $r46, 1);

        $r47 = new java.io.File;

        specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>("FOO");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r58, $r47, 1);

        $r48 = new java.io.File;

        specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>("barfoo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r58, $r48, 0);

        $r49 = new java.io.File;

        specialinvoke $r49.<java.io.File: void <init>(java.lang.String)>("foobar");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r58, $r49, 0);

        $r50 = new java.io.File;

        specialinvoke $r50.<java.io.File: void <init>(java.lang.String)>("fred");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r58, $r50, 0);

        return;
    }

    public void testNameFilterNullArgument() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.NameFileFilter $r1;
        org.apache.commons.io.IOCase $r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

     label1:
        $r1 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("constructing a NameFileFilter with a null String argument should fail.");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String,org.apache.commons.io.IOCase)>(null, $r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("constructing a NameFileFilter with a null String argument should fail.");

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testNameFilterNullArrayArgument() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.NameFileFilter $r1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r1 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String[])>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("constructing a NameFileFilter with a null String[] argument should fail.");

        return;
    }

    public void testNameFilterNullListArgument() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.NameFileFilter $r1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r1 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("constructing a NameFileFilter with a null List argument should fail.");

        return;
    }

    public void testTrue() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, $r4, $r5;
        java.io.File $r2, $r3;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r2, 1);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r3, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, null, 1);

        $r5 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

        $r4 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r5, $r4);

        return;
    }

    public void testFalse() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, $r4, $r5;
        java.io.File $r2, $r3;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter falseFileFilter()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r2, 0);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r3, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, null, 0);

        $r5 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter FALSE>;

        $r4 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r5, $r4);

        return;
    }

    public void testNot() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, $r2;
        java.io.File $r3, $r4;
        org.apache.commons.io.filefilter.NotFileFilter $r5;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()>();

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r2);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r3, 0);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r4, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, null, 0);

        $r5 = new org.apache.commons.io.filefilter.NotFileFilter;

        specialinvoke $r5.<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>(null);

        return;
    }

    public void testAnd() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2;
        org.apache.commons.io.filefilter.AndFileFilter $r4, $r6, $r8, $r10, $r13, $r15, $r17, $r18, $r19;
        java.io.File $r5, $r7, $r9, $r11, $r14, $r16;
        java.util.ArrayList $r12;
        java.util.List $r20;
        boolean $z0;
        java.lang.String $r21;
        java.lang.IllegalArgumentException $r22, $r23;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        r2 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r4 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r4.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r1);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r4, $r5, 1);

        $r6 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r6.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r2);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r6, $r7, 0);

        $r8 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r8.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r2, r1);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r9, 0);

        $r10 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r10.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r2, r2);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r10, $r11, 0);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r13.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(java.util.List)>($r12);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r14, 0);

        $r15 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r15.<org.apache.commons.io.filefilter.AndFileFilter: void <init>()>();

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>("test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r15, $r16, 0);

     label1:
        $r17 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r17.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r2, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r23 := @caughtexception;

     label4:
        $r18 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r18.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(null, r2);

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $r22 := @caughtexception;

     label7:
        $r19 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r19.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(java.util.List)>(null);

        $r20 = virtualinvoke $r19.<org.apache.commons.io.filefilter.AndFileFilter: java.util.List getFileFilters()>();

        $z0 = interfaceinvoke $r20.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r21 = virtualinvoke $r19.<org.apache.commons.io.filefilter.AndFileFilter: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r21);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testOr() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2;
        java.io.File $r6, $r15, $r17;
        org.apache.commons.io.filefilter.OrFileFilter $r7, $r8, $r9, $r10, $r11, $r13, $r19, $r20;
        java.util.ArrayList $r12;
        java.util.List $r14, $r21;
        java.lang.String $r16, $r18;
        boolean $z3, $z5, $z6, $z7;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        r2 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("foo.test");

        $r7 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r7.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r6, 1);

        $r8 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r8.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, r2);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r6, 1);

        $r9 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r9.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r2, r1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r6, 1);

        $r10 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r10.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r2, r2);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r10, $r6, 0);

        $r11 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r11.<org.apache.commons.io.filefilter.OrFileFilter: void <init>()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r11, $r6, 0);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r1);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r13 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r13.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.List)>($r12);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r6, 1);

        $r14 = virtualinvoke $r13.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List getFileFilters()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r12);

        virtualinvoke $r13.<org.apache.commons.io.filefilter.OrFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r6, 0);

        virtualinvoke $r13.<org.apache.commons.io.filefilter.OrFileFilter: void setFileFilters(java.util.List)>($r12);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r6, 1);

        $r15 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $r16 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

        $z3 = virtualinvoke $r13.<org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)>($r15, $r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        virtualinvoke $r13.<org.apache.commons.io.filefilter.OrFileFilter: boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r1);

        $r17 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $r18 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

        $z5 = virtualinvoke $r13.<org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)>($r17, $r18);

        if $z5 == 0 goto label1;

        $z7 = 0;

        goto label2;

     label1:
        $z7 = 1;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label3:
        $r19 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r19.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r2, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label4:
        goto label6;

     label5:
        $r22 := @caughtexception;

     label6:
        $r20 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r20.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.List)>(null);

        $r21 = virtualinvoke $r20.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List getFileFilters()>();

        $z6 = interfaceinvoke $r21.<java.util.List: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        return;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public void testFileFilterUtils_and() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, $r4, $r7, $r10, $r13;
        org.apache.commons.io.filefilter.IOFileFilter[] $r3, $r6, $r9, $r12;
        java.io.File $r5, $r8, $r11, $r14;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        r2 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r3 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[3];

        $r3[0] = r1;

        $r3[1] = r1;

        $r3[2] = r1;

        $r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r3);

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r4, $r5, 1);

        $r6 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[3];

        $r6[0] = r1;

        $r6[1] = r2;

        $r6[2] = r1;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r6);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r8, 0);

        $r9 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r9[0] = r2;

        $r9[1] = r1;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r9);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r10, $r11, 0);

        $r12 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r12[0] = r2;

        $r12[1] = r2;

        $r13 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r12);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("foo.test");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r14, 0);

        return;
    }

    public void testFileFilterUtils_or() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, $r6, $r8, $r10, $r12;
        java.io.File $r4;
        org.apache.commons.io.filefilter.IOFileFilter[] $r5, $r7, $r9, $r11;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        r2 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("foo.test");

        $r5 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r5[0] = r1;

        $r5[1] = r1;

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r5);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r6, $r4, 1);

        $r7 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[3];

        $r7[0] = r1;

        $r7[1] = r1;

        $r7[2] = r2;

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r7);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r4, 1);

        $r9 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r9[0] = r2;

        $r9[1] = r1;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r9);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r10, $r4, 1);

        $r11 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[3];

        $r11[0] = r2;

        $r11[1] = r2;

        $r11[2] = r2;

        $r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r11);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r12, $r4, 0);

        return;
    }

    public void testDeprecatedWildcard() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.List r1;
        org.apache.commons.io.filefilter.WildcardFilter $r6, $r8, $r13, $r16, $r20, $r35, $r36, $r37;
        java.lang.String[] $r7, $r21;
        java.io.File $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.String $r30, $r32, $r34;
        java.lang.IllegalArgumentException $r38, $r39, $r40;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = new org.apache.commons.io.filefilter.WildcardFilter;

        specialinvoke $r6.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)>("*.txt");

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "*.txt";

        $r7[1] = "*.xml";

        $r7[2] = "*.gif";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $r8 = new org.apache.commons.io.filefilter.WildcardFilter;

        specialinvoke $r8.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)>(r1);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>("test.txt");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>("test.bmp");

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("src/java");

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("log.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r6, $r12, 1);

        $r13 = new org.apache.commons.io.filefilter.WildcardFilter;

        specialinvoke $r13.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)>("log?.txt");

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("log1.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r14, 1);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>("log12.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r15, 0);

        $r16 = new org.apache.commons.io.filefilter.WildcardFilter;

        specialinvoke $r16.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)>("open??.????04");

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>("openAB.102504");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r17, 1);

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("openA.102504");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r18, 0);

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>("openXY.123103");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r19, 0);

        $r20 = new org.apache.commons.io.filefilter.WildcardFilter;

        $r21 = newarray (java.lang.String)[2];

        $r21[0] = "*.java";

        $r21[1] = "*.class";

        specialinvoke $r20.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String[])>($r21);

        $r22 = new java.io.File;

        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r20, $r22, 1);

        $r23 = new java.io.File;

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>("Test.class");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r20, $r23, 1);

        $r24 = new java.io.File;

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>("Test.jsp");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r20, $r24, 0);

        $r25 = new java.io.File;

        specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>("Test.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r25, 1);

        $r26 = new java.io.File;

        specialinvoke $r26.<java.io.File: void <init>(java.lang.String)>("Test.xml");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r26, 1);

        $r27 = new java.io.File;

        specialinvoke $r27.<java.io.File: void <init>(java.lang.String)>("Test.gif");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r27, 1);

        $r28 = new java.io.File;

        specialinvoke $r28.<java.io.File: void <init>(java.lang.String)>("Test.bmp");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r28, 0);

        $z0 = interfaceinvoke $r8.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke $r8.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r10);

        if $z1 == 0 goto label01;

        $z6 = 0;

        goto label02;

     label01:
        $z6 = 1;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z2 = interfaceinvoke $r8.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r11);

        if $z2 == 0 goto label03;

        $z7 = 0;

        goto label04;

     label03:
        $z7 = 1;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r29 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        $r30 = virtualinvoke $r9.<java.io.File: java.lang.String getName()>();

        $z3 = interfaceinvoke $r8.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r29, $r30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r31 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $r32 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>();

        $z4 = interfaceinvoke $r8.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r31, $r32);

        if $z4 == 0 goto label05;

        $z8 = 0;

        goto label06;

     label05:
        $z8 = 1;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r33 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $r34 = virtualinvoke $r11.<java.io.File: java.lang.String getName()>();

        $z5 = interfaceinvoke $r8.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r33, $r34);

        if $z5 == 0 goto label07;

        $z9 = 0;

        goto label08;

     label07:
        $z9 = 1;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label09:
        $r35 = new org.apache.commons.io.filefilter.WildcardFilter;

        specialinvoke $r35.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

     label12:
        $r36 = new org.apache.commons.io.filefilter.WildcardFilter;

        specialinvoke $r36.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.lang.String[])>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label13:
        goto label15;

     label14:
        $r39 := @caughtexception;

     label15:
        $r37 = new org.apache.commons.io.filefilter.WildcardFilter;

        specialinvoke $r37.<org.apache.commons.io.filefilter.WildcardFilter: void <init>(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label16:
        goto label18;

     label17:
        $r40 := @caughtexception;

     label18:
        return;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
        catch java.lang.IllegalArgumentException from label15 to label16 with label17;
    }

    public void testWildcard() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.List r1;
        org.apache.commons.io.filefilter.WildcardFileFilter $r6, $r9, $r13, $r17, $r21, $r24, $r29, $r34, $r39, $r44, $r49, $r63, $r64, $r65;
        java.io.File $r7, $r8, $r11, $r12, $r15, $r16, $r19, $r20, $r22, $r23, $r26, $r27, $r28, $r32, $r33, $r37, $r38, $r42, $r43, $r46, $r47, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r59, $r61;
        org.apache.commons.io.IOCase $r10, $r14, $r18, $r31, $r36, $r41;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.String[] $r25, $r30, $r35, $r40, $r45, $r48;
        java.lang.String $r58, $r60, $r62;
        java.lang.IllegalArgumentException $r66, $r67, $r68;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r6.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("*.txt");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("log.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r6, $r7, 1);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("log.TXT");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r6, $r8, 0);

        $r9 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r10 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        specialinvoke $r9.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>("*.txt", $r10);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("log.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r11, 1);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("log.TXT");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r12, 0);

        $r13 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r14 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r13.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>("*.txt", $r14);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>("log.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r15, 1);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>("log.TXT");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r16, 1);

        $r17 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r18 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        specialinvoke $r17.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>("*.txt", $r18);

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>("log.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r19, 1);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("log.TXT");

        $z0 = <org.apache.commons.io.filefilter.FileFilterTestCase: boolean WINDOWS>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r20, $z0);

        $r21 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r21.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>("*.txt", null);

        $r22 = new java.io.File;

        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>("log.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r21, $r22, 1);

        $r23 = new java.io.File;

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>("log.TXT");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r21, $r23, 0);

        $r24 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r25 = newarray (java.lang.String)[2];

        $r25[0] = "*.java";

        $r25[1] = "*.class";

        specialinvoke $r24.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[])>($r25);

        $r26 = new java.io.File;

        specialinvoke $r26.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r24, $r26, 1);

        $r27 = new java.io.File;

        specialinvoke $r27.<java.io.File: void <init>(java.lang.String)>("Test.class");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r24, $r27, 1);

        $r28 = new java.io.File;

        specialinvoke $r28.<java.io.File: void <init>(java.lang.String)>("Test.jsp");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r24, $r28, 0);

        $r29 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r30 = newarray (java.lang.String)[2];

        $r30[0] = "*.java";

        $r30[1] = "*.class";

        $r31 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        specialinvoke $r29.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r30, $r31);

        $r32 = new java.io.File;

        specialinvoke $r32.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r29, $r32, 1);

        $r33 = new java.io.File;

        specialinvoke $r33.<java.io.File: void <init>(java.lang.String)>("Test.JAVA");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r29, $r33, 0);

        $r34 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r35 = newarray (java.lang.String)[2];

        $r35[0] = "*.java";

        $r35[1] = "*.class";

        $r36 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r34.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r35, $r36);

        $r37 = new java.io.File;

        specialinvoke $r37.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r34, $r37, 1);

        $r38 = new java.io.File;

        specialinvoke $r38.<java.io.File: void <init>(java.lang.String)>("Test.JAVA");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r34, $r38, 1);

        $r39 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r40 = newarray (java.lang.String)[2];

        $r40[0] = "*.java";

        $r40[1] = "*.class";

        $r41 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        specialinvoke $r39.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r40, $r41);

        $r42 = new java.io.File;

        specialinvoke $r42.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r39, $r42, 1);

        $r43 = new java.io.File;

        specialinvoke $r43.<java.io.File: void <init>(java.lang.String)>("Test.JAVA");

        $z1 = <org.apache.commons.io.filefilter.FileFilterTestCase: boolean WINDOWS>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r39, $r43, $z1);

        $r44 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        $r45 = newarray (java.lang.String)[2];

        $r45[0] = "*.java";

        $r45[1] = "*.class";

        specialinvoke $r44.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[],org.apache.commons.io.IOCase)>($r45, null);

        $r46 = new java.io.File;

        specialinvoke $r46.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r44, $r46, 1);

        $r47 = new java.io.File;

        specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>("Test.JAVA");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r44, $r47, 0);

        $r48 = newarray (java.lang.String)[3];

        $r48[0] = "*.txt";

        $r48[1] = "*.xml";

        $r48[2] = "*.gif";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r48);

        $r49 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r49.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List)>(r1);

        $r50 = new java.io.File;

        specialinvoke $r50.<java.io.File: void <init>(java.lang.String)>("Test.txt");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r49, $r50, 1);

        $r51 = new java.io.File;

        specialinvoke $r51.<java.io.File: void <init>(java.lang.String)>("Test.xml");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r49, $r51, 1);

        $r52 = new java.io.File;

        specialinvoke $r52.<java.io.File: void <init>(java.lang.String)>("Test.gif");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r49, $r52, 1);

        $r53 = new java.io.File;

        specialinvoke $r53.<java.io.File: void <init>(java.lang.String)>("Test.bmp");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r49, $r53, 0);

        $r54 = new java.io.File;

        specialinvoke $r54.<java.io.File: void <init>(java.lang.String)>("test.txt");

        $r55 = new java.io.File;

        specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>("test.bmp");

        $r56 = new java.io.File;

        specialinvoke $r56.<java.io.File: void <init>(java.lang.String)>("src/java");

        $z2 = interfaceinvoke $r49.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r54);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke $r49.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r55);

        if $z3 == 0 goto label01;

        $z8 = 0;

        goto label02;

     label01:
        $z8 = 1;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z4 = interfaceinvoke $r49.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>($r56);

        if $z4 == 0 goto label03;

        $z9 = 0;

        goto label04;

     label03:
        $z9 = 1;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r57 = virtualinvoke $r54.<java.io.File: java.io.File getParentFile()>();

        $r58 = virtualinvoke $r54.<java.io.File: java.lang.String getName()>();

        $z5 = interfaceinvoke $r49.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r57, $r58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r59 = virtualinvoke $r55.<java.io.File: java.io.File getParentFile()>();

        $r60 = virtualinvoke $r55.<java.io.File: java.lang.String getName()>();

        $z6 = interfaceinvoke $r49.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r59, $r60);

        if $z6 == 0 goto label05;

        $z10 = 0;

        goto label06;

     label05:
        $z10 = 1;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r61 = virtualinvoke $r56.<java.io.File: java.io.File getParentFile()>();

        $r62 = virtualinvoke $r56.<java.io.File: java.lang.String getName()>();

        $z7 = interfaceinvoke $r49.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r61, $r62);

        if $z7 == 0 goto label07;

        $z11 = 0;

        goto label08;

     label07:
        $z11 = 1;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label09:
        $r63 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r63.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label10:
        goto label12;

     label11:
        $r68 := @caughtexception;

     label12:
        $r64 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r64.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String[])>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label13:
        goto label15;

     label14:
        $r66 := @caughtexception;

     label15:
        $r65 = new org.apache.commons.io.filefilter.WildcardFileFilter;

        specialinvoke $r65.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label16:
        goto label18;

     label17:
        $r67 := @caughtexception;

     label18:
        return;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
        catch java.lang.IllegalArgumentException from label15 to label16 with label17;
    }

    public void testDelegateFileFilter() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.OrFileFilter $r3;
        java.io.File $r4;
        org.apache.commons.io.filefilter.DelegateFileFilter $r5, $r7, $r9, $r10;
        java.lang.String $r6, $r8;
        java.lang.IllegalArgumentException $r11, $r12;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r3 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r3.<org.apache.commons.io.filefilter.OrFileFilter: void <init>()>();

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("test.txt");

        $r5 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r5.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>($r3);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r4, 0);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r6);

        $r7 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r7.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>($r3);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r4, 0);

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

     label1:
        $r9 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r9.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        $r10 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r10.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testMakeCVSAware() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, $r5;
        java.io.File $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r19, $r20;
        boolean $z1, $z2, $z3;
        java.io.BufferedOutputStream $r11, $r16, $r21;
        java.io.FileOutputStream $r12, $r17, $r22;
        java.io.IOException $r23, $r28, $r33;
        java.lang.StringBuilder $r24, $r25, $r26, $r29, $r30, $r31, $r34, $r35, $r36;
        java.lang.String $r27, $r32, $r37;
        java.lang.Throwable $r38, $r39, $r40;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)>(null);

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("test-file1.txt");

        r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)>($r5);

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "CVS");

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r6, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r6, 0);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r6);

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "test-file1.txt");

        $r10 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label01;

        $r33 = new java.io.IOException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r33;

     label01:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, 0L);

        goto label04;

     label03:
        $r38 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r38;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r8, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r8, 1);

        $r13 = new java.io.File;

        $r14 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "test-file2.log");

        $r15 = virtualinvoke $r13.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r15.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label05;

        $r28 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label05:
        $r16 = new java.io.BufferedOutputStream;

        $r17 = new java.io.FileOutputStream;

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.File)>($r13);

        specialinvoke $r16.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r17);

     label06:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r16, 0L);

        goto label08;

     label07:
        $r40 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r16);

        throw $r40;

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r16);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r13, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r13, 0);

        $r18 = new java.io.File;

        $r19 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r19, "CVS");

        $r20 = virtualinvoke $r18.<java.io.File: java.io.File getParentFile()>();

        $z3 = virtualinvoke $r20.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label09;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label09:
        $r21 = new java.io.BufferedOutputStream;

        $r22 = new java.io.FileOutputStream;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>($r18);

        specialinvoke $r21.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r22);

     label10:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r21, 0L);

        goto label12;

     label11:
        $r39 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r21);

        throw $r39;

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r21);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r18, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r18, 0);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void testMakeSVNAware() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, $r5;
        java.io.File $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r19, $r20;
        boolean $z1, $z2, $z3;
        java.io.BufferedOutputStream $r11, $r16, $r21;
        java.io.FileOutputStream $r12, $r17, $r22;
        java.io.IOException $r23, $r28, $r33;
        java.lang.StringBuilder $r24, $r25, $r26, $r29, $r30, $r31, $r34, $r35, $r36;
        java.lang.String $r27, $r32, $r37;
        java.lang.Throwable $r38, $r39, $r40;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)>(null);

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("test-file1.txt");

        r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)>($r5);

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, ".svn");

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r6, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r6, 0);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r6);

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "test-file1.txt");

        $r10 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label01;

        $r33 = new java.io.IOException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r33;

     label01:
        $r11 = new java.io.BufferedOutputStream;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r11, 0L);

        goto label04;

     label03:
        $r39 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        throw $r39;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r11);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r8, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r8, 1);

        $r13 = new java.io.File;

        $r14 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "test-file2.log");

        $r15 = virtualinvoke $r13.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r15.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label05;

        $r28 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label05:
        $r16 = new java.io.BufferedOutputStream;

        $r17 = new java.io.FileOutputStream;

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.File)>($r13);

        specialinvoke $r16.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r17);

     label06:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r16, 0L);

        goto label08;

     label07:
        $r38 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r16);

        throw $r38;

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r16);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r13, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r13, 0);

        $r18 = new java.io.File;

        $r19 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r19, ".svn");

        $r20 = virtualinvoke $r18.<java.io.File: java.io.File getParentFile()>();

        $z3 = virtualinvoke $r20.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label09;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label09:
        $r21 = new java.io.BufferedOutputStream;

        $r22 = new java.io.FileOutputStream;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>($r18);

        specialinvoke $r21.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r22);

     label10:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r21, 0L);

        goto label12;

     label11:
        $r40 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r21);

        throw $r40;

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r21);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r18, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r2, $r18, 0);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void testAgeFilter() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r5, r6, r7, r8, r9, r10, r11, r56, r57;
        java.io.File $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r25;
        boolean $z0, $z1, $z2;
        java.io.BufferedOutputStream $r19, $r22, $r26;
        java.io.FileOutputStream $r20, $r23, $r27;
        long $l0, $l1, $l3, $l4, l6;
        byte $b2, $b5;
        java.util.Date $r24;
        java.io.IOException $r28, $r33, $r38;
        java.lang.StringBuilder $r29, $r30, $r31, $r34, $r35, $r36, $r39, $r40, $r41;
        java.lang.String $r32, $r37, $r42;
        java.lang.Throwable $r43, $r44, $r45;
        java.lang.InterruptedException $r46, $r47;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r12 = new java.io.File;

        $r13 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "old.txt");

        $r14 = new java.io.File;

        $r15 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "reference.txt");

        $r16 = new java.io.File;

        $r17 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "new.txt");

        $r18 = virtualinvoke $r12.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r18.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r38 = new java.io.IOException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r42);

        throw $r38;

     label01:
        $r19 = new java.io.BufferedOutputStream;

        $r20 = new java.io.FileOutputStream;

        specialinvoke $r20.<java.io.FileOutputStream: void <init>(java.io.File)>($r12);

        specialinvoke $r19.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r20);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r19, 0L);

        goto label04;

     label03:
        $r44 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r19);

        throw $r44;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r19);

     label05:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1000L);

     label06:
        goto label08;

     label07:
        $r47 := @caughtexception;

     label08:
        $r21 = virtualinvoke $r14.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r21.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label09;

        $r33 = new java.io.IOException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r33;

     label09:
        $r22 = new java.io.BufferedOutputStream;

        $r23 = new java.io.FileOutputStream;

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r14);

        specialinvoke $r22.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r23);

     label10:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r22, 0L);

        goto label12;

     label11:
        $r45 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r22);

        throw $r45;

     label12:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r22);

        $l0 = virtualinvoke $r12.<java.io.File: long lastModified()>();

        $l1 = virtualinvoke $r14.<java.io.File: long lastModified()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label05;

        $r24 = new java.util.Date;

        specialinvoke $r24.<java.util.Date: void <init>()>();

        l6 = virtualinvoke $r24.<java.util.Date: long getTime()>();

     label13:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1000L);

     label14:
        goto label16;

     label15:
        $r46 := @caughtexception;

     label16:
        $r25 = virtualinvoke $r16.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r25.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label17;

        $r28 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label17:
        $r26 = new java.io.BufferedOutputStream;

        $r27 = new java.io.FileOutputStream;

        specialinvoke $r27.<java.io.FileOutputStream: void <init>(java.io.File)>($r16);

        specialinvoke $r26.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r27);

     label18:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r26, 0L);

        goto label20;

     label19:
        $r43 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r26);

        throw $r43;

     label20:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r26);

        $l3 = virtualinvoke $r14.<java.io.File: long lastModified()>();

        $l4 = virtualinvoke $r16.<java.io.File: long lastModified()>();

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label13;

        r56 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long)>(l6);

        r57 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long,boolean)>(l6, 1);

        r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long,boolean)>(l6, 0);

        r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date)>($r24);

        r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date,boolean)>($r24, 1);

        r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date,boolean)>($r24, 0);

        r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File)>($r14);

        r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File,boolean)>($r14, 1);

        r11 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File,boolean)>($r14, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r56, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r57, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r5, $r12, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r6, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r7, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r8, $r12, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r9, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r10, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r11, $r12, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r56, $r16, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r57, $r16, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r5, $r16, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r6, $r16, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r7, $r16, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r8, $r16, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r9, $r16, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r10, $r16, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r11, $r16, 1);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.InterruptedException from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label19;
    }

    public void testSizeFilter() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r4, r5, r6, r7, r8, r9, r10, r39;
        java.io.File $r12, $r13, $r14, $r17, $r18, $r19;
        boolean $z0, $z1;
        java.io.BufferedOutputStream $r15, $r20;
        java.io.FileOutputStream $r16, $r21;
        java.io.IOException $r23, $r28;
        java.lang.StringBuilder $r24, $r25, $r26, $r29, $r30, $r31;
        java.lang.String $r27, $r32;
        java.lang.Throwable $r33, $r35;
        java.lang.IllegalArgumentException $r34;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r12 = new java.io.File;

        $r13 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "small.txt");

        $r14 = virtualinvoke $r12.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r28 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label01:
        $r15 = new java.io.BufferedOutputStream;

        $r16 = new java.io.FileOutputStream;

        specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.io.File)>($r12);

        specialinvoke $r15.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r16);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r15, 32L);

        goto label04;

     label03:
        $r33 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        throw $r33;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        $r17 = new java.io.File;

        $r18 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, "large.txt");

        $r19 = virtualinvoke $r17.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label05;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label05:
        $r20 = new java.io.BufferedOutputStream;

        $r21 = new java.io.FileOutputStream;

        specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.io.File)>($r17);

        specialinvoke $r20.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r21);

     label06:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r20, 128L);

        goto label08;

     label07:
        $r35 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r20);

        throw $r35;

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r20);

        r39 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long)>(64L);

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long,boolean)>(64L, 1);

        r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long,boolean)>(64L, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r39, $r12, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r4, $r12, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r5, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r39, $r17, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r4, $r17, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r5, $r17, 0);

        r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)>(33L, 127L);

        r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)>(32L, 127L);

        r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)>(33L, 128L);

        r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)>(31L, 129L);

        r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long,long)>(128L, 128L);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r6, $r12, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r6, $r17, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r7, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r7, $r17, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r8, $r12, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r8, $r17, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r9, $r12, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r9, $r17, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r10, $r17, 1);

     label09:
        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long)>(-1L);

        staticinvoke <org.junit.Assert: void fail()>();

     label10:
        goto label12;

     label11:
        $r34 := @caughtexception;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    public void testHidden() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File $r2, $r8, $r10;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.io.filefilter.IOFileFilter $r3, $r4, $r7, $r9;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(".svn");

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $r3 = <org.apache.commons.io.filefilter.HiddenFileFilter: org.apache.commons.io.filefilter.IOFileFilter HIDDEN>;

        $z1 = virtualinvoke $r2.<java.io.File: boolean isHidden()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r3, $r2, $z1);

        $r4 = <org.apache.commons.io.filefilter.HiddenFileFilter: org.apache.commons.io.filefilter.IOFileFilter VISIBLE>;

        $z2 = virtualinvoke $r2.<java.io.File: boolean isHidden()>();

        if $z2 == 0 goto label1;

        $z3 = 0;

        goto label2;

     label1:
        $z3 = 1;

     label2:
        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r4, $r2, $z3);

     label3:
        $r7 = <org.apache.commons.io.filefilter.HiddenFileFilter: org.apache.commons.io.filefilter.IOFileFilter HIDDEN>;

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r7, $r8, 0);

        $r9 = <org.apache.commons.io.filefilter.HiddenFileFilter: org.apache.commons.io.filefilter.IOFileFilter VISIBLE>;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r10, 1);

        return;
    }

    public void testCanRead() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File $r4, $r5, $r6;
        boolean $z0;
        java.io.BufferedOutputStream $r7;
        java.io.FileOutputStream $r8;
        org.apache.commons.io.filefilter.IOFileFilter $r9, $r10, $r11;
        java.io.IOException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16;
        java.lang.Throwable $r17;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "read-only-file1.txt");

        $r6 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $r7 = new java.io.BufferedOutputStream;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r8);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r7, 32L);

        goto label4;

     label3:
        $r17 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        throw $r17;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        virtualinvoke $r4.<java.io.File: boolean setReadOnly()>();

        $r9 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r4, 1);

        $r10 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_READ>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r10, $r4, 0);

        $r11 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter READ_ONLY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r11, $r4, 1);

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testCanWrite() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File $r4, $r5, $r6, $r10, $r12;
        boolean $z0;
        java.io.BufferedOutputStream $r7;
        java.io.FileOutputStream $r8;
        org.apache.commons.io.filefilter.IOFileFilter $r9, $r11, $r13, $r14;
        java.io.IOException $r15;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.String $r19;
        java.lang.Throwable $r20;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "read-only-file2.txt");

        $r6 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        $r7 = new java.io.BufferedOutputStream;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r8);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r7, 32L);

        goto label4;

     label3:
        $r20 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        throw $r20;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r7);

        virtualinvoke $r4.<java.io.File: boolean setReadOnly()>();

        $r9 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE>;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r10, 1);

        $r11 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE>;

        $r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r11, $r12, 0);

        $r13 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r13, $r4, 0);

        $r14 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r4, 1);

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testEmpty() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File $r6, $r7, $r10, $r11, $r18, $r19;
        org.apache.commons.io.filefilter.IOFileFilter $r8, $r9, $r14, $r15, $r16, $r17, $r22, $r23;
        boolean $z1, $z2;
        java.io.BufferedOutputStream $r12, $r20;
        java.io.FileOutputStream $r13, $r21;
        java.io.IOException $r24, $r29;
        java.lang.StringBuilder $r25, $r26, $r27, $r30, $r31, $r32;
        java.lang.String $r28, $r33;
        java.lang.Throwable $r34, $r35;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "empty-dir");

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        $r8 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r8, $r6, 1);

        $r9 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter NOT_EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r6, 0);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "empty-file.txt");

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r29 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label1:
        $r12 = new java.io.BufferedOutputStream;

        $r13 = new java.io.FileOutputStream;

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r12.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r13);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r12, 0L);

        goto label4;

     label3:
        $r35 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        throw $r35;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r12);

        $r14 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r10, 1);

        $r15 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter NOT_EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r15, $r10, 0);

        $r16 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r6, 0);

        $r17 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter NOT_EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r6, 1);

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "not-empty-file.txt");

        $r19 = virtualinvoke $r18.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label5;

        $r24 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label5:
        $r20 = new java.io.BufferedOutputStream;

        $r21 = new java.io.FileOutputStream;

        specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.io.File)>($r18);

        specialinvoke $r20.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r21);

     label6:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r20, 32L);

        goto label8;

     label7:
        $r34 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r20);

        throw $r34;

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r20);

        $r22 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r22, $r18, 0);

        $r23 = <org.apache.commons.io.filefilter.EmptyFileFilter: org.apache.commons.io.filefilter.IOFileFilter NOT_EMPTY>;

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r23, $r18, 1);

        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r6);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void testMakeDirectoryOnly() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, $r6, $r7, $r8;
        java.io.File $r9, $r10, $r11, $r12, $r13, $r16;
        boolean $z2, $z3;
        java.io.BufferedOutputStream $r14, $r17;
        java.io.FileOutputStream $r15, $r18;
        java.io.IOException $r19, $r24;
        java.lang.StringBuilder $r20, $r21, $r22, $r25, $r26, $r27;
        java.lang.String $r23, $r28;
        java.lang.Throwable $r29, $r30;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>(null);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("B");

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>($r8);

        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "A");

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "B");

        virtualinvoke $r9.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r11, 1);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r9);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r11);

        $r13 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label1;

        $r24 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label1:
        $r14 = new java.io.BufferedOutputStream;

        $r15 = new java.io.FileOutputStream;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r14.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r15);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r14, 32L);

        goto label4;

     label3:
        $r29 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        throw $r29;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        $r16 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z3 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label5;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label5:
        $r17 = new java.io.BufferedOutputStream;

        $r18 = new java.io.FileOutputStream;

        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        specialinvoke $r17.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r18);

     label6:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r17, 32L);

        goto label8;

     label7:
        $r30 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r17);

        throw $r30;

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r17);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r11, 0);

        virtualinvoke $r9.<java.io.File: boolean delete()>();

        virtualinvoke $r11.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void testMakeFileOnly() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, $r6, $r7, $r8;
        java.io.File $r9, $r10, $r11, $r12, $r13, $r16;
        boolean $z2, $z3;
        java.io.BufferedOutputStream $r14, $r17;
        java.io.FileOutputStream $r15, $r18;
        java.io.IOException $r19, $r24;
        java.lang.StringBuilder $r20, $r21, $r22, $r25, $r26, $r27;
        java.lang.String $r23, $r28;
        java.lang.Throwable $r29, $r30;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>(null);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("B");

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>($r8);

        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "A");

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "B");

        virtualinvoke $r9.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r11, 0);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r9);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r11);

        $r13 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label1;

        $r24 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label1:
        $r14 = new java.io.BufferedOutputStream;

        $r15 = new java.io.FileOutputStream;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r14.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r15);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r14, 32L);

        goto label4;

     label3:
        $r29 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        throw $r29;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r14);

        $r16 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z3 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label5;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label5:
        $r17 = new java.io.BufferedOutputStream;

        $r18 = new java.io.FileOutputStream;

        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        specialinvoke $r17.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r18);

     label6:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r17, 32L);

        goto label8;

     label7:
        $r30 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r17);

        throw $r30;

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r17);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r1, $r11, 1);

        virtualinvoke $r9.<java.io.File: boolean delete()>();

        virtualinvoke $r11.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void testMagicNumberFileFilterBytes() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.FileOutputStream r7;
        byte[] $r8;
        java.io.File $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.nio.charset.Charset $r17;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r18;
        org.apache.commons.io.filefilter.IOFileFilter r20;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r8 = newarray (byte)[4];

        $r8[0] = -54;

        $r8[1] = -2;

        $r8[2] = -70;

        $r8[3] = -66;

        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "A.class");

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "B.xml");

        $r13 = new java.io.File;

        $r14 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "C.xml");

        $r15 = new java.io.File;

        $r16 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, "D");

        virtualinvoke $r15.<java.io.File: boolean mkdirs()>();

        r7 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r9);

        staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)>($r8, r7);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>(r7, 32L);

        virtualinvoke r7.<java.io.OutputStream: void close()>();

        $r17 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)>($r11, "<?xml version=\"1.0\" encoding=\"UTF-8\">\n<element>text</element>", $r17);

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r13);

        $r18 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r18.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[])>($r8);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r9, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r11, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r13, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r15, 0);

        r20 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[])>($r8);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r20, $r9, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r20, $r11, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r20, $r13, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r20, $r15, 0);

        return;
    }

    public void testMagicNumberFileFilterBytesOffset() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.FileOutputStream r5, $r16;
        byte[] $r7;
        java.io.File $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean $z1;
        java.io.BufferedOutputStream $r15;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r17;
        java.io.IOException $r18;
        java.lang.StringBuilder $r19, $r20, $r21;
        java.lang.String $r22;
        java.lang.Throwable $r23;
        org.apache.commons.io.filefilter.IOFileFilter r26;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r7 = newarray (byte)[5];

        $r7[0] = 117;

        $r7[1] = 115;

        $r7[2] = 116;

        $r7[3] = 97;

        $r7[4] = 114;

        $r8 = new java.io.File;

        $r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "A.tar");

        $r10 = new java.io.File;

        $r11 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "B.txt");

        $r12 = new java.io.File;

        $r13 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "D");

        virtualinvoke $r12.<java.io.File: boolean mkdirs()>();

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r8);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>(r5, 257L);

        staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)>($r7, r5);

        virtualinvoke r5.<java.io.OutputStream: void close()>();

        $r14 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label1:
        $r15 = new java.io.BufferedOutputStream;

        $r16 = new java.io.FileOutputStream;

        specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        specialinvoke $r15.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r16);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r15, 514L);

        goto label4;

     label3:
        $r23 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        throw $r23;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        $r17 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r17.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>($r7, 257L);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r8, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r10, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r12, 0);

        r26 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[],long)>($r7, 257L);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r26, $r8, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r26, $r10, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r26, $r12, 0);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testMagicNumberFileFilterString() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.FileOutputStream r7;
        byte[] $r8;
        java.io.File $r9, $r10, $r11, $r12, $r13, $r14;
        java.nio.charset.Charset $r15;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r16;
        org.apache.commons.io.filefilter.IOFileFilter r18;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r8 = newarray (byte)[4];

        $r8[0] = -54;

        $r8[1] = -2;

        $r8[2] = -70;

        $r8[3] = -66;

        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "A.class");

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "B.xml");

        $r13 = new java.io.File;

        $r14 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "D");

        virtualinvoke $r13.<java.io.File: boolean mkdirs()>();

        r7 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r9);

        staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)>($r8, r7);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>(r7, 32L);

        virtualinvoke r7.<java.io.OutputStream: void close()>();

        $r15 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset)>($r11, "<?xml version=\"1.0\" encoding=\"UTF-8\">\n<element>text</element>", $r15);

        $r16 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r16.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String)>("<?xml version=\"1.0\"");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r11, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r16, $r13, 0);

        r18 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String)>("<?xml version=\"1.0\"");

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r18, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r18, $r11, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r18, $r13, 0);

        return;
    }

    public void testMagicNumberFileFilterStringOffset() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.FileOutputStream r5, $r16;
        java.io.File $r7, $r8, $r9, $r10, $r11, $r12, $r14;
        java.nio.charset.Charset $r13;
        boolean $z1;
        java.io.BufferedOutputStream $r15;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r17;
        java.io.IOException $r18;
        java.lang.StringBuilder $r19, $r20, $r21;
        java.lang.String $r22;
        java.lang.Throwable $r23;
        org.apache.commons.io.filefilter.IOFileFilter r26;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "A.tar");

        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "B.txt");

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "D");

        virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r7);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>(r5, 257L);

        $r13 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>("ustar", r5, $r13);

        virtualinvoke r5.<java.io.OutputStream: void close()>();

        $r14 = virtualinvoke $r9.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label1:
        $r15 = new java.io.BufferedOutputStream;

        $r16 = new java.io.FileOutputStream;

        specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r15.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r16);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r15, 514L);

        goto label4;

     label3:
        $r23 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        throw $r23;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r15);

        $r17 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r17.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>("ustar", 257L);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r7, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r17, $r11, 0);

        r26 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String,long)>("ustar", 257L);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r26, $r7, 1);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r26, $r9, 0);

        virtualinvoke r0.<org.apache.commons.io.filefilter.FileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>(r26, $r11, 0);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testMagicNumberFileFilterValidation()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.MagicNumberFileFilter $r1, $r2, $r3, $r4, $r6, $r8;
        byte[] $r5, $r7;
        java.lang.IllegalArgumentException $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

     label01:
        $r1 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>(null, 0L);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

     label04:
        $r2 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r2.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>("0", -1L);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

     label07:
        $r3 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r3.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>("", 0L);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

     label10:
        $r4 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        specialinvoke $r4.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>(null, 0L);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

     label13:
        $r6 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r5 = newarray (byte)[1];

        specialinvoke $r6.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>($r5, -1L);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $r9 := @caughtexception;

     label16:
        $r8 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r7 = newarray (byte)[0];

        specialinvoke $r8.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>($r7, 0L);

        staticinvoke <org.junit.Assert: void fail()>();

     label17:
        goto label19;

     label18:
        $r12 := @caughtexception;

     label19:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label16 to label17 with label18;
    }

    public void testFilterArray() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File r1, r2, $r5, $r6, $r8;
        org.apache.commons.io.filefilter.IOFileFilter r3;
        java.io.File[] r4, $r7;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "A");

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r2 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r6, "B");

        r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("A");

        $r7 = newarray (java.io.File)[2];

        $r7[0] = r1;

        $r7[1] = r2;

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(r3, $r7);

        $i0 = lengthof r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r8 = r4[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r8);

        return;
    }

    public void testFilterArray_fromList() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File r1, r2, $r6, $r7, $r9;
        java.util.List r3;
        org.apache.commons.io.filefilter.IOFileFilter r4;
        java.io.File[] r5, $r8;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r6, "A");

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r2 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r7, "B");

        $r8 = newarray (java.io.File)[2];

        $r8[0] = r1;

        $r8[1] = r2;

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("A");

        r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r4, r3);

        $i0 = lengthof r5;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r9 = r5[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r9);

        return;
    }

    public void testFilterArrayNullParameters() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File r1, r2, $r3, $r4;
        java.io.File[] $r5, $r7, r14;
        int $i0;
        long $l1;
        java.lang.IllegalArgumentException $r9, $r10;
        org.apache.commons.io.filefilter.IOFileFilter r12;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r3, "A");

        $r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r2 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r4, "B");

     label1:
        $r5 = newarray (java.io.File)[2];

        $r5[0] = r1;

        $r5[1] = r2;

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(null, $r5);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()>();

     label5:
        $r7 = newarray (java.io.File)[2];

        $r7[0] = r1;

        $r7[1] = null;

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(r12, $r7);

        staticinvoke <org.junit.Assert: void fail()>();

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

     label8:
        r14 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(r12, null);

        $i0 = lengthof r14;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    public void testFilterList() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File r1, r2, $r6, $r7;
        java.util.List r3, r5;
        org.apache.commons.io.filefilter.IOFileFilter r4;
        java.io.File[] $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r6, "A");

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r2 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r7, "B");

        $r8 = newarray (java.io.File)[2];

        $r8[0] = r1;

        $r8[1] = r2;

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("A");

        r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r4, r3);

        $z0 = interfaceinvoke r5.<java.util.List: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r5.<java.util.List: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void testFilterList_fromArray() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File r1, r2, $r5, $r6;
        org.apache.commons.io.filefilter.IOFileFilter r3;
        java.util.List r4;
        java.io.File[] $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "A");

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r2 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r6, "B");

        r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("A");

        $r7 = newarray (java.io.File)[2];

        $r7[0] = r1;

        $r7[1] = r2;

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(r3, $r7);

        $z0 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void testFilterListNullParameters()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.List $r1, $r4, r11;
        java.io.File[] $r3;
        int $i0;
        long $l1;
        java.lang.IllegalArgumentException $r6, $r7;
        org.apache.commons.io.filefilter.IOFileFilter r9;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

     label1:
        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(null, $r1);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()>();

     label5:
        $r3 = newarray (java.io.File)[1];

        $r3[0] = null;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r9, $r4);

        staticinvoke <org.junit.Assert: void fail()>();

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

     label8:
        r11 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r9, null);

        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    public void testFilterSet() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File r1, r2, $r6, $r7;
        org.apache.commons.io.filefilter.IOFileFilter r4;
        java.util.Set r5;
        java.util.HashSet $r8;
        java.io.File[] $r9;
        java.util.List $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r6, "A");

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r2 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r7, "B");

        $r8 = new java.util.HashSet;

        $r9 = newarray (java.io.File)[2];

        $r9[0] = r1;

        $r9[1] = r2;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r10);

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("A");

        r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r4, $r8);

        $z0 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void testFilterSet_fromArray() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.io.File r1, r2, $r5, $r6;
        org.apache.commons.io.filefilter.IOFileFilter r3;
        java.util.Set r4;
        java.io.File[] $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r5, "A");

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterTestCase: java.io.File getTestDirectory()>();

        r2 = staticinvoke <org.apache.commons.io.testtools.TestUtils: java.io.File newFile(java.io.File,java.lang.String)>($r6, "B");

        r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("A");

        $r7 = newarray (java.io.File)[2];

        $r7[0] = r1;

        $r7[1] = r2;

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(r3, $r7);

        $z0 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void testFilterSetNullParameters()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        java.util.Set $r1, r12;
        java.util.HashSet $r3;
        java.io.File[] $r4;
        java.util.List $r5;
        int $i0;
        long $l1;
        java.lang.IllegalArgumentException $r7, $r8;
        org.apache.commons.io.filefilter.IOFileFilter r10;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

     label1:
        $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(null, $r1);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()>();

     label5:
        $r3 = new java.util.HashSet;

        $r4 = newarray (java.io.File)[1];

        $r4[0] = null;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r10, $r3);

        staticinvoke <org.junit.Assert: void fail()>();

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

     label8:
        r12 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(r10, null);

        $i0 = interfaceinvoke r12.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    public void testEnsureTestCoverage()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.FileFilterUtils $r1;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r1 = new org.apache.commons.io.filefilter.FileFilterUtils;

        specialinvoke $r1.<org.apache.commons.io.filefilter.FileFilterUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r1);

        return;
    }

    public void testNullFilters()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter[] $r1, $r3;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

     label1:
        $r1 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[1];

        $r1[0] = null;

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>($r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r3 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[1];

        staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalArgumentException");

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testDelegation()
    {
        org.apache.commons.io.filefilter.FileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterTestCase;

        $r1 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter)>($r1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r2);

        $r3 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r5);

        return;
    }
}
