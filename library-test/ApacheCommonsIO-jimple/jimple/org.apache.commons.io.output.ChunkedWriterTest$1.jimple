class org.apache.commons.io.output.ChunkedWriterTest$1 extends java.io.OutputStreamWriter
{
    final org.apache.commons.io.output.ChunkedWriterTest this$0;
    private final java.util.concurrent.atomic.AtomicInteger val$numWrites;

    void <init>(org.apache.commons.io.output.ChunkedWriterTest, java.io.OutputStream, java.util.concurrent.atomic.AtomicInteger)
    {
        org.apache.commons.io.output.ChunkedWriterTest$1 r0;
        org.apache.commons.io.output.ChunkedWriterTest r1;
        java.io.OutputStream $r2;
        java.util.concurrent.atomic.AtomicInteger r3;

        r0 := @this: org.apache.commons.io.output.ChunkedWriterTest$1;

        r1 := @parameter0: org.apache.commons.io.output.ChunkedWriterTest;

        $r2 := @parameter1: java.io.OutputStream;

        r3 := @parameter2: java.util.concurrent.atomic.AtomicInteger;

        r0.<org.apache.commons.io.output.ChunkedWriterTest$1: org.apache.commons.io.output.ChunkedWriterTest this$0> = r1;

        r0.<org.apache.commons.io.output.ChunkedWriterTest$1: java.util.concurrent.atomic.AtomicInteger val$numWrites> = r3;

        specialinvoke r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r2);

        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.ChunkedWriterTest$1 r0;
        char[] r1;
        int i0, i1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: org.apache.commons.io.output.ChunkedWriterTest$1;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.io.output.ChunkedWriterTest$1: java.util.concurrent.atomic.AtomicInteger val$numWrites>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        specialinvoke r0.<java.io.OutputStreamWriter: void write(char[],int,int)>(r1, i0, i1);

        return;
    }
}
