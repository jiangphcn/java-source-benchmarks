public class org.apache.commons.io.input.TailerTest extends org.apache.commons.io.testtools.FileBasedTestCase
{
    private org.apache.commons.io.input.Tailer tailer;

    public void <init>()
    {
        org.apache.commons.io.input.TailerTest r0;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        org.apache.commons.io.input.Tailer $r1, $r3;
        java.io.File $r2;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r1 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        virtualinvoke $r3.<org.apache.commons.io.input.Tailer: void stop()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1000L);

     label1:
        $r2 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1000L);

        return;
    }

    public void testLongFile() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        long l1, $l4, $l5;
        java.io.File $r4, $r5;
        java.io.FileWriter $r6;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r7;
        org.apache.commons.io.input.Tailer $r8, $r10;
        java.lang.Thread $r9;
        int $i2, $i3, i6;
        java.lang.Object $r11;
        java.lang.String $r12, $r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r13, $r15;
        java.io.PrintStream $r14;
        java.util.List r18;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "testLongFile.txt");

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r4, 0L);

        $r6 = new java.io.FileWriter;

        specialinvoke $r6.<java.io.FileWriter: void <init>(java.io.File,boolean)>($r4, 1);

        i6 = 0;

        goto label2;

     label1:
        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>("LineLineLineLineLineLineLineLineLineLine\n");

        i6 = i6 + 1;

     label2:
        if i6 < 100000 goto label1;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>("SBTOURIST\n");

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r6);

        $r7 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        $r8 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r8.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)>($r4, $r7, 50L, 0);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r8;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = new java.lang.Thread;

        $r10 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        virtualinvoke $r9.<java.lang.Thread: void start()>();

        r18 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        goto label4;

     label3:
        r18 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

     label4:
        $z1 = interfaceinvoke r18.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $i2 = interfaceinvoke r18.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r11 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>($i3);

        $r12 = (java.lang.String) $r11;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("SBTOURIST");

        if $z0 == 0 goto label3;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Elapsed: ");

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l4 - l1;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r16);

        virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void clear()>();

        return;
    }

    public void testBufferBreak() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File $r4, $r5;
        java.lang.String[] $r6;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r7;
        org.apache.commons.io.input.Tailer $r8, $r10;
        java.lang.Thread $r9;
        int $i1, $i2;
        java.lang.Object $r11;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.util.List r13;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "testBufferBreak.txt");

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r4, 0L);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "SBTOURIST\n";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void writeString(java.io.File,java.lang.String[])>($r4, $r6);

        $r7 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        $r8 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r8.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)>($r4, $r7, 50L, 0, 1);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r8;

        $r9 = new java.lang.Thread;

        $r10 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        virtualinvoke $r9.<java.lang.Thread: void start()>();

        r13 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        goto label2;

     label1:
        r13 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

     label2:
        $z1 = interfaceinvoke r13.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $i1 = interfaceinvoke r13.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r11 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>($i2);

        $r12 = (java.lang.String) $r11;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("SBTOURIST");

        if $z0 == 0 goto label1;

        virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void clear()>();

        return;
    }

    public void testMultiByteBreak() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.lang.String r4, r11, r12, $r17, $r19, $r33, $r46;
        boolean z0, $z2;
        java.nio.charset.Charset r5, $r16;
        java.util.List r10;
        int i2, $i3, $i5, $i7, $i8, i9;
        java.lang.StringBuilder $r14, $r18, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45;
        java.io.PrintStream $r15;
        java.io.File $r20, $r21, $r22;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r23;
        org.apache.commons.io.input.Tailer $r24, $r26, $r47, $r49;
        java.lang.Thread $r25;
        java.io.OutputStreamWriter $r27;
        java.io.FileOutputStream $r28;
        java.util.ArrayList $r29;
        java.io.BufferedReader $r30, r50;
        java.io.InputStreamReader $r31;
        java.io.FileInputStream $r32;
        long $l4, $l6;
        java.lang.Object $r34, $r35;
        java.lang.Throwable $r48;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("testMultiByteBreak() Default charset: ");

        $r16 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r17 = virtualinvoke $r16.<java.nio.charset.Charset: java.lang.String displayName()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("resources/test-file-utf8.bin");

        $r21 = new java.io.File;

        $r22 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r21.<java.io.File: void <init>(java.io.File,java.lang.String)>($r22, "testMultiByteBreak.txt");

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r21, 0L);

        $r23 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r23.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        r5 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        $r24 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r24.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,java.nio.charset.Charset,org.apache.commons.io.input.TailerListener,long,boolean,boolean,int)>($r21, r5, $r23, 50L, 0, z0, 4096);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r24;

        $r25 = new java.lang.Thread;

        $r26 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        specialinvoke $r25.<java.lang.Thread: void <init>(java.lang.Runnable)>($r26);

        virtualinvoke $r25.<java.lang.Thread: void start()>();

        $r27 = new java.io.OutputStreamWriter;

        $r28 = new java.io.FileOutputStream;

        specialinvoke $r28.<java.io.FileOutputStream: void <init>(java.io.File)>($r21);

        specialinvoke $r27.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r28, r5);

        r50 = null;

     label1:
        $r29 = new java.util.ArrayList;

        specialinvoke $r29.<java.util.ArrayList: void <init>()>();

        $r30 = new java.io.BufferedReader;

        $r31 = new java.io.InputStreamReader;

        $r32 = new java.io.FileInputStream;

        specialinvoke $r32.<java.io.FileInputStream: void <init>(java.io.File)>($r20);

        specialinvoke $r31.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r32, r5);

        specialinvoke $r30.<java.io.BufferedReader: void <init>(java.io.Reader)>($r31);

        r50 = $r30;

        goto label3;

     label2:
        virtualinvoke $r27.<java.io.Writer: void write(java.lang.String)>($r33);

        virtualinvoke $r27.<java.io.Writer: void write(java.lang.String)>("\n");

        interfaceinvoke $r29.<java.util.List: boolean add(java.lang.Object)>($r33);

     label3:
        $r33 = virtualinvoke $r30.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r33 != null goto label2;

        virtualinvoke $r27.<java.io.Writer: void close()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        r10 = virtualinvoke $r23.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i3 = interfaceinvoke $r29.<java.util.List: int size()>();

        $l4 = (long) $i3;

        $i5 = interfaceinvoke r10.<java.util.List: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("line count", $l4, $l6);

        i9 = 0;

        i2 = interfaceinvoke $r29.<java.util.List: int size()>();

        goto label6;

     label4:
        $r34 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(i9);

        r11 = (java.lang.String) $r34;

        $r35 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i9);

        r12 = (java.lang.String) $r35;

        $z2 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z2 != 0 goto label5;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("Line: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExp: (");

        $i7 = virtualinvoke r11.<java.lang.String: int length()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nAct: (");

        $i8 = virtualinvoke r12.<java.lang.String: int length()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r46);

     label5:
        i9 = i9 + 1;

     label6:
        if i9 < i2 goto label4;

        goto label8;

     label7:
        $r48 := @caughtexception;

        $r49 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        virtualinvoke $r49.<org.apache.commons.io.input.Tailer: void stop()>();

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r50);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r27);

        throw $r48;

     label8:
        $r47 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        virtualinvoke $r47.<org.apache.commons.io.input.Tailer: void stop()>();

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>($r30);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r27);

        return;

        catch java.lang.Throwable from label1 to label7 with label7;
    }

    public void testTailerEof() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File $r6, $r7;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r8;
        org.apache.commons.io.input.Tailer $r9;
        java.lang.Thread $r10;
        java.lang.String[] $r11, $r12;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Object $r13;
        java.lang.Throwable $r14;
        java.util.List r15, r16;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "tailer2-test.txt");

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r6, 0L);

        $r8 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r8.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        $r9 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r9.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)>($r6, $r8, 50L, 0);

        $r10 = new java.lang.Thread;

        specialinvoke $r10.<java.lang.Thread: void <init>(java.lang.Runnable)>($r9);

        virtualinvoke $r10.<java.lang.Thread: void start()>();

     label1:
        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "Line";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void writeString(java.io.File,java.lang.String[])>($r6, $r11);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(100L);

        r15 = virtualinvoke $r8.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i0 = interfaceinvoke r15.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("1 line count", 0L, $l1);

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = " one\n";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void writeString(java.io.File,java.lang.String[])>($r6, $r12);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(100L);

        r16 = virtualinvoke $r8.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i2 = interfaceinvoke r16.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("1 line count", 1L, $l3);

        $r13 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1 line 1", "Line one", $r13);

        virtualinvoke $r8.<org.apache.commons.io.input.TailerTest$TestTailerListener: void clear()>();

        goto label3;

     label2:
        $r14 := @caughtexception;

        virtualinvoke $r9.<org.apache.commons.io.input.Tailer: void stop()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(100L);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null);

        throw $r14;

     label3:
        virtualinvoke $r9.<org.apache.commons.io.input.Tailer: void stop()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(100L);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testTailer() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.lang.String r3, $r27;
        boolean z0, z1, $z3;
        java.io.File $r5, $r6;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r7;
        org.apache.commons.io.input.Tailer $r8, $r10, $r29;
        java.lang.Thread $r9;
        java.lang.String[] $r11, $r14, $r19, $r21;
        int $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16;
        long $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17;
        java.lang.Object $r12, $r13, $r15, $r16, $r17, $r18, $r20;
        java.util.List $r22, r30, r31, r32, r33;
        java.lang.Exception $r23, $r25, $r28;
        java.lang.StringBuilder $r24, $r26;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "tailer1-test.txt");

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r5, 0L);

        $r7 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        $r8 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r8.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)>($r5, $r7, 50L, 0, z0);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r8;

        $r9 = new java.lang.Thread;

        $r10 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        virtualinvoke $r9.<java.lang.Thread: void start()>();

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "Line one";

        $r11[1] = "Line two";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void write(java.io.File,java.lang.String[])>($r5, $r11);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        r30 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i2 = interfaceinvoke r30.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("1 line count", 2L, $l3);

        $r12 = interfaceinvoke r30.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1 line 1", "Line one", $r12);

        $r13 = interfaceinvoke r30.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1 line 2", "Line two", $r13);

        virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void clear()>();

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = "Line three";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void write(java.io.File,java.lang.String[])>($r5, $r14);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        r31 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i4 = interfaceinvoke r31.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("2 line count", 1L, $l5);

        $r15 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("2 line 3", "Line three", $r15);

        virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void clear()>();

        r32 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>($r5, "UTF-8");

        $i6 = interfaceinvoke r32.<java.util.List: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("3 line count", 3L, $l7);

        $r16 = interfaceinvoke r32.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("3 line 1", "Line one", $r16);

        $r17 = interfaceinvoke r32.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("3 line 2", "Line two", $r17);

        $r18 = interfaceinvoke r32.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("3 line 3", "Line three", $r18);

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("File should not exist", z1);

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r5, 0L);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        $r19 = newarray (java.lang.String)[1];

        $r19[0] = "Line four";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void write(java.io.File,java.lang.String[])>($r5, $r19);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        r33 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i8 = interfaceinvoke r33.<java.util.List: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("4 line count", 1L, $l9);

        $r20 = interfaceinvoke r33.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("4 line 3", "Line four", $r20);

        virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void clear()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(2000L);

        $r21 = newarray (java.lang.String)[1];

        $r21[0] = "Line five";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void write(java.io.File,java.lang.String[])>($r5, $r21);

        $r22 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i10 = interfaceinvoke $r22.<java.util.List: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("4 line count", 0L, $l11);

        $r23 = $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Missing InterruptedException", $r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected Exception: ");

        $r25 = $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        $z3 = $r28 instanceof java.lang.InterruptedException;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r27, $z3);

        $i12 = $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: int initialised>;

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Expected init to be called", 1L, $l13);

        $i14 = $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: int notFound>;

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("fileNotFound should not be called", 0L, $l15);

        $i16 = $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: int rotated>;

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("fileRotated should be be called", 1L, $l17);

        $r29 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        virtualinvoke $r29.<org.apache.commons.io.input.Tailer: void stop()>();

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = null;

        return;
    }

    public void testTailerEndOfFileReached() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.lang.String r3;
        boolean z0, $z1;
        java.io.File $r5, $r6;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r7;
        org.apache.commons.io.input.Tailer $r8, $r10;
        java.lang.Thread $r9;
        java.lang.String[] $r11, $r12, $r13;
        int $i2;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "tailer-eof-test.txt");

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r5, 0L);

        $r7 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        $r8 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r8.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,boolean)>($r5, $r7, 50L, 0, z0);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r8;

        $r9 = new java.lang.Thread;

        $r10 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        virtualinvoke $r9.<java.lang.Thread: void start()>();

        $r11 = newarray (java.lang.String)[3];

        $r11[0] = "line1";

        $r11[1] = "line2";

        $r11[2] = "line3";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void write(java.io.File,java.lang.String[])>($r5, $r11);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        $r12 = newarray (java.lang.String)[3];

        $r12[0] = "line4";

        $r12[1] = "line5";

        $r12[2] = "line6";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void write(java.io.File,java.lang.String[])>($r5, $r12);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        $r13 = newarray (java.lang.String)[3];

        $r13[0] = "line7";

        $r13[1] = "line8";

        $r13[2] = "line9";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void write(java.io.File,java.lang.String[])>($r5, $r13);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        $i2 = $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: int reachedEndOfFile>;

        if $i2 < 3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("end of file reached at least 3 times", $z1);

        return;
    }

    protected void createFile(java.io.File, long) throws java.io.IOException
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File r1, $r4;
        long l0;
        boolean $z0;
        java.io.BufferedOutputStream $r5;
        java.io.FileOutputStream $r6;
        java.io.RandomAccessFile $r7, r19;
        java.lang.String $r8, $r13;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.Throwable $r14, $r15;
        java.io.FileNotFoundException $r16;
        java.lang.InterruptedException $r17;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        r1 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        $r4 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label01:
        $r5 = new java.io.BufferedOutputStream;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r5.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r6);

     label02:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r5, l0);

        goto label04;

     label03:
        $r15 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5);

        throw $r15;

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r5);

        r19 = null;

     label05:
        goto label12;

     label06:
        $r7 = new java.io.RandomAccessFile;

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r7.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r8, "r");

        r19 = $r7;

     label07:
        goto label09;

     label08:
        $r16 := @caughtexception;

     label09:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(200L);

     label10:
        goto label12;

     label11:
        $r17 := @caughtexception;

     label12:
        if r19 == null goto label06;

        goto label14;

     label13:
        $r14 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r19);

        throw $r14;

     label14:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r19);

        return;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.io.FileNotFoundException from label06 to label07 with label08;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.lang.Throwable from label05 to label13 with label13;
    }

    private transient void write(java.io.File, java.lang.String[]) throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File r1;
        java.lang.String[] r2;
        java.lang.String r3, $r8, $r10;
        int i0, i1;
        java.io.FileWriter $r6, r12;
        java.lang.StringBuilder $r7, $r9;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String[];

        r12 = null;

     label1:
        $r6 = new java.io.FileWriter;

        specialinvoke $r6.<java.io.FileWriter: void <init>(java.io.File,boolean)>(r1, 1);

        r12 = $r6;

        i0 = lengthof r2;

        i1 = 0;

        goto label3;

     label2:
        r3 = r2[i1];

        $r7 = new java.lang.StringBuilder;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.FileWriter: void write(java.lang.String)>($r10);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        goto label5;

     label4:
        $r11 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(r12);

        throw $r11;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r6);

        return;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    private transient void writeString(java.io.File, java.lang.String[]) throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File r1;
        java.lang.String[] r2;
        java.lang.String r3;
        int i0, i1;
        java.io.FileWriter $r6, r8;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String[];

        r8 = null;

     label1:
        $r6 = new java.io.FileWriter;

        specialinvoke $r6.<java.io.FileWriter: void <init>(java.io.File,boolean)>(r1, 1);

        r8 = $r6;

        i0 = lengthof r2;

        i1 = 0;

        goto label3;

     label2:
        r3 = r2[i1];

        virtualinvoke $r6.<java.io.FileWriter: void write(java.lang.String)>(r3);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        goto label5;

     label4:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(r8);

        throw $r7;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r6);

        return;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    public void testStopWithNoFile() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File $r3, $r4;
        boolean $z0, $z1;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r5;
        org.apache.commons.io.input.Tailer $r6, $r7;
        java.lang.Exception $r8;
        int $i2, $i4, $i5, $i7;
        long $l3, $l6, $l8;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r3 = new java.io.File;

        $r4 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "nosuchfile");

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("nosuchfile should not exist", $z0);

        $r5 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r5.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        $r6 = staticinvoke <org.apache.commons.io.input.Tailer: org.apache.commons.io.input.Tailer create(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)>($r3, $r5, 100L, 0);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r6;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(50L);

        $r7 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        virtualinvoke $r7.<org.apache.commons.io.input.Tailer: void stop()>();

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = null;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(150L);

        $r8 = $r5.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Should not generate Exception", $r8);

        $i2 = $r5.<org.apache.commons.io.input.TailerTest$TestTailerListener: int initialised>;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Expected init to be called", 1L, $l3);

        $i4 = $r5.<org.apache.commons.io.input.TailerTest$TestTailerListener: int notFound>;

        if $i4 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("fileNotFound should be called", $z1);

        $i5 = $r5.<org.apache.commons.io.input.TailerTest$TestTailerListener: int rotated>;

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("fileRotated should be not be called", 0L, $l6);

        $i7 = $r5.<org.apache.commons.io.input.TailerTest$TestTailerListener: int reachedEndOfFile>;

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("end of file never reached", 0L, $l8);

        return;
    }

    public void testInterrupt() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File $r4, $r5;
        boolean $z0, $z1, $z2;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r6;
        org.apache.commons.io.input.Tailer $r7;
        java.lang.Thread $r8;
        java.lang.Exception $r9, $r11, $r14;
        java.lang.StringBuilder $r10, $r12;
        java.lang.String $r13;
        int $i0, $i2, $i3, $i5;
        long $l1, $l4, $l6;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "nosuchfile");

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("nosuchfile should not exist", $z0);

        $r6 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        $r7 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r7.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean,int)>($r4, $r6, 1000L, 0, 4096);

        $r8 = new java.lang.Thread;

        specialinvoke $r8.<java.lang.Thread: void <init>(java.lang.Runnable)>($r7);

        virtualinvoke $r8.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r8.<java.lang.Thread: void start()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(50L);

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1050L);

        $r9 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Missing InterruptedException", $r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected Exception: ");

        $r11 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        $z1 = $r14 instanceof java.lang.InterruptedException;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r13, $z1);

        $i0 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int initialised>;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Expected init to be called", 1L, $l1);

        $i2 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int notFound>;

        if $i2 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("fileNotFound should be called", $z2);

        $i3 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int rotated>;

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("fileRotated should be not be called", 0L, $l4);

        $i5 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int reachedEndOfFile>;

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("end of file never reached", 0L, $l6);

        return;
    }

    public void testStopWithNoFileUsingExecutor() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.io.File $r4, $r5;
        boolean $z0, $z1;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r6;
        org.apache.commons.io.input.Tailer $r7, $r9, $r10;
        java.util.concurrent.ScheduledThreadPoolExecutor $r8;
        java.lang.Exception $r11;
        int $i2, $i4, $i5, $i7;
        long $l3, $l6, $l8;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "nosuchfile");

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("nosuchfile should not exist", $z0);

        $r6 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        $r7 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r7.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)>($r4, $r6, 100L, 0);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r7;

        $r8 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r8.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(1);

        $r9 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(50L);

        $r10 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        virtualinvoke $r10.<org.apache.commons.io.input.Tailer: void stop()>();

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = null;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(150L);

        $r11 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.lang.Exception exception>;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Should not generate Exception", $r11);

        $i2 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int initialised>;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Expected init to be called", 1L, $l3);

        $i4 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int notFound>;

        if $i4 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("fileNotFound should be called", $z1);

        $i5 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int rotated>;

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("fileRotated should be not be called", 0L, $l6);

        $i7 = $r6.<org.apache.commons.io.input.TailerTest$TestTailerListener: int reachedEndOfFile>;

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("end of file never reached", 0L, $l8);

        return;
    }

    public void testIO335() throws java.lang.Exception
    {
        org.apache.commons.io.input.TailerTest r0;
        java.util.List r4;
        java.io.File $r5, $r6;
        org.apache.commons.io.input.TailerTest$TestTailerListener $r7;
        org.apache.commons.io.input.Tailer $r8, $r10, $r16;
        java.lang.Thread $r9;
        java.lang.String[] $r11;
        int $i2;
        long $l3;
        java.lang.Object $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.commons.io.input.TailerTest;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.input.TailerTest: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "tailer-testio334.txt");

        virtualinvoke r0.<org.apache.commons.io.input.TailerTest: void createFile(java.io.File,long)>($r5, 0L);

        $r7 = new org.apache.commons.io.input.TailerTest$TestTailerListener;

        specialinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: void <init>(org.apache.commons.io.input.TailerTest$TestTailerListener)>(null);

        $r8 = new org.apache.commons.io.input.Tailer;

        specialinvoke $r8.<org.apache.commons.io.input.Tailer: void <init>(java.io.File,org.apache.commons.io.input.TailerListener,long,boolean)>($r5, $r7, 50L, 0);

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = $r8;

        $r9 = new java.lang.Thread;

        $r10 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        virtualinvoke $r9.<java.lang.Thread: void start()>();

        $r11 = newarray (java.lang.String)[5];

        $r11[0] = "CRLF\r\n";

        $r11[1] = "LF\n";

        $r11[2] = "CR\r";

        $r11[3] = "CRCR\r\r";

        $r11[4] = "trail";

        specialinvoke r0.<org.apache.commons.io.input.TailerTest: void writeString(java.io.File,java.lang.String[])>($r5, $r11);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        r4 = virtualinvoke $r7.<org.apache.commons.io.input.TailerTest$TestTailerListener: java.util.List getLines()>();

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("line count", 4L, $l3);

        $r12 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("line 1", "CRLF", $r12);

        $r13 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("line 2", "LF", $r13);

        $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("line 3", "CR", $r14);

        $r15 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("line 4", "CRCR\r", $r15);

        $r16 = r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer>;

        virtualinvoke $r16.<org.apache.commons.io.input.Tailer: void stop()>();

        r0.<org.apache.commons.io.input.TailerTest: org.apache.commons.io.input.Tailer tailer> = null;

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        return;
    }
}
