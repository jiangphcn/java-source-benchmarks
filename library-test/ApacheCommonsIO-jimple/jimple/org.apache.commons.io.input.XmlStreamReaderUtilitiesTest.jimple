public class org.apache.commons.io.input.XmlStreamReaderUtilitiesTest extends java.lang.Object
{
    private static java.lang.String RAWMGS1;
    private static java.lang.String RAWMGS2;
    private static java.lang.String HTTPMGS1;
    private static java.lang.String HTTPMGS2;
    private static java.lang.String HTTPMGS3;
    private static java.lang.String APPXML;
    private static java.lang.String APPXML_UTF8;
    private static java.lang.String APPXML_UTF16;
    private static java.lang.String APPXML_UTF32;
    private static java.lang.String APPXML_UTF16BE;
    private static java.lang.String APPXML_UTF16LE;
    private static java.lang.String APPXML_UTF32BE;
    private static java.lang.String APPXML_UTF32LE;
    private static java.lang.String TXTXML;

    static void <clinit>()
    {
        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1> = "encoding mismatch";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS2> = "unknown BOM";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS1> = "BOM must be NULL";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS2> = "encoding mismatch";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS3> = "Invalid MIME";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML> = "application/xml";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF8> = "application/xml;charset=UTF-8";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16> = "application/xml;charset=UTF-16";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32> = "application/xml;charset=UTF-32";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16BE> = "application/xml;charset=UTF-16BE";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16LE> = "application/xml;charset=UTF-16LE";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32BE> = "application/xml;charset=UTF-32BE";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32LE> = "application/xml;charset=UTF-32LE";

        <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String TXTXML> = "text/xml";

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testContentTypeEncoding()
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>(null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>(null, "");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>(null, "application/xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>(null, "application/xml;");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>(null, "multipart/mixed;boundary=frontier");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>(null, "multipart/mixed;boundary=\'frontier\'");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>(null, "multipart/mixed;boundary=\"frontier\"");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-16", "application/xml;charset=utf-16");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-16", "application/xml;charset=UTF-16");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-16", "application/xml;charset=\'UTF-16\'");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-16", "application/xml;charset=\"UTF-16\"");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-32", "application/xml;charset=utf-32");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-32", "application/xml;charset=UTF-32");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-32", "application/xml;charset=\'UTF-32\'");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeEncoding(java.lang.String,java.lang.String)>("UTF-32", "application/xml;charset=\"UTF-32\"");

        return;
    }

    private void checkContentTypeEncoding(java.lang.String, java.lang.String)
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, $r6, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("ContentTypeEncoding=[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r6, r1, $r7);

        return;
    }

    public void testContentTypeMime()
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeMime(java.lang.String,java.lang.String)>(null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeMime(java.lang.String,java.lang.String)>("", "");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeMime(java.lang.String,java.lang.String)>("application/xml", "application/xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeMime(java.lang.String,java.lang.String)>("application/xml", "application/xml;");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeMime(java.lang.String,java.lang.String)>("application/xml", "application/xml;charset=utf-16");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkContentTypeMime(java.lang.String,java.lang.String)>("application/xml", "application/xml;charset=utf-32");

        return;
    }

    private void checkContentTypeMime(java.lang.String, java.lang.String)
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, $r6, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("ContentTypeMime=[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeMime(java.lang.String)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r6, r1, $r7);

        return;
    }

    public void testAppXml()
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(0, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(0, "");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(1, "application/xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(1, "application/xml-dtd");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(1, "application/xml-external-parsed-entity");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(1, "application/soap+xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(1, "application/atom+xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(0, "application/atomxml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(0, "text/xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(0, "text/atom+xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(1, "application/xml-dtd");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkAppXml(boolean,java.lang.String)>(1, "application/xml-external-parsed-entity");

        return;
    }

    private void checkAppXml(boolean, java.lang.String)
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        boolean z0, $z1;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Boolean $r6, $r7;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Mime=[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $z1 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>(r1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r5, $r6, $r7);

        return;
    }

    public void testTextXml()
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(0, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(0, "");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(1, "text/xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(1, "text/xml-external-parsed-entity");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(1, "text/soap+xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(1, "text/atom+xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(0, "text/atomxml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(0, "application/xml");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkTextXml(boolean,java.lang.String)>(0, "application/atom+xml");

        return;
    }

    private void checkTextXml(boolean, java.lang.String)
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        boolean z0, $z1;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Boolean $r6, $r7;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Mime=[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $z1 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>(r1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r5, $r6, $r7);

        return;
    }

    public void testCalculateRawEncodingNoBOM() throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        $r1 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS2>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, "UTF-32", null, null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", null, null, null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", null, "UTF-16BE", null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", null, null, "UTF-16BE", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", null, "UTF-8", "UTF-8", "UTF-16BE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", null, "UTF-16BE", "UTF-16BE", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", null, null, null, "UTF-16BE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", null, "UTF-8", null, "UTF-16BE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", null, null, "UTF-8", "UTF-16BE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", null, "UTF-16BE", "UTF-16", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16LE", null, "UTF-16LE", "UTF-16", null);

        return;
    }

    public void testCalculateRawEncodingStandard() throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)>("UTF-8", "UTF-16BE", "UTF-16LE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", "UTF-8", "UTF-16LE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)>("UTF-16LE", "UTF-8", "UTF-16BE");

        return;
    }

    public void testCalculateRawEncodingStandardUtf32() throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)>("UTF-8", "UTF-32BE", "UTF-32LE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)>("UTF-32BE", "UTF-8", "UTF-32LE");

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void testCalculateRawEncodingStandard(java.lang.String,java.lang.String,java.lang.String)>("UTF-32LE", "UTF-8", "UTF-32BE");

        return;
    }

    private void testCalculateRawEncodingStandard(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r1, null, null, r3);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r1, r1, null, r3);

        $r4 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, r1, r2, null, r3);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r1, null, r1, r3);

        $r5 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r5, r1, null, r2, r3);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r1, r1, r1, r3);

        $r6 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, r1, r1, r2, r3);

        $r7 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, r1, r2, r1, r3);

        return;
    }

    public void testCalculateRawEncodingAdditonalUTF16() throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        $r1 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, "UTF-16BE", "UTF-16", null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", "UTF-16BE", null, "UTF-16", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", "UTF-16BE", "UTF-16BE", "UTF-16", null);

        $r2 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, "UTF-16BE", null, "UTF-16LE", null);

        $r3 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, "UTF-16BE", "UTF-16BE", "UTF-16LE", null);

        $r4 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, "UTF-16LE", "UTF-16", null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16LE", "UTF-16LE", null, "UTF-16", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16LE", "UTF-16LE", "UTF-16LE", "UTF-16", null);

        $r5 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r5, "UTF-16LE", null, "UTF-16BE", null);

        $r6 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, "UTF-16LE", "UTF-16LE", "UTF-16BE", null);

        return;
    }

    public void testCalculateRawEncodingAdditonalUTF32() throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        $r1 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, "UTF-32BE", "UTF-32", null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32BE", "UTF-32BE", null, "UTF-32", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32BE", "UTF-32BE", "UTF-32BE", "UTF-32", null);

        $r2 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, "UTF-32BE", null, "UTF-32LE", null);

        $r3 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, "UTF-32BE", "UTF-32BE", "UTF-32LE", null);

        $r4 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, "UTF-32LE", "UTF-32", null, null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32LE", "UTF-32LE", null, "UTF-32", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32LE", "UTF-32LE", "UTF-32LE", "UTF-32", null);

        $r5 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r5, "UTF-32LE", null, "UTF-32BE", null);

        $r6 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String RAWMGS1>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawError(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, "UTF-32LE", "UTF-32LE", "UTF-32BE", null);

        return;
    }

    private void checkRawEncoding(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, r3, r4, r5, r7, $r24;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RawEncoding: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bomEnc=[");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlGuessEnc=[");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r18 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlEnc=[");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("defaultEncoding=[");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

        r7 = virtualinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4, r5);

        $r24 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r24, r1, r7);

        return;
    }

    protected java.lang.String calculateRawEncoding(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, r3, r4, r6;
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader $r7;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r7 = new org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader;

        specialinvoke $r7.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader: void <init>(java.lang.String)>(r4);

        r6 = virtualinvoke $r7.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        virtualinvoke $r7.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader: void close()>();

        return r6;
    }

    private void checkRawError(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, r3, r4, r5, $r8, $r10, $r11, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r25;
        org.apache.commons.io.input.XmlStreamReaderException $r6;
        java.lang.StringBuilder $r7, $r9, $r12, $r14, $r23, $r24;
        boolean $z0, $z1;
        java.lang.Exception $r22;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

     label1:
        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("XmlStreamReaderException", r2, r3, r4, r5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected XmlStreamReaderException");

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Msg Start: ");

        $r8 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("Invalid encoding");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r10, $z0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Msg End: ");

        $r13 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r15, $z1);

        $r17 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getBomEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("bomEnc", r2, $r17);

        $r18 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getXmlGuessEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("xmlGuessEnc", r3, $r18);

        $r19 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getXmlEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("xmlEnc", r4, $r19);

        $r20 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getContentTypeEncoding()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("ContentTypeEncoding", $r20);

        $r21 = virtualinvoke $r6.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getContentTypeMime()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("ContentTypeMime", $r21);

        goto label5;

     label4:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected XmlStreamReaderException, but threw ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r25);

     label5:
        return;

        catch org.apache.commons.io.input.XmlStreamReaderException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public void testCalculateHttpEncoding() throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        $r1 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS3>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, 1, null, null, null, null, null);

        $r2 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS3>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, 0, null, null, null, "UTF-8", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", 1, null, null, null, "UTF-8", null);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16LE", 1, null, null, null, "UTF-16LE", null);

        $r3 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS3>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, 0, "text/css", null, null, null, null);

        $r4 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String TXTXML>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("US-ASCII", 0, $r4, null, null, null, null);

        $r5 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String TXTXML>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", 0, $r5, null, null, null, "UTF-16BE");

        $r6 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", 0, $r6, null, null, null, null);

        $r7 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", 0, $r7, null, null, null, "UTF-16BE");

        $r8 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", 0, $r8, "UTF-8", null, null, "UTF-16BE");

        $r9 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16LE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16LE", 0, $r9, null, null, null, null);

        $r10 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16BE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", 0, $r10, null, null, null, null);

        $r12 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS1>;

        $r11 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16LE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r12, 0, $r11, "UTF-16LE", null, null, null);

        $r14 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS1>;

        $r13 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16BE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r14, 0, $r13, "UTF-16BE", null, null, null);

        $r16 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS2>;

        $r15 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r16, 0, $r15, null, null, null, null);

        $r18 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS2>;

        $r17 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r18, 0, $r17, "UTF-8", null, null, null);

        $r19 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16LE", 0, $r19, "UTF-16LE", null, null, null);

        $r20 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF16>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-16BE", 0, $r20, "UTF-16BE", null, null, null);

        $r21 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF8>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", 0, $r21, null, null, null, null);

        $r22 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF8>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", 0, $r22, "UTF-16BE", "UTF-16BE", "UTF-16BE", "UTF-16BE");

        return;
    }

    public void testCalculateHttpEncodingUtf32() throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32LE", 1, null, null, null, "UTF-32LE", null);

        $r1 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String TXTXML>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32BE", 0, $r1, null, null, null, "UTF-32BE");

        $r2 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32BE", 0, $r2, null, null, null, "UTF-32BE");

        $r3 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32LE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32LE", 0, $r3, null, null, null, null);

        $r4 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32BE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32BE", 0, $r4, null, null, null, null);

        $r6 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS1>;

        $r5 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32LE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, 0, $r5, "UTF-32LE", null, null, null);

        $r8 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS1>;

        $r7 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32BE>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, 0, $r7, "UTF-32BE", null, null, null);

        $r10 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS2>;

        $r9 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r10, 0, $r9, null, null, null, null);

        $r12 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String HTTPMGS2>;

        $r11 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpError(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r12, 0, $r11, "UTF-8", null, null, null);

        $r13 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32LE", 0, $r13, "UTF-32LE", null, null, null);

        $r14 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF32>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-32BE", 0, $r14, "UTF-32BE", null, null, null);

        $r15 = <org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String APPXML_UTF8>;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("UTF-8", 0, $r15, "UTF-32BE", "UTF-32BE", "UTF-32BE", "UTF-32BE");

        return;
    }

    private void checkHttpEncoding(java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r8, $r31;
        boolean z0;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r26, $r28, $r29;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HttpEncoding=[");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lenient=[");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r16 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("httpContentType=[");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r19 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bomEnc=[");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r22 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlGuessEnc=[");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r25 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlEnc=[");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $r28 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("defaultEncoding=[");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

        r8 = virtualinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)>(r2, r3, r4, r5, z0, r6);

        $r31 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r31, r1, r8);

        return;
    }

    protected java.lang.String calculateHttpEncoding(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, r3, r4, r5, r7;
        boolean z0;
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader $r8;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r5 := @parameter5: java.lang.String;

        $r8 = new org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader;

        specialinvoke $r8.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader: void <init>(java.lang.String)>(r5);

        r7 = virtualinvoke $r8.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, z0);

        virtualinvoke $r8.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest$MockXmlStreamReader: void close()>();

        return r7;
    }

    private void checkHttpError(java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.io.input.XmlStreamReaderUtilitiesTest r0;
        java.lang.String r1, r2, r3, r4, r5, r6, $r10, $r13, $r15, $r16, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        boolean z0, $z1, $z2;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8, $r9, $r12, $r14, $r17, $r19;
        org.apache.commons.io.input.XmlStreamReaderException $r11;

        r0 := @this: org.apache.commons.io.input.XmlStreamReaderUtilitiesTest;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

     label1:
        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReaderUtilitiesTest: void checkHttpEncoding(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("XmlStreamReaderException", z0, r2, r3, r4, r5, r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected XmlStreamReaderException");

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Msg Start: ");

        $r13 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>("Invalid encoding");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r15, $z1);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Msg End: ");

        $r18 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getMessage()>();

        $z2 = virtualinvoke $r21.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r20, $z2);

        $r22 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getBomEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("bomEnc", r3, $r22);

        $r23 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getXmlGuessEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("xmlGuessEnc", r4, $r23);

        $r24 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getXmlEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("xmlEnc", r5, $r24);

        $r25 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r2);

        $r26 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getContentTypeEncoding()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ContentTypeEncoding", $r25, $r26);

        $r27 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeMime(java.lang.String)>(r2);

        $r28 = virtualinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getContentTypeMime()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ContentTypeMime", $r27, $r28);

        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected XmlStreamReaderException, but threw ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r10);

     label5:
        return;

        catch org.apache.commons.io.input.XmlStreamReaderException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }
}
