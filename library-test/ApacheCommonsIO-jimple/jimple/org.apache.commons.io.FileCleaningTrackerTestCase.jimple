public class org.apache.commons.io.FileCleaningTrackerTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{
    private java.io.File testFile;
    private org.apache.commons.io.FileCleaningTracker theInstance;

    protected org.apache.commons.io.FileCleaningTracker newInstance()
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        org.apache.commons.io.FileCleaningTracker $r1;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r1 = new org.apache.commons.io.FileCleaningTracker;

        specialinvoke $r1.<org.apache.commons.io.FileCleaningTracker: void <init>()>();

        return $r1;
    }

    public void <init>()
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.io.File $r1, $r2;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        $r1 = new java.io.File;

        $r2 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "file-test.txt");

        r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile> = $r1;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        org.apache.commons.io.FileCleaningTracker $r1;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r1 = virtualinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker newInstance()>();

        r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance> = $r1;

        staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.io.File $r1;
        java.lang.ref.ReferenceQueue $r2;
        org.apache.commons.io.FileCleaningTracker $r3, $r4, $r6, $r8, $r9;
        java.util.Collection $r5;
        java.util.List $r7;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r1 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r1);

        $r3 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        $r3.<org.apache.commons.io.FileCleaningTracker: java.lang.ref.ReferenceQueue q> = $r2;

        $r4 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r5 = $r4.<org.apache.commons.io.FileCleaningTracker: java.util.Collection trackers>;

        interfaceinvoke $r5.<java.util.Collection: void clear()>();

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r7 = $r6.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        $r8 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r8.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> = 0;

        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r9.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper> = null;

        r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance> = null;

        return;
    }

    public void testFileCleanerFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.lang.String r1, $r12;
        java.io.File $r2, $r3, $r5, $r6, $r10, $r14;
        boolean $z0, $z1, $z2;
        java.io.RandomAccessFile $r4;
        org.apache.commons.io.FileCleaningTracker $r7, $r8, $r9, $r11;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        java.lang.Boolean $r13, $r15;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        r1 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r3 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r4 = new java.io.RandomAccessFile;

        $r5 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r5, "rw");

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r7.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r8 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r8.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>(r1, $r4);

        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i2 = virtualinvoke $r9.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

        r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile> = null;

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void waitUntilTrackCount()>();

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void pauseForDeleteToComplete(java.io.File)>($r10);

        $r11 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i4 = virtualinvoke $r11.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r12 = specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.lang.String showFailures()>();

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r1);

        $z2 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r12, $r13, $r15);

        return;
    }

    public void testFileCleanerDirectory() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.io.File $r1, $r2, $r3, $r7, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r4;
        org.apache.commons.io.FileCleaningTracker $r5, $r6, $r8, $r9;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r1 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void createFile(java.io.File,long)>($r1, 100L);

        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r5 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r5.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r7 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        virtualinvoke $r6.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)>($r7, $r4);

        $r8 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i2 = virtualinvoke $r8.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void waitUntilTrackCount()>();

        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i4 = virtualinvoke $r9.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r10 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z2 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r11 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $r12 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z3 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testFileCleanerDirectory_NullStrategy() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.io.File $r1, $r2, $r3, $r7, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r4;
        org.apache.commons.io.FileCleaningTracker $r5, $r6, $r8, $r9;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r1 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void createFile(java.io.File,long)>($r1, 100L);

        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r5 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r5.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r7 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        virtualinvoke $r6.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>($r7, $r4, null);

        $r8 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i2 = virtualinvoke $r8.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void waitUntilTrackCount()>();

        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i4 = virtualinvoke $r9.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r10 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z2 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r11 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $r12 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        $z3 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testFileCleanerDirectory_ForceStrategy() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.io.File $r2, $r3, $r6, $r7, $r8, $r12, $r15, $r16, $r20, $r21, $r26, $r27, $r31;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.BufferedOutputStream $r4;
        java.io.FileOutputStream $r5;
        java.lang.Object $r9;
        org.apache.commons.io.FileCleaningTracker $r10, $r11, $r14, $r17;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        org.apache.commons.io.FileDeleteStrategy $r13;
        java.lang.String $r18, $r22, $r24, $r34;
        java.lang.Boolean $r19, $r23, $r25, $r28;
        java.io.IOException $r29;
        java.lang.StringBuilder $r30, $r32, $r33;
        java.lang.Throwable $r35;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r29 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r31 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.IOException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label1:
        $r4 = new java.io.BufferedOutputStream;

        $r5 = new java.io.FileOutputStream;

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r5);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r4, 100L);

        goto label4;

     label3:
        $r35 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4);

        throw $r35;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4);

        $r7 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z1 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        $z2 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        $r10 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r10.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r11 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r12 = staticinvoke <org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File getTestDirectory()>();

        $r13 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy FORCE>;

        virtualinvoke $r11.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>($r12, $r9, $r13);

        $r14 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i2 = virtualinvoke $r14.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void waitUntilTrackCount()>();

        $r15 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $r16 = virtualinvoke $r15.<java.io.File: java.io.File getParentFile()>();

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void pauseForDeleteToComplete(java.io.File)>($r16);

        $r17 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i4 = virtualinvoke $r17.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r18 = specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.lang.String showFailures()>();

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r20 = new java.io.File;

        $r21 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>($r22);

        $z3 = virtualinvoke $r20.<java.io.File: boolean exists()>();

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r18, $r19, $r23);

        $r24 = specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.lang.String showFailures()>();

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r26 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $r27 = virtualinvoke $r26.<java.io.File: java.io.File getParentFile()>();

        $z4 = virtualinvoke $r27.<java.io.File: boolean exists()>();

        $r28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r24, $r25, $r28);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testFileCleanerNull() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.lang.Object $r1, $r3, $r6, $r8;
        org.apache.commons.io.FileCleaningTracker $r2, $r4, $r7, $r9;
        org.apache.commons.io.FileDeleteStrategy $r5, $r10;
        java.lang.NullPointerException $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

     label01:
        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)>(null, $r1);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

     label04:
        $r4 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r5 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        virtualinvoke $r4.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(null, $r3, $r5);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

     label07:
        $r7 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        virtualinvoke $r7.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>(null, $r6);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

     label10:
        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        $r10 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        virtualinvoke $r9.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(null, $r8, $r10);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

     label13:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label07 to label08 with label09;
        catch java.lang.NullPointerException from label10 to label11 with label12;
    }

    public void testFileCleanerExitWhenFinishedFirst() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        org.apache.commons.io.FileCleaningTracker $r1, $r2, $r3, $r4, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Thread $r5, $r9;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r1 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z0 = $r1.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r2.<org.apache.commons.io.FileCleaningTracker: void exitWhenFinished()>();

        $r3 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z1 = $r3.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r4 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r5 = $r4.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r5);

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void waitUntilTrackCount()>();

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r6.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r7 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z2 = $r7.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r8 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r9 = $r8.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r9);

        return;
    }

    public void testFileCleanerExitWhenFinished_NoTrackAfter() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.lang.String r1;
        org.apache.commons.io.FileCleaningTracker $r4, $r5, $r6, $r7, $r11, $r12, $r13;
        boolean $z0, $z1, $z2;
        java.lang.Thread $r8, $r14;
        java.io.File $r9;
        java.lang.Object $r10;
        java.lang.IllegalStateException $r15;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r4 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z0 = $r4.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r5 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r5.<org.apache.commons.io.FileCleaningTracker: void exitWhenFinished()>();

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z1 = $r6.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r8 = $r7.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r8);

        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        r1 = virtualinvoke $r9.<java.io.File: java.lang.String getPath()>();

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

     label1:
        $r11 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r11.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>(r1, $r10);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

     label4:
        $r12 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z2 = $r12.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r13 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r14 = $r13.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r14);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testFileCleanerExitWhenFinished1() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.lang.String r1, $r35, $r37;
        java.io.File $r2, $r4, $r7, $r9, $r32, $r39;
        java.lang.Boolean $r3, $r5, $r8, $r10, $r14, $r16, $r17, $r20, $r21, $r23, $r25, $r27, $r28, $r31, $r38, $r40, $r41, $r43, $r44, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.io.RandomAccessFile $r6;
        org.apache.commons.io.FileCleaningTracker $r11, $r12, $r13, $r15, $r18, $r22, $r24, $r26, $r29, $r33, $r42, $r45;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        java.lang.Thread $r19, $r30, $r46;
        java.lang.StringBuilder $r34, $r36;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        r1 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r4 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1-testFile exists", $r3, $r5);

        $r6 = new java.io.RandomAccessFile;

        $r7 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        specialinvoke $r6.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r7, "rw");

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z1 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("2-testFile exists", $r8, $r10);

        $r11 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r11.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("3-Track Count", 0L, $l1);

        $r12 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r12.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>(r1, $r6);

        $r13 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i2 = virtualinvoke $r13.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("4-Track Count", 1L, $l3);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r15 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z2 = $r15.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("5-exitWhenFinished", $r14, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r18 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r19 = $r18.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        $z3 = virtualinvoke $r19.<java.lang.Thread: boolean isAlive()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("6-reaper.isAlive", $r17, $r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r22 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z4 = $r22.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("7-exitWhenFinished", $r21, $r23);

        $r24 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r24.<org.apache.commons.io.FileCleaningTracker: void exitWhenFinished()>();

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r26 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z5 = $r26.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("8-exitWhenFinished", $r25, $r27);

        $r28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r29 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r30 = $r29.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        $z6 = virtualinvoke $r30.<java.lang.Thread: boolean isAlive()>();

        $r31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("9-reaper.isAlive", $r28, $r31);

        virtualinvoke $r6.<java.io.RandomAccessFile: void close()>();

        r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile> = null;

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void waitUntilTrackCount()>();

        $r32 = new java.io.File;

        specialinvoke $r32.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void pauseForDeleteToComplete(java.io.File)>($r32);

        $r33 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i4 = virtualinvoke $r33.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("10-Track Count", 0L, $l5);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("11-testFile exists ");

        $r35 = specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.lang.String showFailures()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r39 = new java.io.File;

        specialinvoke $r39.<java.io.File: void <init>(java.lang.String)>(r1);

        $z7 = virtualinvoke $r39.<java.io.File: boolean exists()>();

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r37, $r38, $r40);

        $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r42 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z8 = $r42.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("12-exitWhenFinished", $r41, $r43);

        $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r45 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r46 = $r45.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        $z9 = virtualinvoke $r46.<java.lang.Thread: boolean isAlive()>();

        $r47 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("13-reaper.isAlive", $r44, $r47);

        return;
    }

    public void testFileCleanerExitWhenFinished2() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        java.lang.String r1, $r15;
        java.io.File $r2, $r3, $r5, $r6, $r13, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.io.RandomAccessFile $r4;
        org.apache.commons.io.FileCleaningTracker $r7, $r8, $r9, $r10, $r11, $r14, $r19, $r20, $r22, $r23, $r24, $r25, $r27;
        int $i0, $i2, $i4, i6;
        long $l1, $l3, $l5;
        java.lang.Thread $r12, $r21, $r26, $r28;
        java.lang.Boolean $r16, $r18;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r2 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        r1 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r3 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r4 = new java.io.RandomAccessFile;

        $r5 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r5, "rw");

        $r6 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile>;

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r7.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r8 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r8.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object)>(r1, $r4);

        $r9 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i2 = virtualinvoke $r9.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r10 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z2 = $r10.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r11 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r12 = $r11.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        $z3 = virtualinvoke $r12.<java.lang.Thread: boolean isAlive()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

        r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.io.File testFile> = null;

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void waitUntilTrackCount()>();

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: void pauseForDeleteToComplete(java.io.File)>($r13);

        $r14 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i4 = virtualinvoke $r14.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r15 = specialinvoke r0.<org.apache.commons.io.FileCleaningTrackerTestCase: java.lang.String showFailures()>();

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>(r1);

        $z4 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r15, $r16, $r18);

        $r19 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z5 = $r19.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $r20 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r21 = $r20.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        $z6 = virtualinvoke $r21.<java.lang.Thread: boolean isAlive()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r22 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z7 = $r22.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        $r23 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        virtualinvoke $r23.<org.apache.commons.io.FileCleaningTracker: void exitWhenFinished()>();

        i6 = 0;

        goto label2;

     label1:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        i6 = i6 + 1;

     label2:
        if i6 >= 20 goto label3;

        $r27 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r28 = $r27.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        $z10 = virtualinvoke $r28.<java.lang.Thread: boolean isAlive()>();

        if $z10 != 0 goto label1;

     label3:
        $r24 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $z8 = $r24.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r25 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r26 = $r25.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;

        $z9 = virtualinvoke $r26.<java.lang.Thread: boolean isAlive()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z9);

        return;
    }

    private void pauseForDeleteToComplete(java.io.File)
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        int $i0, i1;
        java.io.File $r2, r5;
        java.lang.String $r3;
        java.lang.InterruptedException $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        r5 := @parameter0: java.io.File;

        i1 = 0;

        goto label5;

     label1:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r5.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        r5 = $r2;

     label5:
        $z0 = virtualinvoke r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label6;

        $i0 = i1;

        i1 = i1 + 1;

        if $i0 < 40 goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private java.lang.String showFailures() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        org.apache.commons.io.FileCleaningTracker $r1, $r4, $r10;
        java.util.List $r2, $r5, $r11;
        int $i0, $i1;
        java.lang.StringBuilder $r3, $r6, $r7, $r9, $r14, $r15;
        java.lang.String $r8, $r13, $r16;
        java.lang.Object $r12;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        $r1 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r2 = $r1.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("[Delete Failed: ");

        $r10 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r11 = $r10.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (java.lang.String) $r12;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("[Delete Failures: ");

        $r4 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $r5 = $r4.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private void waitUntilTrackCount() throws java.lang.Exception
    {
        org.apache.commons.io.FileCleaningTrackerTestCase r0;
        org.apache.commons.io.FileCleaningTracker $r1, $r4, $r10;
        int $i0, $i1, $i2, i4, $i6;
        java.lang.IllegalStateException $r2;
        java.util.ArrayList $r3;
        java.lang.StringBuilder $r5, $r6;
        long $l3, l5;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.commons.io.FileCleaningTrackerTestCase;

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(500L);

        i4 = 0;

        goto label08;

     label01:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label02:
        l5 = 0L;

        goto label04;

     label03:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("A Big String A Big String A Big String A Big String A Big String A Big String A Big String A Big String A Big String A Big String ");

        $l3 = l5;

        l5 = l5 + 1L;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label04:
        $r4 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i2 = virtualinvoke $r4.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        if $i2 != 0 goto label03;

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(1000L);

     label08:
        $r10 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i6 = virtualinvoke $r10.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        if $i6 == 0 goto label09;

        $i1 = i4;

        i4 = i4 + 1;

        if $i1 < 5 goto label01;

     label09:
        $r1 = r0.<org.apache.commons.io.FileCleaningTrackerTestCase: org.apache.commons.io.FileCleaningTracker theInstance>;

        $i0 = virtualinvoke $r1.<org.apache.commons.io.FileCleaningTracker: int getTrackCount()>();

        if $i0 == 0 goto label10;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Your JVM is not releasing References, try running the testcase with less memory (-Xmx)");

        throw $r2;

     label10:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
    }
}
