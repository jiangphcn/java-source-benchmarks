public class org.apache.commons.io.input.CloseShieldInputStreamTest extends java.lang.Object
{
    private byte[] data;
    private java.io.InputStream original;
    private java.io.InputStream shielded;
    private boolean closed;

    public void <init>()
    {
        org.apache.commons.io.input.CloseShieldInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CloseShieldInputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.io.input.CloseShieldInputStreamTest r0;
        byte[] $r1, $r3;
        org.apache.commons.io.input.CloseShieldInputStreamTest$1 $r2;
        org.apache.commons.io.input.CloseShieldInputStream $r4;
        java.io.InputStream $r5;

        r0 := @this: org.apache.commons.io.input.CloseShieldInputStreamTest;

        $r1 = newarray (byte)[3];

        $r1[0] = 120;

        $r1[1] = 121;

        $r1[2] = 122;

        r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: byte[] data> = $r1;

        $r2 = new org.apache.commons.io.input.CloseShieldInputStreamTest$1;

        $r3 = r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: byte[] data>;

        specialinvoke $r2.<org.apache.commons.io.input.CloseShieldInputStreamTest$1: void <init>(org.apache.commons.io.input.CloseShieldInputStreamTest,byte[])>(r0, $r3);

        r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: java.io.InputStream original> = $r2;

        $r4 = new org.apache.commons.io.input.CloseShieldInputStream;

        $r5 = r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: java.io.InputStream original>;

        specialinvoke $r4.<org.apache.commons.io.input.CloseShieldInputStream: void <init>(java.io.InputStream)>($r5);

        r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: java.io.InputStream shielded> = $r4;

        r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: boolean closed> = 0;

        return;
    }

    public void testClose() throws java.io.IOException
    {
        org.apache.commons.io.input.CloseShieldInputStreamTest r0;
        java.io.InputStream $r1, $r2, $r4;
        boolean $z0;
        int $i0, $i4;
        long $l1, $l3, $l5;
        byte[] $r3;
        byte $b2;

        r0 := @this: org.apache.commons.io.input.CloseShieldInputStreamTest;

        $r1 = r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: java.io.InputStream shielded>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        $z0 = r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: boolean closed>;

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("closed", $z0);

        $r2 = r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: java.io.InputStream shielded>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read()", -1L, $l1);

        $r3 = r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: byte[] data>;

        $b2 = $r3[0];

        $l3 = (long) $b2;

        $r4 = r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: java.io.InputStream original>;

        $i4 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("read()", $l3, $l5);

        return;
    }

    static void access$0(org.apache.commons.io.input.CloseShieldInputStreamTest, boolean)
    {
        org.apache.commons.io.input.CloseShieldInputStreamTest r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.io.input.CloseShieldInputStreamTest;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.io.input.CloseShieldInputStreamTest: boolean closed> = z0;

        return;
    }
}
