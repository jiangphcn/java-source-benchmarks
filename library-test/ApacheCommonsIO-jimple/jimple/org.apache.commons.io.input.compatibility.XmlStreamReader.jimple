public class org.apache.commons.io.input.compatibility.XmlStreamReader extends java.io.Reader
{
    private static final int BUFFER_SIZE;
    private static final java.lang.String UTF_8;
    private static final java.lang.String US_ASCII;
    private static final java.lang.String UTF_16BE;
    private static final java.lang.String UTF_16LE;
    private static final java.lang.String UTF_16;
    private static final java.lang.String UTF_32BE;
    private static final java.lang.String UTF_32LE;
    private static final java.lang.String UTF_32;
    private static final java.lang.String EBCDIC;
    private static java.lang.String staticDefaultEncoding;
    private java.io.Reader reader;
    private java.lang.String encoding;
    private final java.lang.String defaultEncoding;
    private static final java.util.regex.Pattern CHARSET_PATTERN;
    public static final java.util.regex.Pattern ENCODING_PATTERN;
    private static final java.text.MessageFormat RAW_EX_1;
    private static final java.text.MessageFormat RAW_EX_2;
    private static final java.text.MessageFormat HTTP_EX_1;
    private static final java.text.MessageFormat HTTP_EX_2;
    private static final java.text.MessageFormat HTTP_EX_3;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;
        java.text.MessageFormat $r2, $r3, $r4, $r5, $r6;

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String EBCDIC> = "CP1047";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String UTF_32> = "UTF-32";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String UTF_32LE> = "UTF-32LE";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String UTF_32BE> = "UTF-32BE";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String UTF_16> = "UTF-16";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String UTF_16LE> = "UTF-16LE";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String UTF_16BE> = "UTF-16BE";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String US_ASCII> = "US-ASCII";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String UTF_8> = "UTF-8";

        <org.apache.commons.io.input.compatibility.XmlStreamReader: int BUFFER_SIZE> = 4096;

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String staticDefaultEncoding> = null;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("charset=[\"\']?([.[^; \"\']]*)[\"\']?");

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.util.regex.Pattern CHARSET_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("<\\?xml.*encoding[\\s]*=[\\s]*((?:\".[^\"]*\")|(?:\'.[^\']*\'))", 8);

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.util.regex.Pattern ENCODING_PATTERN> = $r1;

        $r2 = new java.text.MessageFormat;

        specialinvoke $r2.<java.text.MessageFormat: void <init>(java.lang.String)>("Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch");

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_1> = $r2;

        $r3 = new java.text.MessageFormat;

        specialinvoke $r3.<java.text.MessageFormat: void <init>(java.lang.String)>("Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] unknown BOM");

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_2> = $r3;

        $r4 = new java.text.MessageFormat;

        specialinvoke $r4.<java.text.MessageFormat: void <init>(java.lang.String)>("Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL");

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_1> = $r4;

        $r5 = new java.text.MessageFormat;

        specialinvoke $r5.<java.text.MessageFormat: void <init>(java.lang.String)>("Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch");

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_2> = $r5;

        $r6 = new java.text.MessageFormat;

        specialinvoke $r6.<java.text.MessageFormat: void <init>(java.lang.String)>("Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME");

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_3> = $r6;

        return;
    }

    public static void setDefaultEncoding(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String staticDefaultEncoding> = r0;

        return;
    }

    public static java.lang.String getDefaultEncoding()
    {
        java.lang.String $r0;

        $r0 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String staticDefaultEncoding>;

        return $r0;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.File r1;
        java.io.FileInputStream $r2;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.File;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void <init>(java.io.InputStream)>($r2);

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void <init>(java.io.InputStream,boolean)>(r1, 1);

        return;
    }

    public void <init>(java.io.InputStream, boolean) throws java.io.IOException, org.apache.commons.io.input.compatibility.XmlStreamReaderException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;
        boolean z0;
        java.lang.String $r3;
        org.apache.commons.io.input.compatibility.XmlStreamReaderException $r4;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        $r3 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String staticDefaultEncoding>;

        r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding> = $r3;

     label1:
        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doRawStream(java.io.InputStream)>(r1);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        if z0 != 0 goto label4;

        throw $r4;

     label4:
        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)>(null, $r4);

     label5:
        return;

        catch org.apache.commons.io.input.compatibility.XmlStreamReaderException from label1 to label2 with label3;
    }

    public void <init>(java.net.URL) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.net.URL r1;
        java.net.URLConnection $r2;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.net.URL;

        $r2 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void <init>(java.net.URLConnection)>($r2);

        return;
    }

    public void <init>(java.net.URLConnection) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.net.URLConnection r1;
        java.lang.String $r2, $r3, $r6, $r8, $r10, $r13;
        boolean $z1;
        java.io.InputStream $r4, $r5, $r7;
        org.apache.commons.io.input.compatibility.XmlStreamReaderException $r9, $r11, $r12;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.net.URLConnection;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        $r2 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String staticDefaultEncoding>;

        r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding> = $r2;

        $z1 = r1 instanceof java.net.HttpURLConnection;

        if $z1 == 0 goto label04;

     label01:
        $r7 = virtualinvoke r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r8 = virtualinvoke r1.<java.net.URLConnection: java.lang.String getContentType()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doHttpStream(java.io.InputStream,java.lang.String,boolean)>($r7, $r8, 1);

     label02:
        goto label11;

     label03:
        $r12 := @caughtexception;

        $r13 = virtualinvoke r1.<java.net.URLConnection: java.lang.String getContentType()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)>($r13, $r12);

        goto label11;

     label04:
        $r3 = virtualinvoke r1.<java.net.URLConnection: java.lang.String getContentType()>();

        if $r3 == null goto label08;

     label05:
        $r5 = virtualinvoke r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r6 = virtualinvoke r1.<java.net.URLConnection: java.lang.String getContentType()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doHttpStream(java.io.InputStream,java.lang.String,boolean)>($r5, $r6, 1);

     label06:
        goto label11;

     label07:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r1.<java.net.URLConnection: java.lang.String getContentType()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)>($r10, $r9);

        goto label11;

     label08:
        $r4 = virtualinvoke r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doRawStream(java.io.InputStream)>($r4);

     label09:
        goto label11;

     label10:
        $r11 := @caughtexception;

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)>(null, $r11);

     label11:
        return;

        catch org.apache.commons.io.input.compatibility.XmlStreamReaderException from label01 to label02 with label03;
        catch org.apache.commons.io.input.compatibility.XmlStreamReaderException from label05 to label06 with label07;
        catch org.apache.commons.io.input.compatibility.XmlStreamReaderException from label08 to label09 with label10;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r2;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>(r1, r2, 1);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String, boolean, java.lang.String) throws java.io.IOException, org.apache.commons.io.input.compatibility.XmlStreamReaderException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r2, r3, $r7;
        boolean z0;
        org.apache.commons.io.input.compatibility.XmlStreamReaderException $r6;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        if r3 != null goto label1;

        $r7 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String staticDefaultEncoding>;

        goto label2;

     label1:
        $r7 = r3;

     label2:
        r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding> = $r7;

     label3:
        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doHttpStream(java.io.InputStream,java.lang.String,boolean)>(r1, r2, z0);

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        if z0 != 0 goto label6;

        throw $r6;

     label6:
        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doLenientDetection(java.lang.String,org.apache.commons.io.input.compatibility.XmlStreamReaderException)>(r2, $r6);

     label7:
        return;

        catch org.apache.commons.io.input.compatibility.XmlStreamReaderException from label3 to label4 with label5;
    }

    public void <init>(java.io.InputStream, java.lang.String, boolean) throws java.io.IOException, org.apache.commons.io.input.compatibility.XmlStreamReaderException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>(r1, r2, z0, null);

        return;
    }

    private void doLenientDetection(java.lang.String, org.apache.commons.io.input.compatibility.XmlStreamReaderException) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.lang.String $r1, $r2, r7, r9, r10, r12, $r13;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r3, $r4;
        java.io.InputStream $r5, $r14;
        org.apache.commons.io.input.compatibility.XmlStreamReaderException $r6, r8;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        if r7 == null goto label4;

        $z0 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("text/html");

        if $z0 == 0 goto label4;

        $r2 = "text/html";

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        r9 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("text/xml");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r5 = virtualinvoke r8.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: java.io.InputStream getInputStream()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void doHttpStream(java.io.InputStream,java.lang.String,boolean)>($r5, r10, 1);

        r8 = null;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

     label4:
        if r8 == null goto label9;

        r12 = virtualinvoke r8.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: java.lang.String getXmlEncoding()>();

        if r12 != null goto label5;

        r12 = virtualinvoke r8.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: java.lang.String getContentTypeEncoding()>();

     label5:
        if r12 != null goto label8;

        $r1 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding>;

        if $r1 != null goto label6;

        $r13 = "UTF-8";

        goto label7;

     label6:
        $r13 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding>;

     label7:
        r12 = $r13;

     label8:
        $r14 = virtualinvoke r8.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: java.io.InputStream getInputStream()>();

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void prepareReader(java.io.InputStream,java.lang.String)>($r14, r12);

     label9:
        return;

        catch org.apache.commons.io.input.compatibility.XmlStreamReaderException from label1 to label2 with label3;
    }

    public java.lang.String getEncoding()
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        $r1 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String encoding>;

        return $r1;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        char[] r1;
        int i0, i1, $i2;
        java.io.Reader $r2;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.io.Reader reader>;

        $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.Reader $r1;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        $r1 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.io.Reader reader>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

        return;
    }

    private void doRawStream(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r3, r4, r5, r6;
        java.io.BufferedInputStream $r7;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        $r7 = new java.io.BufferedInputStream;

        specialinvoke $r7.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r1, 4096);

        r3 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getBOMEncoding(java.io.BufferedInputStream)>($r7);

        r4 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getXMLGuessEncoding(java.io.BufferedInputStream)>($r7);

        r5 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getXmlProlog(java.io.BufferedInputStream,java.lang.String)>($r7, r4);

        r6 = virtualinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>(r3, r4, r5, $r7);

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void prepareReader(java.io.InputStream,java.lang.String)>($r7, r6);

        return;
    }

    private void doHttpStream(java.io.InputStream, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r2, r4, r5, r6, r7, r8, r9;
        boolean z0;
        java.io.BufferedInputStream $r10;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r10 = new java.io.BufferedInputStream;

        specialinvoke $r10.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r1, 4096);

        r4 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getContentTypeMime(java.lang.String)>(r2);

        r5 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r2);

        r6 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getBOMEncoding(java.io.BufferedInputStream)>($r10);

        r7 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getXMLGuessEncoding(java.io.BufferedInputStream)>($r10);

        r8 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String getXmlProlog(java.io.BufferedInputStream,java.lang.String)>($r10, r7);

        r9 = virtualinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,boolean)>(r4, r5, r6, r7, r8, $r10, z0);

        specialinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: void prepareReader(java.io.InputStream,java.lang.String)>($r10, r9);

        return;
    }

    private void prepareReader(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.io.InputStreamReader $r3;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r2);

        r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.io.Reader reader> = $r3;

        r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String encoding> = r2;

        return;
    }

    java.lang.String calculateRawEncoding(java.lang.String, java.lang.String, java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.lang.String r1, r2, r3, $r8, $r12, $r16, $r20, $r24, $r28, $r32, $r33, $r34, r35;
        java.io.InputStream r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        org.apache.commons.io.input.compatibility.XmlStreamReaderException $r5, $r9, $r13, $r17, $r21, $r25, $r29;
        java.lang.Object[] $r6, $r10, $r14, $r18, $r22, $r26, $r30;
        java.text.MessageFormat $r7, $r11, $r15, $r19, $r23, $r27, $r31;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.io.InputStream;

        if r1 != null goto label09;

        if r2 == null goto label01;

        if r3 != null goto label04;

     label01:
        $r33 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding>;

        if $r33 != null goto label02;

        $r34 = "UTF-8";

        goto label03;

     label02:
        $r34 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding>;

     label03:
        r35 = $r34;

        goto label21;

     label04:
        $z13 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z13 == 0 goto label06;

        $z17 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16BE");

        if $z17 != 0 goto label05;

        $z18 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16LE");

        if $z18 == 0 goto label06;

     label05:
        r35 = r2;

        goto label21;

     label06:
        $z14 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32");

        if $z14 == 0 goto label08;

        $z15 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32BE");

        if $z15 != 0 goto label07;

        $z16 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32LE");

        if $z16 == 0 goto label08;

     label07:
        r35 = r2;

        goto label21;

     label08:
        r35 = r3;

        goto label21;

     label09:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 == 0 goto label12;

        if r2 == null goto label10;

        $z12 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z12 != 0 goto label10;

        $r29 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r31 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_1>;

        $r30 = newarray (java.lang.Object)[3];

        $r30[0] = r1;

        $r30[1] = r2;

        $r30[2] = r3;

        $r32 = virtualinvoke $r31.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r30);

        specialinvoke $r29.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r32, r1, r2, r3, r4);

        throw $r29;

     label10:
        if r3 == null goto label11;

        $z11 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z11 != 0 goto label11;

        $r25 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r27 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_1>;

        $r26 = newarray (java.lang.Object)[3];

        $r26[0] = r1;

        $r26[1] = r2;

        $r26[2] = r3;

        $r28 = virtualinvoke $r27.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r26);

        specialinvoke $r25.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r28, r1, r2, r3, r4);

        throw $r25;

     label11:
        r35 = "UTF-8";

        goto label21;

     label12:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16BE");

        if $z1 != 0 goto label13;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16LE");

        if $z5 == 0 goto label16;

     label13:
        if r2 == null goto label14;

        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label14;

        $r9 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r11 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_1>;

        $r10 = newarray (java.lang.Object)[3];

        $r10[0] = r1;

        $r10[1] = r2;

        $r10[2] = r3;

        $r12 = virtualinvoke $r11.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r10);

        specialinvoke $r9.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r12, r1, r2, r3, r4);

        throw $r9;

     label14:
        if r3 == null goto label15;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z2 != 0 goto label15;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label15;

        $r5 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r7 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_1>;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = r1;

        $r6[1] = r2;

        $r6[2] = r3;

        $r8 = virtualinvoke $r7.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r6);

        specialinvoke $r5.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r8, r1, r2, r3, r4);

        throw $r5;

     label15:
        r35 = r1;

        goto label21;

     label16:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32BE");

        if $z6 != 0 goto label17;

        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32LE");

        if $z10 == 0 goto label20;

     label17:
        if r2 == null goto label18;

        $z9 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z9 != 0 goto label18;

        $r17 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r19 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_1>;

        $r18 = newarray (java.lang.Object)[3];

        $r18[0] = r1;

        $r18[1] = r2;

        $r18[2] = r3;

        $r20 = virtualinvoke $r19.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r18);

        specialinvoke $r17.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r20, r1, r2, r3, r4);

        throw $r17;

     label18:
        if r3 == null goto label19;

        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32");

        if $z7 != 0 goto label19;

        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 != 0 goto label19;

        $r13 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r15 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_1>;

        $r14 = newarray (java.lang.Object)[3];

        $r14[0] = r1;

        $r14[1] = r2;

        $r14[2] = r3;

        $r16 = virtualinvoke $r15.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r14);

        specialinvoke $r13.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r16, r1, r2, r3, r4);

        throw $r13;

     label19:
        r35 = r1;

        goto label21;

     label20:
        $r21 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r23 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat RAW_EX_2>;

        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = r1;

        $r22[1] = r2;

        $r22[2] = r3;

        $r24 = virtualinvoke $r23.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r22);

        specialinvoke $r21.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r24, r1, r2, r3, r4);

        throw $r21;

     label21:
        return r35;
    }

    java.lang.String calculateHttpEncoding(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.io.InputStream, boolean) throws java.io.IOException
    {
        org.apache.commons.io.input.compatibility.XmlStreamReader r0;
        java.lang.String r1, r2, r3, r4, r5, $r10, $r14, $r18, $r22, $r23, $r27, r28, $r29;
        java.io.InputStream r6;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13;
        org.apache.commons.io.input.compatibility.XmlStreamReaderException $r7, $r11, $r15, $r19, $r24;
        java.lang.Object[] $r8, $r12, $r16, $r20, $r25;
        java.text.MessageFormat $r9, $r13, $r17, $r21, $r26;

        r0 := @this: org.apache.commons.io.input.compatibility.XmlStreamReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.io.InputStream;

        z0 := @parameter6: boolean;

        if r5 == null goto label01;

        $z13 = 1;

        goto label02;

     label01:
        $z13 = 0;

     label02:
        $z3 = z0 & $z13;

        if $z3 == 0 goto label03;

        r28 = r5;

        goto label18;

     label03:
        z1 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: boolean isAppXml(java.lang.String)>(r1);

        z2 = staticinvoke <org.apache.commons.io.input.compatibility.XmlStreamReader: boolean isTextXml(java.lang.String)>(r1);

        if z1 != 0 goto label04;

        if z2 == 0 goto label17;

     label04:
        if r2 != null goto label08;

        if z1 == 0 goto label05;

        r28 = virtualinvoke r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>(r3, r4, r5, r6);

        goto label18;

     label05:
        $r23 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding>;

        if $r23 != null goto label06;

        $r29 = "US-ASCII";

        goto label07;

     label06:
        $r29 = r0.<org.apache.commons.io.input.compatibility.XmlStreamReader: java.lang.String defaultEncoding>;

     label07:
        r28 = $r29;

        goto label18;

     label08:
        if r3 == null goto label10;

        $z10 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16BE");

        if $z10 != 0 goto label09;

        $z11 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16LE");

        if $z11 == 0 goto label10;

     label09:
        $r19 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r21 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_1>;

        $r20 = newarray (java.lang.Object)[5];

        $r20[0] = r1;

        $r20[1] = r2;

        $r20[2] = r3;

        $r20[3] = r4;

        $r20[4] = r5;

        $r22 = virtualinvoke $r21.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r20);

        specialinvoke $r19.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r22, r1, r2, r3, r4, r5, r6);

        throw $r19;

     label10:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z4 == 0 goto label12;

        if r3 == null goto label11;

        $z9 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("UTF-16");

        if $z9 == 0 goto label11;

        r28 = r3;

        goto label18;

     label11:
        $r15 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r17 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_2>;

        $r16 = newarray (java.lang.Object)[5];

        $r16[0] = r1;

        $r16[1] = r2;

        $r16[2] = r3;

        $r16[3] = r4;

        $r16[4] = r5;

        $r18 = virtualinvoke $r17.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r16);

        specialinvoke $r15.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r18, r1, r2, r3, r4, r5, r6);

        throw $r15;

     label12:
        if r3 == null goto label14;

        $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32BE");

        if $z7 != 0 goto label13;

        $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32LE");

        if $z8 == 0 goto label14;

     label13:
        $r11 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r13 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_1>;

        $r12 = newarray (java.lang.Object)[5];

        $r12[0] = r1;

        $r12[1] = r2;

        $r12[2] = r3;

        $r12[3] = r4;

        $r12[4] = r5;

        $r14 = virtualinvoke $r13.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r12);

        specialinvoke $r11.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r14, r1, r2, r3, r4, r5, r6);

        throw $r11;

     label14:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-32");

        if $z5 == 0 goto label16;

        if r3 == null goto label15;

        $z6 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("UTF-32");

        if $z6 == 0 goto label15;

        r28 = r3;

        goto label18;

     label15:
        $r7 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r9 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_2>;

        $r8 = newarray (java.lang.Object)[5];

        $r8[0] = r1;

        $r8[1] = r2;

        $r8[2] = r3;

        $r8[3] = r4;

        $r8[4] = r5;

        $r10 = virtualinvoke $r9.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r8);

        specialinvoke $r7.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r10, r1, r2, r3, r4, r5, r6);

        throw $r7;

     label16:
        r28 = r2;

        goto label18;

     label17:
        $r24 = new org.apache.commons.io.input.compatibility.XmlStreamReaderException;

        $r26 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.text.MessageFormat HTTP_EX_3>;

        $r25 = newarray (java.lang.Object)[5];

        $r25[0] = r1;

        $r25[1] = r2;

        $r25[2] = r3;

        $r25[3] = r4;

        $r25[4] = r5;

        $r27 = virtualinvoke $r26.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>($r25);

        specialinvoke $r24.<org.apache.commons.io.input.compatibility.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.io.InputStream)>($r27, r1, r2, r3, r4, r5, r6);

        throw $r24;

     label18:
        return r28;
    }

    static java.lang.String getContentTypeMime(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0;

        r0 := @parameter0: java.lang.String;

        r1 = null;

        if r0 == null goto label3;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(";");

        if i0 != -1 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        r1 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

     label3:
        return r1;
    }

    static java.lang.String getContentTypeEncoding(java.lang.String)
    {
        java.lang.String r0, r1, r4, $r5, $r7;
        int i0, $i1;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r4 = null;

        if r0 == null goto label5;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(";");

        if i0 <= -1 goto label5;

        $i1 = i0 + 1;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r3 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.util.regex.Pattern CHARSET_PATTERN>;

        r2 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        goto label2;

     label1:
        $r5 = null;

     label2:
        if $r5 == null goto label3;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        goto label4;

     label3:
        $r7 = null;

     label4:
        r4 = $r7;

     label5:
        return r4;
    }

    static java.lang.String getBOMEncoding(java.io.BufferedInputStream) throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11;
        java.lang.String r2;

        r0 := @parameter0: java.io.BufferedInputStream;

        r2 = null;

        r1 = newarray (int)[3];

        virtualinvoke r0.<java.io.BufferedInputStream: void mark(int)>(3);

        $i0 = virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        r1[0] = $i0;

        $i1 = virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        r1[1] = $i1;

        $i2 = virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        r1[2] = $i2;

        $i3 = r1[0];

        if $i3 != 254 goto label1;

        $i11 = r1[1];

        if $i11 != 255 goto label1;

        r2 = "UTF-16BE";

        virtualinvoke r0.<java.io.BufferedInputStream: void reset()>();

        virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        goto label4;

     label1:
        $i4 = r1[0];

        if $i4 != 255 goto label2;

        $i8 = r1[1];

        if $i8 != 254 goto label2;

        r2 = "UTF-16LE";

        virtualinvoke r0.<java.io.BufferedInputStream: void reset()>();

        virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        goto label4;

     label2:
        $i5 = r1[0];

        if $i5 != 239 goto label3;

        $i6 = r1[1];

        if $i6 != 187 goto label3;

        $i7 = r1[2];

        if $i7 != 191 goto label3;

        r2 = "UTF-8";

        goto label4;

     label3:
        virtualinvoke r0.<java.io.BufferedInputStream: void reset()>();

     label4:
        return r2;
    }

    private static java.lang.String getXMLGuessEncoding(java.io.BufferedInputStream) throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.String r2;

        r0 := @parameter0: java.io.BufferedInputStream;

        r2 = null;

        r1 = newarray (int)[4];

        virtualinvoke r0.<java.io.BufferedInputStream: void mark(int)>(4);

        $i0 = virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        r1[0] = $i0;

        $i1 = virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        r1[1] = $i1;

        $i2 = virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        r1[2] = $i2;

        $i3 = virtualinvoke r0.<java.io.BufferedInputStream: int read()>();

        r1[3] = $i3;

        virtualinvoke r0.<java.io.BufferedInputStream: void reset()>();

        $i4 = r1[0];

        if $i4 != 0 goto label1;

        $i14 = r1[1];

        if $i14 != 60 goto label1;

        $i15 = r1[2];

        if $i15 != 0 goto label1;

        $i16 = r1[3];

        if $i16 != 63 goto label1;

        r2 = "UTF-16BE";

        goto label4;

     label1:
        $i17 = r1[0];

        if $i17 != 60 goto label2;

        $i11 = r1[1];

        if $i11 != 0 goto label2;

        $i12 = r1[2];

        if $i12 != 63 goto label2;

        $i13 = r1[3];

        if $i13 != 0 goto label2;

        r2 = "UTF-16LE";

        goto label4;

     label2:
        $i18 = r1[0];

        if $i18 != 60 goto label3;

        $i8 = r1[1];

        if $i8 != 63 goto label3;

        $i9 = r1[2];

        if $i9 != 120 goto label3;

        $i10 = r1[3];

        if $i10 != 109 goto label3;

        r2 = "UTF-8";

        goto label4;

     label3:
        $i19 = r1[0];

        if $i19 != 76 goto label4;

        $i5 = r1[1];

        if $i5 != 111 goto label4;

        $i6 = r1[2];

        if $i6 != 167 goto label4;

        $i7 = r1[3];

        if $i7 != 148 goto label4;

        r2 = "CP1047";

     label4:
        return r2;
    }

    private static java.lang.String getXmlProlog(java.io.BufferedInputStream, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedInputStream r0;
        java.lang.String r1, $r8, $r12, $r17, $r19, r20, r21, r22, r23;
        byte[] r2;
        java.util.regex.Matcher r5;
        java.io.BufferedReader $r6;
        java.io.StringReader $r7;
        int $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.StringBuffer $r9;
        java.util.regex.Pattern $r11;
        boolean $z0;
        java.io.IOException $r13, $r18;
        java.lang.StringBuilder $r14, $r15, $r16;

        r0 := @parameter0: java.io.BufferedInputStream;

        r1 := @parameter1: java.lang.String;

        r20 = null;

        if r1 == null goto label8;

        r2 = newarray (byte)[4096];

        virtualinvoke r0.<java.io.BufferedInputStream: void mark(int)>(4096);

        i4 = 0;

        i5 = 4096;

        i6 = virtualinvoke r0.<java.io.BufferedInputStream: int read(byte[],int,int)>(r2, 0, 4096);

        i7 = -1;

        r21 = "";

        goto label2;

     label1:
        i4 = i4 + i6;

        i5 = i5 - i6;

        i6 = virtualinvoke r0.<java.io.BufferedInputStream: int read(byte[],int,int)>(r2, i4, i5);

        $r19 = new java.lang.String;

        specialinvoke $r19.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r2, 0, i4, r1);

        r21 = $r19;

        i7 = virtualinvoke $r19.<java.lang.String: int indexOf(int)>(62);

     label2:
        if i6 == -1 goto label3;

        if i7 != -1 goto label3;

        if i4 < 4096 goto label1;

     label3:
        if i7 != -1 goto label5;

        if i6 != -1 goto label4;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("Unexpected end of XML stream");

        throw $r18;

     label4:
        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("XML prolog or ROOT element not found on first ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label5:
        if i4 <= 0 goto label8;

        virtualinvoke r0.<java.io.BufferedInputStream: void reset()>();

        $r6 = new java.io.BufferedReader;

        $r7 = new java.io.StringReader;

        $i1 = i7 + 1;

        $r8 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        specialinvoke $r7.<java.io.StringReader: void <init>(java.lang.String)>($r8);

        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7);

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        r22 = virtualinvoke $r6.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label7;

     label6:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

        r22 = virtualinvoke $r6.<java.io.BufferedReader: java.lang.String readLine()>();

     label7:
        if r22 != null goto label6;

        $r11 = <org.apache.commons.io.input.compatibility.XmlStreamReader: java.util.regex.Pattern ENCODING_PATTERN>;

        r5 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r9);

        $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label8;

        $r12 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r23 = virtualinvoke $r12.<java.lang.String: java.lang.String toUpperCase()>();

        $i2 = virtualinvoke r23.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r20 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

     label8:
        return r20;
    }

    static boolean isAppXml(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("application/xml");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("application/xml-dtd");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("application/xml-external-parsed-entity");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("application/");

        if $z3 == 0 goto label2;

        $z4 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("+xml");

        if $z4 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    static boolean isTextXml(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("text/xml");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("text/xml-external-parsed-entity");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("text/");

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("+xml");

        if $z3 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
}
