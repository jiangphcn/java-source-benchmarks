public class org.apache.commons.io.input.BOMInputStreamTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void assertData(byte[], byte[], int) throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r2;
        int i0, $i1, $i4, i9;
        long $l2, $l3, $l7, $l8;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;
        byte $b5, $b6;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i1 = lengthof r1;

        $l3 = (long) $i1;

        $l2 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("length", $l3, $l2);

        i9 = 0;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("byte ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $b5 = r1[i9];

        $l8 = (long) $b5;

        $b6 = r2[i9];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r5, $l8, $l7);

        i9 = i9 + 1;

     label2:
        $i4 = lengthof r1;

        if i9 < $i4 goto label1;

        return;
    }

    private java.io.InputStream createUtf16BeDataStream(byte[], boolean)
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r3;
        boolean z0;
        java.io.ByteArrayInputStream $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        r3 = r1;

        if z0 == 0 goto label1;

        $i0 = lengthof r1;

        $i1 = $i0 + 2;

        r3 = newarray (byte)[$i1];

        r3[0] = -2;

        r3[1] = -1;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 2, $i2);

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        return $r2;
    }

    private java.io.InputStream createUtf16LeDataStream(byte[], boolean)
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r3;
        boolean z0;
        java.io.ByteArrayInputStream $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        r3 = r1;

        if z0 == 0 goto label1;

        $i0 = lengthof r1;

        $i1 = $i0 + 2;

        r3 = newarray (byte)[$i1];

        r3[0] = -1;

        r3[1] = -2;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 2, $i2);

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        return $r2;
    }

    private java.io.InputStream createUtf32BeDataStream(byte[], boolean)
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r3;
        boolean z0;
        java.io.ByteArrayInputStream $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        r3 = r1;

        if z0 == 0 goto label1;

        $i0 = lengthof r1;

        $i1 = $i0 + 4;

        r3 = newarray (byte)[$i1];

        r3[0] = 0;

        r3[1] = 0;

        r3[2] = -2;

        r3[3] = -1;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 4, $i2);

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        return $r2;
    }

    private java.io.InputStream createUtf32LeDataStream(byte[], boolean)
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r3;
        boolean z0;
        java.io.ByteArrayInputStream $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        r3 = r1;

        if z0 == 0 goto label1;

        $i0 = lengthof r1;

        $i1 = $i0 + 4;

        r3 = newarray (byte)[$i1];

        r3[0] = -1;

        r3[1] = -2;

        r3[2] = 0;

        r3[3] = 0;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 4, $i2);

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        return $r2;
    }

    private java.io.InputStream createUtf8DataStream(byte[], boolean)
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r3;
        boolean z0;
        java.io.ByteArrayInputStream $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        r3 = r1;

        if z0 == 0 goto label1;

        $i0 = lengthof r1;

        $i1 = $i0 + 3;

        r3 = newarray (byte)[$i1];

        r3[0] = -17;

        r3[1] = -69;

        r3[2] = -65;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 3, $i2);

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        return $r2;
    }

    private void parseXml(java.io.InputStream) throws org.xml.sax.SAXException, java.io.IOException, javax.xml.parsers.ParserConfigurationException
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        java.io.InputStream r1;
        org.w3c.dom.Document r2;
        javax.xml.parsers.DocumentBuilderFactory $r3;
        javax.xml.parsers.DocumentBuilder $r4;
        org.xml.sax.InputSource $r5;
        org.w3c.dom.Node $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: java.io.InputStream;

        $r3 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r4 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r5 = new org.xml.sax.InputSource;

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        r2 = virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r5);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        $r6 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Node getFirstChild()>();

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("X", $r7);

        return;
    }

    private void parseXml(java.io.Reader) throws org.xml.sax.SAXException, java.io.IOException, javax.xml.parsers.ParserConfigurationException
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        java.io.Reader r1;
        org.w3c.dom.Document r2;
        javax.xml.parsers.DocumentBuilderFactory $r3;
        javax.xml.parsers.DocumentBuilder $r4;
        org.xml.sax.InputSource $r5;
        org.w3c.dom.Node $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: java.io.Reader;

        $r3 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r4 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r5 = new org.xml.sax.InputSource;

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r1);

        r2 = virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r5);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        $r6 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Node getFirstChild()>();

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("X", $r7);

        return;
    }

    private void readBOMInputStreamTwice(java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        java.lang.String r1;
        java.io.InputStream r2;
        java.lang.Class $r4;
        org.apache.commons.io.input.BOMInputStream $r5;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>(r2);

        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void mark(int)>(1000000);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void readFile(org.apache.commons.io.input.BOMInputStream)>($r5);

        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void reset()>();

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void readFile(org.apache.commons.io.input.BOMInputStream)>($r5);

        virtualinvoke r2.<java.io.InputStream: void close()>();

        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    private void readFile(org.apache.commons.io.input.BOMInputStream) throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        org.apache.commons.io.input.BOMInputStream r1;
        int i0;
        byte[] r2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: org.apache.commons.io.input.BOMInputStream;

        r2 = newarray (byte)[100];

     label1:
        i0 = virtualinvoke r1.<org.apache.commons.io.input.BOMInputStream: int read(byte[])>(r2);

        if i0 > 0 goto label1;

        return;
    }

    public void testAvailableWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $i0 = virtualinvoke $r4.<java.io.InputStream: int available()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l1);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testAvailableWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $i0 = virtualinvoke $r4.<java.io.InputStream: int available()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testClose() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream $r3;
        org.apache.commons.io.input.BOMInputStream $r4;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = new org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream;

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream: void <init>(org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream)>(null);

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r3);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream: void assertCloseCalled()>();

        virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStreamTest$ExpectCloseInputStream: void close()>();

        return;
    }

    public void testEmptyBufferWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 = newarray (byte)[0];

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>(r1, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        r3 = newarray (byte)[1024];

        $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>(r3);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l1);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testEmptyBufferWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1, r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 = newarray (byte)[0];

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>(r1, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        r3 = newarray (byte)[1024];

        $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>(r3);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l1);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testGetBOMFirstThenRead() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        org.apache.commons.io.ByteOrderMark $r6, $r7, $r8;
        boolean $z0, $z1;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r7 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r6, $r7);

        $z0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z0);

        $r8 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $i0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l1);

        $i2 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l3);

        $i4 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l5);

        $i6 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testGetBOMFirstThenReadInclude() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        boolean $z0, $z1;
        org.apache.commons.io.ByteOrderMark $r6, $r7, $r8;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean)>($r5, 1);

        $z0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z0);

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $r7 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r8 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r7, $r8);

        $i0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(239L, $l1);

        $i2 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(187L, $l3);

        $i4 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(191L, $l5);

        $i6 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l7);

        $i8 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l9);

        $i10 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l11);

        $i12 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l13);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testLargeBufferWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r3, $r4;
        org.apache.commons.io.input.BOMInputStream $r5;
        java.io.InputStream $r6;
        int $i0;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r4 = newarray (byte)[3];

        $r4[0] = 65;

        $r4[1] = 66;

        $r4[2] = 67;

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r4, 1);

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r6);

        r3 = newarray (byte)[1024];

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r3);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r4, r3, $i0);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;
    }

    public void testLargeBufferWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r3, $r4;
        org.apache.commons.io.input.BOMInputStream $r5;
        java.io.InputStream $r6;
        int $i0;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r4 = newarray (byte)[3];

        $r4[0] = 65;

        $r4[1] = 66;

        $r4[2] = 67;

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r4, 0);

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r6);

        r3 = newarray (byte)[1024];

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r3);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r4, r3, $i0);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;
    }

    public void testLeadingNonBOMBufferedRead() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r3, $r4;
        org.apache.commons.io.input.BOMInputStream $r5;
        java.io.InputStream $r6;
        int $i0;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r4 = newarray (byte)[3];

        $r4[0] = -17;

        $r4[1] = -85;

        $r4[2] = -51;

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r4, 0);

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r6);

        r3 = newarray (byte)[1024];

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r3);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r4, r3, $i0);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;
    }

    public void testLeadingNonBOMSingleRead() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = -17;

        $r3[1] = -85;

        $r3[2] = -51;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $i0 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(239L, $l1);

        $i2 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(171L, $l3);

        $i4 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(205L, $l5);

        $i6 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testMarkResetAfterReadWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        boolean $z0;
        int $i3;
        long $l4;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $z0 = virtualinvoke $r4.<java.io.InputStream: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: void mark(int)>(10);

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: void reset()>();

        $i3 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l4);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testMarkResetAfterReadWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        boolean $z0;
        int $i3;
        long $l4;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $z0 = virtualinvoke $r4.<java.io.InputStream: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: void mark(int)>(10);

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: void reset()>();

        $i3 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l4);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testMarkResetBeforeReadWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        boolean $z0;
        int $i2;
        long $l3;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $z0 = virtualinvoke $r4.<java.io.InputStream: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        virtualinvoke $r4.<java.io.InputStream: void mark(int)>(10);

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: void reset()>();

        $i2 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l3);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testMarkResetBeforeReadWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        boolean $z0;
        int $i2;
        long $l3;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $z0 = virtualinvoke $r4.<java.io.InputStream: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        virtualinvoke $r4.<java.io.InputStream: void mark(int)>(10);

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: int read()>();

        virtualinvoke $r4.<java.io.InputStream: void reset()>();

        $i2 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l3);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testNoBoms() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r2;
        org.apache.commons.io.input.BOMInputStream $r3, $r5;
        java.io.InputStream $r4, $r6;
        org.apache.commons.io.ByteOrderMark[] $r7;
        java.lang.IllegalArgumentException $r8, $r9;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r2 = newarray (byte)[3];

        $r2[0] = 65;

        $r2[1] = 66;

        $r2[2] = 67;

     label1:
        $r3 = new org.apache.commons.io.input.BOMInputStream;

        $r4 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r2, 1);

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r4, 0, null);

        virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void close()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Null BOMs, expected IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r2, 1);

        $r7 = newarray (org.apache.commons.io.ByteOrderMark)[0];

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r6, 0, $r7);

        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void close()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Null BOMs, expected IllegalArgumentException");

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testReadEmpty() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        org.apache.commons.io.input.BOMInputStream $r3;
        java.io.InputStream $r4;
        int $i0;
        long $l1;
        boolean $z0, $z1;
        org.apache.commons.io.ByteOrderMark $r5, $r6;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 = newarray (byte)[0];

        $r3 = new org.apache.commons.io.input.BOMInputStream;

        $r4 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>(r1, 0);

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r4);

        $i0 = virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l1);

        $z0 = virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("hasBOM()", $z0);

        $r5 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $r6 = virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("getBOM", $r6);

        virtualinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testReadSmall() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        boolean $z0, $z1;
        org.apache.commons.io.ByteOrderMark $r6, $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[2];

        $r3[0] = 65;

        $r3[1] = 66;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $i0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l1);

        $i2 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l3);

        $i4 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l5);

        $z0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("hasBOM()", $z0);

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $r7 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("getBOM", $r7);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testReadTwiceWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void readBOMInputStreamTwice(java.lang.String)>("/org/apache/commons/io/testfileBOM.xml");

        return;
    }

    public void testReadTwiceWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void readBOMInputStreamTwice(java.lang.String)>("/org/apache/commons/io/testfileNoBOM.xml");

        return;
    }

    public void testReadWithBOMInclude() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        boolean $z0, $z1;
        org.apache.commons.io.ByteOrderMark $r6, $r7, $r8;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean)>($r5, 1);

        $i0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(239L, $l1);

        $i2 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(187L, $l3);

        $i4 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(191L, $l5);

        $i6 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l7);

        $i8 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l9);

        $i10 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l11);

        $i12 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l13);

        $z0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z0);

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $r7 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r8 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r7, $r8);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testReadWithBOMUtf16Be() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        org.apache.commons.io.input.BOMInputStream $r6;
        java.io.InputStream $r7;
        org.apache.commons.io.ByteOrderMark[] $r8;
        org.apache.commons.io.ByteOrderMark $r9, $r10, $r11, $r12, $r13;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r5 = "ABC";

        $r4 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_16BE>;

        r1 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r6 = new org.apache.commons.io.input.BOMInputStream;

        $r7 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16BeDataStream(byte[],boolean)>(r1, 1);

        $r8 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r9 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $r8[0] = $r9;

        specialinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r7, $r8);

        $i0 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l3);

        $i4 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $i6 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l7);

        $i8 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $i10 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l11);

        $i12 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l13);

        $z0 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z0);

        $r10 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $z1 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-16BE)", $z1);

        $r11 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $r12 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r11, $r12);

     label1:
        $r13 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16LE>;

        virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testReadWithBOMUtf16Le() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        org.apache.commons.io.input.BOMInputStream $r6;
        java.io.InputStream $r7;
        org.apache.commons.io.ByteOrderMark[] $r8;
        org.apache.commons.io.ByteOrderMark $r9, $r10, $r11, $r12, $r13;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r5 = "ABC";

        $r4 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_16LE>;

        r1 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r6 = new org.apache.commons.io.input.BOMInputStream;

        $r7 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16LeDataStream(byte[],boolean)>(r1, 1);

        $r8 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r9 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16LE>;

        $r8[0] = $r9;

        specialinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r7, $r8);

        $i0 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l1);

        $i2 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $i4 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l5);

        $i6 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l9);

        $i10 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $i12 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l13);

        $z0 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z0);

        $r10 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16LE>;

        $z1 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-16LE)", $z1);

        $r11 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16LE>;

        $r12 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r11, $r12);

     label1:
        $r13 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testReadWithBOMUtf32Be() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r4;
        org.apache.commons.io.input.BOMInputStream $r5;
        java.io.InputStream $r6;
        org.apache.commons.io.ByteOrderMark[] $r7;
        org.apache.commons.io.ByteOrderMark $r8, $r9, $r10, $r11, $r12;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>("UTF_32BE");

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z0);

        $r4 = "ABC";

        r1 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF_32BE");

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 1);

        $r7 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r8 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32BE>;

        $r7[0] = $r8;

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r6, $r7);

        $i0 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $i4 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $i6 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l7);

        $i8 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $i10 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $i12 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        $i14 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l15);

        $i16 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l17);

        $i18 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l19);

        $i20 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l21);

        $i22 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l23);

        $i24 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l25);

        $z1 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z1);

        $r9 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32BE>;

        $z2 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-32BE)", $z2);

        $r10 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32BE>;

        $r11 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r10, $r11);

     label1:
        $r12 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32LE>;

        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testReadWithBOMUtf32Le() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r4;
        org.apache.commons.io.input.BOMInputStream $r5;
        java.io.InputStream $r6;
        org.apache.commons.io.ByteOrderMark[] $r7;
        org.apache.commons.io.ByteOrderMark $r8, $r9, $r10, $r11, $r12;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>("UTF_32LE");

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z0);

        $r4 = "ABC";

        r1 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF_32LE");

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32LeDataStream(byte[],boolean)>(r1, 1);

        $r7 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r8 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32LE>;

        $r7[0] = $r8;

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r6, $r7);

        $i0 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l1);

        $i2 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $i4 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $i6 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l9);

        $i10 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $i12 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        $i14 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l15);

        $i16 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l17);

        $i18 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l19);

        $i20 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l21);

        $i22 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l23);

        $i24 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l25);

        $z1 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z1);

        $r9 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32LE>;

        $z2 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-32LE)", $z2);

        $r10 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32LE>;

        $r11 = virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r10, $r11);

     label1:
        $r12 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32BE>;

        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        virtualinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testReadWithBOMUtf8() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        org.apache.commons.io.input.BOMInputStream $r6;
        java.io.InputStream $r7;
        org.apache.commons.io.ByteOrderMark[] $r8;
        org.apache.commons.io.ByteOrderMark $r9, $r10, $r11, $r12, $r13;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r5 = "ABC";

        $r4 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        r1 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r6 = new org.apache.commons.io.input.BOMInputStream;

        $r7 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>(r1, 1);

        $r8 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r9 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r8[0] = $r9;

        specialinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r7, $r8);

        $i0 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l1);

        $i2 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l3);

        $i4 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l5);

        $i6 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        $z0 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z0);

        $r10 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $r11 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r12 = virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r11, $r12);

     label1:
        $r13 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        virtualinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testReadWithMultipleBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        org.apache.commons.io.ByteOrderMark[] $r6;
        org.apache.commons.io.ByteOrderMark $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        $r6 = newarray (org.apache.commons.io.ByteOrderMark)[2];

        $r7 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $r6[0] = $r7;

        $r8 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r6[1] = $r8;

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r5, $r6);

        $i0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l1);

        $i2 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l3);

        $i4 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l5);

        $i6 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        $z0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM()", $z0);

        $r9 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $r10 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $z2 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r10);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("hasBOM(UTF-16BE)", $z2);

        $r11 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r12 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getBOM", $r11, $r12);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testReadWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        boolean $z0, $z1;
        org.apache.commons.io.ByteOrderMark $r6, $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $i0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l1);

        $i2 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l3);

        $i4 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l5);

        $i6 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        $z0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("hasBOM()", $z0);

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $z1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: boolean hasBOM(org.apache.commons.io.ByteOrderMark)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("hasBOM(UTF-8)", $z1);

        $r7 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: org.apache.commons.io.ByteOrderMark getBOM()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("getBOM", $r7);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testReadXmlWithBOMUcs2() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5, $r8;
        org.apache.commons.io.ByteOrderMark[] $r6;
        org.apache.commons.io.ByteOrderMark $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("IBM");

        staticinvoke <org.junit.Assume: void assumeFalse(java.lang.String,boolean)>("This test does not pass on some IBM VMs xml parsers", $z0);

        $z1 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>("ISO-10646-UCS-2");

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z1);

        $r3 = "<?xml version=\"1.0\" encoding=\"ISO-10646-UCS-2\"?><X/>";

        r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-10646-UCS-2");

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16BeDataStream(byte[],boolean)>(r1, 1);

        $r6 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r7 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $r6[0] = $r7;

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r5, $r6);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r4);

        $r8 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16BeDataStream(byte[],boolean)>(r1, 1);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r8);

        return;
    }

    public void testReadXmlWithBOMUcs4() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        org.apache.commons.io.input.BOMInputStream $r3;
        java.io.InputStream $r4, $r7;
        org.apache.commons.io.ByteOrderMark[] $r5;
        org.apache.commons.io.ByteOrderMark $r6;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>("ISO-10646-UCS-4");

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z0);

        $r2 = "<?xml version=\"1.0\" encoding=\"ISO-10646-UCS-4\"?><X/>";

        r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-10646-UCS-4");

        $r3 = new org.apache.commons.io.input.BOMInputStream;

        $r4 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 1);

        $r5 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32BE>;

        $r5[0] = $r6;

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r4, $r5);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r3);

        $z1 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: boolean jvmAndSaxBothSupportCharset(java.lang.String)>("UTF_32LE");

        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>("JVM and SAX need to support UTF_32LE for this", $z1);

        $r7 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 1);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r7);

        return;
    }

    public void testReadXmlWithBOMUtf16Be() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5, $r8;
        org.apache.commons.io.ByteOrderMark[] $r6;
        org.apache.commons.io.ByteOrderMark $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = "<?xml version=\"1.0\" encoding=\"UTF-16BE\"?><X/>";

        $r2 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_16BE>;

        r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16BeDataStream(byte[],boolean)>(r1, 1);

        $r6 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r7 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $r6[0] = $r7;

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r5, $r6);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r4);

        $r8 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16BeDataStream(byte[],boolean)>(r1, 1);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r8);

        return;
    }

    public void testReadXmlWithBOMUtf16Le() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5, $r8;
        org.apache.commons.io.ByteOrderMark[] $r6;
        org.apache.commons.io.ByteOrderMark $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = "<?xml version=\"1.0\" encoding=\"UTF-16LE\"?><X/>";

        $r2 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_16LE>;

        r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16LeDataStream(byte[],boolean)>(r1, 1);

        $r6 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r7 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16LE>;

        $r6[0] = $r7;

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r5, $r6);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r4);

        $r8 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf16LeDataStream(byte[],boolean)>(r1, 1);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r8);

        return;
    }

    public void testReadXmlWithBOMUtf32Be() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        boolean $z0;
        java.lang.String $r2;
        org.apache.commons.io.input.BOMInputStream $r3;
        java.io.InputStream $r4, $r8;
        org.apache.commons.io.ByteOrderMark[] $r5;
        org.apache.commons.io.ByteOrderMark $r6;
        org.apache.commons.io.input.XmlStreamReader $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $z0 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: boolean jvmAndSaxBothSupportCharset(java.lang.String)>("UTF_32BE");

        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>("JVM and SAX need to support UTF_32BE for this", $z0);

        $r2 = "<?xml version=\"1.0\" encoding=\"UTF-32BE\"?><X/>";

        r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF_32BE");

        $r3 = new org.apache.commons.io.input.BOMInputStream;

        $r4 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 1);

        $r5 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32BE>;

        $r5[0] = $r6;

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r4, $r5);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r3);

        $r7 = new org.apache.commons.io.input.XmlStreamReader;

        $r8 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 1);

        specialinvoke $r7.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream)>($r8);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.Reader)>($r7);

        return;
    }

    public void testReadXmlWithBOMUtf32Le() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        boolean $z0;
        java.lang.String $r2;
        org.apache.commons.io.input.BOMInputStream $r3;
        java.io.InputStream $r4, $r8;
        org.apache.commons.io.ByteOrderMark[] $r5;
        org.apache.commons.io.ByteOrderMark $r6;
        org.apache.commons.io.input.XmlStreamReader $r7;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $z0 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: boolean jvmAndSaxBothSupportCharset(java.lang.String)>("UTF_32LE");

        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>("JVM and SAX need to support UTF_32LE for this", $z0);

        $r2 = "<?xml version=\"1.0\" encoding=\"UTF-32LE\"?><X/>";

        r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF_32LE");

        $r3 = new org.apache.commons.io.input.BOMInputStream;

        $r4 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32LeDataStream(byte[],boolean)>(r1, 1);

        $r5 = newarray (org.apache.commons.io.ByteOrderMark)[1];

        $r6 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_32LE>;

        $r5[0] = $r6;

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,org.apache.commons.io.ByteOrderMark[])>($r4, $r5);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r3);

        $r7 = new org.apache.commons.io.input.XmlStreamReader;

        $r8 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32LeDataStream(byte[],boolean)>(r1, 1);

        specialinvoke $r7.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream)>($r8);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.Reader)>($r7);

        return;
    }

    public void testReadXmlWithBOMUtf8() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5, $r6;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><X/>";

        $r2 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>(r1, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r4);

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>(r1, 1);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r6);

        return;
    }

    public void testReadXmlWithoutBOMUtf32Be() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        boolean $z0;
        java.lang.String $r2;
        org.apache.commons.io.input.BOMInputStream $r3;
        java.io.InputStream $r4, $r5;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $z0 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: boolean jvmAndSaxBothSupportCharset(java.lang.String)>("UTF_32BE");

        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>("JVM and SAX need to support UTF_32BE for this", $z0);

        $r2 = "<?xml version=\"1.0\" encoding=\"UTF_32BE\"?><X/>";

        r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF_32BE");

        $r3 = new org.apache.commons.io.input.BOMInputStream;

        $r4 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 0);

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r4);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r3);

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 0);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r5);

        return;
    }

    public void testReadXmlWithoutBOMUtf32Le() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r1;
        boolean $z0;
        java.lang.String $r2;
        org.apache.commons.io.input.BOMInputStream $r3;
        java.io.InputStream $r4, $r5;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $z0 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: boolean jvmAndSaxBothSupportCharset(java.lang.String)>("UTF_32LE");

        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>("JVM and SAX need to support UTF_32LE for this", $z0);

        $r2 = "<?xml version=\"1.0\" encoding=\"UTF-32LE\"?><X/>";

        r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF_32LE");

        $r3 = new org.apache.commons.io.input.BOMInputStream;

        $r4 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32LeDataStream(byte[],boolean)>(r1, 0);

        specialinvoke $r3.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r4);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r3);

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf32BeDataStream(byte[],boolean)>(r1, 0);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void parseXml(java.io.InputStream)>($r5);

        return;
    }

    public void testSkipWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i1;
        long $l2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        virtualinvoke $r4.<java.io.InputStream: long skip(long)>(2L);

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l2);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void testSkipWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        int $i1;
        long $l2;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 65;

        $r3[1] = 66;

        $r3[2] = 67;

        $r3[3] = 68;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        virtualinvoke $r4.<java.io.InputStream: long skip(long)>(2L);

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67L, $l2);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;
    }

    public void skipReturnValueWithBom() throws java.io.IOException
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = 49;

        $r3[1] = 50;

        $r3[2] = 51;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $l0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: long skip(long)>(2L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l0);

        $i1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(51L, $l2);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void skipReturnValueWithoutBom() throws java.io.IOException
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] $r3;
        org.apache.commons.io.input.BOMInputStream $r4;
        java.io.InputStream $r5;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[3];

        $r3[0] = 49;

        $r3[1] = 50;

        $r3[2] = 51;

        $r4 = new org.apache.commons.io.input.BOMInputStream;

        $r5 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 0);

        specialinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r5);

        $l0 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: long skip(long)>(2L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l0);

        $i1 = virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(51L, $l2);

        virtualinvoke $r4.<org.apache.commons.io.input.BOMInputStream: void close()>();

        return;
    }

    public void testSmallBufferWithBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r3, $r4, $r7, $r8;
        org.apache.commons.io.input.BOMInputStream $r5;
        java.io.InputStream $r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r4 = newarray (byte)[3];

        $r4[0] = 65;

        $r4[1] = 66;

        $r4[2] = 67;

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r4, 1);

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r6);

        r3 = newarray (byte)[1024];

        $r7 = newarray (byte)[2];

        $r7[0] = 65;

        $r7[1] = 66;

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 2);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r7, r3, $i0);

        $r8 = newarray (byte)[1];

        $r8[0] = 67;

        $i1 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 2);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r8, r3, $i1);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;
    }

    public void testSmallBufferWithoutBOM() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        byte[] r3, $r4, $r7, $r8;
        org.apache.commons.io.input.BOMInputStream $r5;
        java.io.InputStream $r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r4 = newarray (byte)[3];

        $r4[0] = 65;

        $r4[1] = 66;

        $r4[2] = 67;

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r4, 0);

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream)>($r6);

        r3 = newarray (byte)[1024];

        $r7 = newarray (byte)[2];

        $r7[0] = 65;

        $r7[1] = 66;

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 2);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r7, r3, $i0);

        $r8 = newarray (byte)[1];

        $r8[0] = 67;

        $i1 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 2);

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r8, r3, $i1);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;
    }

    public void testSupportCode() throws java.lang.Exception
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        java.io.InputStream r1;
        byte[] r2, $r3, $r4;
        int i0;
        long $l1, $l4, $l7, $l10, $l13, $l16;
        byte $b2, $b5, $b8, $b11, $b14;
        short $s3, $s6, $s9, $s12, $s15;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        $r3 = newarray (byte)[2];

        $r3[0] = 65;

        $r3[1] = 66;

        r1 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: java.io.InputStream createUtf8DataStream(byte[],boolean)>($r3, 1);

        r2 = newarray (byte)[1024];

        i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r2);

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l1);

        $b2 = r2[0];

        $s3 = $b2 & 255;

        $l4 = (long) $s3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(239L, $l4);

        $b5 = r2[1];

        $s6 = $b5 & 255;

        $l7 = (long) $s6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(187L, $l7);

        $b8 = r2[2];

        $s9 = $b8 & 255;

        $l10 = (long) $s9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(191L, $l10);

        $b11 = r2[3];

        $s12 = $b11 & 255;

        $l13 = (long) $s12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $l13);

        $b14 = r2[4];

        $s15 = $b14 & 255;

        $l16 = (long) $s15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $l16);

        $r4 = newarray (byte)[5];

        $r4[0] = -17;

        $r4[1] = -69;

        $r4[2] = -65;

        $r4[3] = 65;

        $r4[4] = 66;

        specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: void assertData(byte[],byte[],int)>($r4, r2, i0);

        return;
    }

    private boolean jvmAndSaxBothSupportCharset(java.lang.String) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.commons.io.input.BOMInputStreamTest: boolean doesSaxSupportCharacterSet(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean doesSaxSupportCharacterSet(java.lang.String) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException, java.io.IOException
    {
        org.apache.commons.io.input.BOMInputStreamTest r0;
        java.lang.String r1, $r7, $r13;
        byte[] r2;
        javax.xml.parsers.DocumentBuilder r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        javax.xml.parsers.DocumentBuilderFactory $r8;
        org.xml.sax.InputSource $r9;
        java.io.ByteArrayInputStream $r10;
        org.xml.sax.SAXParseException $r12;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.BOMInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("<?xml version=\"1.0\" encoding=\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"?><Z/>");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        $r8 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        r3 = virtualinvoke $r8.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

     label1:
        $r9 = new org.xml.sax.InputSource;

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r9.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r10);

        virtualinvoke $r9.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>(r1);

        virtualinvoke r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r9);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<org.xml.sax.SAXParseException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label4;

        return 0;

     label4:
        return 1;

        catch org.xml.sax.SAXParseException from label1 to label2 with label3;
    }
}
