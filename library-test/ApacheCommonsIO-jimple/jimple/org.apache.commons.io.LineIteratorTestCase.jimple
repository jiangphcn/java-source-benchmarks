public class org.apache.commons.io.LineIteratorTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{

    public void <init>()
    {
        org.apache.commons.io.LineIteratorTestCase r0;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        return;
    }

    private void assertLines(java.util.List, org.apache.commons.io.LineIterator)
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r1;
        org.apache.commons.io.LineIterator r2;
        java.lang.String r3, $r7;
        int $i0, i1;
        java.lang.StringBuilder $r5, $r6;
        java.lang.Object $r8;
        boolean $z0;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.commons.io.LineIterator;

     label1:
        i1 = 0;

        goto label3;

     label2:
        r3 = virtualinvoke r2.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("nextLine() line ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r7, $r8, r3);

        i1 = i1 + 1;

     label3:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 < $i0 goto label2;

        $z0 = virtualinvoke r2.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("No more expected", $z0);

        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r2);

        throw $r9;

     label5:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r2);

        return;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    private java.util.List createLinesFile(java.io.File, int) throws java.io.IOException
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.io.File r1;
        int i0;
        java.util.List r2;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createStringLines(int)>(i0);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection)>(r1, r2);

        return r2;
    }

    private java.util.List createLinesFile(java.io.File, java.lang.String, int) throws java.io.IOException
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.io.File r1;
        java.lang.String r2;
        int i0;
        java.util.List r3;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createStringLines(int)>(i0);

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r1, r2, r3);

        return r3;
    }

    private java.util.List createStringLines(int)
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        int i0, i1;
        java.util.ArrayList $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        i0 := @parameter0: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i1 = 0;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("LINE ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return $r2;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        r1 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r1);

     label1:
        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r1 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r1);

        return;
    }

    public void testConstructor() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        org.apache.commons.io.LineIterator $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

     label1:
        $r2 = new org.apache.commons.io.LineIterator;

        specialinvoke $r2.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testZeroLines() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void doTestFileWithSpecifiedLines(int)>(0);

        return;
    }

    public void testOneLines() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void doTestFileWithSpecifiedLines(int)>(1);

        return;
    }

    public void testTwoLines() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void doTestFileWithSpecifiedLines(int)>(2);

        return;
    }

    public void testThreeLines() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void doTestFileWithSpecifiedLines(int)>(3);

        return;
    }

    public void testMissingFile() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.io.File $r4, $r5;
        java.lang.Throwable $r6;
        java.io.FileNotFoundException $r7;
        org.apache.commons.io.LineIterator r8;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "dummy-missing-file.txt");

        r8 = null;

     label1:
        r8 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r4, "UTF-8");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected FileNotFoundException");

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r8);

        goto label7;

     label5:
        $r6 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r8);

        throw $r6;

     label6:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r8);

     label7:
        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void testValidEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        org.apache.commons.io.LineIterator r3;
        java.io.File $r5, $r6;
        boolean $z0;
        java.lang.String $r8;
        long $l0;
        java.lang.Throwable $r9;
        int i1;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "LineIterator-validEncoding.txt");

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r5, "UTF-8", 3);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r5, "UTF-8");

     label1:
        i1 = 0;

        goto label3;

     label2:
        $r8 = virtualinvoke r3.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

        i1 = i1 + 1;

     label3:
        $z0 = virtualinvoke r3.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $l0 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l0);

        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r3);

        throw $r9;

     label5:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r3);

        return;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    public void testInvalidEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.io.File $r5, $r6;
        java.lang.Throwable $r8;
        java.nio.charset.UnsupportedCharsetException $r9;
        org.apache.commons.io.LineIterator r10;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "LineIterator-invalidEncoding.txt");

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r5, "UTF-8", 3);

        r10 = null;

     label1:
        r10 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r5, "XXXXXXXX");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected UnsupportedCharsetException");

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r10);

        goto label7;

     label5:
        $r8 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r10);

        throw $r8;

     label6:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r10);

     label7:
        return;

        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void testNextLineOnlyDefaultEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r2;
        org.apache.commons.io.LineIterator r3;
        java.io.File $r4, $r5;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "LineIterator-nextOnly.txt");

        r2 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,int)>($r4, 3);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File)>($r4);

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void assertLines(java.util.List,org.apache.commons.io.LineIterator)>(r2, r3);

        return;
    }

    public void testNextLineOnlyNullEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r2;
        org.apache.commons.io.LineIterator r3;
        java.io.File $r4, $r5;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r4 = new java.io.File;

        $r5 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "LineIterator-nextOnly.txt");

        r2 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r4, null, 3);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r4, null);

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void assertLines(java.util.List,org.apache.commons.io.LineIterator)>(r2, r3);

        return;
    }

    public void testNextLineOnlyUtf8Encoding() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r3;
        org.apache.commons.io.LineIterator r4;
        java.io.File $r5, $r6;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "LineIterator-nextOnly.txt");

        r3 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r5, "UTF-8", 3);

        r4 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r5, "UTF-8");

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void assertLines(java.util.List,org.apache.commons.io.LineIterator)>(r3, r4);

        return;
    }

    public void testNextOnly() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r2;
        org.apache.commons.io.LineIterator r3;
        java.lang.String r4, $r10;
        java.io.File $r6, $r7;
        int $i0, i1;
        java.lang.StringBuilder $r8, $r9;
        java.lang.Object $r11;
        java.lang.Boolean $r12, $r13;
        boolean $z0;
        java.lang.Throwable $r14;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "LineIterator-nextOnly.txt");

        r2 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r6, null, 3);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r6, null);

     label1:
        i1 = 0;

        goto label3;

     label2:
        r4 = virtualinvoke r3.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("next() line ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r10, $r11, r4);

        i1 = i1 + 1;

     label3:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 < $i0 goto label2;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = virtualinvoke r3.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("No more expected", $r12, $r13);

        goto label5;

     label4:
        $r14 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r3);

        throw $r14;

     label5:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r3);

        return;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    public void testNextWithException() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        org.apache.commons.io.LineIteratorTestCase$1 $r3;
        java.io.StringReader $r4;
        org.apache.commons.io.LineIterator $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r3 = new org.apache.commons.io.LineIteratorTestCase$1;

        $r4 = new java.io.StringReader;

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>("");

        specialinvoke $r3.<org.apache.commons.io.LineIteratorTestCase$1: void <init>(org.apache.commons.io.LineIteratorTestCase,java.io.Reader)>(r0, $r4);

     label1:
        $r5 = new org.apache.commons.io.LineIterator;

        specialinvoke $r5.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>($r3);

        virtualinvoke $r5.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IllegalStateException");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testCloseEarly() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        org.apache.commons.io.LineIterator r3;
        java.io.File $r5, $r6;
        java.lang.String $r8;
        boolean $z0, $z1;
        java.lang.Throwable $r13;
        java.util.NoSuchElementException $r14, $r15, $r16, $r17;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r5 = new java.io.File;

        $r6 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "LineIterator-closeEarly.txt");

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r5, "UTF-8", 3);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r5, "UTF-8");

     label01:
        $r8 = virtualinvoke r3.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Line expected", $r8);

        $z0 = virtualinvoke r3.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("More expected", $z0);

        virtualinvoke r3.<org.apache.commons.io.LineIterator: void close()>();

        $z1 = virtualinvoke r3.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("No more expected", $z1);

     label02:
        virtualinvoke r3.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label03:
        goto label05;

     label04:
        $r17 := @caughtexception;

     label05:
        virtualinvoke r3.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

     label08:
        virtualinvoke r3.<org.apache.commons.io.LineIterator: void close()>();

     label09:
        virtualinvoke r3.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;

     label12:
        virtualinvoke r3.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label13:
        goto label16;

     label14:
        $r16 := @caughtexception;

        goto label16;

     label15:
        $r13 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r3);

        throw $r13;

     label16:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r3);

        return;

        catch java.util.NoSuchElementException from label02 to label03 with label04;
        catch java.util.NoSuchElementException from label05 to label06 with label07;
        catch java.util.NoSuchElementException from label09 to label10 with label11;
        catch java.util.NoSuchElementException from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label15 with label15;
    }

    private void doTestFileWithSpecifiedLines(int) throws java.io.IOException
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        int i0, $i1, $i2, $i4, i6;
        java.lang.String r2, $r14, $r20, r28;
        java.util.List r4;
        org.apache.commons.io.LineIterator r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r16, $r17, $r18, $r19;
        java.io.File $r10, $r11;
        java.lang.Object $r15;
        long $l3, $l5;
        java.lang.UnsupportedOperationException $r23;
        java.util.NoSuchElementException $r24, $r26;
        java.lang.Throwable $r25;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        i0 := @parameter0: int;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("LineIterator-");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-test.txt");

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.io.File;

        $r11 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, r2);

        r4 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r10, "UTF-8", i0);

        r5 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r10, "UTF-8");

     label01:
        virtualinvoke r5.<org.apache.commons.io.LineIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Remove is unsupported");

     label02:
        goto label04;

     label03:
        $r23 := @caughtexception;

     label04:
        i6 = 0;

        goto label08;

     label05:
        r28 = virtualinvoke r5.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comparing line ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r14, $r15, r28);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exceeded expected idx=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        if i6 >= $i2 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r20, $z0);

        i6 = i6 + 1;

     label08:
        $z1 = virtualinvoke r5.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        if $z1 != 0 goto label05;

        $l3 = (long) i6;

        $i4 = interfaceinvoke r4.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Line Count doesn\'t match", $l3, $l5);

     label09:
        virtualinvoke r5.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NoSuchElementException");

     label10:
        goto label12;

     label11:
        $r26 := @caughtexception;

     label12:
        virtualinvoke r5.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NoSuchElementException");

     label13:
        goto label16;

     label14:
        $r24 := @caughtexception;

        goto label16;

     label15:
        $r25 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r5);

        throw $r25;

     label16:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>(r5);

        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.util.NoSuchElementException from label09 to label10 with label11;
        catch java.util.NoSuchElementException from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label15 with label15;
    }

    public void testFilteringFileReader() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r4;
        java.io.File $r6, $r7;
        java.io.FileReader $r8;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "LineIterator-Filter-test.txt");

        r4 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r6, "UTF-8", 9);

        $r8 = new java.io.FileReader;

        specialinvoke $r8.<java.io.FileReader: void <init>(java.io.File)>($r6);

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void testFiltering(java.util.List,java.io.Reader)>(r4, $r8);

        return;
    }

    public void testFilteringBufferedReader() throws java.lang.Exception
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r4;
        java.io.File $r6, $r7;
        java.io.BufferedReader $r8;
        java.io.FileReader $r9;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        $r6 = new java.io.File;

        $r7 = staticinvoke <org.apache.commons.io.LineIteratorTestCase: java.io.File getTestDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "LineIterator-Filter-test.txt");

        r4 = specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: java.util.List createLinesFile(java.io.File,java.lang.String,int)>($r6, "UTF-8", 9);

        $r8 = new java.io.BufferedReader;

        $r9 = new java.io.FileReader;

        specialinvoke $r9.<java.io.FileReader: void <init>(java.io.File)>($r6);

        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader)>($r9);

        specialinvoke r0.<org.apache.commons.io.LineIteratorTestCase: void testFiltering(java.util.List,java.io.Reader)>(r4, $r8);

        return;
    }

    private void testFiltering(java.util.List, java.io.Reader)
    {
        org.apache.commons.io.LineIteratorTestCase r0;
        java.util.List r1;
        java.io.Reader r2;
        org.apache.commons.io.LineIteratorTestCase$2 $r5;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r12, $r13;
        java.lang.String $r8, $r14, r22;
        java.lang.Object $r9;
        int $i0, $i1, $i2, $i3, i7, i8;
        long $l4, $l5, $l6;
        java.util.NoSuchElementException $r17, $r18;
        java.lang.Throwable $r19;
        java.lang.UnsupportedOperationException $r20;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.LineIteratorTestCase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.io.Reader;

        $r5 = new org.apache.commons.io.LineIteratorTestCase$2;

        specialinvoke $r5.<org.apache.commons.io.LineIteratorTestCase$2: void <init>(org.apache.commons.io.LineIteratorTestCase,java.io.Reader)>(r0, r2);

     label01:
        virtualinvoke $r5.<org.apache.commons.io.LineIterator: void remove()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Remove is unsupported");

     label02:
        goto label04;

     label03:
        $r20 := @caughtexception;

     label04:
        i7 = 0;

        i8 = 0;

        goto label08;

     label05:
        r22 = virtualinvoke $r5.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        i8 = i8 + 1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comparing line ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r8, $r9, r22);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exceeded expected idx=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i7 >= $i1 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r14, $z0);

        i7 = i7 + 1;

        $i2 = i7 % 3;

        if $i2 != 1 goto label08;

        i7 = i7 + 1;

     label08:
        $z1 = virtualinvoke $r5.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        if $z1 != 0 goto label05;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Line Count doesn\'t match", 9L, $l4);

        $l5 = (long) i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Line Count doesn\'t match", 9L, $l5);

        $l6 = (long) i8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Line Count doesn\'t match", 6L, $l6);

     label09:
        virtualinvoke $r5.<org.apache.commons.io.LineIterator: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NoSuchElementException");

     label10:
        goto label12;

     label11:
        $r18 := @caughtexception;

     label12:
        virtualinvoke $r5.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NoSuchElementException");

     label13:
        goto label16;

     label14:
        $r17 := @caughtexception;

        goto label16;

     label15:
        $r19 := @caughtexception;

        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>($r5);

        throw $r19;

     label16:
        staticinvoke <org.apache.commons.io.LineIterator: void closeQuietly(org.apache.commons.io.LineIterator)>($r5);

        return;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.util.NoSuchElementException from label09 to label10 with label11;
        catch java.util.NoSuchElementException from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label15 with label15;
    }
}
