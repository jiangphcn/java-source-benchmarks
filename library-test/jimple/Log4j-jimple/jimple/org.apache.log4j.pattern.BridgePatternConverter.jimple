public final class org.apache.log4j.pattern.BridgePatternConverter extends org.apache.log4j.helpers.PatternConverter
{
    private org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters;
    private org.apache.log4j.pattern.FormattingInfo[] patternFields;
    private boolean handlesExceptions;

    public void <init>(java.lang.String)
    {
        org.apache.log4j.pattern.BridgePatternConverter r0;
        java.lang.String r1;
        java.util.Iterator r4, r5;
        java.lang.Object r6, $r17;
        java.util.ArrayList $r7, $r8;
        java.util.Map $r9;
        int $i0, $i1, i2;
        org.apache.log4j.pattern.LoggingEventPatternConverter[] $r10, $r13, $r20, $r21;
        org.apache.log4j.pattern.FormattingInfo[] $r11, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.log4j.pattern.LiteralPatternConverter $r12;
        org.apache.log4j.pattern.FormattingInfo $r15, $r18;
        org.apache.log4j.pattern.LoggingEventPatternConverter $r19, $r22;

        r0 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.helpers.PatternConverter: void <init>()>();

        r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.helpers.PatternConverter next> = null;

        r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions> = 0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.util.Map getPatternLayoutRules()>();

        staticinvoke <org.apache.log4j.pattern.PatternParser: void parse(java.lang.String,java.util.List,java.util.List,java.util.Map,java.util.Map)>(r1, $r7, $r8, null, $r9);

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r10 = newarray (org.apache.log4j.pattern.LoggingEventPatternConverter)[$i0];

        r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters> = $r10;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r11 = newarray (org.apache.log4j.pattern.FormattingInfo)[$i1];

        r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields> = $r11;

        i2 = 0;

        r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        r5 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label1:
        r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = r6 instanceof org.apache.log4j.pattern.LoggingEventPatternConverter;

        if $z0 == 0 goto label2;

        $r20 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r19 = (org.apache.log4j.pattern.LoggingEventPatternConverter) r6;

        $r20[i2] = $r19;

        $z2 = r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions>;

        $r21 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r22 = $r21[i2];

        $z3 = virtualinvoke $r22.<org.apache.log4j.pattern.LoggingEventPatternConverter: boolean handlesThrowable()>();

        $z4 = $z2 | $z3;

        r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions> = $z4;

        goto label3;

     label2:
        $r13 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r12 = new org.apache.log4j.pattern.LiteralPatternConverter;

        specialinvoke $r12.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>("");

        $r13[i2] = $r12;

     label3:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r16 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields>;

        $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (org.apache.log4j.pattern.FormattingInfo) $r17;

        $r16[i2] = $r18;

        goto label5;

     label4:
        $r14 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields>;

        $r15 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        $r14[i2] = $r15;

     label5:
        i2 = i2 + 1;

     label6:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

        return;
    }

    protected java.lang.String convert(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.pattern.BridgePatternConverter r0;
        org.apache.log4j.spi.LoggingEvent r1;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r0.<org.apache.log4j.pattern.BridgePatternConverter: void format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)>($r3, r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public void format(java.lang.StringBuffer, org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.pattern.BridgePatternConverter r0;
        java.lang.StringBuffer r1;
        org.apache.log4j.spi.LoggingEvent r2;
        int i0, $i1, i2;
        org.apache.log4j.pattern.LoggingEventPatternConverter[] $r3, $r4;
        org.apache.log4j.pattern.LoggingEventPatternConverter $r5;
        org.apache.log4j.pattern.FormattingInfo[] $r6;
        org.apache.log4j.pattern.FormattingInfo $r7;

        r0 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.apache.log4j.spi.LoggingEvent;

        i2 = 0;

        goto label2;

     label1:
        i0 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        $r4 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r5 = $r4[i2];

        virtualinvoke $r5.<org.apache.log4j.pattern.LoggingEventPatternConverter: void format(org.apache.log4j.spi.LoggingEvent,java.lang.StringBuffer)>(r2, r1);

        $r6 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields>;

        $r7 = $r6[i2];

        virtualinvoke $r7.<org.apache.log4j.pattern.FormattingInfo: void format(int,java.lang.StringBuffer)>(i0, r1);

        i2 = i2 + 1;

     label2:
        $r3 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $i1 = lengthof $r3;

        if i2 < $i1 goto label1;

        return;
    }

    public boolean ignoresThrowable()
    {
        org.apache.log4j.pattern.BridgePatternConverter r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        $z0 = r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions>;

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }
}
