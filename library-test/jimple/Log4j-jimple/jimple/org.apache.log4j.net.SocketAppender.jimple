public class org.apache.log4j.net.SocketAppender extends org.apache.log4j.AppenderSkeleton
{
    public static final int DEFAULT_PORT;
    static final int DEFAULT_RECONNECTION_DELAY;
    java.lang.String remoteHost;
    public static final java.lang.String ZONE;
    java.net.InetAddress address;
    int port;
    java.io.ObjectOutputStream oos;
    int reconnectionDelay;
    boolean locationInfo;
    private java.lang.String application;
    private org.apache.log4j.net.SocketAppender$Connector connector;
    int counter;
    private static final int RESET_FREQUENCY;
    private boolean advertiseViaMulticastDNS;
    private org.apache.log4j.net.ZeroConfSupport zeroConf;

    public void <init>()
    {
        org.apache.log4j.net.SocketAppender r0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        r0.<org.apache.log4j.net.SocketAppender: int port> = 4560;

        r0.<org.apache.log4j.net.SocketAppender: int reconnectionDelay> = 30000;

        r0.<org.apache.log4j.net.SocketAppender: boolean locationInfo> = 0;

        r0.<org.apache.log4j.net.SocketAppender: int counter> = 0;

        return;
    }

    public void <init>(java.net.InetAddress, int)
    {
        org.apache.log4j.net.SocketAppender r0;
        java.net.InetAddress r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        r0.<org.apache.log4j.net.SocketAppender: int port> = 4560;

        r0.<org.apache.log4j.net.SocketAppender: int reconnectionDelay> = 30000;

        r0.<org.apache.log4j.net.SocketAppender: boolean locationInfo> = 0;

        r0.<org.apache.log4j.net.SocketAppender: int counter> = 0;

        r0.<org.apache.log4j.net.SocketAppender: java.net.InetAddress address> = r1;

        $r2 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostName()>();

        r0.<org.apache.log4j.net.SocketAppender: java.lang.String remoteHost> = $r2;

        r0.<org.apache.log4j.net.SocketAppender: int port> = i0;

        virtualinvoke r0.<org.apache.log4j.net.SocketAppender: void connect(java.net.InetAddress,int)>(r1, i0);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.apache.log4j.net.SocketAppender r0;
        java.lang.String r1;
        int i0;
        java.net.InetAddress $r2, $r3;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        r0.<org.apache.log4j.net.SocketAppender: int port> = 4560;

        r0.<org.apache.log4j.net.SocketAppender: int reconnectionDelay> = 30000;

        r0.<org.apache.log4j.net.SocketAppender: boolean locationInfo> = 0;

        r0.<org.apache.log4j.net.SocketAppender: int counter> = 0;

        r0.<org.apache.log4j.net.SocketAppender: int port> = i0;

        $r2 = staticinvoke <org.apache.log4j.net.SocketAppender: java.net.InetAddress getAddressByName(java.lang.String)>(r1);

        r0.<org.apache.log4j.net.SocketAppender: java.net.InetAddress address> = $r2;

        r0.<org.apache.log4j.net.SocketAppender: java.lang.String remoteHost> = r1;

        $r3 = r0.<org.apache.log4j.net.SocketAppender: java.net.InetAddress address>;

        virtualinvoke r0.<org.apache.log4j.net.SocketAppender: void connect(java.net.InetAddress,int)>($r3, i0);

        return;
    }

    public void activateOptions()
    {
        org.apache.log4j.net.SocketAppender r0;
        boolean $z0;
        int $i0, $i1;
        java.net.InetAddress $r1;
        org.apache.log4j.net.ZeroConfSupport $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $z0 = r0.<org.apache.log4j.net.SocketAppender: boolean advertiseViaMulticastDNS>;

        if $z0 == 0 goto label1;

        $r2 = new org.apache.log4j.net.ZeroConfSupport;

        $i1 = r0.<org.apache.log4j.net.SocketAppender: int port>;

        $r3 = virtualinvoke r0.<org.apache.log4j.net.SocketAppender: java.lang.String getName()>();

        specialinvoke $r2.<org.apache.log4j.net.ZeroConfSupport: void <init>(java.lang.String,int,java.lang.String)>("_log4j_obj_tcpconnect_appender.local.", $i1, $r3);

        r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.ZeroConfSupport zeroConf> = $r2;

        $r4 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.ZeroConfSupport zeroConf>;

        virtualinvoke $r4.<org.apache.log4j.net.ZeroConfSupport: void advertise()>();

     label1:
        $r1 = r0.<org.apache.log4j.net.SocketAppender: java.net.InetAddress address>;

        $i0 = r0.<org.apache.log4j.net.SocketAppender: int port>;

        virtualinvoke r0.<org.apache.log4j.net.SocketAppender: void connect(java.net.InetAddress,int)>($r1, $i0);

        return;
    }

    public synchronized void close()
    {
        org.apache.log4j.net.SocketAppender r0;
        boolean $z0, $z1;
        org.apache.log4j.net.ZeroConfSupport $r1;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $z0 = r0.<org.apache.log4j.net.SocketAppender: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.log4j.net.SocketAppender: boolean closed> = 1;

        $z1 = r0.<org.apache.log4j.net.SocketAppender: boolean advertiseViaMulticastDNS>;

        if $z1 == 0 goto label2;

        $r1 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.ZeroConfSupport zeroConf>;

        virtualinvoke $r1.<org.apache.log4j.net.ZeroConfSupport: void unadvertise()>();

     label2:
        virtualinvoke r0.<org.apache.log4j.net.SocketAppender: void cleanUp()>();

        return;
    }

    public void cleanUp()
    {
        org.apache.log4j.net.SocketAppender r0;
        java.io.ObjectOutputStream $r2, $r4;
        org.apache.log4j.net.SocketAppender$Connector $r3, $r7;
        java.io.IOException $r5;
        boolean $z0;
        java.lang.Thread $r6;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $r2 = r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos>;

        if $r2 == null goto label6;

     label1:
        $r4 = r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos>;

        virtualinvoke $r4.<java.io.ObjectOutputStream: void close()>();

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $z0 = $r5 instanceof java.io.InterruptedIOException;

        if $z0 == 0 goto label4;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label4:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("Could not close oos.", $r5);

     label5:
        r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos> = null;

     label6:
        $r7 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector>;

        if $r7 == null goto label7;

        $r3 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector>;

        $r3.<org.apache.log4j.net.SocketAppender$Connector: boolean interrupted> = 1;

        r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector> = null;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void connect(java.net.InetAddress, int)
    {
        org.apache.log4j.net.SocketAppender r0;
        java.net.InetAddress r1, $r3;
        int i0, $i1;
        java.io.ObjectOutputStream $r4;
        java.net.Socket $r5;
        java.io.OutputStream $r6;
        java.io.IOException $r7;
        boolean $z0;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r14, $r16, $r18;
        java.lang.String $r9, $r13, $r17, r20, r21;
        org.apache.log4j.spi.ErrorHandler $r15;
        java.lang.Thread $r19;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r3 = r0.<org.apache.log4j.net.SocketAppender: java.net.InetAddress address>;

        if $r3 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.log4j.net.SocketAppender: void cleanUp()>();

        $r4 = new java.io.ObjectOutputStream;

        $r5 = new java.net.Socket;

        specialinvoke $r5.<java.net.Socket: void <init>(java.net.InetAddress,int)>(r1, i0);

        $r6 = virtualinvoke $r5.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r4.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r6);

        r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos> = $r4;

     label2:
        goto label7;

     label3:
        $r7 := @caughtexception;

        $z0 = $r7 instanceof java.io.InterruptedIOException;

        if $z0 == 0 goto label4;

        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r19.<java.lang.Thread: void interrupt()>();

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to remote log4j server at [");

        $r9 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        r20 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r0.<org.apache.log4j.net.SocketAppender: int reconnectionDelay>;

        if $i1 <= 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" We will try again later.");

        r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.log4j.net.SocketAppender: void fireConnector()>();

        goto label6;

     label5:
        $r12 = new java.lang.StringBuilder;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" We are not retrying.");

        r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.spi.ErrorHandler errorHandler>;

        interfaceinvoke $r15.<org.apache.log4j.spi.ErrorHandler: void error(java.lang.String,java.lang.Exception,int)>(r21, $r7, 0);

     label6:
        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>(r21);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void append(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.net.SocketAppender r0;
        org.apache.log4j.spi.LoggingEvent r1;
        java.net.InetAddress $r3;
        java.io.ObjectOutputStream $r4, $r10, $r11, $r12;
        boolean $z0, $z1;
        java.lang.String $r5, $r13, $r18, $r21, $r25;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r16, $r19, $r20, $r23, $r24;
        org.apache.log4j.spi.ErrorHandler $r17, $r26;
        java.io.IOException $r22;
        java.lang.Thread $r27;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        if r1 != null goto label01;

        return;

     label01:
        $r3 = r0.<org.apache.log4j.net.SocketAppender: java.net.InetAddress address>;

        if $r3 != null goto label02;

        $r17 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.spi.ErrorHandler errorHandler>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("No remote host is set for SocketAppender named \"");

        $r18 = r0.<org.apache.log4j.net.SocketAppender: java.lang.String name>;

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.log4j.spi.ErrorHandler: void error(java.lang.String)>($r21);

        return;

     label02:
        $r4 = r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos>;

        if $r4 == null goto label10;

     label03:
        $z0 = r0.<org.apache.log4j.net.SocketAppender: boolean locationInfo>;

        if $z0 == 0 goto label04;

        virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

     label04:
        $r5 = r0.<org.apache.log4j.net.SocketAppender: java.lang.String application>;

        if $r5 == null goto label05;

        $r13 = r0.<org.apache.log4j.net.SocketAppender: java.lang.String application>;

        virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: void setProperty(java.lang.String,java.lang.String)>("application", $r13);

     label05:
        virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getNDC()>();

        virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: void getMDCCopy()>();

        virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getRenderedMessage()>();

        virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String[] getThrowableStrRep()>();

        $r10 = r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos>;

        virtualinvoke $r10.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        $r11 = r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos>;

        virtualinvoke $r11.<java.io.ObjectOutputStream: void flush()>();

        $i0 = r0.<org.apache.log4j.net.SocketAppender: int counter>;

        $i1 = $i0 + 1;

        r0.<org.apache.log4j.net.SocketAppender: int counter> = $i1;

        if $i1 < 1 goto label10;

        r0.<org.apache.log4j.net.SocketAppender: int counter> = 0;

        $r12 = r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos>;

        virtualinvoke $r12.<java.io.ObjectOutputStream: void reset()>();

     label06:
        goto label10;

     label07:
        $r22 := @caughtexception;

        $z1 = $r22 instanceof java.io.InterruptedIOException;

        if $z1 == 0 goto label08;

        $r27 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r27.<java.lang.Thread: void interrupt()>();

     label08:
        r0.<org.apache.log4j.net.SocketAppender: java.io.ObjectOutputStream oos> = null;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Detected problem with connection: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r25);

        $i2 = r0.<org.apache.log4j.net.SocketAppender: int reconnectionDelay>;

        if $i2 <= 0 goto label09;

        virtualinvoke r0.<org.apache.log4j.net.SocketAppender: void fireConnector()>();

        goto label10;

     label09:
        $r26 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.spi.ErrorHandler errorHandler>;

        interfaceinvoke $r26.<org.apache.log4j.spi.ErrorHandler: void error(java.lang.String,java.lang.Exception,int)>("Detected problem with connection, not reconnecting.", $r22, 0);

     label10:
        return;

        catch java.io.IOException from label03 to label06 with label07;
    }

    public void setAdvertiseViaMulticastDNS(boolean)
    {
        org.apache.log4j.net.SocketAppender r0;
        boolean z0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        z0 := @parameter0: boolean;

        r0.<org.apache.log4j.net.SocketAppender: boolean advertiseViaMulticastDNS> = z0;

        return;
    }

    public boolean isAdvertiseViaMulticastDNS()
    {
        org.apache.log4j.net.SocketAppender r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $z0 = r0.<org.apache.log4j.net.SocketAppender: boolean advertiseViaMulticastDNS>;

        return $z0;
    }

    void fireConnector()
    {
        org.apache.log4j.net.SocketAppender r0;
        org.apache.log4j.net.SocketAppender$Connector $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $r1 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector>;

        if $r1 != null goto label1;

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Starting a new connector thread.");

        $r2 = new org.apache.log4j.net.SocketAppender$Connector;

        specialinvoke $r2.<org.apache.log4j.net.SocketAppender$Connector: void <init>(org.apache.log4j.net.SocketAppender)>(r0);

        r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector> = $r2;

        $r3 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector>;

        virtualinvoke $r3.<org.apache.log4j.net.SocketAppender$Connector: void setDaemon(boolean)>(1);

        $r4 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector>;

        virtualinvoke $r4.<org.apache.log4j.net.SocketAppender$Connector: void setPriority(int)>(1);

        $r5 = r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector>;

        virtualinvoke $r5.<org.apache.log4j.net.SocketAppender$Connector: void start()>();

     label1:
        return;
    }

    static java.net.InetAddress getAddressByName(java.lang.String)
    {
        java.lang.String r0, $r8;
        java.net.InetAddress $r2;
        java.lang.Exception $r3;
        boolean $z0, $z1;
        java.lang.Thread $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $z0 = $r3 instanceof java.io.InterruptedIOException;

        if $z0 != 0 goto label4;

        $z1 = $r3 instanceof java.lang.InterruptedException;

        if $z1 == 0 goto label5;

     label4:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find address of [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r8, $r3);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean requiresLayout()
    {
        org.apache.log4j.net.SocketAppender r0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        return 0;
    }

    public void setRemoteHost(java.lang.String)
    {
        org.apache.log4j.net.SocketAppender r0;
        java.lang.String r1;
        java.net.InetAddress $r2;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.log4j.net.SocketAppender: java.net.InetAddress getAddressByName(java.lang.String)>(r1);

        r0.<org.apache.log4j.net.SocketAppender: java.net.InetAddress address> = $r2;

        r0.<org.apache.log4j.net.SocketAppender: java.lang.String remoteHost> = r1;

        return;
    }

    public java.lang.String getRemoteHost()
    {
        org.apache.log4j.net.SocketAppender r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $r1 = r0.<org.apache.log4j.net.SocketAppender: java.lang.String remoteHost>;

        return $r1;
    }

    public void setPort(int)
    {
        org.apache.log4j.net.SocketAppender r0;
        int i0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        i0 := @parameter0: int;

        r0.<org.apache.log4j.net.SocketAppender: int port> = i0;

        return;
    }

    public int getPort()
    {
        org.apache.log4j.net.SocketAppender r0;
        int $i0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $i0 = r0.<org.apache.log4j.net.SocketAppender: int port>;

        return $i0;
    }

    public void setLocationInfo(boolean)
    {
        org.apache.log4j.net.SocketAppender r0;
        boolean z0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        z0 := @parameter0: boolean;

        r0.<org.apache.log4j.net.SocketAppender: boolean locationInfo> = z0;

        return;
    }

    public boolean getLocationInfo()
    {
        org.apache.log4j.net.SocketAppender r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $z0 = r0.<org.apache.log4j.net.SocketAppender: boolean locationInfo>;

        return $z0;
    }

    public void setApplication(java.lang.String)
    {
        org.apache.log4j.net.SocketAppender r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.log4j.net.SocketAppender: java.lang.String application> = r1;

        return;
    }

    public java.lang.String getApplication()
    {
        org.apache.log4j.net.SocketAppender r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $r1 = r0.<org.apache.log4j.net.SocketAppender: java.lang.String application>;

        return $r1;
    }

    public void setReconnectionDelay(int)
    {
        org.apache.log4j.net.SocketAppender r0;
        int i0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        i0 := @parameter0: int;

        r0.<org.apache.log4j.net.SocketAppender: int reconnectionDelay> = i0;

        return;
    }

    public int getReconnectionDelay()
    {
        org.apache.log4j.net.SocketAppender r0;
        int $i0;

        r0 := @this: org.apache.log4j.net.SocketAppender;

        $i0 = r0.<org.apache.log4j.net.SocketAppender: int reconnectionDelay>;

        return $i0;
    }

    static void access$0(org.apache.log4j.net.SocketAppender, org.apache.log4j.net.SocketAppender$Connector)
    {
        org.apache.log4j.net.SocketAppender r0;
        org.apache.log4j.net.SocketAppender$Connector r1;

        r0 := @parameter0: org.apache.log4j.net.SocketAppender;

        r1 := @parameter1: org.apache.log4j.net.SocketAppender$Connector;

        r0.<org.apache.log4j.net.SocketAppender: org.apache.log4j.net.SocketAppender$Connector connector> = r1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.net.SocketAppender: int RESET_FREQUENCY> = 1;

        <org.apache.log4j.net.SocketAppender: java.lang.String ZONE> = "_log4j_obj_tcpconnect_appender.local.";

        <org.apache.log4j.net.SocketAppender: int DEFAULT_RECONNECTION_DELAY> = 30000;

        <org.apache.log4j.net.SocketAppender: int DEFAULT_PORT> = 4560;

        return;
    }
}
