public class org.apache.log4j.net.SimpleSocketServer extends java.lang.Object
{
    static org.apache.log4j.Logger cat;
    static int port;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/net/SimpleSocketServer");

        <org.apache.log4j.net.SimpleSocketServer: org.apache.log4j.Logger cat> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.log4j.net.SimpleSocketServer r0;

        r0 := @this: org.apache.log4j.net.SimpleSocketServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.net.Socket r1;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r4, $r13, $r15, $r21, $r22;
        org.apache.log4j.Logger $r3, $r11, $r12, $r17;
        java.lang.String $r5, $r7, $r8, $r16, $r23;
        java.net.ServerSocket $r6;
        java.lang.Exception $r9;
        java.net.InetAddress $r14;
        java.lang.Thread $r18;
        org.apache.log4j.net.SocketNode $r19;
        org.apache.log4j.spi.LoggerRepository $r20;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 2 goto label1;

        $r8 = r0[0];

        $r7 = r0[1];

        staticinvoke <org.apache.log4j.net.SimpleSocketServer: void init(java.lang.String,java.lang.String)>($r8, $r7);

        goto label2;

     label1:
        staticinvoke <org.apache.log4j.net.SimpleSocketServer: void usage(java.lang.String)>("Wrong number of arguments.");

     label2:
        $r3 = <org.apache.log4j.net.SimpleSocketServer: org.apache.log4j.Logger cat>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Listening on port ");

        $i1 = <org.apache.log4j.net.SimpleSocketServer: int port>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.log4j.Logger: void info(java.lang.Object)>($r5);

        $r6 = new java.net.ServerSocket;

        $i2 = <org.apache.log4j.net.SimpleSocketServer: int port>;

        specialinvoke $r6.<java.net.ServerSocket: void <init>(int)>($i2);

     label3:
        $r11 = <org.apache.log4j.net.SimpleSocketServer: org.apache.log4j.Logger cat>;

        virtualinvoke $r11.<org.apache.log4j.Logger: void info(java.lang.Object)>("Waiting to accept a new client.");

        r1 = virtualinvoke $r6.<java.net.ServerSocket: java.net.Socket accept()>();

        $r12 = <org.apache.log4j.net.SimpleSocketServer: org.apache.log4j.Logger cat>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Connected to client at ");

        $r14 = virtualinvoke r1.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.apache.log4j.Logger: void info(java.lang.Object)>($r16);

        $r17 = <org.apache.log4j.net.SimpleSocketServer: org.apache.log4j.Logger cat>;

        virtualinvoke $r17.<org.apache.log4j.Logger: void info(java.lang.Object)>("Starting new socket node.");

        $r18 = new java.lang.Thread;

        $r19 = new org.apache.log4j.net.SocketNode;

        $r20 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        specialinvoke $r19.<org.apache.log4j.net.SocketNode: void <init>(java.net.Socket,org.apache.log4j.spi.LoggerRepository)>(r1, $r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("SimpleSocketServer-");

        $i3 = <org.apache.log4j.net.SimpleSocketServer: int port>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r19, $r23);

        virtualinvoke $r18.<java.lang.Thread: void start()>();

        goto label3;

     label4:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        return;

        catch java.lang.Exception from label2 to label4 with label4;
    }

    static void usage(java.lang.String)
    {
        java.lang.String r0, $r5, $r8;
        java.io.PrintStream $r1, $r3;
        java.lang.StringBuilder $r2, $r6, $r7;
        java.lang.Class $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Usage: java ");

        $r4 = class "org/apache/log4j/net/SimpleSocketServer";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port configFile");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    static void init(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r7;
        int $i0;
        boolean $z0;
        java.lang.NumberFormatException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        <org.apache.log4j.net.SimpleSocketServer: int port> = $i0;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.NumberFormatException: void printStackTrace()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not interpret port number [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.net.SimpleSocketServer: void usage(java.lang.String)>($r7);

     label4:
        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label5;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void configure(java.lang.String)>(r1);

        goto label6;

     label5:
        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>(r1);

     label6:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
}
