public class org.apache.log4j.helpers.CyclicBufferTestCase extends junit.framework.TestCase
{
    static org.apache.log4j.Logger cat;
    static int MAX;
    static org.apache.log4j.spi.LoggingEvent[] e;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;
        int $i0;
        org.apache.log4j.spi.LoggingEvent[] $r1;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("x");

        <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.Logger cat> = $r0;

        <org.apache.log4j.helpers.CyclicBufferTestCase: int MAX> = 1000;

        $i0 = <org.apache.log4j.helpers.CyclicBufferTestCase: int MAX>;

        $r1 = newarray (org.apache.log4j.spi.LoggingEvent)[$i0];

        <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.helpers.CyclicBufferTestCase r0;
        java.lang.String r1, $r8;
        int $i0, i1;
        org.apache.log4j.spi.LoggingEvent $r2;
        java.lang.StringBuilder $r3, $r7;
        org.apache.log4j.spi.LoggingEvent[] $r4;
        org.apache.log4j.Logger $r5;
        org.apache.log4j.Level $r6;

        r0 := @this: org.apache.log4j.helpers.CyclicBufferTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        i1 = 0;

        goto label2;

     label1:
        $r4 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r2 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.Logger cat>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("e");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("", $r5, $r6, $r8, null);

        $r4[i1] = $r2;

        i1 = i1 + 1;

     label2:
        $i0 = <org.apache.log4j.helpers.CyclicBufferTestCase: int MAX>;

        if i1 < $i0 goto label1;

        return;
    }

    public void setUp()
    {
        org.apache.log4j.helpers.CyclicBufferTestCase r0;

        r0 := @this: org.apache.log4j.helpers.CyclicBufferTestCase;

        return;
    }

    public void test0()
    {
        org.apache.log4j.helpers.CyclicBufferTestCase r0;
        org.apache.log4j.helpers.CyclicBuffer $r1, $r8;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.log4j.spi.LoggingEvent[] $r2, $r5, $r9, $r11, $r14, $r17;
        org.apache.log4j.spi.LoggingEvent $r3, $r4, $r6, $r7, $r10, $r12, $r13, $r15, $r16, $r18, $r19;

        r0 := @this: org.apache.log4j.helpers.CyclicBufferTestCase;

        $r1 = new org.apache.log4j.helpers.CyclicBuffer;

        specialinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: void <init>(int)>(2);

        $i1 = virtualinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: int getMaxSize()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i1, 2);

        $r2 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r3 = $r2[0];

        virtualinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: void add(org.apache.log4j.spi.LoggingEvent)>($r3);

        $i2 = virtualinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: int length()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i2, 1);

        $r4 = virtualinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get()>();

        $r5 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r6 = $r5[0];

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        $i3 = virtualinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: int length()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i3, 0);

        $r7 = virtualinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertNull(java.lang.Object)>($r7);

        $i4 = virtualinvoke $r1.<org.apache.log4j.helpers.CyclicBuffer: int length()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i4, 0);

        $r8 = new org.apache.log4j.helpers.CyclicBuffer;

        specialinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: void <init>(int)>(2);

        $r9 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r10 = $r9[0];

        virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: void add(org.apache.log4j.spi.LoggingEvent)>($r10);

        $r11 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r12 = $r11[1];

        virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: void add(org.apache.log4j.spi.LoggingEvent)>($r12);

        $i5 = virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: int length()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i5, 2);

        $r13 = virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get()>();

        $r14 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r15 = $r14[0];

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r15);

        $i6 = virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: int length()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i6, 1);

        $r16 = virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get()>();

        $r17 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r18 = $r17[1];

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r18);

        $i7 = virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: int length()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i7, 0);

        $r19 = virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertNull(java.lang.Object)>($r19);

        $i8 = virtualinvoke $r8.<org.apache.log4j.helpers.CyclicBuffer: int length()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i8, 0);

        return;
    }

    public void test1()
    {
        org.apache.log4j.helpers.CyclicBufferTestCase r0;
        int i0;

        r0 := @this: org.apache.log4j.helpers.CyclicBufferTestCase;

        i0 = 1;

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.log4j.helpers.CyclicBufferTestCase: void doTest1(int)>(i0);

        i0 = i0 * 2;

     label2:
        if i0 <= 128 goto label1;

        return;
    }

    void doTest1(int)
    {
        org.apache.log4j.helpers.CyclicBufferTestCase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12, i13;
        org.apache.log4j.helpers.CyclicBuffer $r2;
        org.apache.log4j.spi.LoggingEvent $r3, $r5, $r6, $r8, $r9, $r10;
        org.apache.log4j.spi.LoggingEvent[] $r4, $r7;

        r0 := @this: org.apache.log4j.helpers.CyclicBufferTestCase;

        i0 := @parameter0: int;

        $r2 = new org.apache.log4j.helpers.CyclicBuffer;

        specialinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: void <init>(int)>(i0);

        $i2 = virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: int getMaxSize()>();

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(int,int)>($i2, i0);

        $i3 = i0 + 10;

        i10 = neg $i3;

        goto label2;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get(int)>(i10);

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertNull(java.lang.Object)>($r3);

        i10 = i10 + 1;

     label2:
        $i4 = i0 + 10;

        if i10 < $i4 goto label1;

        i11 = 0;

        goto label8;

     label3:
        $r4 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r5 = $r4[i11];

        virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: void add(org.apache.log4j.spi.LoggingEvent)>($r5);

        $i6 = i0 - 1;

        if i11 >= $i6 goto label4;

        $i12 = i11;

        goto label5;

     label4:
        $i12 = i0 - 1;

     label5:
        i1 = $i12;

        i13 = $i12;

        goto label7;

     label6:
        $r6 = virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get(int)>(i13);

        $r7 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $i7 = i1 - i13;

        $i8 = i11 - $i7;

        $r8 = $r7[$i8];

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        i13 = i13 + -1;

     label7:
        if i13 >= 0 goto label6;

        $r9 = virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get(int)>(-1);

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertNull(java.lang.Object)>($r9);

        $i9 = i1 + 1;

        $r10 = virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get(int)>($i9);

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertNull(java.lang.Object)>($r10);

        i11 = i11 + 1;

     label8:
        $i5 = <org.apache.log4j.helpers.CyclicBufferTestCase: int MAX>;

        if i11 < $i5 goto label3;

        return;
    }

    public void testResize()
    {
        org.apache.log4j.helpers.CyclicBufferTestCase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;

        r0 := @this: org.apache.log4j.helpers.CyclicBufferTestCase;

        i12 = 1;

        goto label2;

     label1:
        $i0 = i12 / 2;

        $i3 = $i0 + 1;

        $i1 = i12 / 2;

        $i2 = $i1 + 1;

        virtualinvoke r0.<org.apache.log4j.helpers.CyclicBufferTestCase: void doTestResize(int,int,int)>(i12, $i3, $i2);

        $i4 = i12 / 2;

        $i6 = $i4 + 1;

        $i5 = i12 + 10;

        virtualinvoke r0.<org.apache.log4j.helpers.CyclicBufferTestCase: void doTestResize(int,int,int)>(i12, $i6, $i5);

        $i9 = i12 + 10;

        $i7 = i12 / 2;

        $i8 = $i7 + 1;

        virtualinvoke r0.<org.apache.log4j.helpers.CyclicBufferTestCase: void doTestResize(int,int,int)>(i12, $i9, $i8);

        $i11 = i12 + 10;

        $i10 = i12 + 10;

        virtualinvoke r0.<org.apache.log4j.helpers.CyclicBufferTestCase: void doTestResize(int,int,int)>(i12, $i11, $i10);

        i12 = i12 * 2;

     label2:
        if i12 <= 128 goto label1;

        return;
    }

    void doTestResize(int, int, int)
    {
        org.apache.log4j.helpers.CyclicBufferTestCase r0;
        int i0, i1, i2, $i3, i4, i5, $i6, $i8, i9, i10;
        org.apache.log4j.helpers.CyclicBuffer $r2;
        org.apache.log4j.spi.LoggingEvent[] $r3, $r6;
        org.apache.log4j.spi.LoggingEvent $r4, $r5, $r7;

        r0 := @this: org.apache.log4j.helpers.CyclicBufferTestCase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = new org.apache.log4j.helpers.CyclicBuffer;

        specialinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: void <init>(int)>(i0);

        i4 = 0;

        goto label2;

     label1:
        $r3 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $r4 = $r3[i4];

        virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: void add(org.apache.log4j.spi.LoggingEvent)>($r4);

        i4 = i4 + 1;

     label2:
        if i4 < i1 goto label1;

        virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: void resize(int)>(i2);

        i5 = i1 - i0;

        if i5 >= 0 goto label3;

        i5 = 0;

     label3:
        if i2 >= i1 goto label4;

        $i6 = i2;

        goto label5;

     label4:
        $i6 = i1;

     label5:
        if $i6 >= i0 goto label6;

        $i8 = $i6;

        goto label7;

     label6:
        $i8 = i0;

     label7:
        i9 = $i8;

        i10 = 0;

        goto label9;

     label8:
        $r5 = virtualinvoke $r2.<org.apache.log4j.helpers.CyclicBuffer: org.apache.log4j.spi.LoggingEvent get(int)>(i10);

        $r6 = <org.apache.log4j.helpers.CyclicBufferTestCase: org.apache.log4j.spi.LoggingEvent[] e>;

        $i3 = i5 + i10;

        $r7 = $r6[$i3];

        staticinvoke <org.apache.log4j.helpers.CyclicBufferTestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        i10 = i10 + 1;

     label9:
        if i10 < i9 goto label8;

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r1;
        org.apache.log4j.helpers.CyclicBufferTestCase $r2, $r3, $r4;

        $r1 = new junit.framework.TestSuite;

        specialinvoke $r1.<junit.framework.TestSuite: void <init>()>();

        $r2 = new org.apache.log4j.helpers.CyclicBufferTestCase;

        specialinvoke $r2.<org.apache.log4j.helpers.CyclicBufferTestCase: void <init>(java.lang.String)>("test0");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        $r3 = new org.apache.log4j.helpers.CyclicBufferTestCase;

        specialinvoke $r3.<org.apache.log4j.helpers.CyclicBufferTestCase: void <init>(java.lang.String)>("test1");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r3);

        $r4 = new org.apache.log4j.helpers.CyclicBufferTestCase;

        specialinvoke $r4.<org.apache.log4j.helpers.CyclicBufferTestCase: void <init>(java.lang.String)>("testResize");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r4);

        return $r1;
    }
}
