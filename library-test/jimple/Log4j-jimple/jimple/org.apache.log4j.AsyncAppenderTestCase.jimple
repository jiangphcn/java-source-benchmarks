public class org.apache.log4j.AsyncAppenderTestCase extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.AsyncAppenderTestCase r0;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.AsyncAppenderTestCase r0;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        staticinvoke <org.apache.log4j.LogManager: void shutdown()>();

        return;
    }

    public void closeTest() throws java.lang.Exception
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        org.apache.log4j.Logger r1;
        java.util.Vector r4;
        org.apache.log4j.VectorAppender $r5;
        org.apache.log4j.AsyncAppender $r6;
        int $i0;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        $r5 = new org.apache.log4j.VectorAppender;

        specialinvoke $r5.<org.apache.log4j.VectorAppender: void <init>()>();

        $r6 = new org.apache.log4j.AsyncAppender;

        specialinvoke $r6.<org.apache.log4j.AsyncAppender: void <init>()>();

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void setName(java.lang.String)>("async-CloseTest");

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void addAppender(org.apache.log4j.Appender)>($r5);

        virtualinvoke r1.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r6);

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("m1");

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void close()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("m2");

        r4 = virtualinvoke $r5.<org.apache.log4j.VectorAppender: java.util.Vector getVector()>();

        $i0 = virtualinvoke r4.<java.util.Vector: int size()>();

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(int,int)>($i0, 1);

        return;
    }

    public void test2()
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        org.apache.log4j.Logger r1;
        java.util.Vector r4;
        org.apache.log4j.VectorAppender $r5;
        org.apache.log4j.AsyncAppender $r6;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        $r5 = new org.apache.log4j.VectorAppender;

        specialinvoke $r5.<org.apache.log4j.VectorAppender: void <init>()>();

        $r6 = new org.apache.log4j.AsyncAppender;

        specialinvoke $r6.<org.apache.log4j.AsyncAppender: void <init>()>();

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void setName(java.lang.String)>("async-test2");

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void addAppender(org.apache.log4j.Appender)>($r5);

        virtualinvoke r1.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r6);

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("m1");

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void close()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("m2");

        r4 = virtualinvoke $r5.<org.apache.log4j.VectorAppender: java.util.Vector getVector()>();

        $i0 = virtualinvoke r4.<java.util.Vector: int size()>();

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(int,int)>($i0, 1);

        $z0 = virtualinvoke $r5.<org.apache.log4j.VectorAppender: boolean isClosed()>();

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void test3()
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.VectorAppender $r4;
        org.apache.log4j.AsyncAppender $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;
        java.io.PrintStream $r9, $r10;
        int $i1, i2;
        boolean $z0;
        java.util.Vector r11;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        $r4 = new org.apache.log4j.VectorAppender;

        specialinvoke $r4.<org.apache.log4j.VectorAppender: void <init>()>();

        $r5 = new org.apache.log4j.AsyncAppender;

        specialinvoke $r5.<org.apache.log4j.AsyncAppender: void <init>()>();

        virtualinvoke $r5.<org.apache.log4j.AsyncAppender: void setName(java.lang.String)>("async-test3");

        virtualinvoke $r5.<org.apache.log4j.AsyncAppender: void addAppender(org.apache.log4j.Appender)>($r4);

        virtualinvoke r1.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r5);

        i2 = 0;

        goto label2;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("message");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r8);

        i2 = i2 + 1;

     label2:
        if i2 < 200 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Done loop.");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void flush()>();

        virtualinvoke $r5.<org.apache.log4j.AsyncAppender: void close()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>("m2");

        r11 = virtualinvoke $r4.<org.apache.log4j.VectorAppender: java.util.Vector getVector()>();

        $i1 = virtualinvoke r11.<java.util.Vector: int size()>();

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(int,int)>($i1, 200);

        $z0 = virtualinvoke $r4.<org.apache.log4j.VectorAppender: boolean isClosed()>();

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testBadAppender() throws java.lang.Exception
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        org.apache.log4j.Logger r3;
        org.apache.log4j.AsyncAppenderTestCase$NullPointerAppender $r5;
        org.apache.log4j.AsyncAppender $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        $r5 = new org.apache.log4j.AsyncAppenderTestCase$NullPointerAppender;

        specialinvoke $r5.<org.apache.log4j.AsyncAppenderTestCase$NullPointerAppender: void <init>()>();

        $r6 = new org.apache.log4j.AsyncAppender;

        specialinvoke $r6.<org.apache.log4j.AsyncAppender: void <init>()>();

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void addAppender(org.apache.log4j.Appender)>($r5);

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void setBufferSize(int)>(5);

        virtualinvoke $r6.<org.apache.log4j.AsyncAppender: void activateOptions()>();

        r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r3.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r5);

     label1:
        virtualinvoke r3.<org.apache.log4j.Logger: void info(java.lang.Object)>("Message");

        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

        virtualinvoke r3.<org.apache.log4j.Logger: void info(java.lang.Object)>("Message");

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void fail(java.lang.String)>("Should have thrown exception");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testLocationInfoTrue()
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        org.apache.log4j.Logger r3;
        org.apache.log4j.spi.LoggingEvent r5, r6;
        java.lang.String r8, r9, $r18, $r20, $r21, $r22;
        org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender $r10;
        org.apache.log4j.AsyncAppender $r11;
        org.apache.log4j.AsyncAppenderTestCase$Greeter $r12;
        java.lang.Object $r13, $r14, $r15;
        int $i0, $i1, $i2;
        org.apache.log4j.PatternLayout $r16;
        java.lang.Class $r17, $r19;
        java.lang.Throwable $r23;
        java.util.Vector r25;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        $r10 = new org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender;

        specialinvoke $r10.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: void <init>()>();

        $r11 = new org.apache.log4j.AsyncAppender;

        specialinvoke $r11.<org.apache.log4j.AsyncAppender: void <init>()>();

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void addAppender(org.apache.log4j.Appender)>($r10);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void setBufferSize(int)>(5);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void setLocationInfo(boolean)>(1);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void setBlocking(boolean)>(0);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void activateOptions()>();

        r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r3.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r11);

        $r12 = new org.apache.log4j.AsyncAppenderTestCase$Greeter;

        specialinvoke $r12.<org.apache.log4j.AsyncAppenderTestCase$Greeter: void <init>(org.apache.log4j.Logger,int)>(r3, 100);

        $r13 = virtualinvoke $r10.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: java.lang.Object getMonitor()>();

        entermonitor $r13;

     label1:
        virtualinvoke $r12.<org.apache.log4j.AsyncAppenderTestCase$Greeter: void run()>();

        virtualinvoke r3.<org.apache.log4j.Logger: void error(java.lang.Object)>("That\'s all folks.");

        exitmonitor $r13;

     label2:
        goto label5;

     label3:
        $r23 := @caughtexception;

        exitmonitor $r13;

     label4:
        throw $r23;

     label5:
        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void close()>();

        r25 = virtualinvoke $r10.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: java.util.Vector getVector()>();

        $r14 = virtualinvoke r25.<java.util.Vector: java.lang.Object get(int)>(0);

        r5 = (org.apache.log4j.spi.LoggingEvent) $r14;

        $i0 = virtualinvoke r25.<java.util.Vector: int size()>();

        $i1 = $i0 - 1;

        $r15 = virtualinvoke r25.<java.util.Vector: java.lang.Object get(int)>($i1);

        r6 = (org.apache.log4j.spi.LoggingEvent) $r15;

        $r16 = new org.apache.log4j.PatternLayout;

        specialinvoke $r16.<org.apache.log4j.PatternLayout: void <init>()>();

        virtualinvoke $r16.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%C:%L %m%n");

        virtualinvoke $r16.<org.apache.log4j.PatternLayout: void activateOptions()>();

        r8 = virtualinvoke $r16.<org.apache.log4j.PatternLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>(r5);

        $r17 = class "org/apache/log4j/AsyncAppenderTestCase";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r19 = class "org/apache/log4j/AsyncAppenderTestCase";

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $i2 = virtualinvoke $r20.<java.lang.String: int length()>();

        $r21 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(java.lang.String,java.lang.String)>($r18, $r21);

        r9 = virtualinvoke $r16.<org.apache.log4j.PatternLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>(r6);

        $r22 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(java.lang.String,java.lang.String)>("?:? ", $r22);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testLocationInfoFalse()
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        org.apache.log4j.Logger r3;
        org.apache.log4j.spi.LoggingEvent r5, r6;
        java.lang.String r8, r9, $r17, $r18;
        org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender $r10;
        org.apache.log4j.AsyncAppender $r11;
        org.apache.log4j.AsyncAppenderTestCase$Greeter $r12;
        java.lang.Object $r13, $r14, $r15;
        int $i0, $i1;
        org.apache.log4j.PatternLayout $r16;
        java.lang.Throwable $r19;
        java.util.Vector r21;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        $r10 = new org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender;

        specialinvoke $r10.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: void <init>()>();

        $r11 = new org.apache.log4j.AsyncAppender;

        specialinvoke $r11.<org.apache.log4j.AsyncAppender: void <init>()>();

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void addAppender(org.apache.log4j.Appender)>($r10);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void setBufferSize(int)>(5);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void setLocationInfo(boolean)>(0);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void setBlocking(boolean)>(0);

        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void activateOptions()>();

        r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r3.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r11);

        $r12 = new org.apache.log4j.AsyncAppenderTestCase$Greeter;

        specialinvoke $r12.<org.apache.log4j.AsyncAppenderTestCase$Greeter: void <init>(org.apache.log4j.Logger,int)>(r3, 100);

        $r13 = virtualinvoke $r10.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: java.lang.Object getMonitor()>();

        entermonitor $r13;

     label1:
        virtualinvoke $r12.<org.apache.log4j.AsyncAppenderTestCase$Greeter: void run()>();

        virtualinvoke r3.<org.apache.log4j.Logger: void error(java.lang.Object)>("That\'s all folks.");

        exitmonitor $r13;

     label2:
        goto label5;

     label3:
        $r19 := @caughtexception;

        exitmonitor $r13;

     label4:
        throw $r19;

     label5:
        virtualinvoke $r11.<org.apache.log4j.AsyncAppender: void close()>();

        r21 = virtualinvoke $r10.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: java.util.Vector getVector()>();

        $r14 = virtualinvoke r21.<java.util.Vector: java.lang.Object get(int)>(0);

        r5 = (org.apache.log4j.spi.LoggingEvent) $r14;

        $i0 = virtualinvoke r21.<java.util.Vector: int size()>();

        $i1 = $i0 - 1;

        $r15 = virtualinvoke r21.<java.util.Vector: java.lang.Object get(int)>($i1);

        r6 = (org.apache.log4j.spi.LoggingEvent) $r15;

        $r16 = new org.apache.log4j.PatternLayout;

        specialinvoke $r16.<org.apache.log4j.PatternLayout: void <init>()>();

        virtualinvoke $r16.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%C:%L %m%n");

        virtualinvoke $r16.<org.apache.log4j.PatternLayout: void activateOptions()>();

        r8 = virtualinvoke $r16.<org.apache.log4j.PatternLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>(r5);

        $r17 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(java.lang.String,java.lang.String)>("?:? ", $r17);

        r9 = virtualinvoke $r16.<org.apache.log4j.PatternLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>(r6);

        $r18 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(java.lang.String,java.lang.String)>("?:? ", $r18);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testMutableMessage()
    {
        org.apache.log4j.AsyncAppenderTestCase r0;
        org.apache.log4j.Logger r3;
        org.apache.log4j.spi.LoggingEvent r5;
        java.lang.String r7;
        org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender $r8;
        org.apache.log4j.AsyncAppender $r9;
        java.lang.StringBuffer $r10;
        java.lang.Object $r11, $r13;
        org.apache.log4j.PatternLayout $r14;
        java.lang.Throwable $r15;
        java.util.Vector r17;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase;

        $r8 = new org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender;

        specialinvoke $r8.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: void <init>()>();

        $r9 = new org.apache.log4j.AsyncAppender;

        specialinvoke $r9.<org.apache.log4j.AsyncAppender: void <init>()>();

        virtualinvoke $r9.<org.apache.log4j.AsyncAppender: void addAppender(org.apache.log4j.Appender)>($r8);

        virtualinvoke $r9.<org.apache.log4j.AsyncAppender: void setBufferSize(int)>(5);

        virtualinvoke $r9.<org.apache.log4j.AsyncAppender: void setLocationInfo(boolean)>(0);

        virtualinvoke $r9.<org.apache.log4j.AsyncAppender: void activateOptions()>();

        r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r3.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r9);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(java.lang.String)>("Hello");

        $r11 = virtualinvoke $r8.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: java.lang.Object getMonitor()>();

        entermonitor $r11;

     label1:
        virtualinvoke r3.<org.apache.log4j.Logger: void info(java.lang.Object)>($r10);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", World.");

        exitmonitor $r11;

     label2:
        goto label5;

     label3:
        $r15 := @caughtexception;

        exitmonitor $r11;

     label4:
        throw $r15;

     label5:
        virtualinvoke $r9.<org.apache.log4j.AsyncAppender: void close()>();

        r17 = virtualinvoke $r8.<org.apache.log4j.AsyncAppenderTestCase$BlockableVectorAppender: java.util.Vector getVector()>();

        $r13 = virtualinvoke r17.<java.util.Vector: java.lang.Object get(int)>(0);

        r5 = (org.apache.log4j.spi.LoggingEvent) $r13;

        $r14 = new org.apache.log4j.PatternLayout;

        specialinvoke $r14.<org.apache.log4j.PatternLayout: void <init>()>();

        virtualinvoke $r14.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m");

        virtualinvoke $r14.<org.apache.log4j.PatternLayout: void activateOptions()>();

        r7 = virtualinvoke $r14.<org.apache.log4j.PatternLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>(r5);

        staticinvoke <org.apache.log4j.AsyncAppenderTestCase: void assertEquals(java.lang.String,java.lang.String)>("Hello", r7);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
