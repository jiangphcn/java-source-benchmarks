public class org.apache.log4j.HTMLLayoutTest extends org.apache.log4j.LayoutTest
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.HTMLLayoutTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.LayoutTest: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, "text/html", 0, null, null);

        return;
    }

    protected org.apache.log4j.Layout createLayout()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.HTMLLayout $r1;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        $r1 = new org.apache.log4j.HTMLLayout;

        specialinvoke $r1.<org.apache.log4j.HTMLLayout: void <init>()>();

        return $r1;
    }

    private org.w3c.dom.Document parse(java.lang.String) throws java.lang.Exception
    {
        org.apache.log4j.HTMLLayoutTest r0;
        java.lang.String r1;
        javax.xml.parsers.DocumentBuilderFactory r2;
        javax.xml.parsers.DocumentBuilder r3;
        java.io.StringReader $r5;
        org.xml.sax.InputSource $r6;
        org.w3c.dom.Document $r7;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r2.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(0);

        virtualinvoke r2.<javax.xml.parsers.DocumentBuilderFactory: void setCoalescing(boolean)>(1);

        r3 = virtualinvoke r2.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r5 = new java.io.StringReader;

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r6 = new org.xml.sax.InputSource;

        specialinvoke $r6.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r5);

        $r7 = virtualinvoke r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r6);

        return $r7;
    }

    public void testFormat() throws java.lang.Exception
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.HTMLLayout r3;
        java.lang.String r4, r5;
        org.apache.log4j.spi.LoggingEvent $r6;
        org.apache.log4j.Level $r7;
        org.apache.log4j.Layout $r8;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("org.apache.log4j.xml.HTMLLayoutTest");

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>("NDC goes here");

        $r6 = new org.apache.log4j.spi.LoggingEvent;

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r6.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("org.apache.log4j.Logger", r1, $r7, "Hello, World", null);

        $r8 = virtualinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r3 = (org.apache.log4j.HTMLLayout) $r8;

        virtualinvoke r3.<org.apache.log4j.HTMLLayout: void setLocationInfo(boolean)>(1);

        r4 = virtualinvoke r3.<org.apache.log4j.HTMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r6);

        staticinvoke <org.apache.log4j.NDC: java.lang.String pop()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("<!DOCTYPE body [ <!ENTITY nbsp \' \'>]><body>");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</body>");

        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.w3c.dom.Document parse(java.lang.String)>(r5);

        return;
    }

    public void testGetHeader()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.Layout $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        $r1 = virtualinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        $r2 = virtualinvoke $r1.<org.apache.log4j.Layout: java.lang.String getHeader()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, 9);

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("<!DOCTYPE", $r3);

        return;
    }

    public void testGetHeaderWithLocation()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.HTMLLayout r1;
        org.apache.log4j.Layout $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        $r2 = virtualinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r1 = (org.apache.log4j.HTMLLayout) $r2;

        virtualinvoke r1.<org.apache.log4j.HTMLLayout: void setLocationInfo(boolean)>(1);

        $r3 = virtualinvoke r1.<org.apache.log4j.HTMLLayout: java.lang.String getHeader()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, 9);

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("<!DOCTYPE", $r4);

        return;
    }

    public void testGetFooter()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.Layout $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        $r1 = virtualinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        $r2 = virtualinvoke $r1.<org.apache.log4j.Layout: java.lang.String getFooter()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, 8);

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("</table>", $r3);

        return;
    }

    public void testGetSetLocationInfo()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.HTMLLayout $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        $r2 = new org.apache.log4j.HTMLLayout;

        specialinvoke $r2.<org.apache.log4j.HTMLLayout: void <init>()>();

        $z0 = virtualinvoke $r2.<org.apache.log4j.HTMLLayout: boolean getLocationInfo()>();

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(boolean,boolean)>(0, $z0);

        virtualinvoke $r2.<org.apache.log4j.HTMLLayout: void setLocationInfo(boolean)>(1);

        $z1 = virtualinvoke $r2.<org.apache.log4j.HTMLLayout: boolean getLocationInfo()>();

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(boolean,boolean)>(1, $z1);

        virtualinvoke $r2.<org.apache.log4j.HTMLLayout: void setLocationInfo(boolean)>(0);

        $z2 = virtualinvoke $r2.<org.apache.log4j.HTMLLayout: boolean getLocationInfo()>();

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(boolean,boolean)>(0, $z2);

        return;
    }

    public void testActivateOptions()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.HTMLLayout $r2;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        $r2 = new org.apache.log4j.HTMLLayout;

        specialinvoke $r2.<org.apache.log4j.HTMLLayout: void <init>()>();

        virtualinvoke $r2.<org.apache.log4j.HTMLLayout: void activateOptions()>();

        return;
    }

    public void testGetSetTitle()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.HTMLLayout $r3;
        java.lang.String $r4, $r5, $r6;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        $r3 = new org.apache.log4j.HTMLLayout;

        specialinvoke $r3.<org.apache.log4j.HTMLLayout: void <init>()>();

        $r4 = virtualinvoke $r3.<org.apache.log4j.HTMLLayout: java.lang.String getTitle()>();

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("Log4J Log Messages", $r4);

        virtualinvoke $r3.<org.apache.log4j.HTMLLayout: void setTitle(java.lang.String)>(null);

        $r5 = virtualinvoke $r3.<org.apache.log4j.HTMLLayout: java.lang.String getTitle()>();

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertNull(java.lang.Object)>($r5);

        virtualinvoke $r3.<org.apache.log4j.HTMLLayout: void setTitle(java.lang.String)>("A treatise on messages of log persuasion");

        $r6 = virtualinvoke $r3.<org.apache.log4j.HTMLLayout: java.lang.String getTitle()>();

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>("A treatise on messages of log persuasion", $r6);

        return;
    }

    public void testFormatResize()
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.Logger r1;
        char[] r2;
        org.apache.log4j.HTMLLayout r3;
        int $i0, $i1, $i2, i3;
        org.apache.log4j.spi.LoggingEvent $r6, $r11;
        java.lang.String $r7, $r14, $r15, $r17, $r18, $r19, r22;
        org.apache.log4j.Level $r8, $r12;
        org.apache.log4j.Layout $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r13, $r16;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("org.apache.log4j.xml.HTMLLayoutTest");

        staticinvoke <org.apache.log4j.NDC: void clear()>();

        r2 = newarray (char)[2000];

        i3 = 0;

        goto label2;

     label1:
        r2[i3] = 65;

        i3 = i3 + 1;

     label2:
        $i0 = lengthof r2;

        if i3 < $i0 goto label1;

        $r6 = new org.apache.log4j.spi.LoggingEvent;

        $r8 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>(r2);

        specialinvoke $r6.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("org.apache.log4j.Logger", r1, $r8, $r7, null);

        $r9 = virtualinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r3 = (org.apache.log4j.HTMLLayout) $r9;

        virtualinvoke r3.<org.apache.log4j.HTMLLayout: void setLocationInfo(boolean)>(1);

        virtualinvoke r3.<org.apache.log4j.HTMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r6);

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'foo\' is not a valid value.");

        $r11 = new org.apache.log4j.spi.LoggingEvent;

        $r12 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        specialinvoke $r11.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("org.apache.log4j.Logger", r1, $r12, "Hello, World", $r10);

        r22 = virtualinvoke r3.<org.apache.log4j.HTMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r11);

        $r13 = new java.lang.StringBuilder;

        $r14 = <org.apache.log4j.Layout: java.lang.String LINE_SEP>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<tr>");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = <org.apache.log4j.Layout: java.lang.String LINE_SEP>;

        $i1 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i2 = $i1 + 4;

        $r19 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        staticinvoke <org.apache.log4j.HTMLLayoutTest: void assertEquals(java.lang.String,java.lang.String)>($r17, $r19);

        return;
    }

    public void testProblemCharacters() throws java.lang.Exception
    {
        org.apache.log4j.HTMLLayoutTest r0;
        org.apache.log4j.Logger r2;
        java.lang.String r5, r8, r10, $r22;
        org.apache.log4j.HTMLLayout r7;
        org.apache.log4j.HTMLLayoutTest$ProblemLevel $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.Thread $r13, $r14, $r17;
        org.apache.log4j.spi.LoggingEvent $r15;
        org.apache.log4j.Layout $r16;
        java.lang.StringBuffer $r18;
        int $i0, $i1, i2;
        java.util.Hashtable r24, r25;

        r0 := @this: org.apache.log4j.HTMLLayoutTest;

        r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("com.example.bar<>&\"\'");

        $r11 = new org.apache.log4j.HTMLLayoutTest$ProblemLevel;

        specialinvoke $r11.<org.apache.log4j.HTMLLayoutTest$ProblemLevel: void <init>(java.lang.String)>("com.example.bar<>&\"\'");

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("com.example.bar<>&\"\'");

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r5 = virtualinvoke $r13.<java.lang.Thread: java.lang.String getName()>();

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r14.<java.lang.Thread: void setName(java.lang.String)>("com.example.bar<>&\"\'");

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>("com.example.bar<>&\"\'");

        r24 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r24 == null goto label1;

        virtualinvoke r24.<java.util.Hashtable: void clear()>();

     label1:
        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("com.example.bar<>&\"\'", "com.example.bar<>&\"\'");

        $r15 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r15.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>("com.example.bar<>&\"\'", r2, $r11, "com.example.bar<>&\"\'", $r12);

        $r16 = virtualinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.apache.log4j.Layout createLayout()>();

        r7 = (org.apache.log4j.HTMLLayout) $r16;

        r8 = virtualinvoke r7.<org.apache.log4j.HTMLLayout: java.lang.String format(org.apache.log4j.spi.LoggingEvent)>($r15);

        r25 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r25 == null goto label2;

        virtualinvoke r25.<java.util.Hashtable: void clear()>();

     label2:
        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r17.<java.lang.Thread: void setName(java.lang.String)>(r5);

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>(java.lang.String)>("<!DOCTYPE table [<!ENTITY nbsp \' \'>]><table>");

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</table>");

        r10 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        i2 = virtualinvoke r10.<java.lang.String: int lastIndexOf(java.lang.String)>("<br>");

        goto label4;

     label3:
        $i0 = i2 + 4;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>(i2, $i0, "<br/>");

        $i1 = i2 - 1;

        i2 = virtualinvoke r10.<java.lang.String: int lastIndexOf(java.lang.String,int)>("<br>", $i1);

     label4:
        if i2 != -1 goto label3;

        $r22 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.apache.log4j.HTMLLayoutTest: org.w3c.dom.Document parse(java.lang.String)>($r22);

        return;
    }
}
