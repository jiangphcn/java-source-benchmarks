public class org.apache.log4j.spi.LoggingEventTest extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void testSerializationSimple() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.spi.LoggingEvent $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        org.apache.log4j.Level $r7;
        int[] $r8;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        $r4 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r4.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, r1, $r7, "Hello, world.", null);

        $r8 = newarray (int)[5];

        $r8[0] = 352;

        $r8[1] = 353;

        $r8[2] = 354;

        $r8[3] = 355;

        $r8[4] = 356;

        staticinvoke <org.apache.log4j.util.SerializationTestHelper: void assertSerializationEquals(java.lang.String,java.lang.Object,int[],int)>("witness/serialization/simple.bin", $r4, $r8, 237);

        return;
    }

    public void testSerializationWithException() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        java.lang.Exception $r5;
        org.apache.log4j.spi.LoggingEvent $r6;
        java.lang.Class $r7;
        java.lang.String $r8;
        org.apache.log4j.Level $r9;
        int[] $r10;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("Don\'t panic");

        $r6 = new org.apache.log4j.spi.LoggingEvent;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r6.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r8, r1, $r9, "Hello, world.", $r5);

        $r10 = newarray (int)[5];

        $r10[0] = 352;

        $r10[1] = 353;

        $r10[2] = 354;

        $r10[3] = 355;

        $r10[4] = 356;

        staticinvoke <org.apache.log4j.util.SerializationTestHelper: void assertSerializationEquals(java.lang.String,java.lang.Object,int[],int)>("witness/serialization/exception.bin", $r6, $r10, 237);

        return;
    }

    public void testSerializationWithLocation() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.spi.LoggingEvent $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        org.apache.log4j.Level $r7;
        int[] $r9;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        $r4 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r4.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, r1, $r7, "Hello, world.", null);

        virtualinvoke $r4.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

        $r9 = newarray (int)[5];

        $r9[0] = 352;

        $r9[1] = 353;

        $r9[2] = 354;

        $r9[3] = 355;

        $r9[4] = 356;

        staticinvoke <org.apache.log4j.util.SerializationTestHelper: void assertSerializationEquals(java.lang.String,java.lang.Object,int[],int)>("witness/serialization/location.bin", $r4, $r9, 237);

        return;
    }

    public void testSerializationNDC() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.spi.LoggingEvent $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        org.apache.log4j.Level $r7;
        int[] $r8;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>("ndc test");

        $r4 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r4.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, r1, $r7, "Hello, world.", null);

        $r8 = newarray (int)[5];

        $r8[0] = 352;

        $r8[1] = 353;

        $r8[2] = 354;

        $r8[3] = 355;

        $r8[4] = 356;

        staticinvoke <org.apache.log4j.util.SerializationTestHelper: void assertSerializationEquals(java.lang.String,java.lang.Object,int[],int)>("witness/serialization/ndc.bin", $r4, $r8, 237);

        return;
    }

    public void testSerializationMDC() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.spi.LoggingEvent $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        org.apache.log4j.Level $r7;
        int[] $r8;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("mdckey", "mdcvalue");

        $r4 = new org.apache.log4j.spi.LoggingEvent;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        specialinvoke $r4.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, r1, $r7, "Hello, world.", null);

        $r8 = newarray (int)[5];

        $r8[0] = 352;

        $r8[1] = 353;

        $r8[2] = 354;

        $r8[3] = 355;

        $r8[4] = 356;

        staticinvoke <org.apache.log4j.util.SerializationTestHelper: void assertSerializationEquals(java.lang.String,java.lang.Object,int[],int)>("witness/serialization/mdc.bin", $r4, $r8, 237);

        return;
    }

    public void testDeserializationSimple() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        java.lang.Object r1, $r3;
        org.apache.log4j.spi.LoggingEvent r2;
        boolean $z0;
        org.apache.log4j.Level $r4, $r5;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.util.SerializationTestHelper: java.lang.Object deserializeStream(java.lang.String)>("witness/serialization/simple.bin");

        $z0 = r1 instanceof org.apache.log4j.spi.LoggingEvent;

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertTrue(boolean)>($z0);

        r2 = (org.apache.log4j.spi.LoggingEvent) r1;

        $r3 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.Object,java.lang.Object)>("Hello, world.", $r3);

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r5 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testDeserializationWithException() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        java.lang.Object r1, $r3;
        org.apache.log4j.spi.LoggingEvent r2;
        boolean $z0;
        org.apache.log4j.Level $r4, $r5;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.util.SerializationTestHelper: java.lang.Object deserializeStream(java.lang.String)>("witness/serialization/exception.bin");

        $z0 = r1 instanceof org.apache.log4j.spi.LoggingEvent;

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertTrue(boolean)>($z0);

        r2 = (org.apache.log4j.spi.LoggingEvent) r1;

        $r3 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.Object,java.lang.Object)>("Hello, world.", $r3);

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r5 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testDeserializationWithLocation() throws java.lang.Exception
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        java.lang.Object r1, $r3;
        org.apache.log4j.spi.LoggingEvent r2;
        boolean $z0;
        org.apache.log4j.Level $r4, $r5;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.util.SerializationTestHelper: java.lang.Object deserializeStream(java.lang.String)>("witness/serialization/location.bin");

        $z0 = r1 instanceof org.apache.log4j.spi.LoggingEvent;

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertTrue(boolean)>($z0);

        r2 = (org.apache.log4j.spi.LoggingEvent) r1;

        $r3 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMessage()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.Object,java.lang.Object)>("Hello, world.", $r3);

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r5 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Level getLevel()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testFQNOfCategoryClass()
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.Level r2;
        java.lang.String r3, $r7;
        java.lang.Class $r5;
        org.apache.log4j.spi.LoggingEvent $r6;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r5 = class "org/apache/log4j/Logger";

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.String toString()>();

        $r6 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r6.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>(r3, r1, r2, "Hello, world.", null);

        $r7 = $r6.<org.apache.log4j.spi.LoggingEvent: java.lang.String fqnOfCategoryClass>;

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.String,java.lang.String)>(r3, $r7);

        return;
    }

    public void testLevel()
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.Level r2, r5, $r9;
        java.lang.String r3;
        java.lang.Class $r6;
        org.apache.log4j.spi.LoggingEvent $r7;
        org.apache.log4j.Priority $r8;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r6 = class "org/apache/log4j/Logger";

        r3 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r7 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r7.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,long,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>(r3, r1, 0L, r2, "Hello, world.", null);

        r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r7.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Priority level> = r5;

        $r9 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r8 = $r7.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.Priority level>;

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r8);

        return;
    }

    public void testLocationInfoNoFQCN()
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.Level r2;
        org.apache.log4j.spi.LocationInfo r4;
        org.apache.log4j.spi.LoggingEvent $r5;
        java.lang.String $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r5 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r5.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,long,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>(null, r1, 0L, r2, "Hello, world.", null);

        r4 = virtualinvoke $r5.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertNotNull(java.lang.Object)>(r4);

        if r4 == null goto label1;

        $r6 = virtualinvoke r4.<org.apache.log4j.spi.LocationInfo: java.lang.String getLineNumber()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.String,java.lang.String)>("?", $r6);

        $r7 = virtualinvoke r4.<org.apache.log4j.spi.LocationInfo: java.lang.String getClassName()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.String,java.lang.String)>("?", $r7);

        $r8 = virtualinvoke r4.<org.apache.log4j.spi.LocationInfo: java.lang.String getFileName()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.String,java.lang.String)>("?", $r8);

        $r9 = virtualinvoke r4.<org.apache.log4j.spi.LocationInfo: java.lang.String getMethodName()>();

        staticinvoke <org.apache.log4j.spi.LoggingEventTest: void assertEquals(java.lang.String,java.lang.String)>("?", $r9);

     label1:
        return;
    }

    public void testBadMessage()
    {
        org.apache.log4j.spi.LoggingEventTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.Level r2;
        java.lang.String r3;
        java.lang.Class $r6;
        org.apache.log4j.spi.LoggingEventTest$BadMessage $r7;
        org.apache.log4j.spi.LoggingEvent $r8;

        r0 := @this: org.apache.log4j.spi.LoggingEventTest;

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r6 = class "org/apache/log4j/Logger";

        r3 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r7 = new org.apache.log4j.spi.LoggingEventTest$BadMessage;

        specialinvoke $r7.<org.apache.log4j.spi.LoggingEventTest$BadMessage: void <init>()>();

        $r8 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r8.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,long,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>(r3, r1, 0L, r2, $r7, null);

        virtualinvoke $r8.<org.apache.log4j.spi.LoggingEvent: java.lang.String getRenderedMessage()>();

        return;
    }
}
