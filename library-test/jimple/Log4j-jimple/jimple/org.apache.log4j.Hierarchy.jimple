public class org.apache.log4j.Hierarchy extends java.lang.Object implements org.apache.log4j.spi.LoggerRepository, org.apache.log4j.spi.RendererSupport, org.apache.log4j.spi.ThrowableRendererSupport
{
    private org.apache.log4j.spi.LoggerFactory defaultFactory;
    private java.util.Vector listeners;
    java.util.Hashtable ht;
    org.apache.log4j.Logger root;
    org.apache.log4j.or.RendererMap rendererMap;
    int thresholdInt;
    org.apache.log4j.Level threshold;
    boolean emittedNoAppenderWarning;
    boolean emittedNoResourceBundleWarning;
    private org.apache.log4j.spi.ThrowableRenderer throwableRenderer;

    public void <init>(org.apache.log4j.Logger)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Logger r1, $r5;
        java.util.Hashtable $r2;
        java.util.Vector $r3;
        org.apache.log4j.Level $r4;
        org.apache.log4j.or.RendererMap $r6;
        org.apache.log4j.DefaultCategoryFactory $r7;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.Logger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: boolean emittedNoAppenderWarning> = 0;

        r0.<org.apache.log4j.Hierarchy: boolean emittedNoResourceBundleWarning> = 0;

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer> = null;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>(int)>(1);

        r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners> = $r3;

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root> = r1;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        virtualinvoke r0.<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>($r4);

        $r5 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        virtualinvoke $r5.<org.apache.log4j.Logger: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>(r0);

        $r6 = new org.apache.log4j.or.RendererMap;

        specialinvoke $r6.<org.apache.log4j.or.RendererMap: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap> = $r6;

        $r7 = new org.apache.log4j.DefaultCategoryFactory;

        specialinvoke $r7.<org.apache.log4j.DefaultCategoryFactory: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.LoggerFactory defaultFactory> = $r7;

        return;
    }

    public void addRenderer(java.lang.Class, org.apache.log4j.or.ObjectRenderer)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.Class r1;
        org.apache.log4j.or.ObjectRenderer r2;
        org.apache.log4j.or.RendererMap $r3;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.log4j.or.ObjectRenderer;

        $r3 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        virtualinvoke $r3.<org.apache.log4j.or.RendererMap: void put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>(r1, r2);

        return;
    }

    public void addHierarchyEventListener(org.apache.log4j.spi.HierarchyEventListener)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.spi.HierarchyEventListener r1;
        java.util.Vector $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.spi.HierarchyEventListener;

        $r2 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("Ignoring attempt to add an existent listener.");

        goto label2;

     label1:
        $r3 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void clear()
    {
        org.apache.log4j.Hierarchy r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public void emitNoAppenderWarning(org.apache.log4j.Category)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Category r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.Category;

        $z0 = r0.<org.apache.log4j.Hierarchy: boolean emittedNoAppenderWarning>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("No appenders could be found for logger (");

        $r3 = virtualinvoke r1.<org.apache.log4j.Category: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r6);

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("Please initialize the log4j system properly.");

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.");

        r0.<org.apache.log4j.Hierarchy: boolean emittedNoAppenderWarning> = 1;

     label1:
        return;
    }

    public org.apache.log4j.Logger exists(java.lang.String)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.String r1;
        java.lang.Object r2;
        org.apache.log4j.CategoryKey $r3;
        java.util.Hashtable $r4;
        boolean $z0;
        org.apache.log4j.Logger $r5;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        $r3 = new org.apache.log4j.CategoryKey;

        specialinvoke $r3.<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>(r1);

        r2 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        $z0 = r2 instanceof org.apache.log4j.Logger;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.log4j.Logger) r2;

        return $r5;

     label1:
        return null;
    }

    public void setThreshold(java.lang.String)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.String r1, $r6;
        org.apache.log4j.Level r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>(r1, null);

        if r2 == null goto label1;

        virtualinvoke r0.<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>(r2);

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not convert [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to Level.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r6);

     label2:
        return;
    }

    public void setThreshold(org.apache.log4j.Level)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Level r1;
        int $i0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.Level;

        if r1 == null goto label1;

        $i0 = r1.<org.apache.log4j.Level: int level>;

        r0.<org.apache.log4j.Hierarchy: int thresholdInt> = $i0;

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Level threshold> = r1;

     label1:
        return;
    }

    public void fireAddAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Category r1;
        org.apache.log4j.Appender r2;
        int i0, i1;
        org.apache.log4j.spi.HierarchyEventListener r3;
        java.util.Vector $r4, $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.Category;

        r2 := @parameter1: org.apache.log4j.Appender;

        $r4 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        if $r4 == null goto label3;

        $r5 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        i1 = 0;

        goto label2;

     label1:
        $r6 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r3 = (org.apache.log4j.spi.HierarchyEventListener) $r7;

        interfaceinvoke r3.<org.apache.log4j.spi.HierarchyEventListener: void addAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>(r1, r2);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        return;
    }

    void fireRemoveAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Category r1;
        org.apache.log4j.Appender r2;
        int i0, i1;
        org.apache.log4j.spi.HierarchyEventListener r3;
        java.util.Vector $r4, $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.Category;

        r2 := @parameter1: org.apache.log4j.Appender;

        $r4 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        if $r4 == null goto label3;

        $r5 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        i1 = 0;

        goto label2;

     label1:
        $r6 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r3 = (org.apache.log4j.spi.HierarchyEventListener) $r7;

        interfaceinvoke r3.<org.apache.log4j.spi.HierarchyEventListener: void removeAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>(r1, r2);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        return;
    }

    public org.apache.log4j.Level getThreshold()
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Level $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Level threshold>;

        return $r1;
    }

    public org.apache.log4j.Logger getLogger(java.lang.String)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.String r1;
        org.apache.log4j.spi.LoggerFactory $r2;
        org.apache.log4j.Logger $r3;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.LoggerFactory defaultFactory>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r1, $r2);

        return $r3;
    }

    public org.apache.log4j.Logger getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.String r1;
        org.apache.log4j.spi.LoggerFactory r2;
        java.lang.Object r5;
        org.apache.log4j.CategoryKey $r6;
        java.util.Hashtable $r7, $r8, $r9, $r13;
        boolean $z0, $z1;
        org.apache.log4j.ProvisionNode $r11;
        org.apache.log4j.Logger $r12, r16, r17;
        java.lang.Throwable $r15;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.log4j.spi.LoggerFactory;

        $r6 = new org.apache.log4j.CategoryKey;

        specialinvoke $r6.<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>(r1);

        $r7 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        entermonitor $r7;

     label01:
        $r8 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        r5 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r6);

        if r5 != null goto label03;

        r16 = interfaceinvoke r2.<org.apache.log4j.spi.LoggerFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>(r1);

        virtualinvoke r16.<org.apache.log4j.Logger: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>(r0);

        $r13 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r16);

        specialinvoke r0.<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>(r16);

        exitmonitor $r7;

     label02:
        return r16;

     label03:
        $z0 = r5 instanceof org.apache.log4j.Logger;

        if $z0 == 0 goto label05;

        $r12 = (org.apache.log4j.Logger) r5;

        exitmonitor $r7;

     label04:
        return $r12;

     label05:
        $z1 = r5 instanceof org.apache.log4j.ProvisionNode;

        if $z1 == 0 goto label07;

        r17 = interfaceinvoke r2.<org.apache.log4j.spi.LoggerFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>(r1);

        virtualinvoke r17.<org.apache.log4j.Logger: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>(r0);

        $r9 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r17);

        $r11 = (org.apache.log4j.ProvisionNode) r5;

        specialinvoke r0.<org.apache.log4j.Hierarchy: void updateChildren(org.apache.log4j.ProvisionNode,org.apache.log4j.Logger)>($r11, r17);

        specialinvoke r0.<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>(r17);

        exitmonitor $r7;

     label06:
        return r17;

     label07:
        exitmonitor $r7;

     label08:
        return null;

     label09:
        $r15 := @caughtexception;

        exitmonitor $r7;

     label10:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.util.Enumeration getCurrentLoggers()
    {
        org.apache.log4j.Hierarchy r0;
        java.util.Enumeration r2, $r7;
        java.lang.Object r3;
        java.util.Vector $r4;
        java.util.Hashtable $r5, $r6;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r4 = new java.util.Vector;

        $r5 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        $i0 = virtualinvoke $r5.<java.util.Hashtable: int size()>();

        specialinvoke $r4.<java.util.Vector: void <init>(int)>($i0);

        $r6 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        r2 = virtualinvoke $r6.<java.util.Hashtable: java.util.Enumeration elements()>();

        goto label2;

     label1:
        r3 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z0 = r3 instanceof org.apache.log4j.Logger;

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r3);

     label2:
        $z1 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label1;

        $r7 = virtualinvoke $r4.<java.util.Vector: java.util.Enumeration elements()>();

        return $r7;
    }

    public java.util.Enumeration getCurrentCategories()
    {
        org.apache.log4j.Hierarchy r0;
        java.util.Enumeration $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

        return $r1;
    }

    public org.apache.log4j.or.RendererMap getRendererMap()
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.or.RendererMap $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        return $r1;
    }

    public org.apache.log4j.Logger getRootLogger()
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Logger $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        return $r1;
    }

    public boolean isDisabled(int)
    {
        org.apache.log4j.Hierarchy r0;
        int i0, $i1;

        r0 := @this: org.apache.log4j.Hierarchy;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.log4j.Hierarchy: int thresholdInt>;

        if $i1 <= i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void overrideAsNeeded(java.lang.String)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The Hiearchy.overrideAsNeeded method has been deprecated.");

        return;
    }

    public void resetConfiguration()
    {
        org.apache.log4j.Hierarchy r0;
        java.util.Enumeration r2;
        org.apache.log4j.Logger r3, $r4, $r6;
        org.apache.log4j.Level $r5, $r7;
        java.util.Hashtable $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.log4j.or.RendererMap $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r4 = virtualinvoke r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>();

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke $r4.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r5);

        $r6 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        virtualinvoke $r6.<org.apache.log4j.Logger: void setResourceBundle(java.util.ResourceBundle)>(null);

        $r7 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        virtualinvoke r0.<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>($r7);

        $r8 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        entermonitor $r8;

     label1:
        virtualinvoke r0.<org.apache.log4j.Hierarchy: void shutdown()>();

        r2 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

        goto label3;

     label2:
        $r9 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (org.apache.log4j.Logger) $r9;

        virtualinvoke r3.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(null);

        virtualinvoke r3.<org.apache.log4j.Logger: void setAdditivity(boolean)>(1);

        virtualinvoke r3.<org.apache.log4j.Logger: void setResourceBundle(java.util.ResourceBundle)>(null);

     label3:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        exitmonitor $r8;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        exitmonitor $r8;

     label6:
        throw $r11;

     label7:
        $r10 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        virtualinvoke $r10.<org.apache.log4j.or.RendererMap: void clear()>();

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer> = null;

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setDisableOverride(java.lang.String)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The Hiearchy.setDisableOverride method has been deprecated.");

        return;
    }

    public void setRenderer(java.lang.Class, org.apache.log4j.or.ObjectRenderer)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.Class r1;
        org.apache.log4j.or.ObjectRenderer r2;
        org.apache.log4j.or.RendererMap $r3;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.log4j.or.ObjectRenderer;

        $r3 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        virtualinvoke $r3.<org.apache.log4j.or.RendererMap: void put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>(r1, r2);

        return;
    }

    public void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.spi.ThrowableRenderer r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.spi.ThrowableRenderer;

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer> = r1;

        return;
    }

    public org.apache.log4j.spi.ThrowableRenderer getThrowableRenderer()
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.spi.ThrowableRenderer $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer>;

        return $r1;
    }

    public void shutdown()
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Logger r1, r8, r10;
        java.util.Hashtable $r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r5;
        java.lang.Throwable $r6;
        java.util.Enumeration r7, r9;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 = virtualinvoke r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void closeNestedAppenders()>();

        $r3 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        entermonitor $r3;

     label1:
        r7 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (org.apache.log4j.Logger) $r4;

        virtualinvoke r8.<org.apache.log4j.Logger: void closeNestedAppenders()>();

     label3:
        $z0 = interfaceinvoke r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        virtualinvoke r1.<org.apache.log4j.Logger: void removeAllAppenders()>();

        r9 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

        goto label5;

     label4:
        $r5 = interfaceinvoke r9.<java.util.Enumeration: java.lang.Object nextElement()>();

        r10 = (org.apache.log4j.Logger) $r5;

        virtualinvoke r10.<org.apache.log4j.Logger: void removeAllAppenders()>();

     label5:
        $z1 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label4;

        exitmonitor $r3;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label8:
        throw $r6;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private final void updateParents(org.apache.log4j.Logger)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Logger r1, $r16;
        java.lang.String r2, r3, $r13;
        int i0, $i1, i2, $i3;
        java.lang.Object r5;
        org.apache.log4j.CategoryKey $r6;
        java.util.Hashtable $r7, $r18;
        boolean $z0, $z1, z2;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.Class $r10;
        org.apache.log4j.ProvisionNode $r14, $r17;
        org.apache.log4j.Category $r15;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.Logger;

        r2 = r1.<org.apache.log4j.Logger: java.lang.String name>;

        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        z2 = 0;

        $i1 = i0 - 1;

        i2 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int,int)>(46, $i1);

        goto label6;

     label1:
        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r6 = new org.apache.log4j.CategoryKey;

        specialinvoke $r6.<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>(r3);

        $r7 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        r5 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r6);

        if r5 != null goto label2;

        $r17 = new org.apache.log4j.ProvisionNode;

        specialinvoke $r17.<org.apache.log4j.ProvisionNode: void <init>(org.apache.log4j.Logger)>(r1);

        $r18 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r17);

        goto label5;

     label2:
        $z0 = r5 instanceof org.apache.log4j.Category;

        if $z0 == 0 goto label3;

        z2 = 1;

        $r15 = (org.apache.log4j.Category) r5;

        r1.<org.apache.log4j.Logger: org.apache.log4j.Category parent> = $r15;

        goto label7;

     label3:
        $z1 = r5 instanceof org.apache.log4j.ProvisionNode;

        if $z1 == 0 goto label4;

        $r14 = (org.apache.log4j.ProvisionNode) r5;

        virtualinvoke $r14.<org.apache.log4j.ProvisionNode: void addElement(java.lang.Object)>(r1);

        goto label5;

     label4:
        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("unexpected object type ");

        $r10 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ht.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

     label5:
        $i3 = i2 - 1;

        i2 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int,int)>(46, $i3);

     label6:
        if i2 >= 0 goto label1;

     label7:
        if z2 != 0 goto label8;

        $r16 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        r1.<org.apache.log4j.Logger: org.apache.log4j.Category parent> = $r16;

     label8:
        return;
    }

    private final void updateChildren(org.apache.log4j.ProvisionNode, org.apache.log4j.Logger)
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.ProvisionNode r1;
        org.apache.log4j.Logger r2, r3;
        int i0, i1;
        java.lang.Object $r4;
        org.apache.log4j.Category $r5, $r8;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.ProvisionNode;

        r2 := @parameter1: org.apache.log4j.Logger;

        i0 = virtualinvoke r1.<org.apache.log4j.ProvisionNode: int size()>();

        i1 = 0;

        goto label3;

     label1:
        $r4 = virtualinvoke r1.<org.apache.log4j.ProvisionNode: java.lang.Object elementAt(int)>(i1);

        r3 = (org.apache.log4j.Logger) $r4;

        $r5 = r3.<org.apache.log4j.Logger: org.apache.log4j.Category parent>;

        $r7 = $r5.<org.apache.log4j.Category: java.lang.String name>;

        $r6 = r2.<org.apache.log4j.Logger: java.lang.String name>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        if $z0 != 0 goto label2;

        $r8 = r3.<org.apache.log4j.Logger: org.apache.log4j.Category parent>;

        r2.<org.apache.log4j.Logger: org.apache.log4j.Category parent> = $r8;

        r3.<org.apache.log4j.Logger: org.apache.log4j.Category parent> = r2;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return;
    }
}
