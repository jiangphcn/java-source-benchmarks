public class org.apache.log4j.spi.ThrowableInformationTest extends junit.framework.TestCase
{

    public void <init>(java.lang.String)
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void testOverriddenBehavior()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r3;
        org.apache.log4j.spi.ThrowableInformationTest$OverriddenThrowable $r4;
        int $i0;
        java.lang.String $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformation;

        $r4 = new org.apache.log4j.spi.ThrowableInformationTest$OverriddenThrowable;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformationTest$OverriddenThrowable: void <init>()>();

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r4);

        r2 = virtualinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(4, $i0);

        $r5 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("print(Object)print(char[])print(String)println(Object)", $r5);

        $r6 = r2[1];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("println(char[])", $r6);

        $r7 = r2[2];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("println(String)", $r7);

        $r8 = r2[3];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("write(char[])ite(charite(Stri", $r8);

        return;
    }

    public void testNotOverriddenBehavior()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r4;
        org.apache.log4j.spi.ThrowableInformationTest$NotOverriddenThrowable $r5;
        int $i0;
        java.lang.StringBuffer $r6;
        java.lang.String $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r4 = new org.apache.log4j.spi.ThrowableInformation;

        $r5 = new org.apache.log4j.spi.ThrowableInformationTest$NotOverriddenThrowable;

        specialinvoke $r5.<org.apache.log4j.spi.ThrowableInformationTest$NotOverriddenThrowable: void <init>()>();

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r5);

        r2 = virtualinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(7, $i0);

        $r6 = new java.lang.StringBuffer;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(97);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(2L);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(3.4028235E38F);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(4.9E-324);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r20 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>($r19, $r20);

        $r21 = r2[1];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("a", $r21);

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        $r23 = r2[2];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>($r22, $r23);

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(2L);

        $r25 = r2[3];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>($r24, $r25);

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(3.4028235E38F);

        $r27 = r2[4];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>($r26, $r27);

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(4.9E-324);

        $r29 = r2[5];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>($r28, $r29);

        $r30 = r2[6];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("C", $r30);

        return;
    }

    public void testNull()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        java.lang.String r3, $r7, $r10, $r11, $r12;
        org.apache.log4j.spi.ThrowableInformation $r4;
        org.apache.log4j.spi.ThrowableInformationTest$NullThrowable $r5;
        int $i0;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r4 = new org.apache.log4j.spi.ThrowableInformation;

        $r5 = new org.apache.log4j.spi.ThrowableInformationTest$NullThrowable;

        specialinvoke $r5.<org.apache.log4j.spi.ThrowableInformationTest$NullThrowable: void <init>()>();

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r5);

        r2 = virtualinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(2, $i0);

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(null);

        $r6 = new java.lang.StringBuilder;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>($r10, $r11);

        $r12 = r2[1];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>(r3, $r12);

        return;
    }

    public void testEmpty()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r3;
        org.apache.log4j.spi.ThrowableInformationTest$EmptyThrowable $r4;
        int $i0;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformation;

        $r4 = new org.apache.log4j.spi.ThrowableInformationTest$EmptyThrowable;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformationTest$EmptyThrowable: void <init>()>();

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r4);

        r2 = virtualinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(0, $i0);

        return;
    }

    public void testLineFeed()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r3;
        org.apache.log4j.spi.ThrowableInformationTest$StringThrowable $r4;
        int $i0;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformation;

        $r4 = new org.apache.log4j.spi.ThrowableInformationTest$StringThrowable;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformationTest$StringThrowable: void <init>(java.lang.String)>("\n");

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r4);

        r2 = virtualinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(1, $i0);

        $r5 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("", $r5);

        return;
    }

    public void testCarriageReturn()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r3;
        org.apache.log4j.spi.ThrowableInformationTest$StringThrowable $r4;
        int $i0;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformation;

        $r4 = new org.apache.log4j.spi.ThrowableInformationTest$StringThrowable;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformationTest$StringThrowable: void <init>(java.lang.String)>("\r");

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r4);

        r2 = virtualinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(1, $i0);

        $r5 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("", $r5);

        return;
    }

    public void testParsing()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r3;
        org.apache.log4j.spi.ThrowableInformationTest$StringThrowable $r4;
        int $i0;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformation;

        $r4 = new org.apache.log4j.spi.ThrowableInformationTest$StringThrowable;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformationTest$StringThrowable: void <init>(java.lang.String)>("Line1\rLine2\nLine3\r\nLine4\n\rLine6");

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r4);

        r2 = virtualinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(6, $i0);

        $r5 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("Line1", $r5);

        $r6 = r2[1];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("Line2", $r6);

        $r7 = r2[2];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("Line3", $r7);

        $r8 = r2[3];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("Line4", $r8);

        $r9 = r2[4];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("", $r9);

        $r10 = r2[5];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("Line6", $r10);

        return;
    }

    public void testLineFeedBlank()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r3;
        org.apache.log4j.spi.ThrowableInformationTest$StringThrowable $r4;
        int $i0;
        java.lang.String $r5, $r6;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformation;

        $r4 = new org.apache.log4j.spi.ThrowableInformationTest$StringThrowable;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformationTest$StringThrowable: void <init>(java.lang.String)>("\n ");

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r4);

        r2 = virtualinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $i0 = lengthof r2;

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(int,int)>(2, $i0);

        $r5 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("", $r5);

        $r6 = r2[1];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>(" ", $r6);

        return;
    }

    public void testGetThrowable()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        org.apache.log4j.spi.ThrowableInformationTest$StringThrowable $r3;
        org.apache.log4j.spi.ThrowableInformation $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformationTest$StringThrowable;

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformationTest$StringThrowable: void <init>(java.lang.String)>("Hello, World");

        $r4 = new org.apache.log4j.spi.ThrowableInformation;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: java.lang.Throwable getThrowable()>();

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertSame(java.lang.Object,java.lang.Object)>($r3, $r5);

        return;
    }

    public void testIsolation()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2, r3;
        org.apache.log4j.spi.ThrowableInformation $r4;
        org.apache.log4j.spi.ThrowableInformationTest$StringThrowable $r5;
        java.lang.String $r6, $r7;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r4 = new org.apache.log4j.spi.ThrowableInformation;

        $r5 = new org.apache.log4j.spi.ThrowableInformationTest$StringThrowable;

        specialinvoke $r5.<org.apache.log4j.spi.ThrowableInformationTest$StringThrowable: void <init>(java.lang.String)>("Hello, World");

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r5);

        r2 = virtualinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $r6 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("Hello, World", $r6);

        r2[0] = "Bonjour, Monde";

        r3 = virtualinvoke $r4.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $r7 = r3[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("Hello, World", $r7);

        return;
    }

    public void testNastyException()
    {
        org.apache.log4j.spi.ThrowableInformationTest r0;
        java.lang.String[] r2;
        org.apache.log4j.spi.ThrowableInformation $r3;
        org.apache.log4j.spi.ThrowableInformationTest$NastyThrowable $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.log4j.spi.ThrowableInformationTest;

        $r3 = new org.apache.log4j.spi.ThrowableInformation;

        $r4 = new org.apache.log4j.spi.ThrowableInformationTest$NastyThrowable;

        specialinvoke $r4.<org.apache.log4j.spi.ThrowableInformationTest$NastyThrowable: void <init>()>();

        specialinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: void <init>(java.lang.Throwable)>($r4);

        r2 = virtualinvoke $r3.<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>();

        $r5 = r2[0];

        staticinvoke <org.apache.log4j.spi.ThrowableInformationTest: void assertEquals(java.lang.String,java.lang.String)>("NastyException", $r5);

        return;
    }
}
