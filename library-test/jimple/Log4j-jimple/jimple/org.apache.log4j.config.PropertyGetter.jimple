public class org.apache.log4j.config.PropertyGetter extends java.lang.Object
{
    protected static final java.lang.Object[] NULL_ARG;
    protected java.lang.Object obj;
    protected java.beans.PropertyDescriptor[] props;

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <org.apache.log4j.config.PropertyGetter: java.lang.Object[] NULL_ARG> = $r0;

        return;
    }

    public void <init>(java.lang.Object) throws java.beans.IntrospectionException
    {
        org.apache.log4j.config.PropertyGetter r0;
        java.lang.Object r1;
        java.beans.BeanInfo r2;
        java.lang.Class $r3;
        java.beans.PropertyDescriptor[] $r4;

        r0 := @this: org.apache.log4j.config.PropertyGetter;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>($r3);

        $r4 = interfaceinvoke r2.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props> = $r4;

        r0.<org.apache.log4j.config.PropertyGetter: java.lang.Object obj> = r1;

        return;
    }

    public static void getProperties(java.lang.Object, org.apache.log4j.config.PropertyGetter$PropertyCallback, java.lang.String)
    {
        java.lang.Object r0;
        org.apache.log4j.config.PropertyGetter$PropertyCallback r1;
        java.lang.String r2, $r8;
        org.apache.log4j.config.PropertyGetter $r4;
        java.beans.IntrospectionException $r5;
        java.lang.StringBuilder $r6, $r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.log4j.config.PropertyGetter$PropertyCallback;

        r2 := @parameter2: java.lang.String;

     label1:
        $r4 = new org.apache.log4j.config.PropertyGetter;

        specialinvoke $r4.<org.apache.log4j.config.PropertyGetter: void <init>(java.lang.Object)>(r0);

        virtualinvoke $r4.<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to introspect object ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r8, $r5);

     label4:
        return;

        catch java.beans.IntrospectionException from label1 to label2 with label3;
    }

    public void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback, java.lang.String)
    {
        org.apache.log4j.config.PropertyGetter r0;
        org.apache.log4j.config.PropertyGetter$PropertyCallback r1;
        java.lang.String r2, r4, $r16, $r20, $r30;
        java.lang.reflect.Method r3;
        java.beans.PropertyDescriptor[] $r5, $r8, $r32;
        java.beans.PropertyDescriptor $r6, $r9;
        java.lang.Class $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r10;
        java.lang.Object $r11, $r12, r25;
        java.lang.RuntimeException $r13;
        java.lang.StringBuilder $r14, $r15, $r18, $r19, $r28, $r29;
        java.lang.IllegalAccessException $r17;
        java.lang.reflect.InvocationTargetException $r21;
        java.lang.Throwable $r22, $r24;
        java.lang.Thread $r23;
        int i0, $i1;

        r0 := @this: org.apache.log4j.config.PropertyGetter;

        r1 := @parameter0: org.apache.log4j.config.PropertyGetter$PropertyCallback;

        r2 := @parameter1: java.lang.String;

        i0 = 0;

        goto label12;

     label01:
        $r5 = r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props>;

        $r6 = $r5[i0];

        r3 = virtualinvoke $r6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        if r3 != null goto label02;

        goto label11;

     label02:
        $r7 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke r0.<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>($r7);

        if $z0 != 0 goto label03;

        goto label11;

     label03:
        $r8 = r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props>;

        $r9 = $r8[i0];

        r4 = virtualinvoke $r9.<java.beans.PropertyDescriptor: java.lang.String getName()>();

     label04:
        $r11 = r0.<org.apache.log4j.config.PropertyGetter: java.lang.Object obj>;

        $r10 = <org.apache.log4j.config.PropertyGetter: java.lang.Object[] NULL_ARG>;

        r25 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r11, $r10);

        if r25 == null goto label11;

        $r12 = r0.<org.apache.log4j.config.PropertyGetter: java.lang.Object obj>;

        interfaceinvoke r1.<org.apache.log4j.config.PropertyGetter$PropertyCallback: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>($r12, r2, r4, r25);

     label05:
        goto label11;

     label06:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to get value of property ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r20);

        goto label11;

     label07:
        $r21 := @caughtexception;

        $r22 = virtualinvoke $r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r22 instanceof java.lang.InterruptedException;

        if $z1 != 0 goto label08;

        $r24 = virtualinvoke $r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r24 instanceof java.io.InterruptedIOException;

        if $z2 == 0 goto label09;

     label08:
        $r23 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r23.<java.lang.Thread: void interrupt()>();

     label09:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to get value of property ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r30);

        goto label11;

     label10:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to get value of property ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r16);

     label11:
        i0 = i0 + 1;

     label12:
        $r32 = r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props>;

        $i1 = lengthof $r32;

        if i0 < $i1 goto label01;

        return;

        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label10;
    }

    protected boolean isHandledType(java.lang.Class)
    {
        org.apache.log4j.config.PropertyGetter r0;
        java.lang.Class r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.log4j.config.PropertyGetter;

        r1 := @parameter0: java.lang.Class;

        $r2 = class "java/lang/String";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 != 0 goto label1;

        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        $z2 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 != 0 goto label1;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z3 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z3 != 0 goto label1;

        $r6 = class "org/apache/log4j/Priority";

        $z4 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z4 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }
}
