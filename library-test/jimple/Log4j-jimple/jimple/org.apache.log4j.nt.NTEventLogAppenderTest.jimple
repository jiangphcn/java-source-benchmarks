public class org.apache.log4j.nt.NTEventLogAppenderTest extends junit.framework.TestCase
{

    public void <init>()
    {
        org.apache.log4j.nt.NTEventLogAppenderTest r0;

        r0 := @this: org.apache.log4j.nt.NTEventLogAppenderTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.nt.NTEventLogAppenderTest r0;

        r0 := @this: org.apache.log4j.nt.NTEventLogAppenderTest;

        staticinvoke <org.apache.log4j.LogManager: void shutdown()>();

        return;
    }

    public void testSimple()
    {
        org.apache.log4j.nt.NTEventLogAppenderTest r0;
        org.apache.log4j.Logger r1;
        org.apache.log4j.nt.NTEventLogAppender $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r17, $r19, $r20;
        java.lang.String $r5, $r8, $r11, $r14, $r18, $r21;
        org.apache.log4j.Level $r16;
        java.lang.Exception $r22;
        int i1, i2, i3, i4, i5;

        r0 := @this: org.apache.log4j.nt.NTEventLogAppenderTest;

        $r2 = new org.apache.log4j.nt.NTEventLogAppender;

        specialinvoke $r2.<org.apache.log4j.nt.NTEventLogAppender: void <init>()>();

        staticinvoke <org.apache.log4j.BasicConfigurator: void configure(org.apache.log4j.Appender)>($r2);

        r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>("org.apache.log4j.nt.NTEventLogAppenderTest");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i1 = 0 + 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i2 = i1 + 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void info(java.lang.Object)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i3 = i2 + 1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i4 = i3 + 1;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void error(java.lang.Object)>($r14);

        $r16 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i5 = i4 + 1;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r16, $r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = new java.lang.Exception;

        specialinvoke $r22.<java.lang.Exception: void <init>(java.lang.String)>("Just testing.");

        virtualinvoke r1.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>($r21, $r22);

        return;
    }
}
