public class org.apache.log4j.config.PropertyPrinter extends java.lang.Object implements org.apache.log4j.config.PropertyGetter$PropertyCallback
{
    protected int numAppenders;
    protected java.util.Hashtable appenderNames;
    protected java.util.Hashtable layoutNames;
    protected java.io.PrintWriter out;
    protected boolean doCapitalize;

    public void <init>(java.io.PrintWriter)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.io.PrintWriter r1;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.io.PrintWriter, boolean)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.io.PrintWriter r1;
        boolean z0;
        java.util.Hashtable $r2, $r3;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.config.PropertyPrinter: int numAppenders> = 0;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable appenderNames> = $r2;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable layoutNames> = $r3;

        r0.<org.apache.log4j.config.PropertyPrinter: java.io.PrintWriter out> = r1;

        r0.<org.apache.log4j.config.PropertyPrinter: boolean doCapitalize> = z0;

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void print(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    protected java.lang.String genAppName()
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.lang.StringBuilder $r1, $r2;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("A");

        $i0 = r0.<org.apache.log4j.config.PropertyPrinter: int numAppenders>;

        $i1 = $i0 + 1;

        r0.<org.apache.log4j.config.PropertyPrinter: int numAppenders> = $i1;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected boolean isGenAppName(java.lang.String)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.lang.String r1;
        int $i0, $i2, i5;
        char $c1, $c3, $c4;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 < 2 goto label1;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c1 == 65 goto label2;

     label1:
        return 0;

     label2:
        i5 = 0;

        goto label6;

     label3:
        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if $c3 < 48 goto label4;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if $c4 <= 57 goto label5;

     label4:
        return 0;

     label5:
        i5 = i5 + 1;

     label6:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 < $i2 goto label3;

        return 1;
    }

    public void print(java.io.PrintWriter)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.io.PrintWriter r1;
        java.util.Enumeration r2;
        org.apache.log4j.Logger $r3, $r5;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>(r1, $r3);

        r2 = staticinvoke <org.apache.log4j.LogManager: java.util.Enumeration getCurrentLoggers()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (org.apache.log4j.Logger) $r4;

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Logger)>(r1, $r5);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return;
    }

    protected void printOptions(java.io.PrintWriter, org.apache.log4j.Category)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.io.PrintWriter r1;
        org.apache.log4j.Category r2;
        java.util.Enumeration r3;
        org.apache.log4j.Level r4;
        java.lang.Object $r5, $r7;
        java.util.Hashtable $r6, $r35;
        java.lang.String $r8, $r9, $r15, $r18, $r22, $r25, $r27, $r30, $r31, r32, r34, $r38, $r41, $r44;
        org.apache.log4j.Layout $r11, $r39;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r19, $r21, $r23, $r24, $r26, $r28, $r29, $r36, $r37, $r40, $r42, $r43;
        boolean $z0, $z1, $z2;
        org.apache.log4j.Logger $r16, $r20;
        org.apache.log4j.Appender r33;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: org.apache.log4j.Category;

        r3 = virtualinvoke r2.<org.apache.log4j.Category: java.util.Enumeration getAllAppenders()>();

        r4 = virtualinvoke r2.<org.apache.log4j.Category: org.apache.log4j.Level getLevel()>();

        if r4 != null goto label01;

        $r31 = "";

        goto label02;

     label01:
        $r31 = virtualinvoke r4.<org.apache.log4j.Level: java.lang.String toString()>();

     label02:
        r32 = $r31;

        goto label07;

     label03:
        $r5 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r33 = (org.apache.log4j.Appender) $r5;

        $r6 = r0.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable appenderNames>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r33);

        $r8 = (java.lang.String) $r7;

        r34 = $r8;

        if $r8 != null goto label06;

        $r9 = interfaceinvoke r33.<org.apache.log4j.Appender: java.lang.String getName()>();

        r34 = $r9;

        if $r9 == null goto label04;

        $z0 = virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: boolean isGenAppName(java.lang.String)>($r9);

        if $z0 == 0 goto label05;

     label04:
        r34 = virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: java.lang.String genAppName()>();

     label05:
        $r35 = r0.<org.apache.log4j.config.PropertyPrinter: java.util.Hashtable appenderNames>;

        virtualinvoke $r35.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r34);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j.appender.");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>(r1, r33, $r38);

        $r39 = interfaceinvoke r33.<org.apache.log4j.Appender: org.apache.log4j.Layout getLayout()>();

        if $r39 == null goto label06;

        $r11 = interfaceinvoke r33.<org.apache.log4j.Appender: org.apache.log4j.Layout getLayout()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j.appender.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".layout");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,java.lang.Object,java.lang.String)>(r1, $r11, $r15);

     label06:
        $r40 = new java.lang.StringBuilder;

        $r41 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r32);

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>($r41);

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        r32 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $z2 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label03;

        $r16 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        if r2 != $r16 goto label08;

        $r44 = "log4j.rootLogger";

        goto label09;

     label08:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j.logger.");

        $r18 = virtualinvoke r2.<org.apache.log4j.Category: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r44 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        if r32 == "" goto label10;

        $r26 = new java.lang.StringBuilder;

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r44);

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>($r27);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r30);

     label10:
        $z1 = virtualinvoke r2.<org.apache.log4j.Category: boolean getAdditivity()>();

        if $z1 != 0 goto label11;

        $r20 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        if r2 == $r20 goto label11;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j.additivity.");

        $r22 = virtualinvoke r2.<org.apache.log4j.Category: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=false");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r25);

     label11:
        return;
    }

    protected void printOptions(java.io.PrintWriter, org.apache.log4j.Logger)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.io.PrintWriter r1;
        org.apache.log4j.Logger r2;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: org.apache.log4j.Logger;

        virtualinvoke r0.<org.apache.log4j.config.PropertyPrinter: void printOptions(java.io.PrintWriter,org.apache.log4j.Category)>(r1, r2);

        return;
    }

    protected void printOptions(java.io.PrintWriter, java.lang.Object, java.lang.String)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.io.PrintWriter r1;
        java.lang.Object r2;
        java.lang.String r3, $r5, $r8, $r10, $r12, $r14;
        java.lang.StringBuilder $r4, $r6, $r9, $r11, $r13;
        java.lang.Class $r7;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.config.PropertyGetter: void getProperties(java.lang.Object,org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>(r2, r0, $r14);

        return;
    }

    public void foundProperty(java.lang.Object, java.lang.String, java.lang.String, java.lang.Object)
    {
        org.apache.log4j.config.PropertyPrinter r0;
        java.lang.Object r1, r3;
        java.lang.String r2, $r6, $r9, $r11, $r12, r13;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r7, $r8, $r10;
        java.io.PrintWriter $r5;

        r0 := @this: org.apache.log4j.config.PropertyPrinter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        $z0 = r1 instanceof org.apache.log4j.Appender;

        if $z0 == 0 goto label1;

        $r12 = "name";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z2 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<org.apache.log4j.config.PropertyPrinter: boolean doCapitalize>;

        if $z1 == 0 goto label2;

        r13 = staticinvoke <org.apache.log4j.config.PropertyPrinter: java.lang.String capitalize(java.lang.String)>(r13);

     label2:
        $r5 = r0.<org.apache.log4j.config.PropertyPrinter: java.io.PrintWriter out>;

        $r4 = new java.lang.StringBuilder;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r9 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        return;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        java.lang.String r0, $r3;
        char $c0, $c2, $c3, $c4;
        boolean $z0, $z1;
        int $i1;
        java.lang.StringBuffer $r2;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 == 1 goto label1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c4);

        if $z1 == 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        virtualinvoke $r2.<java.lang.StringBuffer: void setCharAt(int,char)>(0, $c3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label2:
        return r0;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.io.PrintWriter $r1;
        java.io.PrintStream $r2;
        org.apache.log4j.config.PropertyPrinter $r3;

        r0 := @parameter0: java.lang.String[];

        $r3 = new org.apache.log4j.config.PropertyPrinter;

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r2);

        specialinvoke $r3.<org.apache.log4j.config.PropertyPrinter: void <init>(java.io.PrintWriter)>($r1);

        return;
    }
}
