public class org.apache.log4j.helpers.PatternParserTestCase extends junit.framework.TestCase
{
    static java.lang.String OUTPUT_FILE;
    static java.lang.String WITNESS_FILE;
    static java.lang.String msgPattern;
    org.apache.log4j.Logger root;
    org.apache.log4j.Logger logger;

    static void <clinit>()
    {
        <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String OUTPUT_FILE> = "output/PatternParser";

        <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String WITNESS_FILE> = "witness/PatternParser";

        <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String msgPattern> = "%m%n";

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.helpers.PatternParserTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.helpers.PatternParserTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.helpers.PatternParserTestCase r0;
        org.apache.log4j.Logger $r1, $r2;

        r0 := @this: org.apache.log4j.helpers.PatternParserTestCase;

        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root> = $r1;

        $r2 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void removeAllAppenders()>();

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.helpers.PatternParserTestCase r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.spi.LoggerRepository $r2;

        r0 := @this: org.apache.log4j.helpers.PatternParserTestCase;

        $r1 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        return;
    }

    public void mdcPattern() throws java.lang.Exception
    {
        org.apache.log4j.helpers.PatternParserTestCase r0;
        org.apache.log4j.PatternLayout $r8;
        java.lang.String $r9, $r12, $r13, $r15, $r30, $r33, $r34, $r36, $r38, $r39, $r41;
        org.apache.log4j.FileAppender $r10;
        java.lang.StringBuilder $r11, $r14, $r32, $r35, $r37, $r40;
        org.apache.log4j.Logger $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31;
        org.apache.log4j.Level $r17;
        boolean $z0;

        r0 := @this: org.apache.log4j.helpers.PatternParserTestCase;

        $r8 = new org.apache.log4j.PatternLayout;

        $r9 = <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String msgPattern>;

        specialinvoke $r8.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r9);

        $r10 = new org.apache.log4j.FileAppender;

        $r11 = new java.lang.StringBuilder;

        $r12 = <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String OUTPUT_FILE>;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_mdc");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r8, $r15, 0);

        $r16 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r16.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r10);

        $r18 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        $r17 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke $r18.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r17);

        $r19 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r19.<org.apache.log4j.Logger: void debug(java.lang.Object)>("starting mdc pattern test");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X%n");

        $r20 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r20.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, no key specified in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1}%n");

        $r21 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r21.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key1 in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key2}%n");

        $r22 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r22.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key2 in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key3}%n");

        $r23 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r23.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key3 in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1},%X{key2},%X{key3}%n");

        $r24 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r24.<org.apache.log4j.Logger: void debug(java.lang.Object)>("empty mdc, key1, key2, and key3 in pattern");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key1", "value1");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key2", "value2");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X%n");

        $r25 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r25.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, no key specified in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1}%n");

        $r26 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r26.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key1 in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key2}%n");

        $r27 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r27.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key2 in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key3}%n");

        $r28 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r28.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key3 in pattern");

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>("%m : %X{key1},%X{key2},%X{key3}%n");

        $r29 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r29.<org.apache.log4j.Logger: void debug(java.lang.Object)>("filled mdc, key1, key2, and key3 in pattern");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key1");

        staticinvoke <org.apache.log4j.MDC: void remove(java.lang.String)>("key2");

        $r30 = <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String msgPattern>;

        virtualinvoke $r8.<org.apache.log4j.PatternLayout: void setConversionPattern(java.lang.String)>($r30);

        $r31 = r0.<org.apache.log4j.helpers.PatternParserTestCase: org.apache.log4j.Logger root>;

        virtualinvoke $r31.<org.apache.log4j.Logger: void debug(java.lang.Object)>("finished mdc pattern test");

        $r32 = new java.lang.StringBuilder;

        $r33 = <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String OUTPUT_FILE>;

        $r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r33);

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>($r34);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_mdc");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = new java.lang.StringBuilder;

        $r38 = <org.apache.log4j.helpers.PatternParserTestCase: java.lang.String WITNESS_FILE>;

        $r39 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r38);

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>($r39);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_mdc");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r36, $r41);

        staticinvoke <org.apache.log4j.helpers.PatternParserTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r1;
        java.lang.String $r2;
        boolean $z0;
        org.apache.log4j.helpers.PatternParserTestCase $r3;

        $r1 = new junit.framework.TestSuite;

        specialinvoke $r1.<junit.framework.TestSuite: void <init>()>();

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("1.1.");

        if $z0 != 0 goto label1;

        $r3 = new org.apache.log4j.helpers.PatternParserTestCase;

        specialinvoke $r3.<org.apache.log4j.helpers.PatternParserTestCase: void <init>(java.lang.String)>("mdcPattern");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r3);

     label1:
        return $r1;
    }
}
