public class org.apache.log4j.jmx.AppenderDynamicMBean extends org.apache.log4j.jmx.AbstractDynamicMBean
{
    private javax.management.MBeanConstructorInfo[] dConstructors;
    private java.util.Vector dAttributes;
    private java.lang.String dClassName;
    private java.util.Hashtable dynamicProps;
    private javax.management.MBeanOperationInfo[] dOperations;
    private java.lang.String dDescription;
    private static org.apache.log4j.Logger cat;
    private org.apache.log4j.Appender appender;

    static void <clinit>()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/jmx/AppenderDynamicMBean");

        <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat> = $r0;

        return;
    }

    public void <init>(org.apache.log4j.Appender) throws java.beans.IntrospectionException
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        org.apache.log4j.Appender r1;
        javax.management.MBeanConstructorInfo[] $r2;
        java.util.Vector $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        java.util.Hashtable $r6;
        javax.management.MBeanOperationInfo[] $r7;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        r1 := @parameter0: org.apache.log4j.Appender;

        specialinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: void <init>()>();

        $r2 = newarray (javax.management.MBeanConstructorInfo)[1];

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Vector dAttributes> = $r3;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dClassName> = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>(int)>(5);

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Hashtable dynamicProps> = $r6;

        $r7 = newarray (javax.management.MBeanOperationInfo)[2];

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanOperationInfo[] dOperations> = $r7;

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dDescription> = "This MBean acts as a management facade for log4j appenders.";

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender> = r1;

        specialinvoke r0.<org.apache.log4j.jmx.AppenderDynamicMBean: void buildDynamicMBeanInfo()>();

        return;
    }

    private void buildDynamicMBeanInfo() throws java.beans.IntrospectionException
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        java.lang.reflect.Constructor[] r1;
        java.beans.BeanInfo r2;
        java.beans.PropertyDescriptor[] r3;
        int i0, i1;
        java.lang.String r4, $r23, r30;
        java.lang.reflect.Method r5, r6;
        java.lang.Class r7, $r8, $r13;
        javax.management.MBeanConstructorInfo $r9;
        java.lang.reflect.Constructor $r10;
        javax.management.MBeanConstructorInfo[] $r11;
        org.apache.log4j.Appender $r12;
        java.beans.PropertyDescriptor $r14, $r15, $r16;
        boolean $z0, $z1, $z4;
        javax.management.MBeanAttributeInfo $r17;
        java.util.Vector $r18;
        org.apache.log4j.jmx.MethodUnion $r19;
        java.util.Hashtable $r20;
        javax.management.MBeanOperationInfo $r25, $r28;
        javax.management.MBeanOperationInfo[] $r26, $r29;
        javax.management.MBeanParameterInfo $r27;
        javax.management.MBeanParameterInfo[] r31, r32;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r11 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r9 = new javax.management.MBeanConstructorInfo;

        $r10 = r1[0];

        specialinvoke $r9.<javax.management.MBeanConstructorInfo: void <init>(java.lang.String,java.lang.reflect.Constructor)>("AppenderDynamicMBean(): Constructs a AppenderDynamicMBean instance", $r10);

        $r11[0] = $r9;

        $r12 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        r2 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>($r13);

        r3 = interfaceinvoke r2.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        i0 = lengthof r3;

        i1 = 0;

        goto label7;

     label1:
        $r14 = r3[i1];

        r4 = virtualinvoke $r14.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r15 = r3[i1];

        r5 = virtualinvoke $r15.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r16 = r3[i1];

        r6 = virtualinvoke $r16.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if r5 == null goto label6;

        r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = specialinvoke r0.<org.apache.log4j.jmx.AppenderDynamicMBean: boolean isSupportedType(java.lang.Class)>(r7);

        if $z0 == 0 goto label6;

        $z1 = virtualinvoke r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "org/apache/log4j/Priority");

        if $z1 == 0 goto label2;

        r30 = "java.lang.String";

        goto label3;

     label2:
        r30 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

     label3:
        $r18 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Vector dAttributes>;

        $r17 = new javax.management.MBeanAttributeInfo;

        $r23 = r30;

        if r6 == null goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        specialinvoke $r17.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>(r4, $r23, "Dynamic", 1, $z4, 0);

        virtualinvoke $r18.<java.util.Vector: boolean add(java.lang.Object)>($r17);

        $r20 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Hashtable dynamicProps>;

        $r19 = new org.apache.log4j.jmx.MethodUnion;

        specialinvoke $r19.<org.apache.log4j.jmx.MethodUnion: void <init>(java.lang.reflect.Method,java.lang.reflect.Method)>(r5, r6);

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r19);

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < i0 goto label1;

        r31 = newarray (javax.management.MBeanParameterInfo)[0];

        $r26 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r25 = new javax.management.MBeanOperationInfo;

        specialinvoke $r25.<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanParameterInfo[],java.lang.String,int)>("activateOptions", "activateOptions(): add an appender", r31, "void", 1);

        $r26[0] = $r25;

        r32 = newarray (javax.management.MBeanParameterInfo)[1];

        $r27 = new javax.management.MBeanParameterInfo;

        specialinvoke $r27.<javax.management.MBeanParameterInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>("layout class", "java.lang.String", "layout class");

        r32[0] = $r27;

        $r29 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r28 = new javax.management.MBeanOperationInfo;

        specialinvoke $r28.<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanParameterInfo[],java.lang.String,int)>("setLayout", "setLayout(): add a layout", r32, "void", 1);

        $r29[1] = $r28;

        return;
    }

    private boolean isSupportedType(java.lang.Class)
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        java.lang.Class r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        if r1 != class "java/lang/String" goto label2;

        return 1;

     label2:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "org/apache/log4j/Priority");

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public javax.management.MBeanInfo getMBeanInfo()
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        javax.management.MBeanAttributeInfo[] r1;
        org.apache.log4j.Logger $r2;
        java.util.Vector $r3, $r4;
        int $i0;
        javax.management.MBeanInfo $r6;
        javax.management.MBeanNotificationInfo[] $r7;
        javax.management.MBeanOperationInfo[] $r8;
        javax.management.MBeanConstructorInfo[] $r9;
        java.lang.String $r10, $r11;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        $r2 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r2.<org.apache.log4j.Logger: void debug(java.lang.Object)>("getMBeanInfo called.");

        $r3 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Vector dAttributes>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        r1 = newarray (javax.management.MBeanAttributeInfo)[$i0];

        $r4 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Vector dAttributes>;

        virtualinvoke $r4.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        $r6 = new javax.management.MBeanInfo;

        $r11 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dClassName>;

        $r10 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dDescription>;

        $r9 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r8 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r7 = newarray (javax.management.MBeanNotificationInfo)[0];

        specialinvoke $r6.<javax.management.MBeanInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanAttributeInfo[],javax.management.MBeanConstructorInfo[],javax.management.MBeanOperationInfo[],javax.management.MBeanNotificationInfo[])>($r11, $r10, r1, $r9, $r8, $r7);

        return $r6;
    }

    public java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        java.lang.String[] r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4, $r6;
        org.apache.log4j.Appender $r7, $r8, $r9;
        org.apache.log4j.spi.OptionHandler r10;
        org.apache.log4j.Layout r11;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.lang.String[];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("activateOptions");

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        $z2 = $r8 instanceof org.apache.log4j.spi.OptionHandler;

        if $z2 == 0 goto label1;

        $r9 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        r10 = (org.apache.log4j.spi.OptionHandler) $r9;

        interfaceinvoke r10.<org.apache.log4j.spi.OptionHandler: void activateOptions()>();

        return "Options activated.";

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("setLayout");

        if $z1 == 0 goto label2;

        $r4 = r2[0];

        $r5 = (java.lang.String) $r4;

        $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r5, class "org/apache/log4j/Layout", null);

        r11 = (org.apache.log4j.Layout) $r6;

        $r7 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        interfaceinvoke $r7.<org.apache.log4j.Appender: void setLayout(org.apache.log4j.Layout)>(r11);

        virtualinvoke r0.<org.apache.log4j.jmx.AppenderDynamicMBean: void registerLayoutMBean(org.apache.log4j.Layout)>(r11);

     label2:
        return null;
    }

    void registerLayoutMBean(org.apache.log4j.Layout)
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        org.apache.log4j.Layout r1;
        java.lang.String r2, $r5, $r6, $r9, $r14, $r19, $r25, $r29, $r35, $r41, $r47;
        java.lang.StringBuilder $r3, $r7, $r10, $r11, $r13, $r17, $r18, $r22, $r24, $r26, $r27, $r28, $r31, $r33, $r34, $r37, $r39, $r40, $r43, $r45, $r46;
        org.apache.log4j.Appender $r4;
        java.lang.Class $r8;
        org.apache.log4j.Logger $r12, $r32, $r38, $r44;
        org.apache.log4j.jmx.LayoutDynamicMBean $r15;
        javax.management.ObjectName $r16;
        javax.management.MBeanServer $r20;
        boolean $z0;
        javax.management.MBeanAttributeInfo $r21;
        java.util.Vector $r23;
        java.lang.RuntimeException $r30;
        javax.management.JMException $r36;
        java.beans.IntrospectionException $r42;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        r1 := @parameter0: org.apache.log4j.Layout;

        if r1 != null goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        $r4 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        $r5 = staticinvoke <org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String getAppenderName(org.apache.log4j.Appender)>($r4);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",layout=");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Adding LayoutMBean:");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r14);

     label2:
        $r15 = new org.apache.log4j.jmx.LayoutDynamicMBean;

        specialinvoke $r15.<org.apache.log4j.jmx.LayoutDynamicMBean: void <init>(org.apache.log4j.Layout)>(r1);

        $r16 = new javax.management.ObjectName;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j:appender=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<javax.management.ObjectName: void <init>(java.lang.String)>($r19);

        $r20 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanServer server>;

        $z0 = interfaceinvoke $r20.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>($r16);

        if $z0 != 0 goto label7;

        virtualinvoke r0.<org.apache.log4j.jmx.AppenderDynamicMBean: void registerMBean(java.lang.Object,javax.management.ObjectName)>($r15, $r16);

        $r23 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Vector dAttributes>;

        $r21 = new javax.management.MBeanAttributeInfo;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("appender=");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("The ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" layout.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>($r25, "javax.management.ObjectName", $r29, 1, 1, 0);

        virtualinvoke $r23.<java.util.Vector: boolean add(java.lang.Object)>($r21);

     label3:
        goto label7;

     label4:
        $r36 := @caughtexception;

        $r38 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add DynamicLayoutMBean for [");

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r41, $r36);

        goto label7;

     label5:
        $r42 := @caughtexception;

        $r44 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add DynamicLayoutMBean for [");

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r47, $r42);

        goto label7;

     label6:
        $r30 := @caughtexception;

        $r32 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add DynamicLayoutMBean for [");

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r35, $r30);

     label7:
        return;

        catch javax.management.JMException from label2 to label3 with label4;
        catch java.beans.IntrospectionException from label2 to label3 with label5;
        catch java.lang.RuntimeException from label2 to label3 with label6;
    }

    protected org.apache.log4j.Logger getLogger()
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        org.apache.log4j.Logger $r1;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        $r1 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        return $r1;
    }

    public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        java.lang.String r1, $r6, $r9, $r12, $r17, $r19, $r27, $r31, $r34;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r10, $r11, $r14, $r15, $r16, $r18, $r25, $r26, $r30, $r32, $r33;
        org.apache.log4j.Logger $r3, $r41, $r44;
        org.apache.log4j.Appender $r8, $r21;
        boolean $z0, $z1, $z2;
        javax.management.AttributeNotFoundException $r13;
        java.lang.reflect.Method $r20, $r22;
        java.lang.Object $r23, $r48;
        javax.management.ObjectName $r24;
        javax.management.RuntimeOperationsException $r28;
        java.lang.IllegalArgumentException $r29;
        java.lang.RuntimeException $r35, $r40;
        java.lang.reflect.InvocationTargetException $r36;
        java.lang.Throwable $r37, $r39;
        java.lang.Thread $r38;
        java.lang.IllegalAccessException $r42;
        javax.management.MalformedObjectNameException $r43;
        java.util.Hashtable $r47;
        org.apache.log4j.jmx.MethodUnion r49;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label01;

        $r28 = new javax.management.RuntimeOperationsException;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke a getter of ");

        $r31 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dClassName>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute name");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r29, $r34);

        throw $r28;

     label01:
        $r3 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("getAttribute called with [");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("appender=");

        $r8 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        $r9 = interfaceinvoke $r8.<org.apache.log4j.Appender: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",layout");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r12);

        if $z0 == 0 goto label06;

     label02:
        $r24 = new javax.management.ObjectName;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("log4j:");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<javax.management.ObjectName: void <init>(java.lang.String)>($r27);

     label03:
        return $r24;

     label04:
        $r43 := @caughtexception;

        $r44 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r44.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("attributeName", $r43);

        goto label06;

     label05:
        $r40 := @caughtexception;

        $r41 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r41.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("attributeName", $r40);

     label06:
        $r47 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Hashtable dynamicProps>;

        $r48 = virtualinvoke $r47.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r49 = (org.apache.log4j.jmx.MethodUnion) $r48;

        if r49 == null goto label14;

        $r20 = r49.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method readMethod>;

        if $r20 == null goto label14;

     label07:
        $r22 = r49.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method readMethod>;

        $r21 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        $r23 = virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r21, null);

     label08:
        return $r23;

     label09:
        $r42 := @caughtexception;

        return null;

     label10:
        $r36 := @caughtexception;

        $r37 = virtualinvoke $r36.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r37 instanceof java.lang.InterruptedException;

        if $z1 != 0 goto label11;

        $r39 = virtualinvoke $r36.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r39 instanceof java.io.InterruptedIOException;

        if $z2 == 0 goto label12;

     label11:
        $r38 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r38.<java.lang.Thread: void interrupt()>();

     label12:
        return null;

     label13:
        $r35 := @caughtexception;

        return null;

     label14:
        $r13 = new javax.management.AttributeNotFoundException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot find ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attribute in ");

        $r17 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dClassName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>($r19);

        throw $r13;

        catch javax.management.MalformedObjectNameException from label02 to label03 with label04;
        catch java.lang.RuntimeException from label02 to label03 with label05;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label10;
        catch java.lang.RuntimeException from label07 to label08 with label13;
    }

    public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        javax.management.Attribute r1;
        java.lang.String r2, $r13, $r15, $r22, $r28, $r31, $r35, $r38;
        org.apache.log4j.jmx.MethodUnion r3;
        java.lang.Object[] r4;
        java.lang.Class[] r5;
        java.util.Hashtable $r6;
        java.lang.Object $r7, $r23, r47;
        boolean $z0, $z1, $z2;
        javax.management.AttributeNotFoundException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r27, $r29, $r30, $r34, $r36, $r37;
        java.lang.Class $r12, $r18;
        java.lang.reflect.Method $r16, $r17, $r20;
        org.apache.log4j.Appender $r19;
        org.apache.log4j.Level $r24;
        javax.management.RuntimeOperationsException $r25, $r32;
        java.lang.IllegalArgumentException $r26, $r33;
        java.lang.IllegalAccessException $r39;
        org.apache.log4j.Logger $r40, $r46, $r49;
        java.lang.reflect.InvocationTargetException $r41;
        java.lang.Throwable $r42, $r44;
        java.lang.Thread $r43;
        java.lang.RuntimeException $r45;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        r1 := @parameter0: javax.management.Attribute;

        if r1 != null goto label01;

        $r32 = new javax.management.RuntimeOperationsException;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute cannot be null");

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke a setter of ");

        $r35 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dClassName>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r33, $r38);

        throw $r32;

     label01:
        r2 = virtualinvoke r1.<javax.management.Attribute: java.lang.String getName()>();

        r47 = virtualinvoke r1.<javax.management.Attribute: java.lang.Object getValue()>();

        if r2 != null goto label02;

        $r25 = new javax.management.RuntimeOperationsException;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot invoke the setter of ");

        $r28 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.String dClassName>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null attribute name");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r26, $r31);

        throw $r25;

     label02:
        $r6 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.util.Hashtable dynamicProps>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.apache.log4j.jmx.MethodUnion) $r7;

        if r3 == null goto label11;

        $r16 = r3.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method writeMethod>;

        if $r16 == null goto label11;

        r4 = newarray (java.lang.Object)[1];

        $r17 = r3.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method writeMethod>;

        r5 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r18 = r5[0];

        if $r18 != class "org/apache/log4j/Priority" goto label03;

        $r22 = (java.lang.String) r47;

        $r23 = virtualinvoke r0.<org.apache.log4j.jmx.AppenderDynamicMBean: java.lang.Object getAttribute(java.lang.String)>(r2);

        $r24 = (org.apache.log4j.Level) $r23;

        r47 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r22, $r24);

     label03:
        r4[0] = r47;

     label04:
        $r20 = r3.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method writeMethod>;

        $r19 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        virtualinvoke $r20.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r19, r4);

     label05:
        goto label12;

     label06:
        $r41 := @caughtexception;

        $r42 = virtualinvoke $r41.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r42 instanceof java.lang.InterruptedException;

        if $z1 != 0 goto label07;

        $r44 = virtualinvoke $r41.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r44 instanceof java.io.InterruptedIOException;

        if $z2 == 0 goto label08;

     label07:
        $r43 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r43.<java.lang.Thread: void interrupt()>();

     label08:
        $r49 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r49.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("FIXME", $r41);

        goto label12;

     label09:
        $r39 := @caughtexception;

        $r40 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r40.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("FIXME", $r39);

        goto label12;

     label10:
        $r45 := @caughtexception;

        $r46 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r46.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("FIXME", $r45);

        goto label12;

     label11:
        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".layout");

        if $z0 != 0 goto label12;

        $r8 = new javax.management.AttributeNotFoundException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Attribute ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in ");

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label12:
        return;

        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label06;
        catch java.lang.IllegalAccessException from label04 to label05 with label09;
        catch java.lang.RuntimeException from label04 to label05 with label10;
    }

    public javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName)
    {
        org.apache.log4j.jmx.AppenderDynamicMBean r0;
        javax.management.MBeanServer r1;
        javax.management.ObjectName r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;
        org.apache.log4j.Logger $r4;
        java.lang.String $r8;
        org.apache.log4j.Appender $r9;
        org.apache.log4j.Layout $r10;

        r0 := @this: org.apache.log4j.jmx.AppenderDynamicMBean;

        r1 := @parameter0: javax.management.MBeanServer;

        r2 := @parameter1: javax.management.ObjectName;

        $r4 = <org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Logger cat>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("preRegister called. Server=");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", name=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r8);

        r0.<org.apache.log4j.jmx.AppenderDynamicMBean: javax.management.MBeanServer server> = r1;

        $r9 = r0.<org.apache.log4j.jmx.AppenderDynamicMBean: org.apache.log4j.Appender appender>;

        $r10 = interfaceinvoke $r9.<org.apache.log4j.Appender: org.apache.log4j.Layout getLayout()>();

        virtualinvoke r0.<org.apache.log4j.jmx.AppenderDynamicMBean: void registerLayoutMBean(org.apache.log4j.Layout)>($r10);

        return r2;
    }
}
