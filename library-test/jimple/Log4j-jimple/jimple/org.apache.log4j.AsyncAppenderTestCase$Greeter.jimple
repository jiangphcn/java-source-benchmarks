final class org.apache.log4j.AsyncAppenderTestCase$Greeter extends java.lang.Object implements java.lang.Runnable
{
    private final org.apache.log4j.Logger logger;
    private final int repetitions;

    public void <init>(org.apache.log4j.Logger, int)
    {
        org.apache.log4j.AsyncAppenderTestCase$Greeter r0;
        org.apache.log4j.Logger r1;
        int i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase$Greeter;

        r1 := @parameter0: org.apache.log4j.Logger;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("logger");

        throw $r2;

     label1:
        r0.<org.apache.log4j.AsyncAppenderTestCase$Greeter: org.apache.log4j.Logger logger> = r1;

        r0.<org.apache.log4j.AsyncAppenderTestCase$Greeter: int repetitions> = i0;

        return;
    }

    public void run()
    {
        org.apache.log4j.AsyncAppenderTestCase$Greeter r0;
        int $i0, i1;
        org.apache.log4j.Logger $r1;
        java.lang.InterruptedException $r2;
        java.lang.Thread $r3;

        r0 := @this: org.apache.log4j.AsyncAppenderTestCase$Greeter;

     label1:
        i1 = 0;

        goto label3;

     label2:
        $r1 = r0.<org.apache.log4j.AsyncAppenderTestCase$Greeter: org.apache.log4j.Logger logger>;

        virtualinvoke $r1.<org.apache.log4j.Logger: void info(java.lang.Object)>("Hello, World");

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        i1 = i1 + 1;

     label3:
        $i0 = r0.<org.apache.log4j.AsyncAppenderTestCase$Greeter: int repetitions>;

        if i1 < $i0 goto label2;

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label4 with label5;
    }
}
