public class org.apache.log4j.xml.XMLLayoutTestCase extends junit.framework.TestCase
{
    static java.lang.String TEMP;
    static java.lang.String FILTERED;
    org.apache.log4j.Logger root;
    org.apache.log4j.Logger logger;

    static void <clinit>()
    {
        <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP> = "output/temp";

        <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED> = "output/filtered";

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setUp()
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        org.apache.log4j.Logger $r1, $r3, $r4, $r6;
        org.apache.log4j.Level $r2, $r5;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>();

        r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root> = $r1;

        $r3 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        virtualinvoke $r3.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r2);

        $r4 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/log4j/xml/XMLLayoutTestCase");

        r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger> = $r4;

        $r6 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level TRACE>;

        virtualinvoke $r6.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r5);

        return;
    }

    public void tearDown()
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        org.apache.log4j.Logger $r1;
        org.apache.log4j.spi.LoggerRepository $r2;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r1 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.Logger: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>();

        return;
    }

    public void basic() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        org.apache.log4j.xml.XMLLayout $r2;
        org.apache.log4j.FileAppender $r3;
        java.lang.String $r4, $r8, $r9, $r13;
        org.apache.log4j.Logger $r5;
        org.apache.log4j.util.Filter[] $r6;
        org.apache.log4j.util.LineNumberFilter $r7;
        org.apache.log4j.util.XMLTimestampFilter $r10;
        org.apache.log4j.util.JunitTestRunnerFilter $r11;
        org.apache.log4j.util.SunReflectFilter $r12;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r2 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r2.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        $r5 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r3 = new org.apache.log4j.FileAppender;

        $r4 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        specialinvoke $r3.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r2, $r4, 0);

        virtualinvoke $r5.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r3);

        virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTestCase: void common()>();

        $r8 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        $r9 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $r6 = newarray (org.apache.log4j.util.Filter)[4];

        $r7 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r7.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r6[0] = $r7;

        $r10 = new org.apache.log4j.util.XMLTimestampFilter;

        specialinvoke $r10.<org.apache.log4j.util.XMLTimestampFilter: void <init>()>();

        $r6[1] = $r10;

        $r11 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r11.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r6[2] = $r11;

        $r12 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r12.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r6[3] = $r12;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r8, $r9, $r6);

        $r13 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r13, "witness/xmlLayout.1");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void locationInfo() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        org.apache.log4j.xml.XMLLayout $r2;
        org.apache.log4j.FileAppender $r3;
        java.lang.String $r4, $r8, $r9, $r14;
        org.apache.log4j.Logger $r5;
        org.apache.log4j.util.Filter[] $r6;
        org.apache.log4j.util.LineNumberFilter $r7;
        org.apache.log4j.util.XMLTimestampFilter $r10;
        org.apache.log4j.util.XMLLineAttributeFilter $r11;
        org.apache.log4j.util.JunitTestRunnerFilter $r12;
        org.apache.log4j.util.SunReflectFilter $r13;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r2 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r2.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        virtualinvoke $r2.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1);

        $r5 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r3 = new org.apache.log4j.FileAppender;

        $r4 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        specialinvoke $r3.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r2, $r4, 0);

        virtualinvoke $r5.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r3);

        virtualinvoke r0.<org.apache.log4j.xml.XMLLayoutTestCase: void common()>();

        $r8 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        $r9 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $r6 = newarray (org.apache.log4j.util.Filter)[5];

        $r7 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r7.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r6[0] = $r7;

        $r10 = new org.apache.log4j.util.XMLTimestampFilter;

        specialinvoke $r10.<org.apache.log4j.util.XMLTimestampFilter: void <init>()>();

        $r6[1] = $r10;

        $r11 = new org.apache.log4j.util.XMLLineAttributeFilter;

        specialinvoke $r11.<org.apache.log4j.util.XMLLineAttributeFilter: void <init>()>();

        $r6[2] = $r11;

        $r12 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r12.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r6[3] = $r12;

        $r13 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r13.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r6[4] = $r13;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r8, $r9, $r6);

        $r14 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r14, "witness/xmlLayout.2");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testCDATA() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        java.lang.String r2, $r5, $r14, $r15, $r22, $r23, $r26;
        org.apache.log4j.xml.XMLLayout $r3;
        org.apache.log4j.FileAppender $r4;
        org.apache.log4j.Logger $r6, $r9, $r10;
        java.lang.Thread $r7, $r8, $r11;
        org.apache.log4j.util.Filter[] $r12, $r20;
        org.apache.log4j.util.LineNumberFilter $r13, $r21;
        org.apache.log4j.util.XMLTimestampFilter $r16, $r24;
        org.apache.log4j.util.XMLLineAttributeFilter $r17, $r25;
        org.apache.log4j.util.SunReflectFilter $r18;
        org.apache.log4j.util.JunitTestRunnerFilter $r19;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r3 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r3.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        virtualinvoke $r3.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1);

        $r6 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r4 = new org.apache.log4j.FileAppender;

        $r5 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        specialinvoke $r4.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r3, $r5, 0);

        virtualinvoke $r6.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r4);

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke $r7.<java.lang.Thread: java.lang.String getName()>();

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void setName(java.lang.String)>("main");

        $r9 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r9.<org.apache.log4j.Logger: void trace(java.lang.Object)>("Message with embedded <![CDATA[<hello>hi</hello>]]>.");

        $r10 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r10.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Message with embedded <![CDATA[<hello>hi</hello>]]>.");

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void setName(java.lang.String)>(r2);

        $r14 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        $r15 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $r12 = newarray (org.apache.log4j.util.Filter)[5];

        $r13 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r13.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r12[0] = $r13;

        $r16 = new org.apache.log4j.util.XMLTimestampFilter;

        specialinvoke $r16.<org.apache.log4j.util.XMLTimestampFilter: void <init>()>();

        $r12[1] = $r16;

        $r17 = new org.apache.log4j.util.XMLLineAttributeFilter;

        specialinvoke $r17.<org.apache.log4j.util.XMLLineAttributeFilter: void <init>()>();

        $r12[2] = $r17;

        $r18 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r18.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r12[3] = $r18;

        $r19 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r19.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r12[4] = $r19;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r14, $r15, $r12);

        $r22 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        $r23 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $r20 = newarray (org.apache.log4j.util.Filter)[3];

        $r21 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r21.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r20[0] = $r21;

        $r24 = new org.apache.log4j.util.XMLTimestampFilter;

        specialinvoke $r24.<org.apache.log4j.util.XMLTimestampFilter: void <init>()>();

        $r20[1] = $r24;

        $r25 = new org.apache.log4j.util.XMLLineAttributeFilter;

        specialinvoke $r25.<org.apache.log4j.util.XMLLineAttributeFilter: void <init>()>();

        $r20[2] = $r25;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r22, $r23, $r20);

        $r26 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r26, "witness/xmlLayout.3");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testNull() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        java.lang.String r2, $r6, $r17, $r18, $r22;
        org.apache.log4j.xml.XMLLayout $r4;
        org.apache.log4j.FileAppender $r5;
        org.apache.log4j.Logger $r7, $r10, $r11, $r13;
        java.lang.Thread $r8, $r9, $r14;
        java.lang.Exception $r12;
        org.apache.log4j.util.Filter[] $r15;
        org.apache.log4j.util.LineNumberFilter $r16;
        org.apache.log4j.util.XMLTimestampFilter $r19;
        org.apache.log4j.util.JunitTestRunnerFilter $r20;
        org.apache.log4j.util.SunReflectFilter $r21;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r4 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r4.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        $r7 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r5 = new org.apache.log4j.FileAppender;

        $r6 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        specialinvoke $r5.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r4, $r6, 0);

        virtualinvoke $r7.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r5);

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void setName(java.lang.String)>("main");

        $r10 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r10.<org.apache.log4j.Logger: void debug(java.lang.Object)>("hi");

        $r11 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r11.<org.apache.log4j.Logger: void debug(java.lang.Object)>(null);

        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>(null);

        $r13 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r13.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>("hi", $r12);

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r14.<java.lang.Thread: void setName(java.lang.String)>(r2);

        $r17 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        $r18 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $r15 = newarray (org.apache.log4j.util.Filter)[4];

        $r16 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r16.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r15[0] = $r16;

        $r19 = new org.apache.log4j.util.XMLTimestampFilter;

        specialinvoke $r19.<org.apache.log4j.util.XMLTimestampFilter: void <init>()>();

        $r15[1] = $r19;

        $r20 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r20.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r15[2] = $r20;

        $r21 = new org.apache.log4j.util.SunReflectFilter;

        specialinvoke $r21.<org.apache.log4j.util.SunReflectFilter: void <init>()>();

        $r15[3] = $r21;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r17, $r18, $r15);

        $r22 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r22, "witness/xmlLayout.null");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMDC() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        java.util.Hashtable r2;
        org.apache.log4j.xml.XMLLayout $r3;
        org.apache.log4j.FileAppender $r4;
        java.lang.String $r5, $r10, $r11, $r14;
        org.apache.log4j.Logger $r6, $r7;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.LineNumberFilter $r9;
        org.apache.log4j.util.JunitTestRunnerFilter $r12;
        org.apache.log4j.util.XMLTimestampFilter $r13;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r3 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r3.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        virtualinvoke $r3.<org.apache.log4j.xml.XMLLayout: void setProperties(boolean)>(1);

        $r6 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r4 = new org.apache.log4j.FileAppender;

        $r5 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        specialinvoke $r4.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r3, $r5, 0);

        virtualinvoke $r6.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r4);

        r2 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r2 == null goto label1;

        virtualinvoke r2.<java.util.Hashtable: void clear()>();

     label1:
        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key1", "val1");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("key2", "val2");

        $r7 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r7.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Hello");

        $r10 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[3];

        $r9 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r8[0] = $r9;

        $r12 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r12.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r8[1] = $r12;

        $r13 = new org.apache.log4j.util.XMLTimestampFilter;

        specialinvoke $r13.<org.apache.log4j.util.XMLTimestampFilter: void <init>()>();

        $r8[2] = $r13;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r14 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r14, "witness/xmlLayout.mdc.1");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMDCEscaped() throws java.lang.Exception
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        java.util.Hashtable r2;
        org.apache.log4j.xml.XMLLayout $r3;
        org.apache.log4j.FileAppender $r4;
        java.lang.String $r5, $r10, $r11, $r14;
        org.apache.log4j.Logger $r6, $r7;
        org.apache.log4j.util.Filter[] $r8;
        org.apache.log4j.util.LineNumberFilter $r9;
        org.apache.log4j.util.JunitTestRunnerFilter $r12;
        org.apache.log4j.util.XMLTimestampFilter $r13;
        boolean $z0;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r3 = new org.apache.log4j.xml.XMLLayout;

        specialinvoke $r3.<org.apache.log4j.xml.XMLLayout: void <init>()>();

        virtualinvoke $r3.<org.apache.log4j.xml.XMLLayout: void setProperties(boolean)>(1);

        $r6 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r4 = new org.apache.log4j.FileAppender;

        $r5 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        specialinvoke $r4.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>($r3, $r5, 0);

        virtualinvoke $r6.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r4);

        r2 = staticinvoke <org.apache.log4j.MDC: java.util.Hashtable getContext()>();

        if r2 == null goto label1;

        virtualinvoke r2.<java.util.Hashtable: void clear()>();

     label1:
        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("blahAttribute", "<blah value=\'blah\'>");

        staticinvoke <org.apache.log4j.MDC: void put(java.lang.String,java.lang.Object)>("<blahKey value=\'blah\'/>", "blahValue");

        $r7 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        virtualinvoke $r7.<org.apache.log4j.Logger: void debug(java.lang.Object)>("Hello");

        $r10 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String TEMP>;

        $r11 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $r8 = newarray (org.apache.log4j.util.Filter)[3];

        $r9 = new org.apache.log4j.util.LineNumberFilter;

        specialinvoke $r9.<org.apache.log4j.util.LineNumberFilter: void <init>()>();

        $r8[0] = $r9;

        $r12 = new org.apache.log4j.util.JunitTestRunnerFilter;

        specialinvoke $r12.<org.apache.log4j.util.JunitTestRunnerFilter: void <init>()>();

        $r8[1] = $r12;

        $r13 = new org.apache.log4j.util.XMLTimestampFilter;

        specialinvoke $r13.<org.apache.log4j.util.XMLTimestampFilter: void <init>()>();

        $r8[2] = $r13;

        staticinvoke <org.apache.log4j.util.Transformer: void transform(java.lang.String,java.lang.String,org.apache.log4j.util.Filter[])>($r10, $r11, $r8);

        $r14 = <org.apache.log4j.xml.XMLLayoutTestCase: java.lang.String FILTERED>;

        $z0 = staticinvoke <org.apache.log4j.util.Compare: boolean compare(java.lang.String,java.lang.String)>($r14, "witness/xmlLayout.mdc.2");

        staticinvoke <org.apache.log4j.xml.XMLLayoutTestCase: void assertTrue(boolean)>($z0);

        return;
    }

    void common()
    {
        org.apache.log4j.xml.XMLLayoutTestCase r0;
        java.lang.String r1, $r9, $r13, $r17, $r21, $r25, $r29, $r33, $r37, $r41, $r45, $r50, $r55, $r60, $r64, $r68, $r72;
        java.lang.Thread $r3, $r4, $r73;
        org.apache.log4j.xml.XMLLayoutTestCase$X $r5;
        java.lang.StringBuilder $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r49, $r51, $r54, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71;
        org.apache.log4j.Logger $r7, $r11, $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r43, $r47, $r52, $r58, $r62, $r66, $r70;
        org.apache.log4j.Level $r48, $r53;
        java.lang.Exception $r56;
        int i1, i2, i3, i4, i5, i6, i7, i8;

        r0 := @this: org.apache.log4j.xml.XMLLayoutTestCase;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void setName(java.lang.String)>("main");

        $r5 = new org.apache.log4j.xml.XMLLayoutTestCase$X;

        specialinvoke $r5.<org.apache.log4j.xml.XMLLayoutTestCase$X: void <init>(org.apache.log4j.xml.XMLLayoutTestCase)>(r0);

        $r7 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i1 = -1 + 1;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r9);

        $r11 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r13);

        $r15 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i2 = i1 + 1;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r17);

        $r19 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.apache.log4j.Logger: void debug(java.lang.Object)>($r21);

        $r23 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i3 = i2 + 1;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<org.apache.log4j.Logger: void info(java.lang.Object)>($r25);

        $r27 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<org.apache.log4j.Logger: void info(java.lang.Object)>($r29);

        $r31 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i4 = i3 + 1;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r33);

        $r35 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r37);

        $r39 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i5 = i4 + 1;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<org.apache.log4j.Logger: void error(java.lang.Object)>($r41);

        $r43 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<org.apache.log4j.Logger: void error(java.lang.Object)>($r45);

        $r47 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r48 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i6 = i5 + 1;

        $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r47.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r48, $r50);

        $r52 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r53 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r52.<org.apache.log4j.Logger: void log(org.apache.log4j.Priority,java.lang.Object)>($r53, $r55);

        $r56 = new java.lang.Exception;

        specialinvoke $r56.<java.lang.Exception: void <init>(java.lang.String)>("Just testing");

        $r58 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i7 = i6 + 1;

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r58.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>($r60, $r56);

        $r62 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r62.<org.apache.log4j.Logger: void debug(java.lang.Object,java.lang.Throwable)>($r64, $r56);

        $r66 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger logger>;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        i8 = i7 + 1;

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r66.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r68, $r56);

        $r70 = r0.<org.apache.log4j.xml.XMLLayoutTestCase: org.apache.log4j.Logger root>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>(java.lang.String)>("Message ");

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r70.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r72, $r56);

        $r73 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r73.<java.lang.Thread: void setName(java.lang.String)>(r1);

        return;
    }

    public static junit.framework.Test suite()
    {
        junit.framework.TestSuite $r1;
        org.apache.log4j.xml.XMLLayoutTestCase $r2, $r3, $r4, $r5, $r6, $r7;

        $r1 = new junit.framework.TestSuite;

        specialinvoke $r1.<junit.framework.TestSuite: void <init>()>();

        $r2 = new org.apache.log4j.xml.XMLLayoutTestCase;

        specialinvoke $r2.<org.apache.log4j.xml.XMLLayoutTestCase: void <init>(java.lang.String)>("basic");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        $r3 = new org.apache.log4j.xml.XMLLayoutTestCase;

        specialinvoke $r3.<org.apache.log4j.xml.XMLLayoutTestCase: void <init>(java.lang.String)>("locationInfo");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r3);

        $r4 = new org.apache.log4j.xml.XMLLayoutTestCase;

        specialinvoke $r4.<org.apache.log4j.xml.XMLLayoutTestCase: void <init>(java.lang.String)>("testCDATA");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r4);

        $r5 = new org.apache.log4j.xml.XMLLayoutTestCase;

        specialinvoke $r5.<org.apache.log4j.xml.XMLLayoutTestCase: void <init>(java.lang.String)>("testNull");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r5);

        $r6 = new org.apache.log4j.xml.XMLLayoutTestCase;

        specialinvoke $r6.<org.apache.log4j.xml.XMLLayoutTestCase: void <init>(java.lang.String)>("testMDC");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r6);

        $r7 = new org.apache.log4j.xml.XMLLayoutTestCase;

        specialinvoke $r7.<org.apache.log4j.xml.XMLLayoutTestCase: void <init>(java.lang.String)>("testMDCEscaped");

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r7);

        return $r1;
    }
}
