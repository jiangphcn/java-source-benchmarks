public final enum class org.apache.commons.io.IOCase extends java.lang.Enum implements java.io.Serializable
{
    public static final enum org.apache.commons.io.IOCase SENSITIVE;
    public static final enum org.apache.commons.io.IOCase INSENSITIVE;
    public static final enum org.apache.commons.io.IOCase SYSTEM;
    private static final long serialVersionUID;
    private final java.lang.String name;
    private final transient boolean sensitive;
    private static final org.apache.commons.io.IOCase[] ENUM$VALUES;

    static void <clinit>()
    {
        org.apache.commons.io.IOCase $r0, $r1, $r2, $r6, $r7, $r8;
        boolean $z0, $z1;
        org.apache.commons.io.IOCase[] $r5;

        <org.apache.commons.io.IOCase: long serialVersionUID> = -6343169151696340687L;

        $r0 = new org.apache.commons.io.IOCase;

        specialinvoke $r0.<org.apache.commons.io.IOCase: void <init>(java.lang.String,int,java.lang.String,boolean)>("SENSITIVE", 0, "Sensitive", 1);

        <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE> = $r0;

        $r1 = new org.apache.commons.io.IOCase;

        specialinvoke $r1.<org.apache.commons.io.IOCase: void <init>(java.lang.String,int,java.lang.String,boolean)>("INSENSITIVE", 1, "Insensitive", 0);

        <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE> = $r1;

        $r2 = new org.apache.commons.io.IOCase;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        specialinvoke $r2.<org.apache.commons.io.IOCase: void <init>(java.lang.String,int,java.lang.String,boolean)>("SYSTEM", 2, "System", $z1);

        <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM> = $r2;

        $r5 = newarray (org.apache.commons.io.IOCase)[3];

        $r6 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        $r5[0] = $r6;

        $r7 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        $r5[1] = $r7;

        $r8 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $r5[2] = $r8;

        <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase[] ENUM$VALUES> = $r5;

        return;
    }

    public static org.apache.commons.io.IOCase forName(java.lang.String)
    {
        java.lang.String r0, $r4, $r8;
        org.apache.commons.io.IOCase r1;
        int i0, i1;
        org.apache.commons.io.IOCase[] $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7;

        r0 := @parameter0: java.lang.String;

        $r3 = staticinvoke <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase[] values()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label3;

     label1:
        r1 = $r3[i1];

        $r4 = virtualinvoke r1.<org.apache.commons.io.IOCase: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid IOCase name: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r5;
    }

    private void <init>(java.lang.String, int, java.lang.String, boolean)
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String r1, r2;
        int i0;
        boolean z0;

        r0 := @this: org.apache.commons.io.IOCase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.apache.commons.io.IOCase: java.lang.String name> = r2;

        r0.<org.apache.commons.io.IOCase: boolean sensitive> = z0;

        return;
    }

    private java.lang.Object readResolve()
    {
        org.apache.commons.io.IOCase r0, $r2;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.IOCase;

        $r1 = r0.<org.apache.commons.io.IOCase: java.lang.String name>;

        $r2 = staticinvoke <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase forName(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String getName()
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.IOCase;

        $r1 = r0.<org.apache.commons.io.IOCase: java.lang.String name>;

        return $r1;
    }

    public boolean isCaseSensitive()
    {
        org.apache.commons.io.IOCase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOCase;

        $z0 = r0.<org.apache.commons.io.IOCase: boolean sensitive>;

        return $z0;
    }

    public int checkCompareTo(java.lang.String, java.lang.String)
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String r1, r2;
        java.lang.NullPointerException $r3;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.io.IOCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("The strings must not be null");

        throw $r3;

     label2:
        $z0 = r0.<org.apache.commons.io.IOCase: boolean sensitive>;

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>(r2);

        goto label4;

     label3:
        $i0 = virtualinvoke r1.<java.lang.String: int compareToIgnoreCase(java.lang.String)>(r2);

     label4:
        return $i0;
    }

    public boolean checkEquals(java.lang.String, java.lang.String)
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String r1, r2;
        java.lang.NullPointerException $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.IOCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("The strings must not be null");

        throw $r3;

     label2:
        $z0 = r0.<org.apache.commons.io.IOCase: boolean sensitive>;

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        goto label4;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label4:
        return $z1;
    }

    public boolean checkStartsWith(java.lang.String, java.lang.String)
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String r1, r2;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: org.apache.commons.io.IOCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.commons.io.IOCase: boolean sensitive>;

        if $z0 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>($z2, 0, r2, 0, $i0);

        return $z1;
    }

    public boolean checkEndsWith(java.lang.String, java.lang.String)
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.io.IOCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $z0 = r0.<org.apache.commons.io.IOCase: boolean sensitive>;

        if $z0 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 - i0;

        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>($z2, $i2, r2, 0, i0);

        return $z1;
    }

    public int checkIndexOf(java.lang.String, int, java.lang.String)
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String r1, r2;
        int i0, i1, $i2, $i3, i4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOCase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        i1 = $i2 - $i3;

        if i1 < i0 goto label4;

        i4 = i0;

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.io.IOCase: boolean checkRegionMatches(java.lang.String,int,java.lang.String)>(r1, i4, r2);

        if $z0 == 0 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

     label3:
        if i4 <= i1 goto label1;

     label4:
        return -1;
    }

    public boolean checkRegionMatches(java.lang.String, int, java.lang.String)
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String r1, r2;
        int i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.io.IOCase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $z0 = r0.<org.apache.commons.io.IOCase: boolean sensitive>;

        if $z0 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>($z2, i0, r2, 0, $i1);

        return $z1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.io.IOCase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.IOCase;

        $r1 = r0.<org.apache.commons.io.IOCase: java.lang.String name>;

        return $r1;
    }

    public static org.apache.commons.io.IOCase[] values()
    {
        org.apache.commons.io.IOCase[] $r2, $r3;
        int $i1;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase[] ENUM$VALUES>;

        $i1 = lengthof $r2;

        $r3 = newarray (org.apache.commons.io.IOCase)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i1);

        return $r3;
    }

    public static org.apache.commons.io.IOCase valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.commons.io.IOCase $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "org/apache/commons/io/IOCase", r0);

        $r2 = (org.apache.commons.io.IOCase) $r1;

        return $r2;
    }
}
