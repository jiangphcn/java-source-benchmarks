public class org.apache.commons.io.input.CharSequenceReaderTest extends java.lang.Object
{
    private static final char NONE;

    static void <clinit>()
    {
        char[] $r0;
        char $c0;

        $r0 = newarray (char)[1];

        $c0 = $r0[0];

        <org.apache.commons.io.input.CharSequenceReaderTest: char NONE> = $c0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testClose() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        org.apache.commons.io.input.CharSequenceReader $r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        $r2 = new org.apache.commons.io.input.CharSequenceReader;

        specialinvoke $r2.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence)>("FooBar");

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Foo");

        virtualinvoke $r2.<java.io.Reader: void close()>();

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Foo");

        return;
    }

    public void testMarkSupported() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        org.apache.commons.io.input.CharSequenceReader $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        $r2 = new org.apache.commons.io.input.CharSequenceReader;

        specialinvoke $r2.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence)>("FooBar");

        $z0 = virtualinvoke $r2.<java.io.Reader: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        virtualinvoke $r2.<java.io.Reader: void close()>();

        return;
    }

    public void testMark() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        org.apache.commons.io.input.CharSequenceReader $r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        $r2 = new org.apache.commons.io.input.CharSequenceReader;

        specialinvoke $r2.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence)>("FooBar");

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Foo");

        virtualinvoke $r2.<java.io.Reader: void mark(int)>(0);

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Bar");

        virtualinvoke $r2.<java.io.Reader: void reset()>();

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Bar");

        virtualinvoke $r2.<java.io.Reader: void close()>();

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Foo");

        virtualinvoke $r2.<java.io.Reader: void reset()>();

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Foo");

        return;
    }

    public void testSkip() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        org.apache.commons.io.input.CharSequenceReader $r2;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l7;
        int $i6;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        $r2 = new org.apache.commons.io.input.CharSequenceReader;

        specialinvoke $r2.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence)>("FooBar");

        $l0 = virtualinvoke $r2.<java.io.Reader: long skip(long)>(3L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l0);

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkRead(java.io.Reader,java.lang.String)>($r2, "Bar");

        $l1 = virtualinvoke $r2.<java.io.Reader: long skip(long)>(3L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l1);

        virtualinvoke $r2.<java.io.Reader: void reset()>();

        $l2 = virtualinvoke $r2.<java.io.Reader: long skip(long)>(2L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l2);

        $l3 = virtualinvoke $r2.<java.io.Reader: long skip(long)>(10L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l3);

        $l4 = virtualinvoke $r2.<java.io.Reader: long skip(long)>(1L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r2.<java.io.Reader: void close()>();

        $l5 = virtualinvoke $r2.<java.io.Reader: long skip(long)>(20L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l5);

        $i6 = virtualinvoke $r2.<java.io.Reader: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        return;
    }

    public void testRead() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        org.apache.commons.io.input.CharSequenceReader $r2;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        $r2 = new org.apache.commons.io.input.CharSequenceReader;

        specialinvoke $r2.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence)>("Foo");

        $i0 = virtualinvoke $r2.<java.io.Reader: int read()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(70L, $l1);

        $i2 = virtualinvoke $r2.<java.io.Reader: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l3);

        $i4 = virtualinvoke $r2.<java.io.Reader: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l5);

        $i6 = virtualinvoke $r2.<java.io.Reader: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        $i8 = virtualinvoke $r2.<java.io.Reader: int read()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l9);

        virtualinvoke $r2.<java.io.Reader: void close()>();

        return;
    }

    public void testReadCharArray() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        org.apache.commons.io.input.CharSequenceReader $r2;
        int $i0, $i2, $i4, $i8;
        long $l1, $l3, $l5, $l9;
        char[] $r3, $r4, $r5, r6, r7, r8;
        char $c6, $c7;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        $r2 = new org.apache.commons.io.input.CharSequenceReader;

        specialinvoke $r2.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence)>("FooBar");

        r6 = newarray (char)[2];

        $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[])>(r6);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r3 = newarray (char)[2];

        $r3[0] = 70;

        $r3[1] = 111;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkArray(char[],char[])>($r3, r6);

        r7 = newarray (char)[3];

        $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[])>(r7);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r4 = newarray (char)[3];

        $r4[0] = 111;

        $r4[1] = 66;

        $r4[2] = 97;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkArray(char[],char[])>($r4, r7);

        r8 = newarray (char)[3];

        $i4 = virtualinvoke $r2.<java.io.Reader: int read(char[])>(r8);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $r5 = newarray (char)[3];

        $r5[0] = 114;

        $c6 = <org.apache.commons.io.input.CharSequenceReaderTest: char NONE>;

        $r5[1] = $c6;

        $c7 = <org.apache.commons.io.input.CharSequenceReaderTest: char NONE>;

        $r5[2] = $c7;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkArray(char[],char[])>($r5, r8);

        $i8 = virtualinvoke $r2.<java.io.Reader: int read(char[])>(r8);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l9);

        virtualinvoke $r2.<java.io.Reader: void close()>();

        return;
    }

    public void testReadCharArrayPortion() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        char[] r1, $r4, $r5;
        org.apache.commons.io.input.CharSequenceReader $r3;
        int $i0, $i5, $i8;
        long $l1, $l6, $l9;
        char $c2, $c3, $c4, $c7;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        r1 = newarray (char)[10];

        $r3 = new org.apache.commons.io.input.CharSequenceReader;

        specialinvoke $r3.<org.apache.commons.io.input.CharSequenceReader: void <init>(java.lang.CharSequence)>("FooBar");

        $i0 = virtualinvoke $r3.<java.io.Reader: int read(char[],int,int)>(r1, 3, 3);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r4 = newarray (char)[6];

        $c2 = <org.apache.commons.io.input.CharSequenceReaderTest: char NONE>;

        $r4[0] = $c2;

        $c3 = <org.apache.commons.io.input.CharSequenceReaderTest: char NONE>;

        $r4[1] = $c3;

        $c4 = <org.apache.commons.io.input.CharSequenceReaderTest: char NONE>;

        $r4[2] = $c4;

        $r4[3] = 70;

        $r4[4] = 111;

        $r4[5] = 111;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkArray(char[],char[])>($r4, r1);

        $i5 = virtualinvoke $r3.<java.io.Reader: int read(char[],int,int)>(r1, 0, 3);

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l6);

        $r5 = newarray (char)[7];

        $r5[0] = 66;

        $r5[1] = 97;

        $r5[2] = 114;

        $r5[3] = 70;

        $r5[4] = 111;

        $r5[5] = 111;

        $c7 = <org.apache.commons.io.input.CharSequenceReaderTest: char NONE>;

        $r5[6] = $c7;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceReaderTest: void checkArray(char[],char[])>($r5, r1);

        $i8 = virtualinvoke $r3.<java.io.Reader: int read(char[])>(r1);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l9);

        virtualinvoke $r3.<java.io.Reader: void close()>();

        return;
    }

    private void checkRead(java.io.Reader, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        java.io.Reader r1;
        java.lang.String r2, $r8;
        int $i0, $i3, i6;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        char $c1, $c4;
        long $l2, $l5;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.String;

        i6 = 0;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Read[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i6);

        $l2 = (long) $c1;

        $i3 = virtualinvoke r1.<java.io.Reader: int read()>();

        $c4 = (char) $i3;

        $l5 = (long) $c4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r8, $l2, $l5);

        i6 = i6 + 1;

     label2:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i6 < $i0 goto label1;

        return;
    }

    private void checkArray(char[], char[])
    {
        org.apache.commons.io.input.CharSequenceReaderTest r0;
        char[] r1, r2;
        int $i0, i5;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        char $c1, $c2;
        long $l3, $l4;

        r0 := @this: org.apache.commons.io.input.CharSequenceReaderTest;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        i5 = 0;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Compare[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $c1 = r1[i5];

        $l4 = (long) $c1;

        $c2 = r2[i5];

        $l3 = (long) $c2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r6, $l4, $l3);

        i5 = i5 + 1;

     label2:
        $i0 = lengthof r1;

        if i5 < $i0 goto label1;

        return;
    }
}
