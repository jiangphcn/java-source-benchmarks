public class org.apache.commons.io.input.BoundedReaderTest extends java.lang.Object
{
    private final java.io.Reader sr;
    private final java.io.Reader shortReader;

    public void <init>()
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        java.io.BufferedReader $r1, $r3;
        java.io.StringReader $r2, $r4;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.StringReader;

        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>("01234567890");

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr> = $r1;

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.StringReader;

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>("01");

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader shortReader> = $r3;

        return;
    }

    public void readTillEnd() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i3;
        long $l4;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i3 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void shortReader() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i2;
        long $l3;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader shortReader>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i2 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void readMulti() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        char[] r2;
        org.apache.commons.io.input.BoundedReader $r3;
        java.io.Reader $r4;
        int $i0, i10, i11;
        long $l1, $l3, $l5, $l7, $l9;
        char $c2, $c4, $c6, $c8;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r3 = new org.apache.commons.io.input.BoundedReader;

        $r4 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r3.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r4, 3);

        r2 = newarray (char)[4];

        i10 = 0;

        goto label2;

     label1:
        r2[i10] = 88;

        i10 = i10 + 1;

     label2:
        $i0 = lengthof r2;

        if i10 < $i0 goto label1;

        i11 = virtualinvoke $r3.<org.apache.commons.io.input.BoundedReader: int read(char[],int,int)>(r2, 0, 4);

        $l1 = (long) i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $c2 = r2[0];

        $l3 = (long) $c2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(48L, $l3);

        $c4 = r2[1];

        $l5 = (long) $c4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(49L, $l5);

        $c6 = r2[2];

        $l7 = (long) $c6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(50L, $l7);

        $c8 = r2[3];

        $l9 = (long) $c8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(88L, $l9);

        virtualinvoke $r3.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void readMultiWithOffset() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        char[] r2;
        org.apache.commons.io.input.BoundedReader $r3;
        java.io.Reader $r4;
        int $i0, i10, i11;
        long $l1, $l3, $l5, $l7, $l9;
        char $c2, $c4, $c6, $c8;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r3 = new org.apache.commons.io.input.BoundedReader;

        $r4 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r3.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r4, 3);

        r2 = newarray (char)[4];

        i10 = 0;

        goto label2;

     label1:
        r2[i10] = 88;

        i10 = i10 + 1;

     label2:
        $i0 = lengthof r2;

        if i10 < $i0 goto label1;

        i11 = virtualinvoke $r3.<org.apache.commons.io.input.BoundedReader: int read(char[],int,int)>(r2, 1, 2);

        $l1 = (long) i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $c2 = r2[0];

        $l3 = (long) $c2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(88L, $l3);

        $c4 = r2[1];

        $l5 = (long) $c4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(48L, $l5);

        $c6 = r2[2];

        $l7 = (long) $c6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(49L, $l7);

        $c8 = r2[3];

        $l9 = (long) $c8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(88L, $l9);

        virtualinvoke $r3.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void markReset() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i6;
        long $l7;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void mark(int)>(3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void reset()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i6 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void markResetWithMarkOutsideBoundedReaderMax() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i3;
        long $l4;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void mark(int)>(4);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i3 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i3;
        long $l4;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void mark(int)>(3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i3 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void markResetFromOffset1() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i3, $i6;
        long $l4, $l7;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void mark(int)>(3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i3 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void reset()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void mark(int)>(1);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i6 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void markResetMarkMore() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i6;
        long $l7;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void mark(int)>(4);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void reset()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i6 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void skipTest() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        org.apache.commons.io.input.BoundedReader $r2;
        java.io.Reader $r3;
        int $i2;
        long $l3;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r2 = new org.apache.commons.io.input.BoundedReader;

        $r3 = r0.<org.apache.commons.io.input.BoundedReaderTest: java.io.Reader sr>;

        specialinvoke $r2.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r3, 3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: long skip(long)>(2L);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $i2 = virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l3);

        virtualinvoke $r2.<org.apache.commons.io.input.BoundedReader: void close()>();

        return;
    }

    public void closeTest() throws java.io.IOException
    {
        org.apache.commons.io.input.BoundedReaderTest r0;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        org.apache.commons.io.input.BoundedReaderTest$1 $r5;
        java.io.StringReader $r6;
        org.apache.commons.io.input.BoundedReader $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.BoundedReaderTest;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r5 = new org.apache.commons.io.input.BoundedReaderTest$1;

        $r6 = new java.io.StringReader;

        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>("01234567890");

        specialinvoke $r5.<org.apache.commons.io.input.BoundedReaderTest$1: void <init>(org.apache.commons.io.input.BoundedReaderTest,java.io.Reader,java.util.concurrent.atomic.AtomicBoolean)>(r0, $r6, $r4);

        $r7 = new org.apache.commons.io.input.BoundedReader;

        specialinvoke $r7.<org.apache.commons.io.input.BoundedReader: void <init>(java.io.Reader,int)>($r5, 3);

        virtualinvoke $r7.<org.apache.commons.io.input.BoundedReader: void close()>();

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }
}
