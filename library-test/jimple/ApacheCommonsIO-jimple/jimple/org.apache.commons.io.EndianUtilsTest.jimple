public class org.apache.commons.io.EndianUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.io.EndianUtilsTest r0;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCtor()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        org.apache.commons.io.EndianUtils $r1;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r1 = new org.apache.commons.io.EndianUtils;

        specialinvoke $r1.<org.apache.commons.io.EndianUtils: void <init>()>();

        return;
    }

    public void testEOFException() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        java.io.EOFException $r5;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = newarray (byte)[0];

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

     label1:
        staticinvoke <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected EOFException");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.io.EOFException from label1 to label2 with label3;
    }

    public void testSwapShort()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        short $s0, $s2, $s4, $s6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $s0 = staticinvoke <org.apache.commons.io.EndianUtils: short swapShort(short)>(0);

        $l1 = (long) $s0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $s2 = staticinvoke <org.apache.commons.io.EndianUtils: short swapShort(short)>(258);

        $l3 = (long) $s2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(513L, $l3);

        $s4 = staticinvoke <org.apache.commons.io.EndianUtils: short swapShort(short)>(-1);

        $l5 = (long) $s4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l5);

        $s6 = staticinvoke <org.apache.commons.io.EndianUtils: short swapShort(short)>(513);

        $l7 = (long) $s6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(258L, $l7);

        return;
    }

    public void testSwapInteger()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(16909060);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67305985L, $l3);

        $i4 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(1);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16777216L, $l5);

        $i6 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(16777216);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $i8 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(286331153);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(286331153L, $l9);

        $i10 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(284151211);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1412567280L, $l11);

        $i12 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(-1426063360);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(171L, $l13);

        return;
    }

    public void testSwapLong()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>(0L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l0);

        $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>(72623859790382856L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(578437695752307201L, $l1);

        $l2 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>(-1L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $l3 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>(-6124895493223874560L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(171L, $l3);

        return;
    }

    public void testSwapFloat()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        float f0, f1, $f2, $f3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $f2 = staticinvoke <org.apache.commons.io.EndianUtils: float swapFloat(float)>(0.0F);

        $d0 = (double) $f2;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.0, $d0, 0.0);

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(16909060);

        f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(67305985);

        $d1 = (double) f1;

        $f3 = staticinvoke <org.apache.commons.io.EndianUtils: float swapFloat(float)>(f0);

        $d2 = (double) $f3;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d1, $d2, 0.0);

        return;
    }

    public void testSwapDouble()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        double d0, d1, $d2, $d3;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $d2 = staticinvoke <org.apache.commons.io.EndianUtils: double swapDouble(double)>(0.0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.0, $d2, 0.0);

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(72623859790382856L);

        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(578437695752307201L);

        $d3 = staticinvoke <org.apache.commons.io.EndianUtils: double swapDouble(double)>(d0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(d1, $d3, 0.0);

        return;
    }

    public void testSymmetry()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        float f0, $f1, $f2;
        double d0, $d1, $d2, $d3, $d4;
        short $s0, $s1;
        long $l2, $l5, $l6, $l7;
        int $i3, $i4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $s0 = staticinvoke <org.apache.commons.io.EndianUtils: short swapShort(short)>(258);

        $s1 = staticinvoke <org.apache.commons.io.EndianUtils: short swapShort(short)>($s0);

        $l2 = (long) $s1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(258L, $l2);

        $i3 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>(16909060);

        $i4 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>($i3);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16909060L, $l5);

        $l6 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>(72623859790382856L);

        $l7 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>($l6);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(72623859790382856L, $l7);

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(16909060);

        $d1 = (double) f0;

        $f1 = staticinvoke <org.apache.commons.io.EndianUtils: float swapFloat(float)>(f0);

        $f2 = staticinvoke <org.apache.commons.io.EndianUtils: float swapFloat(float)>($f1);

        $d2 = (double) $f2;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d1, $d2, 0.0);

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(72623859790382856L);

        $d3 = staticinvoke <org.apache.commons.io.EndianUtils: double swapDouble(double)>(d0);

        $d4 = staticinvoke <org.apache.commons.io.EndianUtils: double swapDouble(double)>($d3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(d0, $d4, 0.0);

        return;
    }

    public void testReadSwappedShort() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte[] $r3;
        short $s0, $s2;
        long $l1, $l3;
        java.io.ByteArrayInputStream $r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[2];

        $r3[0] = 2;

        $r3[1] = 1;

        $s0 = staticinvoke <org.apache.commons.io.EndianUtils: short readSwappedShort(byte[],int)>($r3, 0);

        $l1 = (long) $s0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(258L, $l1);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $s2 = staticinvoke <org.apache.commons.io.EndianUtils: short readSwappedShort(java.io.InputStream)>($r4);

        $l3 = (long) $s2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(258L, $l3);

        return;
    }

    public void testWriteSwappedShort() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte $b0, $b2, $b4, $b6;
        long $l1, $l3, $l5, $l7;
        java.io.ByteArrayOutputStream $r2;
        byte[] r3, r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        r3 = newarray (byte)[2];

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedShort(byte[],int,short)>(r3, 0, 258);

        $b0 = r3[0];

        $l1 = (long) $b0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $b2 = r3[1];

        $l3 = (long) $b2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(2);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)>($r2, 258);

        r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $b4 = r4[0];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $b6 = r4[1];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        return;
    }

    public void testReadSwappedUnsignedShort() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte[] $r3;
        int $i0, $i2;
        long $l1, $l3;
        java.io.ByteArrayInputStream $r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[2];

        $r3[0] = 2;

        $r3[1] = 1;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(byte[],int)>($r3, 0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(258L, $l1);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $i2 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(java.io.InputStream)>($r4);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(258L, $l3);

        return;
    }

    public void testReadSwappedInteger() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte[] $r3;
        int $i0, $i2;
        long $l1, $l3;
        java.io.ByteArrayInputStream $r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 4;

        $r3[1] = 3;

        $r3[2] = 2;

        $r3[3] = 1;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(byte[],int)>($r3, 0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16909060L, $l1);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $i2 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>($r4);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16909060L, $l3);

        return;
    }

    public void testWriteSwappedInteger() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte $b0, $b2, $b4, $b6, $b8, $b10, $b12, $b14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        java.io.ByteArrayOutputStream $r2;
        byte[] r3, r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        r3 = newarray (byte)[4];

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(byte[],int,int)>(r3, 0, 16909060);

        $b0 = r3[0];

        $l1 = (long) $b0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $b2 = r3[1];

        $l3 = (long) $b2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $b4 = r3[2];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $b6 = r3[3];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(4);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)>($r2, 16909060);

        r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $b8 = r4[0];

        $l9 = (long) $b8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        $b10 = r4[1];

        $l11 = (long) $b10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l11);

        $b12 = r4[2];

        $l13 = (long) $b12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l13);

        $b14 = r4[3];

        $l15 = (long) $b14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        return;
    }

    public void testReadSwappedUnsignedInteger() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte[] $r3;
        long $l0, $l1;
        java.io.ByteArrayInputStream $r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 4;

        $r3[1] = 3;

        $r3[2] = 2;

        $r3[3] = 1;

        $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(byte[],int)>($r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16909060L, $l0);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(java.io.InputStream)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16909060L, $l1);

        return;
    }

    public void testReadSwappedLong() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte[] $r3;
        long $l0, $l1;
        java.io.ByteArrayInputStream $r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[8];

        $r3[0] = 8;

        $r3[1] = 7;

        $r3[2] = 6;

        $r3[3] = 5;

        $r3[4] = 4;

        $r3[5] = 3;

        $r3[6] = 2;

        $r3[7] = 1;

        $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>($r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(72623859790382856L, $l0);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(72623859790382856L, $l1);

        return;
    }

    public void testWriteSwappedLong() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte $b0, $b2, $b4, $b6, $b8, $b10, $b12, $b14, $b16, $b18, $b20, $b22, $b24, $b26, $b28, $b30;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31;
        java.io.ByteArrayOutputStream $r2;
        byte[] r3, r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        r3 = newarray (byte)[8];

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(byte[],int,long)>(r3, 0, 72623859790382856L);

        $b0 = r3[0];

        $l1 = (long) $b0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l1);

        $b2 = r3[1];

        $l3 = (long) $b2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l3);

        $b4 = r3[2];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l5);

        $b6 = r3[3];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l7);

        $b8 = r3[4];

        $l9 = (long) $b8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        $b10 = r3[5];

        $l11 = (long) $b10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l11);

        $b12 = r3[6];

        $l13 = (long) $b12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l13);

        $b14 = r3[7];

        $l15 = (long) $b14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(8);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)>($r2, 72623859790382856L);

        r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $b16 = r4[0];

        $l17 = (long) $b16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l17);

        $b18 = r4[1];

        $l19 = (long) $b18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l19);

        $b20 = r4[2];

        $l21 = (long) $b20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l21);

        $b22 = r4[3];

        $l23 = (long) $b22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l23);

        $b24 = r4[4];

        $l25 = (long) $b24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l25);

        $b26 = r4[5];

        $l27 = (long) $b26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l27);

        $b28 = r4[6];

        $l29 = (long) $b28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l29);

        $b30 = r4[7];

        $l31 = (long) $b30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l31);

        return;
    }

    public void testReadSwappedFloat() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        float f0, f1, $f2;
        byte[] $r3;
        double $d0, $d1, $d2, $d3;
        java.io.ByteArrayInputStream $r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[4];

        $r3[0] = 4;

        $r3[1] = 3;

        $r3[2] = 2;

        $r3[3] = 1;

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(16909060);

        f1 = staticinvoke <org.apache.commons.io.EndianUtils: float readSwappedFloat(byte[],int)>($r3, 0);

        $d1 = (double) f0;

        $d0 = (double) f1;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d1, $d0, 0.0);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $d2 = (double) f0;

        $f2 = staticinvoke <org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)>($r4);

        $d3 = (double) $f2;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d2, $d3, 0.0);

        return;
    }

    public void testWriteSwappedFloat() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        float f0;
        byte $b0, $b2, $b4, $b6, $b8, $b10, $b12, $b14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        java.io.ByteArrayOutputStream $r2;
        byte[] r3, r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        r3 = newarray (byte)[4];

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(16909060);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedFloat(byte[],int,float)>(r3, 0, f0);

        $b0 = r3[0];

        $l1 = (long) $b0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        $b2 = r3[1];

        $l3 = (long) $b2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $b4 = r3[2];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $b6 = r3[3];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(4);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedFloat(java.io.OutputStream,float)>($r2, f0);

        r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $b8 = r4[0];

        $l9 = (long) $b8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        $b10 = r4[1];

        $l11 = (long) $b10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l11);

        $b12 = r4[2];

        $l13 = (long) $b12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l13);

        $b14 = r4[3];

        $l15 = (long) $b14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        return;
    }

    public void testReadSwappedDouble() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        double d0, d1, $d2;
        byte[] $r3;
        java.io.ByteArrayInputStream $r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[8];

        $r3[0] = 8;

        $r3[1] = 7;

        $r3[2] = 6;

        $r3[3] = 5;

        $r3[4] = 4;

        $r3[5] = 3;

        $r3[6] = 2;

        $r3[7] = 1;

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(72623859790382856L);

        d1 = staticinvoke <org.apache.commons.io.EndianUtils: double readSwappedDouble(byte[],int)>($r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(d0, d1, 0.0);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $d2 = staticinvoke <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(d0, $d2, 0.0);

        return;
    }

    public void testWriteSwappedDouble() throws java.io.IOException
    {
        org.apache.commons.io.EndianUtilsTest r0;
        double d0;
        byte $b0, $b2, $b4, $b6, $b8, $b10, $b12, $b14, $b16, $b18, $b20, $b22, $b24, $b26, $b28, $b30;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31;
        java.io.ByteArrayOutputStream $r2;
        byte[] r3, r4;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        r3 = newarray (byte)[8];

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(72623859790382856L);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedDouble(byte[],int,double)>(r3, 0, d0);

        $b0 = r3[0];

        $l1 = (long) $b0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l1);

        $b2 = r3[1];

        $l3 = (long) $b2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l3);

        $b4 = r3[2];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l5);

        $b6 = r3[3];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l7);

        $b8 = r3[4];

        $l9 = (long) $b8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        $b10 = r3[5];

        $l11 = (long) $b10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l11);

        $b12 = r3[6];

        $l13 = (long) $b12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l13);

        $b14 = r3[7];

        $l15 = (long) $b14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(8);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedDouble(java.io.OutputStream,double)>($r2, d0);

        r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $b16 = r4[0];

        $l17 = (long) $b16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l17);

        $b18 = r4[1];

        $l19 = (long) $b18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l19);

        $b20 = r4[2];

        $l21 = (long) $b20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l21);

        $b22 = r4[3];

        $l23 = (long) $b22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l23);

        $b24 = r4[4];

        $l25 = (long) $b24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l25);

        $b26 = r4[5];

        $l27 = (long) $b26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l27);

        $b28 = r4[6];

        $l29 = (long) $b28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l29);

        $b30 = r4[7];

        $l31 = (long) $b30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l31);

        return;
    }

    public void testSymmetryOfLong()
    {
        org.apache.commons.io.EndianUtilsTest r0;
        double d0, d1;
        int i0, i3;
        long l1, l2;
        double[] $r3;
        byte[] r4, r5;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (double)[5];

        $r3[0] = 34.345;

        $r3[1] = -345.5645;

        $r3[2] = 545.12;

        $r3[3] = 10.043;

        $r3[4] = 7.123456789123;

        i0 = lengthof $r3;

        i3 = 0;

        goto label2;

     label1:
        d0 = $r3[i3];

        r4 = newarray (byte)[8];

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(byte[],int,long)>(r4, 0, l1);

        l2 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>(r4, 0);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l1, l2);

        r5 = newarray (byte)[8];

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedDouble(byte[],int,double)>(r5, 0, d0);

        d1 = staticinvoke <org.apache.commons.io.EndianUtils: double readSwappedDouble(byte[],int)>(r5, 0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(d0, d1, 0.0);

        i3 = i3 + 1;

     label2:
        if i3 < i0 goto label1;

        return;
    }

    public void testUnsignedOverrun() throws java.lang.Exception
    {
        org.apache.commons.io.EndianUtilsTest r0;
        byte[] $r3;
        java.io.ByteArrayInputStream $r4;
        long l1, l2;

        r0 := @this: org.apache.commons.io.EndianUtilsTest;

        $r3 = newarray (byte)[4];

        $r3[3] = -128;

        l1 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(byte[],int)>($r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("readSwappedUnsignedInteger(byte[], int) was incorrect", 2147483648L, l1);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        l2 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedUnsignedInteger(java.io.InputStream)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("readSwappedUnsignedInteger(InputStream) was incorrect", 2147483648L, l2);

        return;
    }
}
