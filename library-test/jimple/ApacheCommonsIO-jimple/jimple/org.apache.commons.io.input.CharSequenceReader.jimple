public class org.apache.commons.io.input.CharSequenceReader extends java.io.Reader implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.CharSequence charSequence;
    private int idx;
    private int mark;

    public void <init>(java.lang.CharSequence)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        java.lang.CharSequence r1, $r3;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = "";

     label2:
        r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence> = $r3;

        return;
    }

    public void close()
    {
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = 0;

        r0.<org.apache.commons.io.input.CharSequenceReader: int mark> = 0;

        return;
    }

    public void mark(int)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        int i0, $i1;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        r0.<org.apache.commons.io.input.CharSequenceReader: int mark> = $i1;

        return;
    }

    public boolean markSupported()
    {
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        return 1;
    }

    public int read()
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        java.lang.CharSequence $r1, $r2;
        int $i0, $i1, $i2, $i3;
        char $c4;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 < $i1 goto label1;

        return -1;

     label1:
        $r2 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i2 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = $i3;

        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i2);

        return $c4;
    }

    public int read(char[], int, int)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, i10, i11;
        java.lang.CharSequence $r2;
        char $c7;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r2 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i4 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i3 < $i4 goto label1;

        return -1;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Character array is missing");

        throw $r3;

     label2:
        if i1 < 0 goto label3;

        if i0 < 0 goto label3;

        $i6 = i0 + i1;

        $i5 = lengthof r1;

        if $i6 <= $i5 goto label4;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Array Size=");

        $i9 = lengthof r1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label4:
        i10 = 0;

        i11 = 0;

        goto label7;

     label5:
        i2 = virtualinvoke r0.<org.apache.commons.io.input.CharSequenceReader: int read()>();

        if i2 != -1 goto label6;

        return i10;

     label6:
        $i8 = i0 + i11;

        $c7 = (char) i2;

        r1[$i8] = $c7;

        i10 = i10 + 1;

        i11 = i11 + 1;

     label7:
        if i11 < i1 goto label5;

        return i10;
    }

    public void reset()
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        int $i0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int mark>;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = $i0;

        return;
    }

    public long skip(long)
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        long l0, $l8, $l9, $l10, $l11, $l13;
        int i1, i2, $i4, $i5, $i6, $i7, $i12;
        byte $b3;
        java.lang.CharSequence $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        l0 := @parameter0: long;

        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Number of characters to skip is less than zero: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        $i4 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i5 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i4 < $i5 goto label2;

        return -1L;

     label2:
        $r2 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i6 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $l10 = (long) $i6;

        $i7 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $l8 = (long) $i7;

        $l9 = $l8 + l0;

        $l11 = staticinvoke <java.lang.Math: long min(long,long)>($l10, $l9);

        i1 = (int) $l11;

        $i12 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        i2 = i1 - $i12;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = i1;

        $l13 = (long) i2;

        return $l13;
    }

    public java.lang.String toString()
    {
        org.apache.commons.io.input.CharSequenceReader r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.input.CharSequenceReader: long serialVersionUID> = 3724187752191401220L;

        return;
    }
}
