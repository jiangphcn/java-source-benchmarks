public class org.apache.commons.io.comparator.SizeFileComparator extends org.apache.commons.io.comparator.AbstractFileComparator implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.util.Comparator SIZE_COMPARATOR;
    public static final java.util.Comparator SIZE_REVERSE;
    public static final java.util.Comparator SIZE_SUMDIR_COMPARATOR;
    public static final java.util.Comparator SIZE_SUMDIR_REVERSE;
    private final boolean sumDirectoryContents;

    static void <clinit>()
    {
        org.apache.commons.io.comparator.SizeFileComparator $r0, $r3;
        org.apache.commons.io.comparator.ReverseComparator $r1, $r4;
        java.util.Comparator $r2, $r5;

        <org.apache.commons.io.comparator.SizeFileComparator: long serialVersionUID> = -1201561106411416190L;

        $r0 = new org.apache.commons.io.comparator.SizeFileComparator;

        specialinvoke $r0.<org.apache.commons.io.comparator.SizeFileComparator: void <init>()>();

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_COMPARATOR> = $r0;

        $r1 = new org.apache.commons.io.comparator.ReverseComparator;

        $r2 = <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_COMPARATOR>;

        specialinvoke $r1.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r2);

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_REVERSE> = $r1;

        $r3 = new org.apache.commons.io.comparator.SizeFileComparator;

        specialinvoke $r3.<org.apache.commons.io.comparator.SizeFileComparator: void <init>(boolean)>(1);

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_COMPARATOR> = $r3;

        $r4 = new org.apache.commons.io.comparator.ReverseComparator;

        $r5 = <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_COMPARATOR>;

        specialinvoke $r4.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r5);

        <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_REVERSE> = $r4;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();

        r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> = 0;

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        boolean z0;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();

        r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> = z0;

        return;
    }

    public int compare(java.io.File, java.io.File)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.io.File r1, r2;
        long l0, $l4, l5, $l7, l8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte $b1, $b2;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label03;

        $z4 = r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;

        if $z4 == 0 goto label01;

        $z5 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label01;

        $l4 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r1);

        goto label02;

     label01:
        $l4 = 0L;

     label02:
        l5 = $l4;

        goto label04;

     label03:
        l5 = virtualinvoke r1.<java.io.File: long length()>();

     label04:
        $z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label07;

        $z2 = r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;

        if $z2 == 0 goto label05;

        $z3 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label05;

        $l7 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r2);

        goto label06;

     label05:
        $l7 = 0L;

     label06:
        l8 = $l7;

        goto label08;

     label07:
        l8 = virtualinvoke r2.<java.io.File: long length()>();

     label08:
        l0 = l5 - l8;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label09;

        return -1;

     label09:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label10;

        return 1;

     label10:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.String $r2, $r3, $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.lang.String toString()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[sumDirectoryContents=");

        $z0 = r0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.lang.Object r1, r2;
        java.io.File $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.io.File) r1;

        $r3 = (java.io.File) r2;

        $i0 = virtualinvoke r0.<org.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)>($r4, $r3);

        return $i0;
    }

    public volatile java.util.List sort(java.util.List)
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.util.List r1, $r2;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        r1 := @parameter0: java.util.List;

        $r2 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.util.List sort(java.util.List)>(r1);

        return $r2;
    }

    public transient volatile java.io.File[] sort(java.io.File[])
    {
        org.apache.commons.io.comparator.SizeFileComparator r0;
        java.io.File[] r1, $r2;

        r0 := @this: org.apache.commons.io.comparator.SizeFileComparator;

        r1 := @parameter0: java.io.File[];

        $r2 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.io.File[] sort(java.io.File[])>(r1);

        return $r2;
    }
}
