public class org.apache.commons.io.output.ByteArrayOutputStream extends java.io.OutputStream
{
    private static final byte[] EMPTY_BYTE_ARRAY;
    private final java.util.List buffers;
    private int currentBufferIndex;
    private int filledBufferSum;
    private byte[] currentBuffer;
    private int count;
    private boolean reuseBuffers;

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(1024);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0;
        java.util.ArrayList $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers> = $r2;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: boolean reuseBuffers> = 1;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Negative initial size: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label1:
        entermonitor r0;

     label2:
        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i0);

        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void needNewBuffer(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        java.util.List $r1, $r7, $r10;
        byte[] $r2, $r3, $r4, $r5, $r6, $r9, $r12;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        if $i1 >= $i3 goto label1;

        $i14 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $r9 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i13 = lengthof $r9;

        $i15 = $i14 + $i13;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = $i15;

        $i16 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $i17 = $i16 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = $i17;

        $r10 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i18 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i18);

        $r12 = (byte[]) $r11;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r12;

        goto label4;

     label1:
        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        if $r2 != null goto label2;

        i19 = i0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = 0;

        goto label3;

     label2:
        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i4 = lengthof $r3;

        $i7 = $i4 << 1;

        $i5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $i6 = i0 - $i5;

        i19 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        $i9 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i8 = lengthof $r4;

        $i10 = $i9 + $i8;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = $i10;

     label3:
        $i11 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $i12 = $i11 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = $i12;

        $r5 = newarray (byte)[i19];

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r5;

        $r7 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r6 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        return;
    }

    public void write(byte[], int, int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        byte[] r1, $r4, $r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        java.lang.Throwable $r6;
        java.lang.IndexOutOfBoundsException $r7;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label01;

        $i4 = lengthof r1;

        if i0 > $i4 goto label01;

        if i1 < 0 goto label01;

        $i6 = i0 + i1;

        $i5 = lengthof r1;

        if $i6 > $i5 goto label01;

        $i7 = i0 + i1;

        if $i7 >= 0 goto label02;

     label01:
        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r7;

     label02:
        if i1 != 0 goto label03;

        return;

     label03:
        entermonitor r0;

     label04:
        $i8 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        i2 = $i8 + i1;

        i15 = i1;

        $i10 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i9 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        i16 = $i10 - $i9;

        goto label06;

     label05:
        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i11 = lengthof $r4;

        $i12 = $i11 - i16;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i15, $i12);

        $i13 = i0 + i1;

        $i14 = $i13 - i15;

        $r5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i14, $r5, i16, i3);

        i15 = i15 - i3;

        if i15 <= 0 goto label06;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i2);

        i16 = 0;

     label06:
        if i15 > 0 goto label05;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = i2;

        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r6;

     label10:
        return;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public synchronized void write(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, i9;
        byte[] $r1, $r2;
        byte $b4;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        i9 = $i2 - $i1;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i3 = lengthof $r1;

        if i9 != $i3 goto label1;

        $i7 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i8 = $i7 + 1;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i8);

        i9 = 0;

     label1:
        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $b4 = (byte) i0;

        $r2[i9] = $b4;

        $i5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i6 = $i5 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = $i6;

        return;
    }

    public synchronized int write(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.io.InputStream r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: java.io.InputStream;

        i10 = 0;

        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        i11 = $i1 - $i0;

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i2 = lengthof $r2;

        $i3 = $i2 - i11;

        i12 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>($r3, i11, $i3);

        goto label3;

     label1:
        i10 = i10 + i12;

        i11 = i11 + i12;

        $i4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i5 = $i4 + i12;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = $i5;

        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i6 = lengthof $r4;

        if i11 != $i6 goto label2;

        $r7 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i9 = lengthof $r7;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i9);

        i11 = 0;

     label2:
        $r6 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $r5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i7 = lengthof $r5;

        $i8 = $i7 - i11;

        i12 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>($r6, i11, $i8);

     label3:
        if i12 != -1 goto label1;

        return i10;
    }

    public synchronized int size()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int $i0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        return;
    }

    public synchronized void reset()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0, $i1;
        boolean $z0;
        java.util.List $r1, $r4, $r5;
        java.lang.Object $r2, $r6;
        byte[] $r3, $r7;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = 0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = 0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = 0;

        $z0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: boolean reuseBuffers>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $r7 = (byte[]) $r6;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r7;

        goto label2;

     label1:
        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = null;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (byte[]) $r2;

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i0);

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: boolean reuseBuffers> = 1;

     label2:
        return;
    }

    public synchronized void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.io.OutputStream r1;
        byte[] r2;
        java.util.Iterator r3;
        int i0, $i1, i2;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        r3 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (byte[]) $r5;

        $i1 = lengthof r2;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i2);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0);

        i2 = i2 - i0;

        if i2 != 0 goto label2;

        goto label3;

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    public static java.io.InputStream toBufferedInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0, $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream,int)>(r0, 1024);

        return $r1;
    }

    public static java.io.InputStream toBufferedInputStream(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0, $r3;
        int i0;
        org.apache.commons.io.output.ByteArrayOutputStream $r2;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        $r2 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(i0);

        virtualinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: int write(java.io.InputStream)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream()>();

        return $r3;
    }

    public synchronized java.io.InputStream toInputStream()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        byte[] r2;
        java.util.Iterator r3;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r4;
        java.util.List $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.io.ByteArrayInputStream $r8;
        java.io.SequenceInputStream $r9;
        java.util.Enumeration $r10;
        org.apache.commons.io.input.ClosedInputStream $r11;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        if i3 != 0 goto label1;

        $r11 = new org.apache.commons.io.input.ClosedInputStream;

        specialinvoke $r11.<org.apache.commons.io.input.ClosedInputStream: void <init>()>();

        return $r11;

     label1:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        $r6 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (byte[]) $r7;

        $i2 = lengthof r2;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i3);

        $r8 = new java.io.ByteArrayInputStream;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r2, 0, i0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i3 = i3 - i0;

        if i3 != 0 goto label3;

        goto label4;

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

     label4:
        r0.<org.apache.commons.io.output.ByteArrayOutputStream: boolean reuseBuffers> = 0;

        $r9 = new java.io.SequenceInputStream;

        $r10 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r4);

        specialinvoke $r9.<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>($r10);

        return $r9;
    }

    public synchronized byte[] toByteArray()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        byte[] r1, r2, $r6;
        java.util.Iterator r3;
        int i0, $i1, i2, i3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        if i2 != 0 goto label1;

        $r6 = <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        return $r6;

     label1:
        r1 = newarray (byte)[i2];

        i3 = 0;

        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        r3 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (byte[]) $r5;

        $i1 = lengthof r2;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i3, i0);

        i3 = i3 + i0;

        i2 = i2 - i0;

        if i2 != 0 goto label3;

        goto label4;

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

     label4:
        return r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.lang.String $r1;
        byte[] $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $r1 = new java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r2, $r3);

        return $r1;
    }

    public java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.lang.String r1, $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, r1);

        return $r2;
    }

    public java.lang.String toString(java.nio.charset.Charset)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.nio.charset.Charset r1;
        java.lang.String $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: java.nio.charset.Charset;

        $r2 = new java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r3, r1);

        return $r2;
    }
}
