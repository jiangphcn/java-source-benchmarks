public class org.apache.commons.io.HexDump extends java.lang.Object
{
    public static final java.lang.String EOL;
    private static final char[] _hexcodes;
    private static final int[] _shifts;

    static void <clinit>()
    {
        java.lang.String $r0;
        char[] $r1;
        int[] $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <org.apache.commons.io.HexDump: java.lang.String EOL> = $r0;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        <org.apache.commons.io.HexDump: char[] _hexcodes> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 28;

        $r2[1] = 24;

        $r2[2] = 20;

        $r2[3] = 16;

        $r2[4] = 12;

        $r2[5] = 8;

        $r2[6] = 4;

        <org.apache.commons.io.HexDump: int[] _shifts> = $r2;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.HexDump r0;

        r0 := @this: org.apache.commons.io.HexDump;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dump(byte[], long, java.io.OutputStream, int) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException
    {
        byte[] r0, $r21;
        long l0, $l4, $l16, l17;
        java.io.OutputStream r1;
        int i1, $i2, $i3, $i5, $i6, $i7, $i9, $i11, $i13, i18, i19, i20, i21;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r17, $r19;
        byte $b8, $b10, $b12, $b14;
        char $c15;
        java.nio.charset.Charset $r20;
        java.lang.IllegalArgumentException $r22;

        r0 := @parameter0: byte[];

        l0 := @parameter1: long;

        r1 := @parameter2: java.io.OutputStream;

        i1 := @parameter3: int;

        if i1 < 0 goto label01;

        $i3 = lengthof r0;

        if i1 < $i3 goto label02;

     label01:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("illegal index: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into array of length ");

        $i2 = lengthof r0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label02:
        if r1 != null goto label03;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot write to nullstream");

        throw $r22;

     label03:
        $l4 = (long) i1;

        l17 = l0 + $l4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>(74);

        i18 = i1;

        goto label14;

     label04:
        $i6 = lengthof r0;

        i19 = $i6 - i18;

        if i19 <= 16 goto label05;

        i19 = 16;

     label05:
        $r10 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,long)>($r9, l17);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i20 = 0;

        goto label09;

     label06:
        if i20 >= i19 goto label07;

        $i7 = i20 + i18;

        $b8 = r0[$i7];

        staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,byte)>($r9, $b8);

        goto label08;

     label07:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

     label08:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i20 = i20 + 1;

     label09:
        if i20 < 16 goto label06;

        i21 = 0;

        goto label13;

     label10:
        $i9 = i21 + i18;

        $b10 = r0[$i9];

        if $b10 < 32 goto label11;

        $i11 = i21 + i18;

        $b12 = r0[$i11];

        if $b12 >= 127 goto label11;

        $i13 = i21 + i18;

        $b14 = r0[$i13];

        $c15 = (char) $b14;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c15);

        goto label12;

     label11:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label12:
        i21 = i21 + 1;

     label13:
        if i21 < i19 goto label10;

        $r17 = <org.apache.commons.io.HexDump: java.lang.String EOL>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r21 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r20);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r21);

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        virtualinvoke $r9.<java.lang.StringBuilder: void setLength(int)>(0);

        $l16 = (long) i19;

        l17 = l17 + $l16;

        i18 = i18 + 16;

     label14:
        $i5 = lengthof r0;

        if i18 < $i5 goto label04;

        return;
    }

    private static java.lang.StringBuilder dump(java.lang.StringBuilder, long)
    {
        java.lang.StringBuilder r0;
        long l0, $l2;
        int[] $r1;
        int $i1, $i3, $i4, i6;
        char[] $r2;
        char $c5;

        r0 := @parameter0: java.lang.StringBuilder;

        l0 := @parameter1: long;

        i6 = 0;

        goto label2;

     label1:
        $r2 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r1 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i1 = $r1[i6];

        $l2 = l0 >> $i1;

        $i3 = (int) $l2;

        $i4 = $i3 & 15;

        $c5 = $r2[$i4];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i6 = i6 + 1;

     label2:
        if i6 < 8 goto label1;

        return r0;
    }

    private static java.lang.StringBuilder dump(java.lang.StringBuilder, byte)
    {
        java.lang.StringBuilder r0;
        byte b0, $b3, $b4;
        int $i1, $i2, i6;
        int[] $r1;
        char[] $r2;
        char $c5;

        r0 := @parameter0: java.lang.StringBuilder;

        b0 := @parameter1: byte;

        i6 = 0;

        goto label2;

     label1:
        $r2 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r1 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i1 = i6 + 6;

        $i2 = $r1[$i1];

        $b3 = b0 >> $i2;

        $b4 = $b3 & 15;

        $c5 = $r2[$b4];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i6 = i6 + 1;

     label2:
        if i6 < 2 goto label1;

        return r0;
    }
}
