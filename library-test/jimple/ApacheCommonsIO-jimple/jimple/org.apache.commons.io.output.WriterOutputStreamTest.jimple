public class org.apache.commons.io.output.WriterOutputStreamTest extends java.lang.Object
{
    private static final java.lang.String TEST_STRING;
    private static final java.lang.String LARGE_TEST_STRING;
    private final java.util.Random random;

    static void <clinit>()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        int i0;

        <org.apache.commons.io.output.WriterOutputStreamTest: java.lang.String TEST_STRING> = "\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

        goto label2;

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre");

        i0 = i0 + 1;

     label2:
        if i0 < 100 goto label1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.commons.io.output.WriterOutputStreamTest: java.lang.String LARGE_TEST_STRING> = $r3;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.util.Random $r1;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.apache.commons.io.output.WriterOutputStreamTest: java.util.Random random> = $r1;

        return;
    }

    private void testWithSingleByteWrite(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.lang.String r1, r2, $r9;
        byte[] r3;
        byte b0;
        int i1, i2;
        java.io.StringWriter $r7;
        org.apache.commons.io.output.WriterOutputStream $r8;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        $r7 = new java.io.StringWriter;

        specialinvoke $r7.<java.io.StringWriter: void <init>()>();

        $r8 = new org.apache.commons.io.output.WriterOutputStream;

        specialinvoke $r8.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String)>($r7, r2);

        i1 = lengthof r3;

        i2 = 0;

        goto label2;

     label1:
        b0 = r3[i2];

        virtualinvoke $r8.<org.apache.commons.io.output.WriterOutputStream: void write(int)>(b0);

        i2 = i2 + 1;

     label2:
        if i2 < i1 goto label1;

        virtualinvoke $r8.<org.apache.commons.io.output.WriterOutputStream: void close()>();

        $r9 = virtualinvoke $r7.<java.io.StringWriter: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r9);

        return;
    }

    private void testWithBufferedWrite(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.lang.String r1, r2, $r9;
        byte[] r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.io.StringWriter $r6;
        org.apache.commons.io.output.WriterOutputStream $r7;
        java.util.Random $r8;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        $r7 = new org.apache.commons.io.output.WriterOutputStream;

        specialinvoke $r7.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String)>($r6, r2);

        i5 = 0;

        goto label2;

     label1:
        $r8 = r0.<org.apache.commons.io.output.WriterOutputStreamTest: java.util.Random random>;

        $i2 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>(128);

        $i3 = lengthof r3;

        $i4 = $i3 - i5;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i4);

        virtualinvoke $r7.<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)>(r3, i5, i0);

        i5 = i5 + i0;

     label2:
        $i1 = lengthof r3;

        if i5 < $i1 goto label1;

        virtualinvoke $r7.<org.apache.commons.io.output.WriterOutputStream: void close()>();

        $r9 = virtualinvoke $r6.<java.io.StringWriter: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r9);

        return;
    }

    public void testUTF8WithSingleByteWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithSingleByteWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-8");

        return;
    }

    public void testLargeUTF8WithSingleByteWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        $r1 = <org.apache.commons.io.output.WriterOutputStreamTest: java.lang.String LARGE_TEST_STRING>;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithSingleByteWrite(java.lang.String,java.lang.String)>($r1, "UTF-8");

        return;
    }

    public void testUTF8WithBufferedWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithBufferedWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-8");

        return;
    }

    public void testLargeUTF8WithBufferedWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        $r1 = <org.apache.commons.io.output.WriterOutputStreamTest: java.lang.String LARGE_TEST_STRING>;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithBufferedWrite(java.lang.String,java.lang.String)>($r1, "UTF-8");

        return;
    }

    public void testUTF16WithSingleByteWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

     label1:
        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithSingleByteWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-16");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("IBM");

        if $z0 != 0 goto label4;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("This test should only throw UOE on IBM JDKs with broken UTF-16");

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testUTF16WithBufferedWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

     label1:
        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithBufferedWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-16");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("IBM");

        if $z0 != 0 goto label4;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("This test should only throw UOE on IBM JDKs with broken UTF-16");

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testUTF16BEWithSingleByteWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithSingleByteWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-16BE");

        return;
    }

    public void testUTF16BEWithBufferedWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithBufferedWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-16BE");

        return;
    }

    public void testUTF16LEWithSingleByteWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithSingleByteWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-16LE");

        return;
    }

    public void testUTF16LEWithBufferedWrite() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStreamTest: void testWithBufferedWrite(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-16LE");

        return;
    }

    public void testFlush() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.io.StringWriter $r3;
        org.apache.commons.io.output.WriterOutputStream $r4;
        java.lang.String $r5, $r8;
        byte[] $r6;
        java.lang.StringBuffer $r7;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        $r4 = new org.apache.commons.io.output.WriterOutputStream;

        specialinvoke $r4.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String,int,boolean)>($r3, "us-ascii", 1024, 0);

        $r5 = "abc";

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>("us-ascii");

        virtualinvoke $r4.<org.apache.commons.io.output.WriterOutputStream: void write(byte[])>($r6);

        $r7 = virtualinvoke $r3.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $i0 = virtualinvoke $r7.<java.lang.StringBuffer: int length()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        virtualinvoke $r4.<org.apache.commons.io.output.WriterOutputStream: void flush()>();

        $r8 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r8);

        virtualinvoke $r4.<org.apache.commons.io.output.WriterOutputStream: void close()>();

        return;
    }

    public void testWriteImmediately() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStreamTest r0;
        java.io.StringWriter $r3;
        org.apache.commons.io.output.WriterOutputStream $r4;
        java.lang.String $r5, $r7;
        byte[] $r6;

        r0 := @this: org.apache.commons.io.output.WriterOutputStreamTest;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        $r4 = new org.apache.commons.io.output.WriterOutputStream;

        specialinvoke $r4.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String,int,boolean)>($r3, "us-ascii", 1024, 1);

        $r5 = "abc";

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>("us-ascii");

        virtualinvoke $r4.<org.apache.commons.io.output.WriterOutputStream: void write(byte[])>($r6);

        $r7 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r7);

        virtualinvoke $r4.<org.apache.commons.io.output.WriterOutputStream: void close()>();

        return;
    }
}
