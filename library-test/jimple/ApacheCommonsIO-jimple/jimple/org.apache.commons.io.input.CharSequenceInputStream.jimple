public class org.apache.commons.io.input.CharSequenceInputStream extends java.io.InputStream
{
    private static final int BUFFER_SIZE;
    private static final int NO_MARK;
    private final java.nio.charset.CharsetEncoder encoder;
    private final java.nio.CharBuffer cbuf;
    private final java.nio.ByteBuffer bbuf;
    private int mark_cbuf;
    private int mark_bbuf;

    public void <init>(java.lang.CharSequence, java.nio.charset.Charset, int)
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;
        int i0;
        float f0, $f1;
        java.nio.charset.CharsetEncoder $r3, $r5, $r7, $r8;
        java.nio.charset.CodingErrorAction $r4, $r6;
        byte $b1;
        java.nio.ByteBuffer $r9, $r10;
        java.nio.CharBuffer $r12;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.lang.String $r18;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.nio.charset.Charset;

        i0 := @parameter2: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r3 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r5 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);

        r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> = $r7;

        $r8 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder>;

        f0 = virtualinvoke $r8.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();

        $f1 = (float) i0;

        $b1 = $f1 cmpg f0;

        if $b1 >= 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Buffer size ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than maxBytesPerChar ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label1:
        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf> = $r9;

        $r10 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r12 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r1);

        r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf> = $r12;

        r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> = -1;

        r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf> = -1;

        return;
    }

    public void <init>(java.lang.CharSequence, java.lang.String, int)
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        int i0;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>(r1, $r3, i0);

        return;
    }

    public void <init>(java.lang.CharSequence, java.nio.charset.Charset)
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>(r1, r2, 2048);

        return;
    }

    public void <init>(java.lang.CharSequence, java.lang.String)
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        java.lang.CharSequence r1;
        java.lang.String r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String,int)>(r1, r2, 2048);

        return;
    }

    private void fillBuffer() throws java.nio.charset.CharacterCodingException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        java.nio.charset.CoderResult r1;
        java.nio.ByteBuffer $r2, $r4, $r7;
        java.nio.CharBuffer $r5;
        java.nio.charset.CharsetEncoder $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        $r2 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        $r6 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder>;

        $r5 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $r4 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        r1 = virtualinvoke $r6.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r5, $r4, 1);

        $z0 = virtualinvoke r1.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.nio.charset.CoderResult: void throwException()>();

     label1:
        $r7 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.nio.ByteBuffer $r10, $r11, $r12, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.nio.CharBuffer $r13, $r14, $r18;
        java.lang.NullPointerException $r19;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        r1 := @parameter0: byte[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        if r1 != null goto label01;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("Byte array is null");

        throw $r19;

     label01:
        if i6 < 0 goto label02;

        $i3 = i5 + i6;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label03;

     label02:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Array Size=");

        $i1 = lengthof r1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label03:
        if i6 != 0 goto label04;

        return 0;

     label04:
        $r10 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r10.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label05;

        $r18 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $z5 = virtualinvoke $r18.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z5 != 0 goto label05;

        return -1;

     label05:
        i7 = 0;

        goto label08;

     label06:
        $r11 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $z1 = virtualinvoke $r11.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label07;

        $r15 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $i4 = virtualinvoke $r15.<java.nio.ByteBuffer: int remaining()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i6);

        $r16 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r16.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i5, i0);

        i5 = i5 + i0;

        i6 = i6 - i0;

        i7 = i7 + i0;

        goto label08;

     label07:
        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: void fillBuffer()>();

        $r12 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $z2 = virtualinvoke $r12.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label08;

        $r13 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $z3 = virtualinvoke $r13.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z3 != 0 goto label08;

        goto label09;

     label08:
        if i6 > 0 goto label06;

     label09:
        if i7 != 0 goto label10;

        $r14 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $z4 = virtualinvoke $r14.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z4 != 0 goto label10;

        $i8 = -1;

        goto label11;

     label10:
        $i8 = i7;

     label11:
        return $i8;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        java.nio.ByteBuffer $r1, $r3, $r4;
        boolean $z0, $z1, $z2;
        java.nio.CharBuffer $r2;
        byte $b0;
        short $s1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

     label1:
        $r4 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $z2 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label2;

        $r3 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $b0 = virtualinvoke $r3.<java.nio.ByteBuffer: byte get()>();

        $s1 = $b0 & 255;

        return $s1;

     label2:
        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: void fillBuffer()>();

        $r1 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $z1 = virtualinvoke $r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label1;

        return -1;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        byte $b0;
        int $i1;
        long l3, l4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        l3 := @parameter0: long;

        l4 = 0L;

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: int read()>();

        l3 = l3 - 1L;

        l4 = l4 + 1L;

     label2:
        $b0 = l3 cmp 0L;

        if $b0 <= 0 goto label3;

        $i1 = virtualinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: int available()>();

        if $i1 > 0 goto label1;

     label3:
        return l4;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        java.nio.ByteBuffer $r1;
        int $i0, $i1, $i2;
        java.nio.CharBuffer $r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $r2 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $i1 = virtualinvoke $r2.<java.nio.CharBuffer: int remaining()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        return;
    }

    public synchronized void mark(int)
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        int i0, $i1, $i2;
        java.nio.CharBuffer $r1, $r3;
        java.nio.ByteBuffer $r2, $r5;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $i1 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> = $i1;

        $r2 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf> = $i2;

        $r3 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        virtualinvoke $r3.<java.nio.CharBuffer: java.nio.Buffer mark()>();

        $r5 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer mark()>();

        return;
    }

    public synchronized void reset() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.CharBuffer $r1, $r2, $r7, $r15, $r21;
        java.nio.ByteBuffer $r3, $r17, $r19, $r22, $r24;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        java.nio.charset.CharsetEncoder $r13;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;

        if $i0 == -1 goto label5;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $i1 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        if $i1 == 0 goto label3;

        $r13 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder>;

        virtualinvoke $r13.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

        $r15 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        virtualinvoke $r15.<java.nio.CharBuffer: java.nio.Buffer rewind()>();

        $r17 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r19 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r19.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);

        goto label2;

     label1:
        $r22 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r22.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r24 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r24.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStream: void fillBuffer()>();

     label2:
        $r21 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $i7 = virtualinvoke $r21.<java.nio.CharBuffer: int position()>();

        $i8 = r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;

        if $i7 < $i8 goto label1;

     label3:
        $r2 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $i2 = virtualinvoke $r2.<java.nio.CharBuffer: int position()>();

        $i3 = r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;

        if $i2 == $i3 goto label4;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected CharBuffer postion: actual=");

        $r7 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;

        $i5 = virtualinvoke $r7.<java.nio.CharBuffer: int position()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=");

        $i6 = r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label4:
        $r3 = r0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;

        $i4 = r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> = -1;

        r0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf> = -1;

     label5:
        return;
    }

    public boolean markSupported()
    {
        org.apache.commons.io.input.CharSequenceInputStream r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStream;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.input.CharSequenceInputStream: int NO_MARK> = -1;

        <org.apache.commons.io.input.CharSequenceInputStream: int BUFFER_SIZE> = 2048;

        return;
    }
}
