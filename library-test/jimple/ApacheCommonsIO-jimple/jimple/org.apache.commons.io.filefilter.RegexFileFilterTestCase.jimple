public class org.apache.commons.io.filefilter.RegexFileFilterTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{

    public void <init>()
    {
        org.apache.commons.io.filefilter.RegexFileFilterTestCase r0;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilterTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.commons.io.filefilter.RegexFileFilterTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilterTestCase;

        $r1 = staticinvoke <org.apache.commons.io.filefilter.RegexFileFilterTestCase: java.io.File getTestDirectory()>();

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.RegexFileFilterTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilterTestCase;

        $r1 = staticinvoke <org.apache.commons.io.filefilter.RegexFileFilterTestCase: java.io.File getTestDirectory()>();

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r1);

        return;
    }

    public void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter, java.io.File, boolean) throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.RegexFileFilterTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1;
        java.io.File r2, $r24, $r35;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r6, $r7, $r8, $r9, $r10, $r14, $r17, $r18, $r19, $r20, $r25, $r28, $r29, $r30, $r31, $r32;
        java.lang.Class $r4, $r15, $r26;
        java.lang.String $r5, $r11, $r16, $r21, $r27, $r33, $r36;
        java.lang.Boolean $r12, $r13, $r22, $r23, $r34, $r37;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilterTestCase;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Filter(File) ");

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $z1 = interfaceinvoke r1.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r2);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r11, $r12, $r13);

        if r2 == null goto label1;

        $r24 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        if $r24 == null goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Filter(File, String) ");

        $r26 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r35 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $r36 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $z3 = interfaceinvoke r1.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>($r35, $r36);

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r33, $r34, $r37);

        goto label2;

     label1:
        if r2 != null goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Filter(File, String) ");

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for null");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $z2 = interfaceinvoke r1.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(r2);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r21, $r22, $r23);

     label2:
        return;
    }

    public void testRegex() throws java.lang.Exception
    {
        org.apache.commons.io.filefilter.RegexFileFilterTestCase r0;
        org.apache.commons.io.filefilter.RegexFileFilter $r1, $r5, $r9, $r14, $r18, $r23, $r24, $r26, $r27;
        java.io.File $r2, $r3, $r4, $r6, $r7, $r8, $r11, $r12, $r13, $r15, $r16, $r17, $r20, $r21, $r22;
        java.util.regex.Pattern $r10;
        org.apache.commons.io.IOCase $r19, $r25;
        java.lang.IllegalArgumentException $r28, $r29, $r30, $r31;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilterTestCase;

        $r1 = new org.apache.commons.io.filefilter.RegexFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String)>("^.*[tT]est(-\\d+)?\\.java$");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r1, $r2, 1);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("test-10.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r1, $r3, 1);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("test-.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r1, $r4, 0);

        $r5 = new org.apache.commons.io.filefilter.RegexFileFilter;

        specialinvoke $r5.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String)>("^[Tt]est.java$");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r6, 1);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r7, 1);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("tEST.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r5, $r8, 0);

        $r9 = new org.apache.commons.io.filefilter.RegexFileFilter;

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("^test.java$", 2);

        specialinvoke $r9.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.util.regex.Pattern)>($r10);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r11, 1);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>("test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r12, 1);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("tEST.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r9, $r13, 1);

        $r14 = new org.apache.commons.io.filefilter.RegexFileFilter;

        specialinvoke $r14.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String,int)>("^test.java$", 2);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r15, 1);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>("test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r16, 1);

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>("tEST.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r14, $r17, 1);

        $r18 = new org.apache.commons.io.filefilter.RegexFileFilter;

        $r19 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r18.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>("^test.java$", $r19);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("Test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r20, 1);

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>("test.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r21, 1);

        $r22 = new java.io.File;

        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>("tEST.java");

        virtualinvoke r0.<org.apache.commons.io.filefilter.RegexFileFilterTestCase: void assertFiltering(org.apache.commons.io.filefilter.IOFileFilter,java.io.File,boolean)>($r18, $r22, 1);

     label01:
        $r23 = new org.apache.commons.io.filefilter.RegexFileFilter;

        specialinvoke $r23.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

     label04:
        $r24 = new org.apache.commons.io.filefilter.RegexFileFilter;

        specialinvoke $r24.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String,int)>(null, 2);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r28 := @caughtexception;

     label07:
        $r26 = new org.apache.commons.io.filefilter.RegexFileFilter;

        $r25 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r26.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(null, $r25);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r31 := @caughtexception;

     label10:
        $r27 = new org.apache.commons.io.filefilter.RegexFileFilter;

        specialinvoke $r27.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.util.regex.Pattern)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $r30 := @caughtexception;

     label13:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
    }
}
