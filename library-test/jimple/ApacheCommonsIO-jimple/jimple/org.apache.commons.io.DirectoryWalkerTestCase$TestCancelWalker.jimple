class org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker extends org.apache.commons.io.DirectoryWalker
{
    private final java.lang.String cancelFileName;
    private final boolean suppressCancel;

    void <init>(java.lang.String, boolean)
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void <init>()>();

        r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker: java.lang.String cancelFileName> = r1;

        r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker: boolean suppressCancel> = z0;

        return;
    }

    protected java.util.List find(java.io.File) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker r0;
        java.io.File r1;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker;

        r1 := @parameter0: java.io.File;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker: void walk(java.io.File,java.util.Collection)>(r1, $r3);

        return $r3;
    }

    protected void handleDirectoryEnd(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;
        java.lang.String $r3, $r4;
        boolean $z1;
        org.apache.commons.io.DirectoryWalker$CancelException $r5;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker: java.lang.String cancelFileName>;

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $r5 = new org.apache.commons.io.DirectoryWalker$CancelException;

        specialinvoke $r5.<org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.io.File,int)>(r1, i0);

        throw $r5;

     label1:
        return;
    }

    protected void handleFile(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;
        java.lang.String $r3, $r4;
        boolean $z1;
        org.apache.commons.io.DirectoryWalker$CancelException $r5;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker: java.lang.String cancelFileName>;

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $r5 = new org.apache.commons.io.DirectoryWalker$CancelException;

        specialinvoke $r5.<org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.io.File,int)>(r1, i0);

        throw $r5;

     label1:
        return;
    }

    protected void handleCancelled(java.io.File, java.util.Collection, org.apache.commons.io.DirectoryWalker$CancelException) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker r0;
        java.io.File r1;
        java.util.Collection r2;
        org.apache.commons.io.DirectoryWalker$CancelException r3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: org.apache.commons.io.DirectoryWalker$CancelException;

        $z0 = r0.<org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker: boolean suppressCancel>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)>(r1, r2, r3);

     label1:
        return;
    }
}
