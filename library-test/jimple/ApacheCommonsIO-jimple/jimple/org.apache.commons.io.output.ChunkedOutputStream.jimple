public class org.apache.commons.io.output.ChunkedOutputStream extends java.io.FilterOutputStream
{
    private static final int DEFAULT_CHUNK_SIZE;
    private final int chunkSize;

    public void <init>(java.io.OutputStream, int)
    {
        org.apache.commons.io.output.ChunkedOutputStream r0;
        java.io.OutputStream r1;
        int i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.io.output.ChunkedOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.commons.io.output.ChunkedOutputStream: int chunkSize> = i0;

        return;
    }

    public void <init>(java.io.OutputStream)
    {
        org.apache.commons.io.output.ChunkedOutputStream r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.commons.io.output.ChunkedOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.io.output.ChunkedOutputStream: void <init>(java.io.OutputStream,int)>(r1, 4096);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.ChunkedOutputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, i4, i5;
        java.io.OutputStream $r2;

        r0 := @this: org.apache.commons.io.output.ChunkedOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 = i1;

        i5 = i0;

        goto label2;

     label1:
        $i3 = r0.<org.apache.commons.io.output.ChunkedOutputStream: int chunkSize>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i3);

        $r2 = r0.<org.apache.commons.io.output.ChunkedOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i5, i2);

        i4 = i4 - i2;

        i5 = i5 + i2;

     label2:
        if i4 > 0 goto label1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.output.ChunkedOutputStream: int DEFAULT_CHUNK_SIZE> = 4096;

        return;
    }
}
