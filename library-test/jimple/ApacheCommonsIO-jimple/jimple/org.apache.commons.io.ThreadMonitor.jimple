class org.apache.commons.io.ThreadMonitor extends java.lang.Object implements java.lang.Runnable
{
    private final java.lang.Thread thread;
    private final long timeout;

    public static java.lang.Thread start(long)
    {
        long l0;
        java.lang.Thread $r0, $r1;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(java.lang.Thread,long)>($r0, l0);

        return $r1;
    }

    public static java.lang.Thread start(java.lang.Thread, long)
    {
        java.lang.Thread r0, $r3, r6;
        long l0;
        byte $b1;
        org.apache.commons.io.ThreadMonitor $r2;
        java.lang.Class $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.Thread;

        l0 := @parameter1: long;

        r6 = null;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r2 = new org.apache.commons.io.ThreadMonitor;

        specialinvoke $r2.<org.apache.commons.io.ThreadMonitor: void <init>(java.lang.Thread,long)>(r0, l0);

        $r3 = new java.lang.Thread;

        $r4 = class "org/apache/commons/io/ThreadMonitor";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r2, $r5);

        r6 = $r3;

        virtualinvoke $r3.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

     label1:
        return r6;
    }

    public static void stop(java.lang.Thread)
    {
        java.lang.Thread r0;

        r0 := @parameter0: java.lang.Thread;

        if r0 == null goto label1;

        virtualinvoke r0.<java.lang.Thread: void interrupt()>();

     label1:
        return;
    }

    private void <init>(java.lang.Thread, long)
    {
        org.apache.commons.io.ThreadMonitor r0;
        java.lang.Thread r1;
        long l0;

        r0 := @this: org.apache.commons.io.ThreadMonitor;

        r1 := @parameter0: java.lang.Thread;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.io.ThreadMonitor: java.lang.Thread thread> = r1;

        r0.<org.apache.commons.io.ThreadMonitor: long timeout> = l0;

        return;
    }

    public void run()
    {
        org.apache.commons.io.ThreadMonitor r0;
        long $l0;
        java.lang.Thread $r2;
        java.lang.InterruptedException $r3;

        r0 := @this: org.apache.commons.io.ThreadMonitor;

     label1:
        $l0 = r0.<org.apache.commons.io.ThreadMonitor: long timeout>;

        staticinvoke <org.apache.commons.io.ThreadMonitor: void sleep(long)>($l0);

        $r2 = r0.<org.apache.commons.io.ThreadMonitor: java.lang.Thread thread>;

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static void sleep(long) throws java.lang.InterruptedException
    {
        long l0, l1, $l2, $l3, l5;
        byte $b4;

        l0 := @parameter0: long;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = $l2 + l0;

        l5 = l0;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(l5);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5 = l1 - $l3;

        $b4 = l5 cmp 0L;

        if $b4 > 0 goto label1;

        return;
    }
}
