public class org.apache.commons.io.monitor.FileAlterationObserverTestCase extends org.apache.commons.io.monitor.AbstractMonitorTestCase
{

    public void <init>()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        org.apache.commons.io.monitor.CollectionFileListener $r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

        specialinvoke r0.<org.apache.commons.io.monitor.AbstractMonitorTestCase: void <init>()>();

        r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.lang.String testDirName> = "test-observer";

        $r1 = new org.apache.commons.io.monitor.CollectionFileListener;

        specialinvoke $r1.<org.apache.commons.io.monitor.CollectionFileListener: void <init>(boolean)>(1);

        r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener> = $r1;

        return;
    }

    public void testAddRemoveListeners()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        java.util.Iterator r3, $r6, $r8, $r13;
        org.apache.commons.io.monitor.FileAlterationObserver $r4;
        java.lang.Iterable $r5, $r7, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.io.monitor.FileAlterationListenerAdaptor $r9;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

        $r4 = new org.apache.commons.io.monitor.FileAlterationObserver;

        specialinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.lang.String)>("/foo");

        virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: void addListener(org.apache.commons.io.monitor.FileAlterationListener)>(null);

        $r5 = virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.Iterable getListeners()>();

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Listeners[1]", $z0);

        virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: void removeListener(org.apache.commons.io.monitor.FileAlterationListener)>(null);

        $r7 = virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.Iterable getListeners()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Listeners[2]", $z1);

        $r9 = new org.apache.commons.io.monitor.FileAlterationListenerAdaptor;

        specialinvoke $r9.<org.apache.commons.io.monitor.FileAlterationListenerAdaptor: void <init>()>();

        virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: void addListener(org.apache.commons.io.monitor.FileAlterationListener)>($r9);

        $r10 = virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.Iterable getListeners()>();

        r3 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Listeners[3]", $z2);

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Added", $r9, $r11);

        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Listeners[4]", $z3);

        virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: void removeListener(org.apache.commons.io.monitor.FileAlterationListener)>($r9);

        $r12 = virtualinvoke $r4.<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.Iterable getListeners()>();

        $r13 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z4 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Listeners[5]", $z4);

        return;
    }

    public void testToString()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        java.io.File $r2, $r18;
        org.apache.commons.io.monitor.FileAlterationObserver $r3, $r10;
        java.lang.StringBuilder $r4, $r6, $r7, $r12, $r14, $r15;
        java.lang.String $r5, $r8, $r9, $r13, $r16, $r17;
        org.apache.commons.io.filefilter.IOFileFilter $r11;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/foo");

        $r3 = new org.apache.commons.io.monitor.FileAlterationObserver;

        specialinvoke $r3.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File)>($r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("FileAlterationObserver[file=\'");

        $r5 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', listeners=0]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r3.<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = new org.apache.commons.io.monitor.FileAlterationObserver;

        $r11 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ>;

        specialinvoke $r10.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>($r2, $r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("FileAlterationObserver[file=\'");

        $r13 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', CanReadFileFilter, listeners=0]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke $r10.<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r18 = virtualinvoke $r10.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File getDirectory()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r18);

        return;
    }

    public void testDirectory()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        java.io.File r3, r4, r5, r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r40, $r51, r57, r58;
        org.apache.commons.io.monitor.CollectionFileListener $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r41, $r43, $r45, $r47, $r49;
        java.util.Collection $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r42, $r44, $r46, $r48, $r50;
        boolean $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Exception $r52;
        java.lang.StringBuilder $r53, $r54;
        java.lang.String $r55;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

     label1:
        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("A");

        $r7 = new java.io.File;

        $r8 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "test-dir-A");

        $r9 = new java.io.File;

        $r10 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "test-dir-B");

        $r11 = new java.io.File;

        $r12 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "test-dir-C");

        virtualinvoke $r7.<java.io.File: boolean mkdir()>();

        virtualinvoke $r9.<java.io.File: boolean mkdir()>();

        virtualinvoke $r11.<java.io.File: boolean mkdir()>();

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "A-file1.java");

        r3 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r13);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "A-file2.txt");

        r4 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r14);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "A-file3.java");

        r5 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r15);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "A-file4.java");

        r57 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r16);

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "B-file1.java");

        r6 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r17);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("B", 3, 0, 0, 4, 0, 0);

        $r18 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r19 = virtualinvoke $r18.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedDirectories()>();

        $z3 = interfaceinvoke $r19.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirA", $z3);

        $r20 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r21 = virtualinvoke $r20.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedDirectories()>();

        $z4 = interfaceinvoke $r21.<java.util.Collection: boolean contains(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirB", $z4);

        $r22 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r23 = virtualinvoke $r22.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedDirectories()>();

        $z5 = interfaceinvoke $r23.<java.util.Collection: boolean contains(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirC", $z5);

        $r24 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r25 = virtualinvoke $r24.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z6 = interfaceinvoke $r25.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile1", $z6);

        $r26 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r27 = virtualinvoke $r26.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z7 = interfaceinvoke $r27.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("B testDirAFile2", $z7);

        $r28 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r29 = virtualinvoke $r28.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z8 = interfaceinvoke $r29.<java.util.Collection: boolean contains(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile3", $z8);

        $r30 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r31 = virtualinvoke $r30.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z9 = interfaceinvoke $r31.<java.util.Collection: boolean contains(java.lang.Object)>(r57);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile4", $z9);

        $r32 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r33 = virtualinvoke $r32.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z10 = interfaceinvoke $r33.<java.util.Collection: boolean contains(java.lang.Object)>(r6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirBFile1", $z10);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("C");

        r58 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r57);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r9);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("D", 0, 0, 1, 0, 1, 1);

        $r34 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r35 = virtualinvoke $r34.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedDirectories()>();

        $z11 = interfaceinvoke $r35.<java.util.Collection: boolean contains(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D testDirB", $z11);

        $r36 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r37 = virtualinvoke $r36.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getChangedFiles()>();

        $z12 = interfaceinvoke $r37.<java.util.Collection: boolean contains(java.lang.Object)>(r58);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D testDirAFile4", $z12);

        $r38 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r39 = virtualinvoke $r38.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z13 = interfaceinvoke $r39.<java.util.Collection: boolean contains(java.lang.Object)>(r6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D testDirBFile1", $z13);

        $r40 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r40);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("E", 0, 0, 2, 0, 0, 3);

        $r41 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r42 = virtualinvoke $r41.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedDirectories()>();

        $z14 = interfaceinvoke $r42.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirA", $z14);

        $r43 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r44 = virtualinvoke $r43.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z15 = interfaceinvoke $r44.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirAFile1", $z15);

        $r45 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r46 = virtualinvoke $r45.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z16 = interfaceinvoke $r46.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("E testDirAFile2", $z16);

        $r47 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r48 = virtualinvoke $r47.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z17 = interfaceinvoke $r48.<java.util.Collection: boolean contains(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirAFile3", $z17);

        $r49 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r50 = virtualinvoke $r49.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z18 = interfaceinvoke $r50.<java.util.Collection: boolean contains(java.lang.Object)>(r58);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirAFile4", $z18);

        $r51 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        virtualinvoke $r51.<java.io.File: boolean mkdir()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("F");

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("G");

     label2:
        goto label4;

     label3:
        $r52 := @caughtexception;

        virtualinvoke $r52.<java.lang.Exception: void printStackTrace()>();

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Threw ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r55);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testFileCreate()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        java.io.File r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, r33, r37, r38, r39, r40, r41;
        org.apache.commons.io.monitor.CollectionFileListener $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;
        java.util.Collection $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.Exception $r28;
        java.lang.StringBuilder $r29, $r30;
        java.lang.String $r31;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

     label1:
        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("A");

        $r3 = new java.io.File;

        $r4 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "test-dir-A");

        virtualinvoke $r3.<java.io.File: boolean mkdir()>();

        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        $r6 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r5);

        r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir> = $r6;

        r33 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r3);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file1.java");

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file2.java");

        r1 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r8);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file3.java");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file4.java");

        r2 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r10);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file5.java");

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("B", 1, 0, 0, 2, 0, 0);

        $r12 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r13 = virtualinvoke $r12.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z1 = interfaceinvoke $r13.<java.util.Collection: boolean contains(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("B testDirAFile1", $z1);

        $r14 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r15 = virtualinvoke $r14.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z2 = interfaceinvoke $r15.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile2", $z2);

        $r16 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r17 = virtualinvoke $r16.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z3 = interfaceinvoke $r17.<java.util.Collection: boolean contains(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("B testDirAFile3", $z3);

        $r18 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r19 = virtualinvoke $r18.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z4 = interfaceinvoke $r19.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile4", $z4);

        $r20 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r21 = virtualinvoke $r20.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z5 = interfaceinvoke $r21.<java.util.Collection: boolean contains(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("B testDirAFile5", $z5);

        $z6 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("B testDirAFile1 exists", $z6);

        $z7 = virtualinvoke r1.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile2 exists", $z7);

        $z8 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("B testDirAFile3 exists", $z8);

        $z9 = virtualinvoke r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile4 exists", $z9);

        $z10 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("B testDirAFile5 exists", $z10);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("C");

        r37 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r7);

        r38 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r33);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("D", 0, 1, 0, 1, 0, 0);

        $z11 = virtualinvoke r37.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D testDirAFile1 exists", $z11);

        $r22 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r23 = virtualinvoke $r22.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z12 = interfaceinvoke $r23.<java.util.Collection: boolean contains(java.lang.Object)>(r37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D testDirAFile1", $z12);

        r39 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r9);

        r40 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r38);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("E", 0, 1, 0, 1, 0, 0);

        $z13 = virtualinvoke r39.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirAFile3 exists", $z13);

        $r24 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r25 = virtualinvoke $r24.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z14 = interfaceinvoke $r25.<java.util.Collection: boolean contains(java.lang.Object)>(r39);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirAFile3", $z14);

        r41 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r11);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r40);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("F", 0, 1, 0, 1, 0, 0);

        $z15 = virtualinvoke r41.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("F testDirAFile5 exists", $z15);

        $r26 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r27 = virtualinvoke $r26.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z16 = interfaceinvoke $r27.<java.util.Collection: boolean contains(java.lang.Object)>(r41);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("F testDirAFile5", $z16);

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Threw ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r31);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testFileUpdate()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        java.io.File r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, r33, r34, r35, r36, r37, r38, r39, r40, r41;
        org.apache.commons.io.monitor.CollectionFileListener $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;
        java.util.Collection $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Exception $r28;
        java.lang.StringBuilder $r29, $r30;
        java.lang.String $r31;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

     label1:
        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("A");

        $r3 = new java.io.File;

        $r4 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "test-dir-A");

        virtualinvoke $r3.<java.io.File: boolean mkdir()>();

        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        $r6 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r5);

        r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir> = $r6;

        r33 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r3);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file1.java");

        r34 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r7);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file2.java");

        r1 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r8);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file3.java");

        r35 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r9);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file4.java");

        r2 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r10);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, "A-file5.java");

        r36 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r11);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("B", 1, 0, 0, 5, 0, 0);

        $r12 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r13 = virtualinvoke $r12.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z1 = interfaceinvoke $r13.<java.util.Collection: boolean contains(java.lang.Object)>(r34);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile1", $z1);

        $r14 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r15 = virtualinvoke $r14.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z2 = interfaceinvoke $r15.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile2", $z2);

        $r16 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r17 = virtualinvoke $r16.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z3 = interfaceinvoke $r17.<java.util.Collection: boolean contains(java.lang.Object)>(r35);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile3", $z3);

        $r18 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r19 = virtualinvoke $r18.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z4 = interfaceinvoke $r19.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile4", $z4);

        $r20 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r21 = virtualinvoke $r20.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z5 = interfaceinvoke $r21.<java.util.Collection: boolean contains(java.lang.Object)>(r36);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile5", $z5);

        $z6 = virtualinvoke r34.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile1 exists", $z6);

        $z7 = virtualinvoke r1.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile2 exists", $z7);

        $z8 = virtualinvoke r35.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile3 exists", $z8);

        $z9 = virtualinvoke r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile4 exists", $z9);

        $z10 = virtualinvoke r36.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile5 exists", $z10);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("C");

        r37 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r34);

        r38 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r33);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("D", 0, 1, 0, 0, 1, 0);

        $r22 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r23 = virtualinvoke $r22.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getChangedFiles()>();

        $z11 = interfaceinvoke $r23.<java.util.Collection: boolean contains(java.lang.Object)>(r37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D testDirAFile1", $z11);

        r39 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r35);

        r40 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r38);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("E", 0, 1, 0, 0, 1, 0);

        $r24 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r25 = virtualinvoke $r24.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getChangedFiles()>();

        $z12 = interfaceinvoke $r25.<java.util.Collection: boolean contains(java.lang.Object)>(r39);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirAFile3", $z12);

        r41 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r36);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r40);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("F", 0, 1, 0, 0, 1, 0);

        $r26 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r27 = virtualinvoke $r26.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getChangedFiles()>();

        $z13 = interfaceinvoke $r27.<java.util.Collection: boolean contains(java.lang.Object)>(r41);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("F testDirAFile5", $z13);

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Threw ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r31);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testFileDelete()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        java.io.File r1, r2, r3, r4, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r36, r37, r38;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z12, $z13, $z15, $z16, $z18, $z19;
        org.apache.commons.io.monitor.CollectionFileListener $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29;
        java.util.Collection $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30;
        java.lang.Exception $r31;
        java.lang.StringBuilder $r32, $r33;
        java.lang.String $r34;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

     label1:
        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("A");

        $r6 = new java.io.File;

        $r7 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "test-dir-A");

        virtualinvoke $r6.<java.io.File: boolean mkdir()>();

        $r8 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        $r9 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r8);

        r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir> = $r9;

        r36 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r6);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r36, "A-file1.java");

        r1 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r10);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r36, "A-file2.java");

        r2 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r11);

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r36, "A-file3.java");

        r3 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r12);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>(r36, "A-file4.java");

        r4 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r13);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>(r36, "A-file5.java");

        r5 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r14);

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile1 exists", $z1);

        $z2 = virtualinvoke r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile2 exists", $z2);

        $z3 = virtualinvoke r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile3 exists", $z3);

        $z4 = virtualinvoke r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile4 exists", $z4);

        $z5 = virtualinvoke r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile5 exists", $z5);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("B", 1, 0, 0, 5, 0, 0);

        $r15 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r16 = virtualinvoke $r15.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z6 = interfaceinvoke $r16.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile1", $z6);

        $r17 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r18 = virtualinvoke $r17.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z7 = interfaceinvoke $r18.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile2", $z7);

        $r19 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r20 = virtualinvoke $r19.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z8 = interfaceinvoke $r20.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile3", $z8);

        $r21 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r22 = virtualinvoke $r21.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z9 = interfaceinvoke $r22.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile4", $z9);

        $r23 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r24 = virtualinvoke $r23.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z10 = interfaceinvoke $r24.<java.util.Collection: boolean contains(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile5", $z10);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("C");

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r1);

        r37 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r36);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("D", 0, 1, 0, 0, 0, 1);

        $z12 = virtualinvoke r1.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("D testDirAFile1 exists", $z12);

        $r25 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r26 = virtualinvoke $r25.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z13 = interfaceinvoke $r26.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D testDirAFile1", $z13);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r3);

        r38 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r37);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("E", 0, 1, 0, 0, 0, 1);

        $z15 = virtualinvoke r3.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("E testDirAFile3 exists", $z15);

        $r27 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r28 = virtualinvoke $r27.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z16 = interfaceinvoke $r28.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E testDirAFile3", $z16);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r5);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r38);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("F", 0, 1, 0, 0, 0, 1);

        $z18 = virtualinvoke r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("F testDirAFile5 exists", $z18);

        $r29 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r30 = virtualinvoke $r29.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z19 = interfaceinvoke $r30.<java.util.Collection: boolean contains(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("F testDirAFile5", $z19);

     label2:
        goto label4;

     label3:
        $r31 := @caughtexception;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Threw ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r34);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testObserveSingleFile()
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        org.apache.commons.io.filefilter.IOFileFilter r1;
        java.io.File $r2, $r3, $r4, $r6, $r7, r32, r33, r34, r35, r36, r37;
        java.lang.String $r5, $r29;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z14, $z15, $z16, $z17, $z18, $z19;
        org.apache.commons.io.monitor.CollectionFileListener $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        java.util.Collection $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        java.lang.Exception $r26;
        java.lang.StringBuilder $r27, $r28;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

     label1:
        $r2 = new java.io.File;

        $r3 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File testDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "test-dir-A");

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "A-file1.java");

        virtualinvoke $r2.<java.io.File: boolean mkdir()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getName()>();

        r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>($r5);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void createObserver(java.io.File,java.io.FileFilter)>($r2, r1);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionsEmpty(java.lang.String)>("A");

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("A testDirAFile1 exists", $z1);

        r32 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r4);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "A-file2.txt");

        r33 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r6);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "A-file3.java");

        r34 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>($r7);

        $z2 = virtualinvoke r32.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile1 exists", $z2);

        $z3 = virtualinvoke r33.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile2 exists", $z3);

        $z4 = virtualinvoke r34.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("B testDirAFile3 exists", $z4);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("C", 0, 0, 0, 1, 0, 0);

        $r8 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r9 = virtualinvoke $r8.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z5 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>(r32);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("C created", $z5);

        $r10 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r11 = virtualinvoke $r10.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z6 = interfaceinvoke $r11.<java.util.Collection: boolean contains(java.lang.Object)>(r33);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("C created", $z6);

        $r12 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r13 = virtualinvoke $r12.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getCreatedFiles()>();

        $z7 = interfaceinvoke $r13.<java.util.Collection: boolean contains(java.lang.Object)>(r34);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("C created", $z7);

        r35 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r32);

        r36 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r33);

        r37 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: java.io.File touch(java.io.File)>(r34);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("D", 0, 0, 0, 0, 1, 0);

        $r14 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r15 = virtualinvoke $r14.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getChangedFiles()>();

        $z8 = interfaceinvoke $r15.<java.util.Collection: boolean contains(java.lang.Object)>(r35);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("D changed", $z8);

        $r16 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r17 = virtualinvoke $r16.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getChangedFiles()>();

        $z9 = interfaceinvoke $r17.<java.util.Collection: boolean contains(java.lang.Object)>(r36);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("D changed", $z9);

        $r18 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r19 = virtualinvoke $r18.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getChangedFiles()>();

        $z10 = interfaceinvoke $r19.<java.util.Collection: boolean contains(java.lang.Object)>(r37);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("D changed", $z10);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r35);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r36);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r37);

        $z14 = virtualinvoke r35.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("E testDirAFile1 exists", $z14);

        $z15 = virtualinvoke r36.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("E testDirAFile2 exists", $z15);

        $z16 = virtualinvoke r37.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("E testDirAFile3 exists", $z16);

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkAndNotify()>();

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: void checkCollectionSizes(java.lang.String,int,int,int,int,int,int)>("E", 0, 0, 0, 0, 0, 1);

        $r20 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r21 = virtualinvoke $r20.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z17 = interfaceinvoke $r21.<java.util.Collection: boolean contains(java.lang.Object)>(r35);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("E deleted", $z17);

        $r22 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r23 = virtualinvoke $r22.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z18 = interfaceinvoke $r23.<java.util.Collection: boolean contains(java.lang.Object)>(r36);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("E deleted", $z18);

        $r24 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.CollectionFileListener listener>;

        $r25 = virtualinvoke $r24.<org.apache.commons.io.monitor.CollectionFileListener: java.util.Collection getDeletedFiles()>();

        $z19 = interfaceinvoke $r25.<java.util.Collection: boolean contains(java.lang.Object)>(r37);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("E deleted", $z19);

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Threw ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r29);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void checkAndNotify() throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileAlterationObserverTestCase r0;
        org.apache.commons.io.monitor.FileAlterationObserver $r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserverTestCase;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserverTestCase: org.apache.commons.io.monitor.FileAlterationObserver observer>;

        virtualinvoke $r1.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify()>();

        return;
    }
}
