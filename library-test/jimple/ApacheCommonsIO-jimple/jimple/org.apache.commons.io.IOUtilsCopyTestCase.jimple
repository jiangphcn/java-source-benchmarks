public class org.apache.commons.io.IOUtilsCopyTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{
    private static final int FILE_SIZE;
    private final byte[] inData;

    public void <init>()
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.io.testtools.TestUtils: byte[] generateTestData(long)>(4097L);

        r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData> = $r1;

        return;
    }

    public void testCopy_inputStreamToOutputStream() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        int i0, $i1, $i3, $i5, $i7;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4, $r8, $r9, $r10, $r11;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r5;
        org.apache.commons.io.output.ByteArrayOutputStream $r6;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r7;
        long $l2, $l4, $l6, $l8, $l9;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r5.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r3);

        $r6 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r6.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r7 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r7.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r6, 0, 1);

        i0 = staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r5, $r7);

        $i1 = virtualinvoke $r5.<java.io.InputStream: int available()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Not all bytes were read", 0L, $l2);

        $r8 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i3 = lengthof $r8;

        $l4 = (long) $i3;

        $i5 = virtualinvoke $r6.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", $l4, $l6);

        $r9 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $r10 = virtualinvoke $r6.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i7 = lengthof $r11;

        $l9 = (long) $i7;

        $l8 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, $l8);

        return;
    }

    public void testCopy_inputStreamToOutputStreamWithBufferSize() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(1);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(2);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(4);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(8);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(16);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(32);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(64);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(128);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(256);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(512);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(1024);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(2048);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(4096);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(8192);

        specialinvoke r0.<org.apache.commons.io.IOUtilsCopyTestCase: void testCopy_inputStreamToOutputStreamWithBufferSize(int)>(16384);

        return;
    }

    private void testCopy_inputStreamToOutputStreamWithBufferSize(int) throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        int i0, $i2, $i4, $i6, $i8;
        long l1, $l3, $l5, $l7, $l9;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4, $r8, $r9, $r10, $r11;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r5;
        org.apache.commons.io.output.ByteArrayOutputStream $r6;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        i0 := @parameter0: int;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r5.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r3);

        $r6 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r6.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r7 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r7.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r6, 0, 1);

        l1 = staticinvoke <org.apache.commons.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,int)>($r5, $r7, i0);

        $i2 = virtualinvoke $r5.<java.io.InputStream: int available()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Not all bytes were read", 0L, $l3);

        $r8 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i4 = lengthof $r8;

        $l5 = (long) $i4;

        $i6 = virtualinvoke $r6.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", $l5, $l7);

        $r9 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $r10 = virtualinvoke $r6.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i8 = lengthof $r11;

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, l1);

        return;
    }

    public void testCopy_inputStreamToOutputStream_nullIn() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r2;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r2 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(null, $r2);

        return;
    }

    public void testCopy_inputStreamToOutputStream_nullOut() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, null);

        return;
    }

    public void testCopy_inputStreamToOutputStream_IO84() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.input.NullInputStream $r3;
        org.apache.commons.io.output.NullOutputStream $r4;
        int $i1;
        long $l2, $l3;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r3 = new org.apache.commons.io.input.NullInputStream;

        specialinvoke $r3.<org.apache.commons.io.input.NullInputStream: void <init>(long)>(2147483648L);

        $r4 = new org.apache.commons.io.output.NullOutputStream;

        specialinvoke $r4.<org.apache.commons.io.output.NullOutputStream: void <init>()>();

        $i1 = staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r3, $r4);

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        virtualinvoke $r3.<java.io.InputStream: void close()>();

        $l3 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("copyLarge()", 2147483648L, $l3);

        return;
    }

    public void testCopy_inputStreamToWriter() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5, $r10, $r11, $r12;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r6;
        org.apache.commons.io.output.ByteArrayOutputStream $r7;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r8;
        java.io.OutputStreamWriter $r9;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r6.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r4);

        $r7 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r8 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r8.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r7, 1, 1);

        $r9 = new java.io.OutputStreamWriter;

        specialinvoke $r9.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r7, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>($r6, $r9);

        virtualinvoke $r8.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void off()>();

        virtualinvoke $r9.<java.io.Writer: void flush()>();

        $i0 = virtualinvoke $r6.<java.io.InputStream: int available()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Not all bytes were read", 0L, $l1);

        $r10 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i2 = lengthof $r10;

        $l3 = (long) $i2;

        $i4 = virtualinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", $l3, $l5);

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $r12 = virtualinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        return;
    }

    public void testCopy_inputStreamToWriter_nullIn() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r4;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r5;
        java.io.OutputStreamWriter $r6;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r4.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r5 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r5.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r4, 1, 1);

        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r5, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(null, $r6);

        return;
    }

    public void testCopy_inputStreamToWriter_nullOut() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>($r2, null);

        return;
    }

    public void testCopy_inputStreamToWriter_Encoding() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5, $r11, r14, r15;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r6;
        org.apache.commons.io.output.ByteArrayOutputStream $r7;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r8;
        java.io.OutputStreamWriter $r9;
        int $i0;
        long $l1;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r6.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r4);

        $r7 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r8 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r8.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r7, 1, 1);

        $r9 = new java.io.OutputStreamWriter;

        specialinvoke $r9.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r7, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>($r6, $r9, "UTF8");

        virtualinvoke $r8.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void off()>();

        virtualinvoke $r9.<java.io.Writer: void flush()>();

        $i0 = virtualinvoke $r6.<java.io.InputStream: int available()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Not all bytes were read", 0L, $l1);

        r14 = virtualinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[],java.lang.String)>(r14, "UTF8");

        r15 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, r15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        return;
    }

    public void testCopy_inputStreamToWriter_Encoding_nullIn() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r4;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r5;
        java.io.OutputStreamWriter $r6;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r4.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r5 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r5.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r4, 1, 1);

        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r5, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(null, $r6, "UTF8");

        return;
    }

    public void testCopy_inputStreamToWriter_Encoding_nullOut() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>($r2, null, "UTF8");

        return;
    }

    public void testCopy_inputStreamToWriter_Encoding_nullEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5, $r10, $r11, $r12;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r6;
        org.apache.commons.io.output.ByteArrayOutputStream $r7;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r8;
        java.io.OutputStreamWriter $r9;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r6.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r4);

        $r7 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r8 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r8.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r7, 1, 1);

        $r9 = new java.io.OutputStreamWriter;

        specialinvoke $r9.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r7, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>($r6, $r9, null);

        virtualinvoke $r8.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void off()>();

        virtualinvoke $r9.<java.io.Writer: void flush()>();

        $i0 = virtualinvoke $r6.<java.io.InputStream: int available()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Not all bytes were read", 0L, $l1);

        $r10 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i2 = lengthof $r10;

        $l3 = (long) $i2;

        $i4 = virtualinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", $l3, $l5);

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $r12 = virtualinvoke $r7.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        return;
    }

    public void testCopy_readerToOutputStream() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5, $r10, $r11, $r12;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r6;
        java.io.InputStreamReader $r7;
        org.apache.commons.io.output.ByteArrayOutputStream $r8;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r9;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r6.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r4);

        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r6, "US-ASCII");

        $r8 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r9 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r9.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r8, 0, 1);

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>($r7, $r9);

        $r10 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i0 = lengthof $r10;

        $l1 = (long) $i0;

        $i2 = virtualinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", $l1, $l3);

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $r12 = virtualinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        return;
    }

    public void testCopy_readerToOutputStream_nullIn() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r3;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r4;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r3 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r4 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r4.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r3, 1, 1);

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(null, $r4);

        return;
    }

    public void testCopy_readerToOutputStream_nullOut() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r4;
        java.io.InputStreamReader $r5;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $r4 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r4.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r2);

        $r5 = new java.io.InputStreamReader;

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>($r5, null);

        return;
    }

    public void testCopy_readerToOutputStream_Encoding() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5, $r11, r14, r15;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r6;
        java.io.InputStreamReader $r7;
        org.apache.commons.io.output.ByteArrayOutputStream $r8;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r9;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r6.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r4);

        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r6, "US-ASCII");

        $r8 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r9 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r9.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r8, 0, 1);

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>($r7, $r9, "UTF16");

        r14 = virtualinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[],java.lang.String)>(r14, "UTF16");

        r15 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, r15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        return;
    }

    public void testCopy_readerToOutputStream_Encoding_nullIn() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r3;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r4;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r3 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r4 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r4.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r3, 1, 1);

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>(null, $r4, "UTF16");

        return;
    }

    public void testCopy_readerToOutputStream_Encoding_nullOut() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r4;
        java.io.InputStreamReader $r5;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $r4 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r4.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r2);

        $r5 = new java.io.InputStreamReader;

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>($r5, null, "UTF16");

        return;
    }

    public void testCopy_readerToOutputStream_Encoding_nullEncoding() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5, $r10, $r11, $r12;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r6;
        java.io.InputStreamReader $r7;
        org.apache.commons.io.output.ByteArrayOutputStream $r8;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r9;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r6.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r4);

        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r6, "US-ASCII");

        $r8 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r9 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r9.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r8, 0, 1);

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>($r7, $r9, null);

        $r10 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i0 = lengthof $r10;

        $l1 = (long) $i0;

        $i2 = virtualinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", $l1, $l3);

        $r11 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $r12 = virtualinvoke $r8.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        return;
    }

    public void testCopy_readerToWriter() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        int i0, $i1, $i4, $i6;
        java.io.ByteArrayInputStream $r5;
        byte[] $r6, $r12, $r13, $r14, $r15;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r7;
        java.io.InputStreamReader $r8;
        org.apache.commons.io.output.ByteArrayOutputStream $r9;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r10;
        java.io.OutputStreamWriter $r11;
        long $l2, $l3, $l5, $l7;
        boolean $z0;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r5 = new java.io.ByteArrayInputStream;

        $r6 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        $r7 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r7.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r5);

        $r8 = new java.io.InputStreamReader;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r7, "US-ASCII");

        $r9 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r10 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r10.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r9, 1, 1);

        $r11 = new java.io.OutputStreamWriter;

        specialinvoke $r11.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r9, "US-ASCII");

        i0 = staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r8, $r11);

        virtualinvoke $r10.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void off()>();

        virtualinvoke $r11.<java.io.Writer: void flush()>();

        $r12 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i1 = lengthof $r12;

        $l3 = (long) $i1;

        $l2 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The number of characters returned by copy is wrong", $l3, $l2);

        $r13 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $i4 = lengthof $r13;

        $l5 = (long) $i4;

        $i6 = virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes differ", $l5, $l7);

        $r14 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        $r15 = virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r14, $r15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Content differs", $z0);

        return;
    }

    public void testCopy_readerToWriter_nullIn() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r4;
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream $r5;
        java.io.OutputStreamWriter $r6;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r4 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r4.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r5 = new org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        specialinvoke $r5.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: void <init>(java.io.OutputStream,boolean,boolean)>($r4, 1, 1);

        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r5, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(null, $r6);

        return;
    }

    public void testCopy_readerToWriter_nullOut() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;
        org.apache.commons.io.testtools.YellOnCloseInputStream $r4;
        java.io.InputStreamReader $r5;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.commons.io.IOUtilsCopyTestCase: byte[] inData>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $r4 = new org.apache.commons.io.testtools.YellOnCloseInputStream;

        specialinvoke $r4.<org.apache.commons.io.testtools.YellOnCloseInputStream: void <init>(java.io.InputStream)>($r2);

        $r5 = new java.io.InputStreamReader;

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, "US-ASCII");

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r5, null);

        return;
    }

    public void testCopy_readerToWriter_IO84() throws java.lang.Exception
    {
        org.apache.commons.io.IOUtilsCopyTestCase r0;
        org.apache.commons.io.input.NullReader $r3;
        org.apache.commons.io.output.NullWriter $r4;
        int $i1;
        long $l2, $l3;

        r0 := @this: org.apache.commons.io.IOUtilsCopyTestCase;

        $r3 = new org.apache.commons.io.input.NullReader;

        specialinvoke $r3.<org.apache.commons.io.input.NullReader: void <init>(long)>(2147483648L);

        $r4 = new org.apache.commons.io.output.NullWriter;

        specialinvoke $r4.<org.apache.commons.io.output.NullWriter: void <init>()>();

        $i1 = staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r3, $r4);

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        virtualinvoke $r3.<java.io.Reader: void close()>();

        $l3 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("copyLarge()", 2147483648L, $l3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.IOUtilsCopyTestCase: int FILE_SIZE> = 4097;

        return;
    }
}
