public class org.apache.commons.io.input.CharSequenceInputStreamTest extends java.lang.Object
{
    private static final java.lang.String ALPHABET;
    private static final java.lang.String LARGE_TEST_STRING;
    private static final java.lang.String TEST_STRING;
    private final java.util.Random random;

    static void <clinit>()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        int i0;

        <org.apache.commons.io.input.CharSequenceInputStreamTest: java.lang.String TEST_STRING> = "\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre";

        <org.apache.commons.io.input.CharSequenceInputStreamTest: java.lang.String ALPHABET> = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

        goto label2;

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre");

        i0 = i0 + 1;

     label2:
        if i0 < 100 goto label1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.commons.io.input.CharSequenceInputStreamTest: java.lang.String LARGE_TEST_STRING> = $r3;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.util.Random $r1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Random random> = $r1;

        return;
    }

    private java.util.Set getRequiredCharsetNames()
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.util.SortedMap $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r1 = staticinvoke <org.apache.commons.io.Charsets: java.util.SortedMap requiredCharsets()>();

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Set keySet()>();

        return $r2;
    }

    private void testBufferedRead(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, r2, $r14, $r21, $r24, $r27;
        byte[] r3, r5;
        int i0, $i1, $i2, $i7, i10, i11, i12;
        org.apache.commons.io.input.CharSequenceInputStream $r7;
        java.util.Random $r8, $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r25, $r26;
        byte $b3, $b4;
        long $l5, $l6, $l8, $l9;
        java.lang.Throwable $r28;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        $r7 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r7.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String,int)>(r1, r2, 512);

     label01:
        r5 = newarray (byte)[128];

        i10 = 0;

     label02:
        $r8 = r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Random random>;

        i11 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>(64);

        $r9 = r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Random random>;

        i0 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>(64);

        i12 = virtualinvoke $r7.<java.io.InputStream: int read(byte[],int,int)>(r5, i11, i0);

        if i12 != -1 goto label03;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("EOF: offset should equal length for charset ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = lengthof r3;

        $l9 = (long) $i7;

        $l8 = (long) i10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r27, $l9, $l8);

        goto label11;

     label03:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Read ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <= ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        if i12 > i0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r14, $z0);

        goto label09;

     label06:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("offset for ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $i1 = lengthof r3;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = lengthof r3;

        if i10 >= $i2 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r21, $z1);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("bytes should agree for ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $b3 = r3[i10];

        $l6 = (long) $b3;

        $b4 = r5[i11];

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r24, $l6, $l5);

        i10 = i10 + 1;

        i11 = i11 + 1;

        i12 = i12 + -1;

     label09:
        if i12 > 0 goto label06;

        goto label02;

     label10:
        $r28 := @caughtexception;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        throw $r28;

     label11:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label01 to label10 with label10;
    }

    public void testBufferedRead_AvailableCharset() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.SortedMap $r3;
        java.util.Set $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = staticinvoke <java.nio.charset.Charset: java.util.SortedMap availableCharsets()>();

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r5;

        $z0 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: boolean isAvailabilityTestableForCharset(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testBufferedRead(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", r1);

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;
    }

    public void testBufferedRead_RequiredCharset() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testBufferedRead(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void testBufferedRead_UTF8() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testBufferedRead(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-8");

        return;
    }

    private void testCharsetMismatchInfiniteLoop(java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r8;
        java.nio.charset.Charset r3;
        char[] $r6;
        org.apache.commons.io.input.CharSequenceInputStream $r7;
        int $i0;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r6 = newarray (char)[3];

        $r6[0] = 224;

        $r6[1] = 178;

        $r6[2] = 160;

        r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);

        $r7 = new org.apache.commons.io.input.CharSequenceInputStream;

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(char[])>($r6);

        specialinvoke $r7.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>($r8, r3, 512);

     label1:
        $i0 = virtualinvoke $r7.<java.io.InputStream: int read()>();

        if $i0 != -1 goto label1;

        goto label3;

     label2:
        $r9 := @caughtexception;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        throw $r9;

     label3:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testCharsetMismatchInfiniteLoop_RequiredCharsets() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testCharsetMismatchInfiniteLoop(java.lang.String)>(r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void testIO_356(int, int, int, java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        int i0, i1, i2, i3, i8, i9, i10;
        java.lang.String r1, $r9;
        byte[] r3, r10;
        org.apache.commons.io.input.CharSequenceInputStream $r4;
        long $l4, $l5, $l6, $l7;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r4 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String,int)>("ABCDEFGHIJKLMNOPQRSTUVWXYZ", r1, i0);

        i8 = 0;

        goto label4;

     label1:
        i9 = virtualinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: int read()>();

        if i9 != -1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        i8 = i8 + 1;

     label4:
        if i8 < i2 goto label1;

        virtualinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: void mark(int)>(i1);

        r10 = newarray (byte)[i1];

        i10 = virtualinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[])>(r10);

        $l5 = (long) i1;

        $l4 = (long) i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l4);

        virtualinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: void reset()>();

        r3 = newarray (byte)[i1];

        i3 = virtualinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[])>(r3);

        $l7 = (long) i1;

        $l6 = (long) i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l6);

        virtualinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: void close()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("bufferSize=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dataSize=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,byte[],byte[])>($r9, r10, r3);

        return;
    }

    public void testIO_356_B10_D10_S0_UTF16() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(10, 10, 0, "UTF-16");

        return;
    }

    public void testIO_356_B10_D10_S0_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(10, 10, 0, "UTF-8");

        return;
    }

    public void testIO_356_B10_D10_S1_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(10, 10, 1, "UTF-8");

        return;
    }

    public void testIO_356_B10_D10_S2_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(10, 10, 2, "UTF-8");

        return;
    }

    public void testIO_356_B10_D13_S0_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(10, 13, 0, "UTF-8");

        return;
    }

    public void testIO_356_B10_D13_S1_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(10, 13, 1, "UTF-8");

        return;
    }

    public void testIO_356_B10_D20_S0_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(10, 20, 0, "UTF-8");

        return;
    }

    private void testIO_356_Loop(java.lang.String, int) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        int i0, i1, i2;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = i0;

        goto label4;

     label1:
        i2 = 1;

        goto label3;

     label2:
        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356(int,int,int,java.lang.String)>(i1, i2, 0, r1);

        i2 = i2 + 1;

     label3:
        if i2 <= 20 goto label2;

        i1 = i1 + 1;

     label4:
        if i1 <= 10 goto label1;

        return;
    }

    public void testIO_356_Loop_UTF16() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356_Loop(java.lang.String,int)>("UTF-16", 4);

        return;
    }

    public void testIO_356_Loop_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testIO_356_Loop(java.lang.String,int)>("UTF-8", 4);

        return;
    }

    public void testLargeBufferedRead_RequiredCharsets() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r5;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        $r5 = <org.apache.commons.io.input.CharSequenceInputStreamTest: java.lang.String LARGE_TEST_STRING>;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testBufferedRead(java.lang.String,java.lang.String)>($r5, r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void testLargeBufferedRead_UTF8() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r1 = <org.apache.commons.io.input.CharSequenceInputStreamTest: java.lang.String LARGE_TEST_STRING>;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testBufferedRead(java.lang.String,java.lang.String)>($r1, "UTF-8");

        return;
    }

    public void testLargeSingleByteRead_RequiredCharsets() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r5;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        $r5 = <org.apache.commons.io.input.CharSequenceInputStreamTest: java.lang.String LARGE_TEST_STRING>;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSingleByteRead(java.lang.String,java.lang.String)>($r5, r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void testLargeSingleByteRead_UTF8() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r1 = <org.apache.commons.io.input.CharSequenceInputStreamTest: java.lang.String LARGE_TEST_STRING>;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSingleByteRead(java.lang.String,java.lang.String)>($r1, "UTF-8");

        return;
    }

    private void testMarkReset(java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        org.apache.commons.io.input.CharSequenceInputStream $r4;
        long $l0, $l2, $l4, $l6, $l8, $l10, $l12;
        int $i1, $i3, $i5, $i7, $i9, $i11;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r4 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>("test", r1);

     label1:
        $l0 = virtualinvoke $r4.<java.io.InputStream: long skip(long)>(2L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l0);

        virtualinvoke $r4.<java.io.InputStream: void mark(int)>(0);

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, 115L, $l2);

        $i3 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, 116L, $l4);

        $i5 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, -1L, $l6);

        virtualinvoke $r4.<java.io.InputStream: void reset()>();

        $i7 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, 115L, $l8);

        $i9 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, 116L, $l10);

        $i11 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, -1L, $l12);

        virtualinvoke $r4.<java.io.InputStream: void reset()>();

        virtualinvoke $r4.<java.io.InputStream: void reset()>();

        goto label3;

     label2:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        throw $r5;

     label3:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testMarkReset_RequiredCharsets() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testMarkReset(java.lang.String)>(r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void testMarkReset_USASCII() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testMarkReset(java.lang.String)>("US-ASCII");

        return;
    }

    public void testMarkReset_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testMarkReset(java.lang.String)>("UTF-8");

        return;
    }

    public void testMarkSupported() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        org.apache.commons.io.input.CharSequenceInputStream $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r3.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>("test", "UTF-8");

     label1:
        $z0 = virtualinvoke $r3.<java.io.InputStream: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        goto label3;

     label2:
        $r4 := @caughtexception;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

        throw $r4;

     label3:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    private void testReadZero(java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        byte[] r3;
        org.apache.commons.io.input.CharSequenceInputStream $r5;
        int $i0;
        long $l1;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r5 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r5.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>("test", r1);

     label1:
        r3 = newarray (byte)[30];

        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        goto label3;

     label2:
        $r6 := @caughtexception;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        throw $r6;

     label3:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testReadZero_EmptyString() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        byte[] r2;
        org.apache.commons.io.input.CharSequenceInputStream $r4;
        int $i0;
        long $l1;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r4 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>("", "UTF-8");

     label1:
        r2 = newarray (byte)[30];

        $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r2, 0, 0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        goto label3;

     label2:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        throw $r5;

     label3:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testReadZero_RequiredCharsets() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testReadZero(java.lang.String)>(r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void testSingleByteRead(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, r2, $r11, $r15;
        byte[] r3;
        byte b0, $b3;
        int i1, i2, $i6, i8;
        org.apache.commons.io.input.CharSequenceInputStream $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r14;
        long $l4, $l5, $l7;
        java.lang.Throwable $r16;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        $r7 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r7.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String,int)>(r1, r2, 512);

     label1:
        i1 = lengthof r3;

        i8 = 0;

        goto label7;

     label2:
        b0 = r3[i8];

        i2 = virtualinvoke $r7.<java.io.InputStream: int read()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("read ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >=0 ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        if i2 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r11, $z0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("read ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <= 255");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        if i2 > 255 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r15, $z1);

        $l5 = (long) b0;

        $b3 = (byte) i2;

        $l4 = (long) $b3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Should agree with input", $l5, $l4);

        i8 = i8 + 1;

     label7:
        if i8 < i1 goto label2;

        $i6 = virtualinvoke $r7.<java.io.InputStream: int read()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        goto label9;

     label8:
        $r16 := @caughtexception;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        throw $r16;

     label9:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label8 with label8;
    }

    public void testSingleByteRead_RequiredCharsets() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSingleByteRead(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void testSingleByteRead_UTF16() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSingleByteRead(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-16");

        return;
    }

    public void testSingleByteRead_UTF8() throws java.io.IOException
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSingleByteRead(java.lang.String,java.lang.String)>("\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre", "UTF-8");

        return;
    }

    private void testSkip(java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        org.apache.commons.io.input.CharSequenceInputStream $r4;
        long $l0, $l1, $l3, $l6;
        int $i2, $i5;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r4 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r4.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>("test", r1);

     label1:
        $l0 = virtualinvoke $r4.<java.io.InputStream: long skip(long)>(1L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l0);

        $l1 = virtualinvoke $r4.<java.io.InputStream: long skip(long)>(2L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $i2 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, 116L, $l3);

        virtualinvoke $r4.<java.io.InputStream: long skip(long)>(100L);

        $i5 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, -1L, $l6);

        goto label3;

     label2:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        throw $r5;

     label3:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testSkip_RequiredCharsets() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: java.util.Set getRequiredCharsetNames()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r4;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSkip(java.lang.String)>(r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void testSkip_USASCII() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSkip(java.lang.String)>("US-ASCII");

        return;
    }

    public void testSkip_UTF8() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testSkip(java.lang.String)>("UTF-8");

        return;
    }

    private int checkAvail(java.io.InputStream, int) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.io.InputStream r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<java.io.InputStream: int available()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("avail should be >= ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but was ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        if i1 < i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r6, $z0);

        return i1;
    }

    private void testAvailableSkip(java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r6;
        org.apache.commons.io.input.CharSequenceInputStream $r5;
        int $i0, $i1, $i2, i7;
        long $l3, $l4, $l5, $l6;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r5 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r5.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>("test", r1);

     label1:
        $r6 = "test";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        i7 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: int checkAvail(java.io.InputStream,int)>($r5, $i0);

        $i1 = i7 - 1;

        $l4 = (long) $i1;

        $i2 = i7 - 1;

        $l3 = (long) $i2;

        $l5 = virtualinvoke $r5.<java.io.InputStream: long skip(long)>($l3);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l5);

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: int checkAvail(java.io.InputStream,int)>($r5, 1);

        $l6 = virtualinvoke $r5.<java.io.InputStream: long skip(long)>(1L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l6);

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: int checkAvail(java.io.InputStream,int)>($r5, 0);

        goto label3;

     label2:
        $r7 := @caughtexception;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        throw $r7;

     label3:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    private void testAvailableRead(java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r6;
        org.apache.commons.io.input.CharSequenceInputStream $r5;
        int $i0, $i1, $i2, $i7, i9, i10;
        long $l3, $l4, $l5, $l6, $l8;
        java.lang.Throwable $r7;
        byte[] r8, r9;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r5 = new org.apache.commons.io.input.CharSequenceInputStream;

        specialinvoke $r5.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String)>("test", r1);

     label1:
        $r6 = "test";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        i9 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: int checkAvail(java.io.InputStream,int)>($r5, $i0);

        r8 = newarray (byte)[i9];

        $i1 = i9 - 1;

        $l4 = (long) $i1;

        $i2 = i9 - 1;

        $l3 = (long) $i2;

        $l5 = virtualinvoke $r5.<java.io.InputStream: long skip(long)>($l3);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l5);

        i10 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: int checkAvail(java.io.InputStream,int)>($r5, 1);

        r9 = newarray (byte)[i10];

        $l6 = (long) i10;

        $i7 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r9, 0, i10);

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        goto label3;

     label2:
        $r7 := @caughtexception;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        throw $r7;

     label3:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void testAvailable() throws java.lang.Exception
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r10;
        java.util.Iterator r2;
        java.util.SortedMap $r4;
        java.util.Set $r5;
        java.lang.Object $r6;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r7;
        java.lang.StringBuilder $r8, $r9;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        $r4 = staticinvoke <java.nio.charset.Charset: java.util.SortedMap availableCharsets()>();

        $r5 = interfaceinvoke $r4.<java.util.SortedMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r6;

     label2:
        $z0 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: boolean isAvailabilityTestableForCharset(java.lang.String)>(r1);

        if $z0 == 0 goto label5;

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testAvailableSkip(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: void testAvailableRead(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Operation not supported for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r10);

     label5:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
    }

    private boolean isAvailabilityTestableForCharset(java.lang.String)
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r3, $r4;
        java.nio.charset.Charset $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);

        $z0 = virtualinvoke $r2.<java.nio.charset.Charset: boolean canEncode()>();

        if $z0 == 0 goto label1;

        $r3 = "COMPOUND_TEXT";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        $r4 = "x-COMPOUND_TEXT";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        $z3 = specialinvoke r0.<org.apache.commons.io.input.CharSequenceInputStreamTest: boolean isOddBallLegacyCharsetThatDoesNotSupportFrenchCharacters(java.lang.String)>(r1);

        if $z3 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isOddBallLegacyCharsetThatDoesNotSupportFrenchCharacters(java.lang.String)
    {
        org.apache.commons.io.input.CharSequenceInputStreamTest r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.io.input.CharSequenceInputStreamTest;

        r1 := @parameter0: java.lang.String;

        $r2 = "x-IBM1388";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = "ISO-2022-CN";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        $r4 = "ISO-2022-JP";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        $r5 = "Shift_JIS";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z3 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }
}
