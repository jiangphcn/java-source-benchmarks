public class org.apache.commons.io.FileUtils extends java.lang.Object
{
    public static final long ONE_KB;
    public static final java.math.BigInteger ONE_KB_BI;
    public static final long ONE_MB;
    public static final java.math.BigInteger ONE_MB_BI;
    private static final long FILE_COPY_BUFFER_SIZE;
    public static final long ONE_GB;
    public static final java.math.BigInteger ONE_GB_BI;
    public static final long ONE_TB;
    public static final java.math.BigInteger ONE_TB_BI;
    public static final long ONE_PB;
    public static final java.math.BigInteger ONE_PB_BI;
    public static final long ONE_EB;
    public static final java.math.BigInteger ONE_EB_BI;
    public static final java.math.BigInteger ONE_ZB;
    public static final java.math.BigInteger ONE_YB;
    public static final java.io.File[] EMPTY_FILE_ARRAY;

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.io.File[] $r22;

        <org.apache.commons.io.FileUtils: long ONE_EB> = 1152921504606846976L;

        <org.apache.commons.io.FileUtils: long ONE_PB> = 1125899906842624L;

        <org.apache.commons.io.FileUtils: long ONE_TB> = 1099511627776L;

        <org.apache.commons.io.FileUtils: long ONE_GB> = 1073741824L;

        <org.apache.commons.io.FileUtils: long FILE_COPY_BUFFER_SIZE> = 31457280L;

        <org.apache.commons.io.FileUtils: long ONE_MB> = 1048576L;

        <org.apache.commons.io.FileUtils: long ONE_KB> = 1024L;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1024L);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI> = $r0;

        $r2 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI> = $r3;

        $r5 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r4 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI> = $r6;

        $r8 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r7 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI> = $r9;

        $r11 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r10 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI>;

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI> = $r12;

        $r14 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r13 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI>;

        $r15 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r13);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_EB_BI> = $r15;

        $r16 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1024L);

        $r17 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1152921504606846976L);

        $r18 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r17);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_ZB> = $r18;

        $r20 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r19 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_ZB>;

        $r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r19);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_YB> = $r21;

        $r22 = newarray (java.io.File)[0];

        <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY> = $r22;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.FileUtils r0;

        r0 := @this: org.apache.commons.io.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.io.File getFile(java.io.File, java.lang.String[])
    {
        java.io.File r0, $r4, r7;
        java.lang.String[] r1;
        java.lang.String r2;
        int i0, i1;
        java.lang.NullPointerException $r5, $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("directory must not be null");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("names must not be null");

        throw $r5;

     label2:
        r7 = r0;

        i0 = lengthof r1;

        i1 = 0;

        goto label4;

     label3:
        r2 = r1[i1];

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r7, r2);

        r7 = $r4;

        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label3;

        return r7;
    }

    public static transient java.io.File getFile(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.String r1;
        int i0, i1;
        java.io.File $r3, $r4, r6;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("names must not be null");

        throw $r5;

     label1:
        r6 = null;

        i0 = lengthof r0;

        i1 = 0;

        goto label5;

     label2:
        r1 = r0[i1];

        if r6 != null goto label3;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);

        r6 = $r4;

        goto label4;

     label3:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r6, r1);

        r6 = $r3;

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label2;

        return r6;
    }

    public static java.lang.String getTempDirectoryPath()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        return $r0;
    }

    public static java.io.File getTempDirectory()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String getTempDirectoryPath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r0;
    }

    public static java.lang.String getUserDirectoryPath()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        return $r0;
    }

    public static java.io.File getUserDirectory()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String getUserDirectoryPath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r0;
    }

    public static java.io.FileInputStream openInputStream(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1, $z2;
        java.io.FileNotFoundException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r8, $r9, $r10, $r13, $r14, $r15;
        java.lang.String $r5, $r11, $r16;
        java.io.FileInputStream $r6;
        java.io.IOException $r7, $r12;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $z2 = virtualinvoke r0.<java.io.File: boolean canRead()>();

        if $z2 != 0 goto label3;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be read");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        $r1 = new java.io.FileNotFoundException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        return $r6;
    }

    public static java.io.FileOutputStream openOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.io.FileOutputStream $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>(r0, 0);

        return $r1;
    }

    public static java.io.FileOutputStream openOutputStream(java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r2, $r7, $r12;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r14, $r15;
        java.lang.String $r6, $r11, $r16;
        java.io.FileOutputStream $r17;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z4 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label1;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $z5 = virtualinvoke r0.<java.io.File: boolean canWrite()>();

        if $z5 != 0 goto label3;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("File \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        if r1 == null goto label3;

        $z2 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label3;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Directory \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be created");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        $r17 = new java.io.FileOutputStream;

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r0, z0);

        return $r17;
    }

    public static java.lang.String byteCountToDisplaySize(java.math.BigInteger)
    {
        java.math.BigInteger r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r24, $r25, $r30, $r31, $r36, $r37, $r42, $r43, $r48, $r49, $r54, $r55;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r19, $r22, $r23, $r28, $r29, $r34, $r35, $r40, $r41, $r46, $r47, $r52, $r53, $r58;
        java.lang.String $r20, $r21, $r26, $r27, $r32, $r33, $r38, $r39, $r44, $r45, $r50, $r51, $r56, $r57, r59;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_EB_BI>;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 <= 0 goto label1;

        $r53 = new java.lang.StringBuilder;

        $r54 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_EB_BI>;

        $r55 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r54);

        $r56 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r55);

        $r57 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r56);

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r57);

        $r58 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EB");

        r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label1:
        $r4 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI>;

        $r5 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r4);

        $r6 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i1 <= 0 goto label2;

        $r47 = new java.lang.StringBuilder;

        $r48 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI>;

        $r49 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r48);

        $r50 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r49);

        $r51 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r50);

        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>($r51);

        $r52 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PB");

        r59 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label2:
        $r7 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI>;

        $r8 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r7);

        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i2 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i2 <= 0 goto label3;

        $r41 = new java.lang.StringBuilder;

        $r42 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI>;

        $r43 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r42);

        $r44 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r43);

        $r45 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r44);

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>($r45);

        $r46 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TB");

        r59 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label3:
        $r10 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI>;

        $r11 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r10);

        $r12 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i3 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i3 <= 0 goto label4;

        $r35 = new java.lang.StringBuilder;

        $r36 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI>;

        $r37 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r36);

        $r38 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r37);

        $r39 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r38);

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>($r39);

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GB");

        r59 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label4:
        $r13 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI>;

        $r14 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r13);

        $r15 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i4 = virtualinvoke $r14.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r15);

        if $i4 <= 0 goto label5;

        $r29 = new java.lang.StringBuilder;

        $r30 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI>;

        $r31 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r30);

        $r32 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r31);

        $r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r32);

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>($r33);

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MB");

        r59 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label5:
        $r16 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r17 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r16);

        $r18 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i5 = virtualinvoke $r17.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r18);

        if $i5 <= 0 goto label6;

        $r23 = new java.lang.StringBuilder;

        $r24 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r25 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r24);

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r25);

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>($r27);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KB");

        r59 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label6:
        $r19 = new java.lang.StringBuilder;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20);

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        r59 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        return r59;
    }

    public static java.lang.String byteCountToDisplaySize(long)
    {
        long l0;
        java.math.BigInteger $r0;
        java.lang.String $r1;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r0);

        return $r1;
    }

    public static void touch(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, z1;
        long $l0;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r4;
        java.io.FileOutputStream r5;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        z1 = virtualinvoke r0.<java.io.File: boolean setLastModified(long)>($l0);

        if z1 != 0 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to set the last modification time for ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label2:
        return;
    }

    public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection)
    {
        java.util.Collection r0;
        int $i0;
        java.io.File[] $r1, $r3;
        java.lang.Object[] $r2;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.io.File)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (java.io.File[]) $r2;

        return $r3;
    }

    private static void innerListFiles(java.util.Collection, java.io.File, org.apache.commons.io.filefilter.IOFileFilter, boolean)
    {
        java.util.Collection r0;
        java.io.File r1, r4;
        org.apache.commons.io.filefilter.IOFileFilter r2;
        boolean z0, $z1;
        java.io.File[] r3;
        int i0, i1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        z0 := @parameter3: boolean;

        r3 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r2);

        if r3 == null goto label6;

        i0 = lengthof r3;

        i1 = 0;

        goto label5;

     label1:
        r4 = r3[i1];

        $z1 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

        if z0 == 0 goto label2;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r4);

     label2:
        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)>(r0, r4, r2, z0);

        goto label4;

     label3:
        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r4);

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label1;

     label6:
        return;
    }

    public static java.util.Collection listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, r3, r4, $r8;
        java.util.LinkedList $r6;
        org.apache.commons.io.filefilter.IOFileFilter[] $r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        staticinvoke <org.apache.commons.io.FileUtils: void validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r1);

        r4 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r2);

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        $r7 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r7[0] = r3;

        $r7[1] = r4;

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r7);

        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)>($r6, r0, $r8, 0);

        return $r6;
    }

    private static void validateListFilesParameters(java.io.File, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.IOFileFilter r1;
        boolean $z0;
        java.lang.NullPointerException $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Parameter \'directory\' is not a directory: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Parameter \'fileFilter\' is null");

        throw $r2;

     label2:
        return;
    }

    private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3, $r4;
        org.apache.commons.io.filefilter.IOFileFilter[] $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r1 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r1[0] = r0;

        $r2 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r2);

        $r1[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r1);

        return $r4;
    }

    private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3;
        org.apache.commons.io.filefilter.IOFileFilter[] $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        goto label2;

     label1:
        $r1 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r1[0] = r0;

        $r2 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r1[1] = $r2;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r1);

     label2:
        return $r3;
    }

    public static java.util.Collection listFilesAndDirs(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, r3, r4, $r8;
        java.util.LinkedList $r6;
        boolean $z0;
        org.apache.commons.io.filefilter.IOFileFilter[] $r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        staticinvoke <org.apache.commons.io.FileUtils: void validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1);

        r3 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r1);

        r4 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)>(r2);

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r0);

     label1:
        $r7 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r7[0] = r3;

        $r7[1] = r4;

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r7);

        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)>($r6, r0, $r8, 1);

        return $r6;
    }

    public static java.util.Iterator iterateFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        return $r4;
    }

    public static java.util.Iterator iterateFilesAndDirs(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        return $r4;
    }

    private static java.lang.String[] toSuffixes(java.lang.String[])
    {
        java.lang.String[] r0, r1;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(".");

        $r3 = r0[i2];

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[i2] = $r5;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r0;

        if i2 < $i1 goto label1;

        return r1;
    }

    public static java.util.Collection listFiles(java.io.File, java.lang.String[], boolean)
    {
        java.io.File r0;
        java.lang.String[] r1, r2;
        boolean z0;
        org.apache.commons.io.filefilter.SuffixFileFilter $r3;
        java.util.Collection $r4;
        org.apache.commons.io.filefilter.IOFileFilter $r6, r7, $r8;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        r7 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])>(r1);

        $r3 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r3.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>(r2);

        r7 = $r3;

     label2:
        $r6 = r7;

        if z0 == 0 goto label3;

        $r8 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        goto label4;

     label3:
        $r8 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

     label4:
        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, $r6, $r8);

        return $r4;
    }

    public static java.util.Iterator iterateFiles(java.io.File, java.lang.String[], boolean)
    {
        java.io.File r0;
        java.lang.String[] r1;
        boolean z0;
        java.util.Collection $r2;
        java.util.Iterator $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>(r0, r1, z0);

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public static boolean contentEquals(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, $r4, $r5;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r3;
        long $l0, $l1;
        byte $b2;
        java.io.FileInputStream $r6, $r7, r9, r10;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if z0 == $z2 goto label1;

        return 0;

     label1:
        if z0 != 0 goto label2;

        return 1;

     label2:
        $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label4;

     label3:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Can\'t compare directories, only files");

        throw $r3;

     label4:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $l1 = virtualinvoke r1.<java.io.File: long length()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label5;

        return 0;

     label5:
        $r4 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r5 = virtualinvoke r1.<java.io.File: java.io.File getCanonicalFile()>();

        $z5 = virtualinvoke $r4.<java.io.File: boolean equals(java.lang.Object)>($r5);

        if $z5 == 0 goto label6;

        return 1;

     label6:
        r9 = null;

        r10 = null;

     label7:
        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        r9 = $r6;

        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r10 = $r7;

        z1 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>($r6, $r7);

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r6);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r7);

        return z1;

     label9:
        $r8 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r9);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r10);

        throw $r8;

        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public static boolean contentEqualsIgnoreEOL(java.io.File, java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0, r1, $r5, $r6;
        java.lang.String r2;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r4;
        java.io.InputStreamReader $r7, $r9, $r11, $r14, r18, r19;
        java.io.FileInputStream $r8, $r10, $r12, $r15;
        java.nio.charset.Charset $r13, $r16;
        java.lang.Throwable $r17;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.lang.String;

        z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if z0 == $z2 goto label01;

        return 0;

     label01:
        if z0 != 0 goto label02;

        return 1;

     label02:
        $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label03;

        $z4 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label04;

     label03:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Can\'t compare directories, only files");

        throw $r4;

     label04:
        $r5 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r6 = virtualinvoke r1.<java.io.File: java.io.File getCanonicalFile()>();

        $z5 = virtualinvoke $r5.<java.io.File: boolean equals(java.lang.Object)>($r6);

        if $z5 == 0 goto label05;

        return 1;

     label05:
        r18 = null;

        r19 = null;

     label06:
        if r2 != null goto label07;

        $r11 = new java.io.InputStreamReader;

        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        $r13 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r12, $r13);

        r18 = $r11;

        $r14 = new java.io.InputStreamReader;

        $r15 = new java.io.FileInputStream;

        specialinvoke $r15.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        $r16 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke $r14.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r15, $r16);

        r19 = $r14;

        goto label08;

     label07:
        $r7 = new java.io.InputStreamReader;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r8, r2);

        r18 = $r7;

        $r9 = new java.io.InputStreamReader;

        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r10, r2);

        r19 = $r9;

     label08:
        z1 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)>(r18, r19);

     label09:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r18);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r19);

        return z1;

     label10:
        $r17 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r18);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r19);

        throw $r17;

        catch java.lang.Throwable from label06 to label09 with label10;
    }

    public static java.io.File toFile(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String $r1, $r2, $r3, r5, r6;
        boolean $z0;
        char $c0;
        java.io.File $r4;

        r0 := @parameter0: java.net.URL;

        if r0 == null goto label1;

        $r1 = "file";

        $r2 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = virtualinvoke r0.<java.net.URL: java.lang.String getFile()>();

        $c0 = <java.io.File: char separatorChar>;

        r5 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(47, $c0);

        r6 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>(r5);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r6);

        return $r4;
    }

    static java.lang.String decodeUrl(java.lang.String)
    {
        java.lang.String r0, $r6, $r11, $r18, $r25, r28;
        int i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, i10, $i12;
        java.nio.ByteBuffer r2;
        java.lang.StringBuilder $r4;
        char $c2, $c7, $c13;
        java.nio.charset.Charset $r9, $r16, $r23;
        java.nio.CharBuffer $r10, $r17, $r24;
        java.lang.Throwable $r14;
        java.lang.RuntimeException $r21;
        byte b11;

        r0 := @parameter0: java.lang.String;

        r28 = r0;

        if r0 == null goto label10;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(37);

        if $i1 < 0 goto label10;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        i10 = 0;

        goto label09;

     label01:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        if $c2 != 37 goto label08;

     label02:
        $i4 = i10 + 1;

        $i3 = i10 + 3;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r6, 16);

        b11 = (byte) $i5;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b11);

        i10 = i10 + 3;

        if i10 >= i0 goto label03;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        if $c7 == 37 goto label02;

     label03:
        $i6 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        if $i6 <= 0 goto label09;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r9 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke $r9.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r2);

        $r11 = virtualinvoke $r10.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label09;

     label04:
        $r21 := @caughtexception;

     label05:
        $i9 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        if $i9 <= 0 goto label08;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r23 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        $r24 = virtualinvoke $r23.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r2);

        $r25 = virtualinvoke $r24.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label08;

     label06:
        $r14 := @caughtexception;

        $i8 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        if $i8 <= 0 goto label07;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r16 = <org.apache.commons.io.Charsets: java.nio.charset.Charset UTF_8>;

        $r17 = virtualinvoke $r16.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r2);

        $r18 = virtualinvoke $r17.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label07:
        throw $r14;

     label08:
        $i12 = i10;

        i10 = i10 + 1;

        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i12);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);

     label09:
        if i10 < i0 goto label01;

        r28 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        return r28;

        catch java.lang.RuntimeException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
    }

    public static java.io.File[] toFiles(java.net.URL[])
    {
        java.net.URL[] r0;
        java.io.File[] r1, $r3;
        java.net.URL r2;
        int $i0, $i1, i2, $i3;
        java.lang.String $r4, $r9;
        boolean $z0;
        java.io.File $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8;

        r0 := @parameter0: java.net.URL[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r3 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.io.File)[$i1];

        i2 = 0;

        goto label6;

     label3:
        r2 = r0[i2];

        if r2 == null goto label5;

        $r4 = virtualinvoke r2.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 != 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("URL could not be converted to a File: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label4:
        $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>(r2);

        r1[i2] = $r5;

     label5:
        i2 = i2 + 1;

     label6:
        $i3 = lengthof r0;

        if i2 < $i3 goto label3;

        return r1;
    }

    public static java.net.URL[] toURLs(java.io.File[]) throws java.io.IOException
    {
        java.io.File[] r0;
        java.net.URL[] r1;
        int $i0, $i1, i2;
        java.io.File $r2;
        java.net.URI $r3;
        java.net.URL $r4;

        r0 := @parameter0: java.io.File[];

        $i0 = lengthof r0;

        r1 = newarray (java.net.URL)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        r1[i2] = $r4;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r1;

        if i2 < $i1 goto label1;

        return r1;
    }

    public static void copyFileToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1);

        return;
    }

    public static void copyFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r3;
        boolean z0, $z1, $z2;
        java.lang.String $r4, $r9;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.NullPointerException $r10;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r10;

     label1:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r3 = new java.io.File;

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r4);

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r0, $r3, z0);

        return;
    }

    public static void copyFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r0, r1, 1);

        return;
    }

    public static void copyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r3, $r4, $r9, $r14, $r21, $r26;
        java.io.IOException $r5, $r10, $r15, $r22;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void checkFileRequirements(java.io.File,java.io.File)>(r0, r1);

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        $r22 = new java.io.IOException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label1:
        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label2;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label2:
        r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        if r2 == null goto label3;

        $z4 = virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        if $z4 != 0 goto label3;

        $z5 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z5 != 0 goto label3;

        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        $z6 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z6 == 0 goto label4;

        $z3 = virtualinvoke r1.<java.io.File: boolean canWrite()>();

        if $z3 != 0 goto label4;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is read-only");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>(r0, r1, z0);

        return;
    }

    public static long copyFile(java.io.File, java.io.OutputStream) throws java.io.IOException
    {
        java.io.File r0;
        java.io.OutputStream r1;
        long l0;
        java.io.FileInputStream $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.OutputStream;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

     label1:
        l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>($r4, r1);

     label2:
        virtualinvoke $r4.<java.io.FileInputStream: void close()>();

        return l0;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.io.FileInputStream: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void doCopyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z3;
        long l0, l1, $l6, l7, l8, $l10, l12, l13;
        java.io.FileInputStream $r3, r23;
        java.io.FileOutputStream $r4, r24;
        byte $b2, $b3, $b4, $b5;
        java.io.Closeable[] $r5, $r22;
        java.io.IOException $r6, $r16;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19;
        java.lang.String $r15, $r20;
        java.lang.Throwable $r21;
        java.nio.channels.FileChannel r25, r26;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label01;

        $r16 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label01:
        r23 = null;

        r24 = null;

        r25 = null;

        r26 = null;

     label02:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        r23 = $r3;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        r24 = $r4;

        r25 = virtualinvoke $r3.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        r26 = virtualinvoke $r4.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        l7 = virtualinvoke r25.<java.nio.channels.FileChannel: long size()>();

        l8 = 0L;

        goto label07;

     label03:
        l0 = l7 - l8;

        $b3 = l0 cmp 31457280L;

        if $b3 <= 0 goto label04;

        $l10 = 31457280L;

        goto label05;

     label04:
        $l10 = l0;

     label05:
        l1 = virtualinvoke r26.<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>(r25, l8, $l10);

        $b4 = l1 cmp 0L;

        if $b4 != 0 goto label06;

        goto label09;

     label06:
        l8 = l8 + l1;

     label07:
        $b2 = l8 cmp l7;

        if $b2 < 0 goto label03;

        goto label09;

     label08:
        $r21 := @caughtexception;

        $r22 = newarray (java.io.Closeable)[4];

        $r22[0] = r26;

        $r22[1] = r24;

        $r22[2] = r25;

        $r22[3] = r23;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable[])>($r22);

        throw $r21;

     label09:
        $r5 = newarray (java.io.Closeable)[4];

        $r5[0] = r26;

        $r5[1] = $r4;

        $r5[2] = r25;

        $r5[3] = $r3;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable[])>($r5);

        l12 = virtualinvoke r0.<java.io.File: long length()>();

        l13 = virtualinvoke r1.<java.io.File: long length()>();

        $b5 = l12 cmp l13;

        if $b5 == 0 goto label10;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to copy full contents from \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' Expected length: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l12);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Actual: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label10:
        if z0 == 0 goto label11;

        $l6 = virtualinvoke r0.<java.io.File: long lastModified()>();

        virtualinvoke r1.<java.io.File: boolean setLastModified(long)>($l6);

     label11:
        return;

        catch java.lang.Throwable from label02 to label08 with label08;
    }

    public static void copyDirectoryToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r8, $r14;
        java.lang.IllegalArgumentException $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13;
        java.lang.NullPointerException $r9, $r15;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r15;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        if r1 != null goto label3;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r9;

     label3:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, $r2, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>(r0, r1, null, z0);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter) throws java.io.IOException
    {
        java.io.File r0, r1;
        java.io.FileFilter r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.io.FileFilter;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>(r0, r1, r2, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, r4, $r12;
        java.io.FileFilter r2;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1, $i2, i3;
        java.io.File[] r5, $r28;
        java.lang.String $r7, $r8, $r9, $r10, $r13, $r14, $r21, $r26;
        java.util.ArrayList $r11, r27;
        java.io.IOException $r15, $r22;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.io.FileFilter;

        z0 := @parameter3: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void checkFileRequirements(java.io.File,java.io.File)>(r0, r1);

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label1;

        $r22 = new java.io.IOException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label1:
        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label2;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label2:
        r27 = null;

        $r9 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r10 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>($r10);

        if $z3 == 0 goto label7;

        if r2 != null goto label3;

        $r28 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        goto label4;

     label3:
        $r28 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r2);

     label4:
        if $r28 == null goto label7;

        $i1 = lengthof $r28;

        if $i1 <= 0 goto label7;

        $r11 = new java.util.ArrayList;

        $i2 = lengthof $r28;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i2);

        r27 = $r11;

        r5 = $r28;

        i0 = lengthof $r28;

        i3 = 0;

        goto label6;

     label5:
        r4 = r5[i3];

        $r12 = new java.io.File;

        $r13 = virtualinvoke r4.<java.io.File: java.lang.String getName()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r13);

        $r14 = virtualinvoke $r12.<java.io.File: java.lang.String getCanonicalPath()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r14);

        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label5;

     label7:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>(r0, r1, r2, z0, r27);

        return;
    }

    private static void checkFileRequirements(java.io.File, java.io.File) throws java.io.FileNotFoundException
    {
        java.io.File r0, r1;
        boolean $z0;
        java.io.FileNotFoundException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.NullPointerException $r7, $r8;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r8;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r7;

     label2:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r2 = new java.io.FileNotFoundException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        return;
    }

    private static void doCopyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean, java.util.List) throws java.io.IOException
    {
        java.io.File r0, r1, r5, $r8;
        java.io.FileFilter r2;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8;
        java.util.List r3;
        java.io.File[] r4, $r30;
        int i0, i2;
        java.lang.String $r9, $r10, $r15, $r20, $r25, $r29;
        long $l1;
        java.io.IOException $r11, $r16, $r21, $r26;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24, $r27, $r28;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.io.FileFilter;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.util.List;

        if r2 != null goto label01;

        $r30 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        goto label02;

     label01:
        $r30 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r2);

     label02:
        r4 = $r30;

        if $r30 != null goto label03;

        $r26 = new java.io.IOException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to list contents of ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r26;

     label03:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label04;

        $z7 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z7 != 0 goto label05;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label04:
        $z2 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label05;

        $z6 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z6 != 0 goto label05;

        $r16 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label05:
        $z8 = virtualinvoke r1.<java.io.File: boolean canWrite()>();

        if $z8 != 0 goto label06;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label06:
        i0 = lengthof r4;

        i2 = 0;

        goto label11;

     label07:
        r5 = r4[i2];

        $r8 = new java.io.File;

        $r9 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r9);

        if r3 == null goto label08;

        $r10 = virtualinvoke r5.<java.io.File: java.lang.String getCanonicalPath()>();

        $z4 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r10);

        if $z4 != 0 goto label10;

     label08:
        $z3 = virtualinvoke r5.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label09;

        staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>(r5, $r8, r2, z0, r3);

        goto label10;

     label09:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>(r5, $r8, z0);

     label10:
        i2 = i2 + 1;

     label11:
        if i2 < i0 goto label07;

        if z0 == 0 goto label12;

        $l1 = virtualinvoke r0.<java.io.File: long lastModified()>();

        virtualinvoke r1.<java.io.File: boolean setLastModified(long)>($l1);

     label12:
        return;
    }

    public static void copyURLToFile(java.net.URL, java.io.File) throws java.io.IOException
    {
        java.net.URL r0;
        java.io.File r1;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URL;

        r1 := @parameter1: java.io.File;

        $r2 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>($r2, r1);

        return;
    }

    public static void copyURLToFile(java.net.URL, java.io.File, int, int) throws java.io.IOException
    {
        java.net.URL r0;
        java.io.File r1;
        int i0, i1;
        java.net.URLConnection r2;
        java.io.InputStream $r3;

        r0 := @parameter0: java.net.URL;

        r1 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke r2.<java.net.URLConnection: void setConnectTimeout(int)>(i0);

        virtualinvoke r2.<java.net.URLConnection: void setReadTimeout(int)>(i1);

        $r3 = virtualinvoke r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>($r3, r1);

        return;
    }

    public static void copyInputStreamToFile(java.io.InputStream, java.io.File) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.File r1;
        java.lang.Throwable $r3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.File;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void copyToFile(java.io.InputStream,java.io.File)>(r0, r1);

        goto label3;

     label2:
        $r3 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r0);

        throw $r3;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r0);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static void copyToFile(java.io.InputStream, java.io.File) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.File r1;
        java.io.FileOutputStream r2;
        java.lang.Throwable $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.File;

        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r1);

     label1:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r0, r2);

        virtualinvoke r2.<java.io.FileOutputStream: void close()>();

        goto label3;

     label2:
        $r4 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r2);

        throw $r4;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static void deleteDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.io.IOException $r5;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>(r0);

        if $z1 != 0 goto label2;

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>(r0);

     label2:
        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to delete directory ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        return;
    }

    public static boolean deleteQuietly(java.io.File)
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.lang.Exception $r1, $r2;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label4;

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        $z1 = virtualinvoke r0.<java.io.File: boolean delete()>();

     label5:
        return $z1;

     label6:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static boolean directoryContains(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        java.lang.String r2, r3, $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r4, $r8;
        java.lang.StringBuilder $r5, $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Directory must not be null");

        throw $r8;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Not a directory: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label5;

     label4:
        return 0;

     label5:
        r2 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        r3 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean directoryContains(java.lang.String,java.lang.String)>(r2, r3);

        return $z3;
    }

    public static void cleanDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r2;
        java.io.File[] r1;
        int i0, i1;
        java.io.IOException $r5, r6;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File[] verifiedListFiles(java.io.File)>(r0);

        r6 = null;

        i0 = lengthof r1;

        i1 = 0;

        goto label6;

     label1:
        r2 = r1[i1];

     label2:
        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r2);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = $r5;

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label1;

        if r6 == null goto label7;

        throw r6;

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private static java.io.File[] verifiedListFiles(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r9, $r10, $r11;
        java.lang.String $r4, r13, r14;
        java.lang.IllegalArgumentException $r8, $r12;
        java.io.File[] r15;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r13);

        throw $r12;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r14);

        throw $r8;

     label2:
        r15 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r15 != null goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to list contents of ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label3:
        return r15;
    }

    public static boolean waitFor(java.io.File, int)
    {
        java.io.File r0;
        int i0;
        long l1, l2, $l3, $l4, $l5, $l6, $l8;
        byte $b7;
        java.lang.Thread $r2, $r3, $r7;
        java.lang.Exception $r4;
        java.lang.InterruptedException $r5;
        java.lang.Throwable $r6;
        boolean z0, $z1;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = (long) i0;

        $l5 = $l4 * 1000L;

        l1 = $l3 + $l5;

        z0 = 0;

     label01:
        goto label09;

     label02:
        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = l1 - $l6;

        $b7 = l2 cmp 0L;

        if $b7 >= 0 goto label05;

     label03:
        if z0 == 0 goto label04;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label04:
        return 0;

     label05:
        $l8 = staticinvoke <java.lang.Math: long min(long,long)>(100L, l2);

        staticinvoke <java.lang.Thread: void sleep(long)>($l8);

     label06:
        goto label09;

     label07:
        $r5 := @caughtexception;

        z0 = 1;

        goto label09;

     label08:
        $r4 := @caughtexception;

        goto label12;

     label09:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label02;

        goto label12;

     label10:
        $r6 := @caughtexception;

        if z0 == 0 goto label11;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label11:
        throw $r6;

     label12:
        if z0 == 0 goto label13;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label13:
        return 1;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label05 to label10 with label10;
    }

    public static java.lang.String readFileToString(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset r1, $r4;
        java.lang.String r3;
        java.lang.Throwable $r5;
        java.io.FileInputStream r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r6 = null;

     label1:
        r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        $r4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1);

        r3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>(r6, $r4);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6);

        return r3;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String readFileToString(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, $r3;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String readFileToString(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static byte[] readFileToByteArray(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        byte[] r2;
        java.lang.Throwable $r3;
        java.io.FileInputStream r4;

        r0 := @parameter0: java.io.File;

        r4 = null;

     label1:
        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        r2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r4);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        return r2;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.util.List readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset r1, $r4;
        java.util.List r3;
        java.lang.Throwable $r5;
        java.io.FileInputStream r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r6 = null;

     label1:
        r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        $r4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(r1);

        r3 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.nio.charset.Charset)>(r6, $r4);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6);

        return r3;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.util.List readLines(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        java.util.List $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.nio.charset.Charset)>(r0, $r2);

        return $r3;
    }

    public static java.util.List readLines(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset $r1;
        java.util.List $r2;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        org.apache.commons.io.LineIterator $r2;
        java.lang.RuntimeException $r3;
        java.io.IOException $r4;
        java.io.FileInputStream r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r5 = null;

     label1:
        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        $r2 = staticinvoke <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)>(r5, r1);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5);

        throw $r4;

     label4:
        $r3 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r5);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.commons.io.LineIterator $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>(r0, null);

        return $r1;
    }

    public static void writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.nio.charset.Charset r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>(r0, r1, r2, 0);

        return;
    }

    public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)>(r0, r1, r2, 0);

        return;
    }

    public static void writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.nio.charset.Charset r2;
        boolean z0;
        java.lang.Throwable $r4;
        java.io.FileOutputStream r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.nio.charset.Charset;

        z0 := @parameter3: boolean;

        r5 = null;

     label1:
        r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>(r0, z0);

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>(r1, r5, r2);

        virtualinvoke r5.<java.io.OutputStream: void close()>();

        goto label3;

     label2:
        $r4 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

        throw $r4;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r2;
        boolean z0;
        java.nio.charset.Charset $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(r2);

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>(r0, r1, $r3, z0);

        return;
    }

    public static void writeStringToFile(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>(r0, r1, $r2, 0);

        return;
    }

    public static void writeStringToFile(java.io.File, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        boolean z0;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>(r0, r1, $r2, z0);

        return;
    }

    public static void write(java.io.File, java.lang.CharSequence) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.CharSequence;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>(r0, r1, $r2, 0);

        return;
    }

    public static void write(java.io.File, java.lang.CharSequence, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.CharSequence r1;
        boolean z0;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>(r0, r1, $r2, z0);

        return;
    }

    public static void write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>(r0, r1, r2, 0);

        return;
    }

    public static void write(java.io.File, java.lang.CharSequence, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.CharSequence r1;
        java.lang.String r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)>(r0, r1, r2, 0);

        return;
    }

    public static void write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;
        boolean z0;
        java.lang.String $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.nio.charset.Charset;

        z0 := @parameter3: boolean;

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

     label2:
        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>(r0, $r4, r2, z0);

        return;
    }

    public static void write(java.io.File, java.lang.CharSequence, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        boolean z0;
        java.nio.charset.Charset $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(r2);

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>(r0, r1, $r3, z0);

        return;
    }

    public static void writeByteArrayToFile(java.io.File, byte[]) throws java.io.IOException
    {
        java.io.File r0;
        byte[] r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],boolean)>(r0, r1, 0);

        return;
    }

    public static void writeByteArrayToFile(java.io.File, byte[], boolean) throws java.io.IOException
    {
        java.io.File r0;
        byte[] r1;
        boolean z0;
        int $i0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        $i0 = lengthof r1;

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int,boolean)>(r0, r1, 0, $i0, z0);

        return;
    }

    public static void writeByteArrayToFile(java.io.File, byte[], int, int) throws java.io.IOException
    {
        java.io.File r0;
        byte[] r1;
        int i0, i1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],int,int,boolean)>(r0, r1, i0, i1, 0);

        return;
    }

    public static void writeByteArrayToFile(java.io.File, byte[], int, int, boolean) throws java.io.IOException
    {
        java.io.File r0;
        byte[] r1;
        int i0, i1;
        boolean z0;
        java.lang.Throwable $r3;
        java.io.FileOutputStream r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        r4 = null;

     label1:
        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>(r0, z0);

        virtualinvoke r4.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        goto label3;

     label2:
        $r3 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4);

        throw $r3;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.util.Collection r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r0, r1, r2, null, 0);

        return;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.util.Collection r2;
        boolean z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        z0 := @parameter3: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r0, r1, r2, null, z0);

        return;
    }

    public static void writeLines(java.io.File, java.util.Collection) throws java.io.IOException
    {
        java.io.File r0;
        java.util.Collection r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r0, null, r1, null, 0);

        return;
    }

    public static void writeLines(java.io.File, java.util.Collection, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.util.Collection r1;
        boolean z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r0, null, r1, null, z0);

        return;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r3;
        java.util.Collection r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r0, r1, r2, r3, 0);

        return;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r3;
        java.util.Collection r2;
        boolean z0;
        java.io.BufferedOutputStream $r6;
        java.lang.Throwable $r7;
        java.io.FileOutputStream r8;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r8 = null;

     label1:
        r8 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>(r0, z0);

        $r6 = new java.io.BufferedOutputStream;

        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r8);

        staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)>(r2, r3, $r6, r1);

        virtualinvoke $r6.<java.io.BufferedOutputStream: void flush()>();

        virtualinvoke r8.<java.io.FileOutputStream: void close()>();

        goto label3;

     label2:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r8);

        throw $r7;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r8);

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static void writeLines(java.io.File, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.util.Collection r1;
        java.lang.String r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r0, null, r1, r2, 0);

        return;
    }

    public static void writeLines(java.io.File, java.util.Collection, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File r0;
        java.util.Collection r1;
        java.lang.String r2;
        boolean z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r0, null, r1, r2, z0);

        return;
    }

    public static void forceDelete(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean z0, $z1, $z2;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;
        java.io.IOException $r4;
        java.io.FileNotFoundException $r5;

        r0 := @parameter0: java.io.File;

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r0);

        goto label3;

     label1:
        z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label3;

        if z0 != 0 goto label2;

        $r5 = new java.io.FileNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("File does not exist: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to delete file: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label3:
        return;
    }

    public static void forceDeleteOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)>(r0);

        goto label2;

     label1:
        virtualinvoke r0.<java.io.File: void deleteOnExit()>();

     label2:
        return;
    }

    private static void deleteDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<java.io.File: void deleteOnExit()>();

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>(r0);

        if $z1 != 0 goto label2;

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>(r0);

     label2:
        return;
    }

    private static void cleanDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r2;
        java.io.File[] r1;
        int i0, i1;
        java.io.IOException $r5, r6;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File[] verifiedListFiles(java.io.File)>(r0);

        r6 = null;

        i0 = lengthof r1;

        i1 = 0;

        goto label6;

     label1:
        r2 = r1[i1];

     label2:
        staticinvoke <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>(r2);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = $r5;

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label1;

        if r6 == null goto label7;

        throw r6;

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static void forceMkdir(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7;
        java.io.IOException $r3, $r8;
        java.lang.String r9, r10;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("File ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists and is ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a directory. Unable to create directory.");

        r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>(r9);

        throw $r8;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to create directory ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>(r10);

        throw $r3;

     label2:
        return;
    }

    public static void forceMkdirParent(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        if r1 != null goto label1;

        return;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>(r1);

        return;
    }

    public static long sizeOf(java.io.File)
    {
        java.io.File r0;
        java.lang.String r1;
        boolean $z0, $z1;
        long $l0, $l1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $l1 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory0(java.io.File)>(r0);

        return $l1;

     label2:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        return $l0;
    }

    public static java.math.BigInteger sizeOfAsBigInteger(java.io.File)
    {
        java.io.File r0;
        java.lang.String r1;
        boolean $z0, $z1;
        long $l0;
        java.math.BigInteger $r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r7;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryBig0(java.io.File)>(r0);

        return $r3;

     label2:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r2;
    }

    public static long sizeOfDirectory(java.io.File)
    {
        java.io.File r0;
        long $l0;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void checkDirectory(java.io.File)>(r0);

        $l0 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory0(java.io.File)>(r0);

        return $l0;
    }

    private static long sizeOfDirectory0(java.io.File)
    {
        java.io.File r0, r2;
        java.io.File[] r1;
        int i0, i4;
        boolean $z0;
        long $l1, l3;
        byte $b2;
        java.io.IOException $r5;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 != null goto label1;

        return 0L;

     label1:
        l3 = 0L;

        i0 = lengthof r1;

        i4 = 0;

        goto label7;

     label2:
        r2 = r1[i4];

     label3:
        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>(r2);

        if $z0 != 0 goto label6;

        $l1 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf0(java.io.File)>(r2);

        l3 = l3 + $l1;

        $b2 = l3 cmp 0L;

        if $b2 >= 0 goto label6;

     label4:
        goto label8;

     label5:
        $r5 := @caughtexception;

     label6:
        i4 = i4 + 1;

     label7:
        if i4 < i0 goto label2;

     label8:
        return l3;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private static long sizeOf0(java.io.File)
    {
        java.io.File r0;
        boolean $z0;
        long $l0, $l1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $l1 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory0(java.io.File)>(r0);

        return $l1;

     label1:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        return $l0;
    }

    public static java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)
    {
        java.io.File r0;
        java.math.BigInteger $r1;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void checkDirectory(java.io.File)>(r0);

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryBig0(java.io.File)>(r0);

        return $r1;
    }

    private static java.math.BigInteger sizeOfDirectoryBig0(java.io.File)
    {
        java.io.File r0, r2;
        java.io.File[] r1;
        int i0, i1;
        boolean $z0;
        java.math.BigInteger $r5, $r6, r8;
        java.io.IOException $r7;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 != null goto label1;

        $r6 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r6;

     label1:
        r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i0 = lengthof r1;

        i1 = 0;

        goto label7;

     label2:
        r2 = r1[i1];

     label3:
        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>(r2);

        if $z0 != 0 goto label6;

        $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfBig0(java.io.File)>(r2);

        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < i0 goto label2;

        return r8;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private static java.math.BigInteger sizeOfBig0(java.io.File)
    {
        java.io.File r0;
        boolean $z0;
        long $l0;
        java.math.BigInteger $r1, $r2;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryBig0(java.io.File)>(r0);

        return $r2;

     label1:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r1;
    }

    private static void checkDirectory(java.io.File)
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;
        java.lang.String $r5, $r10;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    public static boolean isFileNewer(java.io.File, java.io.File)
    {
        java.io.File r0, r1;
        boolean $z0, $z1;
        long $l0;
        java.lang.IllegalArgumentException $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r7;

     label1:
        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The reference file \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $l0 = virtualinvoke r1.<java.io.File: long lastModified()>();

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r0, $l0);

        return $z1;
    }

    public static boolean isFileNewer(java.io.File, java.util.Date)
    {
        java.io.File r0;
        java.util.Date r1;
        long $l0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Date;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r0, $l0);

        return $z0;
    }

    public static boolean isFileNewer(java.io.File, long)
    {
        java.io.File r0;
        long l0, $l1;
        boolean $z0;
        byte $b2;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp l0;

        if $b2 <= 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isFileOlder(java.io.File, java.io.File)
    {
        java.io.File r0, r1;
        boolean $z0, $z1;
        long $l0;
        java.lang.IllegalArgumentException $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r7;

     label1:
        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The reference file \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $l0 = virtualinvoke r1.<java.io.File: long lastModified()>();

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r0, $l0);

        return $z1;
    }

    public static boolean isFileOlder(java.io.File, java.util.Date)
    {
        java.io.File r0;
        java.util.Date r1;
        long $l0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Date;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r0, $l0);

        return $z0;
    }

    public static boolean isFileOlder(java.io.File, long)
    {
        java.io.File r0;
        long l0, $l1;
        boolean $z0;
        byte $b2;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp l0;

        if $b2 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static long checksumCRC32(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.util.zip.CRC32 $r2;
        long $l0;

        r0 := @parameter0: java.io.File;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>(r0, $r2);

        $l0 = virtualinvoke $r2.<java.util.zip.CRC32: long getValue()>();

        return $l0;
    }

    public static java.util.zip.Checksum checksum(java.io.File, java.util.zip.Checksum) throws java.io.IOException
    {
        java.io.File r0;
        java.util.zip.Checksum r1;
        boolean $z0;
        java.util.zip.CheckedInputStream $r3, r8;
        java.io.FileInputStream $r4;
        org.apache.commons.io.output.NullOutputStream $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.zip.Checksum;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Checksums can\'t be computed on directories");

        throw $r6;

     label1:
        r8 = null;

     label2:
        $r3 = new java.util.zip.CheckedInputStream;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r3.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>($r4, r1);

        r8 = $r3;

        $r5 = new org.apache.commons.io.output.NullOutputStream;

        specialinvoke $r5.<org.apache.commons.io.output.NullOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r3, $r5);

        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r8);

        throw $r7;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return r1;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public static void moveDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r2, $r4, $r5, $r6, $r8, $r15, $r21, $r26, $r31, $r36;
        java.lang.StringBuilder $r3, $r7, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r28, $r29, $r30, $r33, $r34, $r35;
        java.io.IOException $r9, $r16, $r27;
        org.apache.commons.io.FileExistsException $r22;
        java.io.FileNotFoundException $r32;
        java.lang.NullPointerException $r37, $r38;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r38 = new java.lang.NullPointerException;

        specialinvoke $r38.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r38;

     label1:
        if r1 != null goto label2;

        $r37 = new java.lang.NullPointerException;

        specialinvoke $r37.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r37;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r32 = new java.io.FileNotFoundException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r36);

        throw $r32;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label4;

        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label4:
        $z3 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label5;

        $r22 = new org.apache.commons.io.FileExistsException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.commons.io.FileExistsException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label5:
        z0 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if z0 != 0 goto label7;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r3 = new java.lang.StringBuilder;

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = <java.io.File: java.lang.String separator>;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r8);

        if $z4 == 0 goto label6;

        $r16 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot move directory: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to a subdirectory of itself: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label6:
        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>(r0, r1);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r0);

        $z5 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label7;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to delete original directory \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label7:
        return;
    }

    public static void moveDirectoryToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r2;
        boolean z0, $z1, $z2, $z4;
        java.lang.String $r3, $r8, $r15;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14;
        java.io.FileNotFoundException $r9;
        java.lang.NullPointerException $r16, $r17;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r17;

     label1:
        if r1 != null goto label2;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r16;

     label2:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if z0 == 0 goto label3;

        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z4 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z4 != 0 goto label4;

        $r9 = new java.io.FileNotFoundException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination directory \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label4:
        $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label5;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>(r0, $r2);

        return;
    }

    public static void moveFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r2, $r9, $r19;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r15, $r16, $r17, $r20, $r21, $r22, $r25, $r26, $r27;
        java.lang.String $r8, $r13, $r18, $r23, $r28;
        org.apache.commons.io.FileExistsException $r14;
        java.io.FileNotFoundException $r24;
        java.lang.NullPointerException $r29, $r30;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r30 = new java.lang.NullPointerException;

        specialinvoke $r30.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r30;

     label1:
        if r1 != null goto label2;

        $r29 = new java.lang.NullPointerException;

        specialinvoke $r29.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r29;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r24 = new java.io.FileNotFoundException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label4:
        $z3 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label5;

        $r14 = new org.apache.commons.io.FileExistsException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.commons.io.FileExistsException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label5:
        $z4 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label6;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label6:
        z0 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if z0 != 0 goto label7;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r0, r1);

        $z5 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z5 != 0 goto label7;

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r1);

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to delete original file \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label7:
        return;
    }

    public static void moveFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r2;
        boolean z0, $z1, $z2, $z4;
        java.lang.String $r3, $r8, $r15;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14;
        java.io.FileNotFoundException $r9;
        java.lang.NullPointerException $r16, $r17;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r17;

     label1:
        if r1 != null goto label2;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r16;

     label2:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if z0 == 0 goto label3;

        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z4 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z4 != 0 goto label4;

        $r9 = new java.io.FileNotFoundException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination directory \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label4:
        $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label5;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r0, $r2);

        return;
    }

    public static void moveToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z2;
        java.io.FileNotFoundException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.NullPointerException $r7, $r8;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r8;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r7;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r2 = new java.io.FileNotFoundException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, z0);

        goto label5;

     label4:
        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, z0);

     label5:
        return;
    }

    public static boolean isSymlink(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, $r3, $r4, $r6, $r7, r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r2, $r5;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.io.File;

        $z0 = staticinvoke <org.apache.commons.io.Java7Support: boolean isAtLeastJava7()>();

        if $z0 == 0 goto label1;

        $z4 = staticinvoke <org.apache.commons.io.Java7Support: boolean isSymLink(java.io.File)>(r0);

        return $z4;

     label1:
        if r0 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("File must not be null");

        throw $r8;

     label2:
        $z1 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getParent()>();

        if $r2 != null goto label4;

        r9 = r0;

        goto label5;

     label4:
        $r3 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        r1 = virtualinvoke $r3.<java.io.File: java.io.File getCanonicalFile()>();

        $r4 = new java.io.File;

        $r5 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r5);

        r9 = $r4;

     label5:
        $r6 = virtualinvoke r9.<java.io.File: java.io.File getCanonicalFile()>();

        $r7 = virtualinvoke r9.<java.io.File: java.io.File getAbsoluteFile()>();

        $z2 = virtualinvoke $r6.<java.io.File: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label6;

        $z3 = staticinvoke <org.apache.commons.io.FileUtils: boolean isBrokenSymlink(java.io.File)>(r0);

        return $z3;

     label6:
        return 1;
    }

    private static boolean isBrokenSymlink(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, r2;
        java.io.File[] r3;
        boolean $z0, $z1;
        org.apache.commons.io.FileUtils$1 $r4;
        int $i0;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>();

        r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

     label2:
        return 0;

     label3:
        $r4 = new org.apache.commons.io.FileUtils$1;

        specialinvoke $r4.<org.apache.commons.io.FileUtils$1: void <init>(java.io.File)>(r1);

        r3 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r4);

        if r3 == null goto label4;

        $i0 = lengthof r3;

        if $i0 <= 0 goto label4;

        return 1;

     label4:
        return 0;
    }
}
