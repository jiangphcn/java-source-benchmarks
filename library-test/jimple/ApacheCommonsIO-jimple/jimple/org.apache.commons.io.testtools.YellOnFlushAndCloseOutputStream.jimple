public class org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream extends org.apache.commons.io.output.ProxyOutputStream
{
    private boolean yellForFlush;
    private boolean yellForClose;

    public void <init>(java.io.OutputStream, boolean, boolean)
    {
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream r0;
        java.io.OutputStream r1;
        boolean z0, z1;

        r0 := @this: org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: boolean yellForFlush> = z0;

        r0.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: boolean yellForClose> = z1;

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream r0;
        boolean $z0;
        junit.framework.AssertionFailedError $r1;

        r0 := @this: org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        $z0 = r0.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: boolean yellForFlush>;

        if $z0 == 0 goto label1;

        $r1 = new junit.framework.AssertionFailedError;

        specialinvoke $r1.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>("flush() was called on OutputStream");

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream r0;
        boolean $z0;
        junit.framework.AssertionFailedError $r1;

        r0 := @this: org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        $z0 = r0.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: boolean yellForClose>;

        if $z0 == 0 goto label1;

        $r1 = new junit.framework.AssertionFailedError;

        specialinvoke $r1.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>("close() was called on OutputStream");

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void close()>();

        return;
    }

    public void off()
    {
        org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream r0;

        r0 := @this: org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;

        r0.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: boolean yellForFlush> = 0;

        r0.<org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream: boolean yellForClose> = 0;

        return;
    }
}
