public class org.apache.commons.io.FileDeleteStrategyTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{

    public void <init>()
    {
        org.apache.commons.io.FileDeleteStrategyTestCase r0;

        r0 := @this: org.apache.commons.io.FileDeleteStrategyTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        return;
    }

    public void testDeleteNormal() throws java.lang.Exception
    {
        org.apache.commons.io.FileDeleteStrategyTestCase r0;
        java.io.File r1, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.io.BufferedOutputStream $r8;
        java.io.FileOutputStream $r9;
        org.apache.commons.io.FileDeleteStrategy $r10, $r11, $r12, $r13;
        java.io.IOException $r14, $r19;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.String $r18;
        java.lang.Throwable $r20;

        r0 := @this: org.apache.commons.io.FileDeleteStrategyTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileDeleteStrategyTestCase: java.io.File getTestDirectory()>();

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "test");

        $z0 = virtualinvoke $r5.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "a.txt");

        $r7 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r14 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label1:
        $r8 = new java.io.BufferedOutputStream;

        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke $r8.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r9);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r8, 16L);

        goto label4;

     label3:
        $r20 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r8);

        throw $r20;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r8);

        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label5:
        $r10 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        virtualinvoke $r10.<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>($r5);

        staticinvoke <org.junit.Assert: void fail()>();

     label6:
        goto label8;

     label7:
        $r19 := @caughtexception;

     label8:
        $z4 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r11 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        virtualinvoke $r11.<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>($r6);

        $z6 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        $r12 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        virtualinvoke $r12.<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>($r5);

        $z8 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z8);

        $r13 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        virtualinvoke $r13.<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>($r5);

        $z9 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z9);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void testDeleteQuietlyNormal() throws java.lang.Exception
    {
        org.apache.commons.io.FileDeleteStrategyTestCase r0;
        java.io.File r1, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.io.BufferedOutputStream $r9;
        java.io.FileOutputStream $r10;
        org.apache.commons.io.FileDeleteStrategy $r11, $r12, $r13, $r14;
        java.io.IOException $r15;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.String $r19;
        java.lang.Throwable $r20;

        r0 := @this: org.apache.commons.io.FileDeleteStrategyTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileDeleteStrategyTestCase: java.io.File getTestDirectory()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "test");

        $z0 = virtualinvoke $r6.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "a.txt");

        $r8 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        $r9 = new java.io.BufferedOutputStream;

        $r10 = new java.io.FileOutputStream;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r7);

        specialinvoke $r9.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r10);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r9, 16L);

        goto label4;

     label3:
        $r20 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r9);

        throw $r20;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r9);

        $z2 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r11 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        $z4 = virtualinvoke $r11.<org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $z5 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $z6 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r12 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        $z7 = virtualinvoke $r12.<org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z9);

        $r13 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        $z10 = virtualinvoke $r13.<org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $z11 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z11);

        $r14 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        $z12 = virtualinvoke $r14.<org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $z13 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z13);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testDeleteForce() throws java.lang.Exception
    {
        org.apache.commons.io.FileDeleteStrategyTestCase r0;
        java.io.File r1, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.BufferedOutputStream $r9;
        java.io.FileOutputStream $r10;
        org.apache.commons.io.FileDeleteStrategy $r11, $r12;
        java.io.IOException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17;
        java.lang.Throwable $r18;

        r0 := @this: org.apache.commons.io.FileDeleteStrategyTestCase;

        r1 = staticinvoke <org.apache.commons.io.FileDeleteStrategyTestCase: java.io.File getTestDirectory()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "test");

        $z0 = virtualinvoke $r6.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "a.txt");

        $r8 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        $r9 = new java.io.BufferedOutputStream;

        $r10 = new java.io.FileOutputStream;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r7);

        specialinvoke $r9.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r10);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r9, 16L);

        goto label4;

     label3:
        $r18 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r9);

        throw $r18;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r9);

        $z2 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r11 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy FORCE>;

        virtualinvoke $r11.<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>($r6);

        $z4 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $z5 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $r12 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy FORCE>;

        virtualinvoke $r12.<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>($r6);

        $z6 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public void testDeleteNull() throws java.lang.Exception
    {
        org.apache.commons.io.FileDeleteStrategyTestCase r0;
        org.apache.commons.io.FileDeleteStrategy $r2, $r3;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.io.FileDeleteStrategyTestCase;

     label1:
        $r2 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        virtualinvoke $r2.<org.apache.commons.io.FileDeleteStrategy: void delete(java.io.File)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        $z0 = virtualinvoke $r3.<org.apache.commons.io.FileDeleteStrategy: boolean deleteQuietly(java.io.File)>(null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToString()
    {
        org.apache.commons.io.FileDeleteStrategyTestCase r0;
        org.apache.commons.io.FileDeleteStrategy $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: org.apache.commons.io.FileDeleteStrategyTestCase;

        $r1 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy NORMAL>;

        $r2 = virtualinvoke $r1.<org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FileDeleteStrategy[Normal]", $r2);

        $r3 = <org.apache.commons.io.FileDeleteStrategy: org.apache.commons.io.FileDeleteStrategy FORCE>;

        $r4 = virtualinvoke $r3.<org.apache.commons.io.FileDeleteStrategy: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FileDeleteStrategy[Force]", $r4);

        return;
    }
}
