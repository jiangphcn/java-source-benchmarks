public class org.apache.commons.io.FileUtilsCleanSymlinksTestCase extends org.apache.commons.io.testtools.FileBasedTestCase
{
    final java.io.File top;

    public void <init>()
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        specialinvoke r0.<org.apache.commons.io.testtools.FileBasedTestCase: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File getTestDirectory()>();

        r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top> = $r1;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r1 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r1 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r1);

        return;
    }

    public void testCleanDirWithSymlinkFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.File $r7, $r8, $r9, $r10, $r12, $r13, $r14;
        java.lang.String[] $r11, $r15, $r16;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r7 = new java.io.File;

        $r8 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "realouter");

        $z1 = virtualinvoke $r7.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "realinner");

        $z2 = virtualinvoke $r9.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "file1");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r10);

        $r11 = virtualinvoke $r9.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r11;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r12 = new java.io.File;

        $r13 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "randomfile");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r12);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "fakeinner");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r12, $r14);

        $r15 = virtualinvoke $r9.<java.io.File: java.lang.String[] list()>();

        $i2 = lengthof $r15;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>($r7);

        $r16 = virtualinvoke $r7.<java.io.File: java.lang.String[] list()>();

        $i4 = lengthof $r16;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $z3 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $z4 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        return;
    }

    public void testCleanDirWithASymlinkDir() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;
        java.io.File $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r15;
        java.lang.String[] $r10, $r14, $r16, $r17, $r18;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = new java.io.File;

        $r7 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "realouter");

        $z1 = virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "realinner");

        $z2 = virtualinvoke $r8.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "file1");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r9);

        $r10 = virtualinvoke $r8.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r10;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r11 = new java.io.File;

        $r12 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "randomDir");

        $z3 = virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "randomfile");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r13);

        $r14 = virtualinvoke $r11.<java.io.File: java.lang.String[] list()>();

        $i2 = lengthof $r14;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "fakeinner");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r11, $r15);

        $r16 = virtualinvoke $r15.<java.io.File: java.lang.String[] list()>();

        $i4 = lengthof $r16;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>($r6);

        $r17 = virtualinvoke $r6.<java.io.File: java.lang.String[] list()>();

        $i6 = lengthof $r17;

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r18 = virtualinvoke $r11.<java.io.File: java.lang.String[] list()>();

        $i8 = lengthof $r18;

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Contents of sym link should not have been removed", 1L, $l9);

        return;
    }

    public void testCleanDirWithParentSymlinks() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3;
        java.io.File $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r18, $r19;
        java.lang.String[] $r11, $r15, $r17, $r20, $r21, $r22;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r7 = new java.io.File;

        $r8 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "realparent");

        $z1 = virtualinvoke $r7.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "realinner");

        $z2 = virtualinvoke $r9.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "file1");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r10);

        $r11 = virtualinvoke $r9.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r11;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r12 = new java.io.File;

        $r13 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "randomDir");

        $z3 = virtualinvoke $r12.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "randomfile");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r14);

        $r15 = virtualinvoke $r12.<java.io.File: java.lang.String[] list()>();

        $i2 = lengthof $r15;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "fakeinner");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r12, $r16);

        $r17 = virtualinvoke $r16.<java.io.File: java.lang.String[] list()>();

        $i4 = lengthof $r17;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $r18 = new java.io.File;

        $r19 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r19, "fakeouter");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r7, $r18);

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>($r18);

        $r20 = virtualinvoke $r18.<java.io.File: java.lang.String[] list()>();

        $i6 = lengthof $r20;

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r21 = virtualinvoke $r7.<java.io.File: java.lang.String[] list()>();

        $i8 = lengthof $r21;

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $r22 = virtualinvoke $r12.<java.io.File: java.lang.String[] list()>();

        $i10 = lengthof $r22;

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Contents of sym link should not have been removed", 1L, $l11);

        return;
    }

    public void testStillClearsIfGivenDirectoryIsASymlink() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r3;
        boolean $z0, $z1;
        java.io.File $r4, $r5, $r6, $r8, $r9;
        java.lang.String[] $r7, $r10, $r11;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new java.io.File;

        $r5 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "randomDir");

        $z1 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "randomfile");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r6);

        $r7 = virtualinvoke $r4.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r7;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r8 = new java.io.File;

        $r9 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "fakeDir");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r4, $r8);

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>($r8);

        $r10 = virtualinvoke $r8.<java.io.File: java.lang.String[] list()>();

        $i2 = lengthof $r10;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $r11 = virtualinvoke $r4.<java.io.File: java.lang.String[] list()>();

        $i4 = lengthof $r11;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        return;
    }

    public void testIdentifiesSymlinkDir() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;
        java.io.File $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new java.io.File;

        $r5 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "randomDir");

        $z1 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r6 = new java.io.File;

        $r7 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "fakeDir");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r4, $r6);

        $z2 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        return;
    }

    public void testIdentifiesSymlinkFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        java.io.File $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new java.io.File;

        $r5 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "randomfile");

        staticinvoke <org.apache.commons.io.FileUtils: void touch(java.io.File)>($r4);

        $r6 = new java.io.File;

        $r7 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "fakeinner");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r4, $r6);

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testIdentifiesBrokenSymlinkFile() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.File $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = new java.io.File;

        $r7 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "noexist");

        $r8 = new java.io.File;

        $r9 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "fakeinner");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "fakeinner");

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String,java.lang.String)>("noexist", "file");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r6, $r8);

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $z3 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r11);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $z4 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        return;
    }

    public void testCorrectlyIdentifySymlinkWithParentSymLink() throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.File $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("Win");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = new java.io.File;

        $r7 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "realparent");

        $z1 = virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = new java.io.File;

        $r9 = r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: java.io.File top>;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "fakeparent");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r6, $r8);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "realChild");

        $z2 = virtualinvoke $r10.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "fakeChild");

        specialinvoke r0.<org.apache.commons.io.FileUtilsCleanSymlinksTestCase: void setupSymlink(java.io.File,java.io.File)>($r10, $r11);

        $z3 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $z4 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        return;
    }

    private void setupSymlink(java.io.File, java.io.File) throws java.lang.Exception
    {
        org.apache.commons.io.FileUtilsCleanSymlinksTestCase r0;
        java.io.File r1, r2;
        java.lang.Process r4;
        java.util.ArrayList $r5;
        java.lang.String $r6, $r7;
        java.lang.Runtime $r8;
        int $i0;
        java.lang.String[] $r9, $r11;
        java.lang.Object[] $r10;

        r0 := @this: org.apache.commons.io.FileUtilsCleanSymlinksTestCase;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("ln");

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("-s");

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r9 = newarray (java.lang.String)[$i0];

        $r10 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        r4 = virtualinvoke $r8.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>($r11);

        virtualinvoke r4.<java.lang.Process: int waitFor()>();

        return;
    }
}
