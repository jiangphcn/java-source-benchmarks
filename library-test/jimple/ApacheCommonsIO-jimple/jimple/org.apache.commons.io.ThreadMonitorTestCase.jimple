public class org.apache.commons.io.ThreadMonitorTestCase extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.io.ThreadMonitorTestCase r0;

        r0 := @this: org.apache.commons.io.ThreadMonitorTestCase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testTimeout()
    {
        org.apache.commons.io.ThreadMonitorTestCase r0;
        java.lang.InterruptedException $r1;
        java.lang.Thread r2;

        r0 := @this: org.apache.commons.io.ThreadMonitorTestCase;

     label1:
        r2 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(long)>(100L);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(200L);

        staticinvoke <org.apache.commons.io.ThreadMonitor: void stop(java.lang.Thread)>(r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected InterruptedException");

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void testCompletedWithoutTimeout()
    {
        org.apache.commons.io.ThreadMonitorTestCase r0;
        java.lang.InterruptedException $r1;
        java.lang.Thread r2;

        r0 := @this: org.apache.commons.io.ThreadMonitorTestCase;

     label1:
        r2 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(long)>(200L);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(100L);

        staticinvoke <org.apache.commons.io.ThreadMonitor: void stop(java.lang.Thread)>(r2);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Timed Out");

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void testNoTimeout()
    {
        org.apache.commons.io.ThreadMonitorTestCase r0;
        java.lang.Exception $r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;
        java.lang.String $r4, $r8;
        java.lang.Thread r9, r11;

        r0 := @this: org.apache.commons.io.ThreadMonitorTestCase;

     label1:
        r9 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(long)>(-1L);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Timeout -1, Monitor should be null", r9);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(100L);

        staticinvoke <org.apache.commons.io.ThreadMonitor: void stop(java.lang.Thread)>(r9);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Timeout -1, threw ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r4);

     label4:
        r11 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(long)>(0L);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Timeout 0, Monitor should be null", r11);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(100L);

        staticinvoke <org.apache.commons.io.ThreadMonitor: void stop(java.lang.Thread)>(r11);

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Timeout 0, threw ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r8);

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }
}
