public abstract class org.apache.commons.io.testtools.TestUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.io.testtools.TestUtils r0;

        r0 := @this: org.apache.commons.io.testtools.TestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void createFile(java.io.File, long) throws java.io.IOException
    {
        java.io.File r0, $r3;
        long l0;
        boolean $z0;
        java.io.BufferedOutputStream $r4;
        java.io.FileOutputStream $r5;
        java.io.IOException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.Throwable $r11;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        $r3 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r4 = new java.io.BufferedOutputStream;

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r5);

     label2:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r4, l0);

        goto label4;

     label3:
        $r11 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4);

        throw $r11;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4);

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public static byte[] generateTestData(long)
    {
        long l0;
        org.apache.commons.io.output.ByteArrayOutputStream $r0;
        byte[] $r1;
        java.io.IOException $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r5, $r7;

        l0 := @parameter0: long;

     label1:
        $r0 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void generateTestData(java.io.OutputStream,long)>($r0, l0);

        $r1 = virtualinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("This should never happen: ");

        $r5 = virtualinvoke $r2.<java.io.IOException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void generateTestData(java.io.OutputStream, long) throws java.io.IOException
    {
        java.io.OutputStream r0;
        long l0, $l1;
        byte $b2, $b5;
        int $i3, $i4, i6;

        r0 := @parameter0: java.io.OutputStream;

        l0 := @parameter1: long;

        i6 = 0;

        goto label2;

     label1:
        $i3 = i6 % 127;

        $i4 = $i3 + 1;

        $b5 = (byte) $i4;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b5);

        i6 = i6 + 1;

     label2:
        $l1 = (long) i6;

        $b2 = $l1 cmp l0;

        if $b2 < 0 goto label1;

        return;
    }

    public static void createLineBasedFile(java.io.File, java.lang.String[]) throws java.io.IOException
    {
        java.io.File r0, $r6, $r10;
        java.lang.String[] r1;
        java.lang.String r3, $r16;
        int i0, i1;
        java.io.PrintWriter $r7;
        java.io.OutputStreamWriter $r8;
        java.io.FileOutputStream $r9;
        boolean $z0;
        java.io.IOException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.Throwable $r17;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        $r6 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        if $r6 == null goto label1;

        $r10 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot create file ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the parent directory does not exist");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $r7 = new java.io.PrintWriter;

        $r8 = new java.io.OutputStreamWriter;

        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r9, "UTF-8");

        specialinvoke $r7.<java.io.PrintWriter: void <init>(java.io.Writer)>($r8);

     label2:
        i0 = lengthof r1;

        i1 = 0;

        goto label4;

     label3:
        r3 = r1[i1];

        virtualinvoke $r7.<java.io.PrintWriter: void println(java.lang.String)>(r3);

        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label3;

        goto label6;

     label5:
        $r17 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r7);

        throw $r17;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>($r7);

        return;

        catch java.lang.Throwable from label2 to label5 with label5;
    }

    public static java.io.File newFile(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0, $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r3);

     label1:
        return $r3;
    }

    public static void checkFile(java.io.File, java.io.File) throws java.lang.Exception
    {
        java.io.File r0, r1;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Check existence of output file", $z0);

        staticinvoke <org.apache.commons.io.testtools.TestUtils: void assertEqualContent(java.io.File,java.io.File)>(r1, r0);

        return;
    }

    private static void assertEqualContent(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        byte[] r4, r5;
        int i0, i1;
        java.io.FileInputStream $r8, $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r19, $r25;
        boolean $z0, $z1;
        java.lang.Throwable $r26, $r27;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

     label01:
        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label02:
        r4 = newarray (byte)[1024];

        r5 = newarray (byte)[1024];

        i1 = 0;

        goto label06;

     label03:
        i1 = virtualinvoke $r8.<java.io.InputStream: int read(byte[])>(r4);

        i0 = virtualinvoke $r9.<java.io.InputStream: int read(byte[])>(r5);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("The files ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have differing number of bytes available (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        if i1 != i0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r19, $z1);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("The files ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have different content");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r4, r5);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r25, $z0);

     label06:
        if -1 != i1 goto label03;

        goto label08;

     label07:
        $r27 := @caughtexception;

        virtualinvoke $r9.<java.io.InputStream: void close()>();

        throw $r27;

     label08:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

        goto label10;

     label09:
        $r26 := @caughtexception;

        virtualinvoke $r8.<java.io.InputStream: void close()>();

        throw $r26;

     label10:
        virtualinvoke $r8.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label02 to label07 with label07;
        catch java.lang.Throwable from label01 to label09 with label09;
    }

    public static void assertEqualContent(byte[], java.io.File) throws java.io.IOException
    {
        byte[] r0, r3;
        java.io.File r1;
        java.io.FileInputStream $r5;
        int $i0, $i1, $i2, $i9, i10, i11, i12;
        long $l3, $l4, $l7, $l8;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        byte $b5, $b6;
        java.lang.Throwable $r10;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.File;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        i10 = 0;

        i11 = 0;

        $i0 = lengthof r0;

        r3 = newarray (byte)[$i0];

     label1:
        goto label3;

     label2:
        $i9 = lengthof r0;

        i11 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r3, i10, $i9);

        i10 = i10 + i11;

     label3:
        $i1 = lengthof r0;

        if i10 >= $i1 goto label4;

        if i11 >= 0 goto label2;

     label4:
        $i2 = lengthof r0;

        $l4 = (long) $i2;

        $l3 = (long) i10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Different number of bytes: ", $l4, $l3);

        i12 = 0;

        goto label6;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("byte ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differs");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $b5 = r0[i12];

        $l8 = (long) $b5;

        $b6 = r3[i12];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r9, $l8, $l7);

        i12 = i12 + 1;

     label6:
        if i12 < i10 goto label5;

        goto label8;

     label7:
        $r10 := @caughtexception;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        throw $r10;

     label8:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label7 with label7;
    }

    public static void assertEqualContent(char[], java.io.File) throws java.io.IOException
    {
        char[] r0, r3;
        java.io.File r1;
        java.io.FileReader $r5;
        int $i0, $i1, $i2, $i9, i10, i11, i12;
        long $l3, $l4, $l7, $l8;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        char $c5, $c6;
        java.lang.Throwable $r10;

        r0 := @parameter0: char[];

        r1 := @parameter1: java.io.File;

        $r5 = new java.io.FileReader;

        specialinvoke $r5.<java.io.FileReader: void <init>(java.io.File)>(r1);

        i10 = 0;

        i11 = 0;

        $i0 = lengthof r0;

        r3 = newarray (char)[$i0];

     label1:
        goto label3;

     label2:
        $i9 = lengthof r0;

        i11 = virtualinvoke $r5.<java.io.Reader: int read(char[],int,int)>(r3, i10, $i9);

        i10 = i10 + i11;

     label3:
        $i1 = lengthof r0;

        if i10 >= $i1 goto label4;

        if i11 >= 0 goto label2;

     label4:
        $i2 = lengthof r0;

        $l4 = (long) $i2;

        $l3 = (long) i10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Different number of chars: ", $l4, $l3);

        i12 = 0;

        goto label6;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("char ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differs");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $c5 = r0[i12];

        $l8 = (long) $c5;

        $c6 = r3[i12];

        $l7 = (long) $c6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r9, $l8, $l7);

        i12 = i12 + 1;

     label6:
        if i12 < i10 goto label5;

        goto label8;

     label7:
        $r10 := @caughtexception;

        virtualinvoke $r5.<java.io.Reader: void close()>();

        throw $r10;

     label8:
        virtualinvoke $r5.<java.io.Reader: void close()>();

        return;

        catch java.lang.Throwable from label1 to label7 with label7;
    }

    public static void checkWrite(java.io.OutputStream) throws java.lang.Exception
    {
        java.io.OutputStream r0;
        java.io.PrintStream $r2;
        java.lang.Throwable $r3;
        junit.framework.AssertionFailedError $r4;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @parameter0: java.io.OutputStream;

     label1:
        $r2 = new java.io.PrintStream;

        specialinvoke $r2.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r0);

        virtualinvoke $r2.<java.io.PrintStream: void write(int)>(0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new junit.framework.AssertionFailedError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("The copy() method closed the stream when it shouldn\'t have. ");

        $r6 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void checkWrite(java.io.Writer) throws java.lang.Exception
    {
        java.io.Writer r0;
        java.io.PrintWriter $r2;
        java.lang.Throwable $r3;
        junit.framework.AssertionFailedError $r4;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @parameter0: java.io.Writer;

     label1:
        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>(r0);

        virtualinvoke $r2.<java.io.PrintWriter: void write(int)>(97);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new junit.framework.AssertionFailedError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("The copy() method closed the stream when it shouldn\'t have. ");

        $r6 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void deleteFile(java.io.File) throws java.lang.Exception
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t delete file: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r0.<java.io.File: boolean delete()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r3, $z1);

     label1:
        return;
    }

    public static void sleep(long) throws java.lang.InterruptedException
    {
        long l0, l1, $l2, $l3, l5;
        byte $b4;

        l0 := @parameter0: long;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = $l2 + l0;

        l5 = l0;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(l5);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5 = l1 - $l3;

        $b4 = l5 cmp 0L;

        if $b4 > 0 goto label1;

        return;
    }

    public static void sleepQuietly(long)
    {
        long l0;
        java.lang.InterruptedException $r1;

        l0 := @parameter0: long;

     label1:
        staticinvoke <org.apache.commons.io.testtools.TestUtils: void sleep(long)>(l0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
