public class org.apache.commons.io.output.ByteArrayOutputStreamTestCase extends java.lang.Object
{
    private static final byte[] DATA;

    static void <clinit>()
    {
        byte[] $r0, $r1;
        int $i0;
        byte b1;

        $r0 = newarray (byte)[64];

        <org.apache.commons.io.output.ByteArrayOutputStreamTestCase: byte[] DATA> = $r0;

        b1 = 0;

        goto label2;

     label1:
        $r1 = <org.apache.commons.io.output.ByteArrayOutputStreamTestCase: byte[] DATA>;

        $r1[b1] = b1;

        $i0 = b1 + 1;

        b1 = (byte) $i0;

     label2:
        if b1 < 64 goto label1;

        return;
    }

    public void <init>()
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private int writeData(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream, int)
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream r1;
        java.io.ByteArrayOutputStream r2;
        int i0, $i1;
        byte[] $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        r1 := @parameter0: org.apache.commons.io.output.ByteArrayOutputStream;

        r2 := @parameter1: java.io.ByteArrayOutputStream;

        i0 := @parameter2: int;

        $r3 = <org.apache.commons.io.output.ByteArrayOutputStreamTestCase: byte[] DATA>;

        $i1 = lengthof $r3;

        if i0 <= $i1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requesting too many bytes");

        throw $r6;

     label1:
        if i0 != 0 goto label2;

        virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: void write(int)>(100);

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(int)>(100);

        return 1;

     label2:
        $r4 = <org.apache.commons.io.output.ByteArrayOutputStreamTestCase: byte[] DATA>;

        virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)>($r4, 0, i0);

        $r5 = <org.apache.commons.io.output.ByteArrayOutputStreamTestCase: byte[] DATA>;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r5, 0, i0);

        return i0;
    }

    private int writeData(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream, int[])
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream r1;
        java.io.ByteArrayOutputStream r2;
        int[] r3;
        int i0, i1, $i2, i3, i4;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        r1 := @parameter0: org.apache.commons.io.output.ByteArrayOutputStream;

        r2 := @parameter1: java.io.ByteArrayOutputStream;

        r3 := @parameter2: int[];

        i3 = 0;

        i1 = lengthof r3;

        i4 = 0;

        goto label2;

     label1:
        i0 = r3[i4];

        $i2 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)>(r1, r2, i0);

        i3 = i3 + $i2;

        i4 = i4 + 1;

     label2:
        if i4 < i1 goto label1;

        return i3;
    }

    private static boolean byteCmp(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0, i3;
        byte $b1, $b2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i3 = 0;

        goto label3;

     label1:
        $b2 = r0[i3];

        $b1 = r1[i3];

        if $b2 == $b1 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

     label3:
        $i0 = lengthof r1;

        if i3 < $i0 goto label1;

        return 1;
    }

    private void checkByteArrays(byte[], byte[])
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;
        byte[] r1, r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Resulting byte arrays are not equally long");

     label1:
        $z0 = staticinvoke <org.apache.commons.io.output.ByteArrayOutputStreamTestCase: boolean byteCmp(byte[],byte[])>(r1, r2);

        if $z0 != 0 goto label2;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Resulting byte arrays are not equal");

     label2:
        return;
    }

    private void checkStreams(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream)
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream r1;
        java.io.ByteArrayOutputStream r2;
        byte[] r3, r4;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        r1 := @parameter0: org.apache.commons.io.output.ByteArrayOutputStream;

        r2 := @parameter1: java.io.ByteArrayOutputStream;

        $i0 = virtualinvoke r2.<java.io.ByteArrayOutputStream: int size()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Sizes are not equal", $l1, $l3);

        r3 = virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        r4 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkByteArrays(byte[],byte[])>(r3, r4);

        return;
    }

    public void testToInputStream() throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r3;
        java.io.ByteArrayOutputStream $r4;
        int[] $r5;
        int $i3, $i5, i7;
        long $l4, $l6;
        java.io.InputStream $r6, r7;
        byte[] r8, r9, r10, r11;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        $r3 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)>($r3, $r4, 32);

        i7 = 0;

        goto label2;

     label1:
        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)>($r3, $r4, 64);

        i7 = i7 + 1;

     label2:
        if i7 < 128 goto label1;

        r7 = virtualinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream()>();

        r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r5 = newarray (int)[4];

        $r5[0] = 2;

        $r5[1] = 4;

        $r5[2] = 8;

        $r5[3] = 16;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])>($r3, $r4, $r5);

        r9 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r7);

        $i3 = lengthof r9;

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8224L, $l4);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkByteArrays(byte[],byte[])>(r8, r9);

        $r6 = virtualinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream()>();

        r10 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>($r6);

        r11 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i5 = lengthof r10;

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8254L, $l6);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkByteArrays(byte[],byte[])>(r11, r10);

        virtualinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();

        virtualinvoke r7.<java.io.InputStream: void close()>();

        return;
    }

    public void testToInputStreamWithReset() throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r3;
        java.io.ByteArrayOutputStream $r4;
        int[] $r5;
        int $i3, $i5, i7;
        long $l4, $l6;
        java.io.InputStream $r6, r7;
        byte[] r8, r9, r10, r11;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        $r3 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)>($r3, $r4, 32);

        i7 = 0;

        goto label2;

     label1:
        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int)>($r3, $r4, 64);

        i7 = i7 + 1;

     label2:
        if i7 < 128 goto label1;

        r7 = virtualinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream()>();

        r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void reset()>();

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        $r5 = newarray (int)[4];

        $r5[0] = 2;

        $r5[1] = 4;

        $r5[2] = 8;

        $r5[3] = 16;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])>($r3, $r4, $r5);

        r9 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r7);

        $i3 = lengthof r9;

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8224L, $l4);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkByteArrays(byte[],byte[])>(r8, r9);

        $r6 = virtualinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream()>();

        r10 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>($r6);

        r11 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i5 = lengthof r10;

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(30L, $l6);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkByteArrays(byte[],byte[])>(r11, r10);

        virtualinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();

        virtualinvoke r7.<java.io.InputStream: void close()>();

        return;
    }

    public void testStream() throws java.lang.Exception
    {
        org.apache.commons.io.output.ByteArrayOutputStreamTestCase r0;
        java.lang.String r5, r6;
        org.apache.commons.io.output.ByteArrayOutputStream $r9, $r16, $r18, $r19;
        java.io.ByteArrayOutputStream $r10, $r17;
        int[] $r11, $r12, $r13;
        long $l0, $l1, $l2, $l3;
        java.io.ByteArrayInputStream $r14;
        byte[] $r15, $r20, $r21;
        int i4, i5, i6, i7;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStreamTestCase;

        $r9 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(32);

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        $r11 = newarray (int)[3];

        $r11[0] = 4;

        $r11[1] = 10;

        $r11[2] = 22;

        i4 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])>($r9, $r10, $r11);

        $l0 = (long) i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(36L, $l0);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)>($r9, $r10);

        $r12 = newarray (int)[2];

        $r12[0] = 20;

        $r12[1] = 12;

        i5 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])>($r9, $r10, $r12);

        $l1 = (long) i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l1);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)>($r9, $r10);

        virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: void reset()>();

        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void reset()>();

        $r13 = newarray (int)[7];

        $r13[0] = 5;

        $r13[1] = 47;

        $r13[2] = 33;

        $r13[3] = 60;

        $r13[4] = 1;

        $r13[6] = 8;

        i6 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: int writeData(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream,int[])>($r9, $r10, $r13);

        $l2 = (long) i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(155L, $l2);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)>($r9, $r10);

        virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: void reset()>();

        $r14 = new java.io.ByteArrayInputStream;

        $r15 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r14.<java.io.ByteArrayInputStream: void <init>(byte[])>($r15);

        i7 = virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: int write(java.io.InputStream)>($r14);

        $l3 = (long) i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(155L, $l3);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)>($r9, $r10);

        $r16 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r16.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(32);

        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r16);

        $r17 = new java.io.ByteArrayOutputStream;

        specialinvoke $r17.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r17);

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStreamTestCase: void checkStreams(org.apache.commons.io.output.ByteArrayOutputStream,java.io.ByteArrayOutputStream)>($r16, $r17);

        r5 = virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("ASCII");

        r6 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("ASCII");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ASCII decoded String must be equal", r6, r5);

        $r18 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r18.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r19 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r19.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        $r20 = virtualinvoke $r18.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        $r21 = virtualinvoke $r19.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r20, $r21);

        virtualinvoke $r18.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();

        virtualinvoke $r19.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();

        virtualinvoke $r9.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();

        virtualinvoke $r16.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();

        return;
    }
}
