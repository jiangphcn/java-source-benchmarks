public class org.slf4j.helpers.MessageFormatterTest extends java.lang.Object
{
    java.lang.Integer i1;
    java.lang.Integer i2;
    java.lang.Integer i3;
    java.lang.Integer[] ia0;
    java.lang.Integer[] ia1;
    java.lang.String result;

    public void <init>()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Integer $r1, $r2, $r3, $r5, $r6, $r7, $r9, $r10, $r11;
        java.lang.Integer[] $r4, $r8;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(1);

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1> = $r1;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(2);

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2> = $r2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(3);

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3> = $r3;

        $r4 = newarray (java.lang.Integer)[3];

        $r5 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r4[0] = $r5;

        $r6 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r4[1] = $r6;

        $r7 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r4[2] = $r7;

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0> = $r4;

        $r8 = newarray (java.lang.Integer)[3];

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(10);

        $r8[0] = $r9;

        $r10 = new java.lang.Integer;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>(20);

        $r8[1] = $r10;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(30);

        $r8[2] = $r11;

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia1> = $r8;

        return;
    }

    public void testNull()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Integer $r1;
        org.slf4j.helpers.FormattingTuple $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r1 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r2 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>(null, $r1);

        $r3 = virtualinvoke $r2.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r3;

        $r4 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r4);

        return;
    }

    public void nullParametersShouldBeHandledWithoutBarfing()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        org.slf4j.helpers.FormattingTuple $r1, $r4, $r8, $r12, $r16, $r22, $r27;
        java.lang.String $r2, $r3, $r5, $r6, $r9, $r10, $r13, $r14, $r17, $r18, $r23, $r24, $r28, $r29;
        java.lang.Integer $r7, $r11, $r20, $r21, $r26;
        java.lang.Integer[] $r15, $r19, $r25;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r1 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("Value is {}.", null);

        $r2 = virtualinvoke $r1.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r2;

        $r3 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value is null.", $r3);

        $r4 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Val1 is {}, val2 is {}.", null, null);

        $r5 = virtualinvoke $r4.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r5;

        $r6 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1 is null, val2 is null.", $r6);

        $r7 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r8 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Val1 is {}, val2 is {}.", $r7, null);

        $r9 = virtualinvoke $r8.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r9;

        $r10 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1 is 1, val2 is null.", $r10);

        $r11 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r12 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Val1 is {}, val2 is {}.", null, $r11);

        $r13 = virtualinvoke $r12.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r13;

        $r14 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1 is null, val2 is 2.", $r14);

        $r15 = newarray (java.lang.Integer)[3];

        $r16 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val1 is {}, val2 is {}, val3 is {}", $r15);

        $r17 = virtualinvoke $r16.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r17;

        $r18 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1 is null, val2 is null, val3 is null", $r18);

        $r19 = newarray (java.lang.Integer)[3];

        $r20 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r19[1] = $r20;

        $r21 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r19[2] = $r21;

        $r22 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val1 is {}, val2 is {}, val3 is {}", $r19);

        $r23 = virtualinvoke $r22.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r23;

        $r24 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1 is null, val2 is 2, val3 is 3", $r24);

        $r25 = newarray (java.lang.Integer)[3];

        $r26 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r25[2] = $r26;

        $r27 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val1 is {}, val2 is {}, val3 is {}", $r25);

        $r28 = virtualinvoke $r27.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r28;

        $r29 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1 is null, val2 is null, val3 is 3", $r29);

        return;
    }

    public void verifyOneParameterIsHandledCorrectly()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Integer $r1, $r5, $r9, $r13, $r17, $r21, $r25, $r29, $r33;
        org.slf4j.helpers.FormattingTuple $r2, $r6, $r10, $r14, $r18, $r22, $r26, $r30, $r34, $r37, $r40;
        java.lang.String $r3, $r4, $r7, $r8, $r11, $r12, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r28, $r31, $r32, $r35, $r36, $r38, $r39, $r41, $r42;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r1 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r2 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("Value is {}.", $r1);

        $r3 = virtualinvoke $r2.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r3;

        $r4 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value is 3.", $r4);

        $r5 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r6 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("Value is {", $r5);

        $r7 = virtualinvoke $r6.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r7;

        $r8 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value is {", $r8);

        $r9 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r10 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("{} is larger than 2.", $r9);

        $r11 = virtualinvoke $r10.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r11;

        $r12 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("3 is larger than 2.", $r12);

        $r13 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r14 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("No subst", $r13);

        $r15 = virtualinvoke $r14.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r15;

        $r16 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("No subst", $r16);

        $r17 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r18 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("Incorrect {subst", $r17);

        $r19 = virtualinvoke $r18.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r19;

        $r20 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Incorrect {subst", $r20);

        $r21 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r22 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("Value is {bla} {}", $r21);

        $r23 = virtualinvoke $r22.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r23;

        $r24 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value is {bla} 3", $r24);

        $r25 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r26 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("Escaped \\{} subst", $r25);

        $r27 = virtualinvoke $r26.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r27;

        $r28 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Escaped {} subst", $r28);

        $r29 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r30 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("{Escaped", $r29);

        $r31 = virtualinvoke $r30.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r31;

        $r32 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{Escaped", $r32);

        $r33 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r34 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("\\{}Escaped", $r33);

        $r35 = virtualinvoke $r34.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r35;

        $r36 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{}Escaped", $r36);

        $r37 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("File name is {{}}.", "App folder.zip");

        $r38 = virtualinvoke $r37.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r38;

        $r39 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("File name is {App folder.zip}.", $r39);

        $r40 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("File name is C:\\\\{}.", "App folder.zip");

        $r41 = virtualinvoke $r40.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r41;

        $r42 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("File name is C:\\App folder.zip.", $r42);

        return;
    }

    public void testTwoParameters()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Integer $r1, $r2, $r6, $r7, $r11, $r12, $r16, $r17, $r21, $r22, $r26, $r27, $r31, $r32, $r36, $r37, $r41, $r42;
        org.slf4j.helpers.FormattingTuple $r3, $r8, $r13, $r18, $r23, $r28, $r33, $r38, $r43;
        java.lang.String $r4, $r5, $r9, $r10, $r14, $r15, $r19, $r20, $r24, $r25, $r29, $r30, $r34, $r35, $r39, $r40, $r44, $r45;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r2 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r1 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Value {} is smaller than {}.", $r2, $r1);

        $r4 = virtualinvoke $r3.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r4;

        $r5 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2.", $r5);

        $r7 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r6 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r8 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Value {} is smaller than {}", $r7, $r6);

        $r9 = virtualinvoke $r8.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r9;

        $r10 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2", $r10);

        $r12 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r11 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r13 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("{}{}", $r12, $r11);

        $r14 = virtualinvoke $r13.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r14;

        $r15 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("12", $r15);

        $r17 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r16 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r18 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Val1={}, Val2={", $r17, $r16);

        $r19 = virtualinvoke $r18.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r19;

        $r20 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1=1, Val2={", $r20);

        $r22 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r21 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r23 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Value {} is smaller than \\{}", $r22, $r21);

        $r24 = virtualinvoke $r23.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r24;

        $r25 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than {}", $r25);

        $r27 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r26 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r28 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Value {} is smaller than \\{} tail", $r27, $r26);

        $r29 = virtualinvoke $r28.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r29;

        $r30 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than {} tail", $r30);

        $r32 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r31 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r33 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Value {} is smaller than \\{", $r32, $r31);

        $r34 = virtualinvoke $r33.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r34;

        $r35 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than \\{", $r35);

        $r37 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r36 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r38 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Value {} is smaller than {tail", $r37, $r36);

        $r39 = virtualinvoke $r38.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r39;

        $r40 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than {tail", $r40);

        $r42 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r41 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r43 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("Value \\{} is smaller than {}", $r42, $r41);

        $r44 = virtualinvoke $r43.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r44;

        $r45 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value {} is smaller than 1", $r45);

        return;
    }

    public void testExceptionIn_toString()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        org.slf4j.helpers.MessageFormatterTest$1 $r2;
        org.slf4j.helpers.FormattingTuple $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r2 = new org.slf4j.helpers.MessageFormatterTest$1;

        specialinvoke $r2.<org.slf4j.helpers.MessageFormatterTest$1: void <init>(org.slf4j.helpers.MessageFormatterTest)>(r0);

        $r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)>("Troublesome object {}", $r2);

        $r4 = virtualinvoke $r3.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r4;

        $r5 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Troublesome object [FAILED toString()]", $r5);

        return;
    }

    public void testNullArray()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        org.slf4j.helpers.FormattingTuple $r1, $r4, $r7, $r10;
        java.lang.String $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r1 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("msg0", null);

        $r2 = virtualinvoke $r1.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r2;

        $r3 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("msg0", $r3);

        $r4 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("msg1 {}", null);

        $r5 = virtualinvoke $r4.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r5;

        $r6 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("msg1 {}", $r6);

        $r7 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("msg2 {} {}", null);

        $r8 = virtualinvoke $r7.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r8;

        $r9 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("msg2 {} {}", $r9);

        $r10 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("msg3 {} {} {}", null);

        $r11 = virtualinvoke $r10.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r11;

        $r12 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("msg3 {} {} {}", $r12);

        return;
    }

    public void testArrayFormat()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Integer[] $r1, $r5, $r9, $r13, $r17, $r21, $r25;
        org.slf4j.helpers.FormattingTuple $r2, $r6, $r10, $r14, $r18, $r22, $r26;
        java.lang.String $r3, $r4, $r7, $r8, $r11, $r12, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r28;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r1 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r2 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Value {} is smaller than {} and {}.", $r1);

        $r3 = virtualinvoke $r2.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r3;

        $r4 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2 and 3.", $r4);

        $r5 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r6 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}{}", $r5);

        $r7 = virtualinvoke $r6.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r7;

        $r8 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("123", $r8);

        $r9 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r10 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Value {} is smaller than {}.", $r9);

        $r11 = virtualinvoke $r10.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r11;

        $r12 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2.", $r12);

        $r13 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r14 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Value {} is smaller than {}", $r13);

        $r15 = virtualinvoke $r14.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r15;

        $r16 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2", $r16);

        $r17 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r18 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val={}, {, Val={}", $r17);

        $r19 = virtualinvoke $r18.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r19;

        $r20 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val=1, {, Val=2", $r20);

        $r21 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r22 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val={}, {, Val={}", $r21);

        $r23 = virtualinvoke $r22.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r23;

        $r24 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val=1, {, Val=2", $r24);

        $r25 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r26 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val1={}, Val2={", $r25);

        $r27 = virtualinvoke $r26.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r27;

        $r28 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1=1, Val2={", $r28);

        return;
    }

    public void testArrayValues()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Integer r1, $r4, $r5;
        java.lang.Integer[] $r3;
        org.slf4j.helpers.FormattingTuple $r6, $r10, $r15, $r20, $r25, $r30;
        java.lang.String $r7, $r8, $r11, $r12, $r16, $r17, $r21, $r22, $r26, $r27, $r31, $r32;
        java.lang.Object[] $r9, $r13, $r18, $r23, $r28;
        byte[] $r14;
        int[] $r19;
        float[] $r24;
        double[] $r29;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        r1 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r3 = newarray (java.lang.Integer)[2];

        $r4 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r3[0] = $r4;

        $r5 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r3[1] = $r5;

        $r6 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>("{}{}", r1, $r3);

        $r7 = virtualinvoke $r6.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r7;

        $r8 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1[2, 3]", $r8);

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "a";

        $r9[1] = $r3;

        $r10 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r9);

        $r11 = virtualinvoke $r10.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r11;

        $r12 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[2, 3]", $r12);

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = "a";

        $r14 = newarray (byte)[2];

        $r14[0] = 1;

        $r14[1] = 2;

        $r13[1] = $r14;

        $r15 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r13);

        $r16 = virtualinvoke $r15.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r16;

        $r17 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[1, 2]", $r17);

        $r18 = newarray (java.lang.Object)[2];

        $r18[0] = "a";

        $r19 = newarray (int)[2];

        $r19[0] = 1;

        $r19[1] = 2;

        $r18[1] = $r19;

        $r20 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r18);

        $r21 = virtualinvoke $r20.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r21;

        $r22 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[1, 2]", $r22);

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = "a";

        $r24 = newarray (float)[2];

        $r24[0] = 1.0F;

        $r24[1] = 2.0F;

        $r23[1] = $r24;

        $r25 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r23);

        $r26 = virtualinvoke $r25.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r26;

        $r27 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[1.0, 2.0]", $r27);

        $r28 = newarray (java.lang.Object)[2];

        $r28[0] = "a";

        $r29 = newarray (double)[2];

        $r29[0] = 1.0;

        $r29[1] = 2.0;

        $r28[1] = $r29;

        $r30 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r28);

        $r31 = virtualinvoke $r30.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r31;

        $r32 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[1.0, 2.0]", $r32);

        return;
    }

    public void testMultiDimensionalArrayValues()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Integer[][] $r6;
        java.lang.Integer[] $r7, $r8, $r28, $r29;
        java.lang.Object[] $r9, $r16, $r23, $r30, $r35;
        org.slf4j.helpers.FormattingTuple $r10, $r17, $r24, $r31, $r36;
        java.lang.String $r11, $r12, $r18, $r19, $r25, $r26, $r32, $r33, $r37, $r38;
        int[][] $r13;
        int[] $r14, $r15;
        float[][] $r20;
        float[] $r21, $r22;
        java.lang.Object[][] $r27;
        java.lang.Object[][][] $r34;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r6 = newarray (java.lang.Integer[])[2];

        $r7 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r6[0] = $r7;

        $r8 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia1>;

        $r6[1] = $r8;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "a";

        $r9[1] = $r6;

        $r10 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r9);

        $r11 = virtualinvoke $r10.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r11;

        $r12 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[[1, 2, 3], [10, 20, 30]]", $r12);

        $r13 = newarray (int[])[2];

        $r14 = newarray (int)[2];

        $r14[0] = 1;

        $r14[1] = 2;

        $r13[0] = $r14;

        $r15 = newarray (int)[2];

        $r15[0] = 10;

        $r15[1] = 20;

        $r13[1] = $r15;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = "a";

        $r16[1] = $r13;

        $r17 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r16);

        $r18 = virtualinvoke $r17.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r18;

        $r19 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[[1, 2], [10, 20]]", $r19);

        $r20 = newarray (float[])[2];

        $r21 = newarray (float)[2];

        $r21[0] = 1.0F;

        $r21[1] = 2.0F;

        $r20[0] = $r21;

        $r22 = newarray (float)[2];

        $r22[0] = 10.0F;

        $r22[1] = 20.0F;

        $r20[1] = $r22;

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = "a";

        $r23[1] = $r20;

        $r24 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r23);

        $r25 = virtualinvoke $r24.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r25;

        $r26 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[[1.0, 2.0], [10.0, 20.0]]", $r26);

        $r27 = newarray (java.lang.Object[])[2];

        $r28 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia0>;

        $r27[0] = $r28;

        $r29 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer[] ia1>;

        $r27[1] = $r29;

        $r30 = newarray (java.lang.Object)[2];

        $r30[0] = "a";

        $r30[1] = $r27;

        $r31 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r30);

        $r32 = virtualinvoke $r31.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r32;

        $r33 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[[1, 2, 3], [10, 20, 30]]", $r33);

        $r34 = newarray (java.lang.Object[][])[2];

        $r34[0] = $r27;

        $r34[1] = $r27;

        $r35 = newarray (java.lang.Object)[2];

        $r35[0] = "a";

        $r35[1] = $r34;

        $r36 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", $r35);

        $r37 = virtualinvoke $r36.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result> = $r37;

        $r38 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.String result>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a[[[1, 2, 3], [10, 20, 30]], [[1, 2, 3], [10, 20, 30]]]", $r38);

        return;
    }

    public void testCyclicArrays()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        org.slf4j.helpers.FormattingTuple $r3, $r10;
        java.lang.String $r4, $r11;
        java.lang.Integer $r5, $r7, $r9;
        java.lang.Object[] $r6, $r8, r12, r13;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        r12 = newarray (java.lang.Object)[1];

        r12[0] = r12;

        $r3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}", r12);

        $r4 = virtualinvoke $r3.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[[...]]", $r4);

        r13 = newarray (java.lang.Object)[2];

        $r5 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        r13[0] = $r5;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r6[0] = $r7;

        $r6[1] = r13;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r8[0] = $r9;

        $r8[1] = $r6;

        r13[1] = $r8;

        $r10 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}", r13);

        $r11 = virtualinvoke $r10.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1[2, [3, [1, [...]]]]", $r11);

        return;
    }

    public void testArrayThrowable()
    {
        org.slf4j.helpers.MessageFormatterTest r0;
        java.lang.Throwable $r4, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r46;
        java.lang.Object[] $r5, $r9, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r40, $r43, $r45;
        java.lang.Integer $r6, $r7, $r8, $r10, $r11, $r12, $r41, $r44;
        java.lang.String $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.slf4j.helpers.FormattingTuple r47, r48, r49, r50, r51, r52, r53, r54, r55, r56;

        r0 := @this: org.slf4j.helpers.MessageFormatterTest;

        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

        $r5 = newarray (java.lang.Object)[4];

        $r6 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r5[0] = $r6;

        $r7 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r5[1] = $r7;

        $r8 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r5[2] = $r8;

        $r5[3] = $r4;

        $r9 = newarray (java.lang.Object)[3];

        $r10 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r9[0] = $r10;

        $r11 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i2>;

        $r9[1] = $r11;

        $r12 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i3>;

        $r9[2] = $r12;

        r47 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Value {} is smaller than {} and {}.", $r5);

        $r13 = virtualinvoke r47.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2 and 3.", $r13);

        $r14 = virtualinvoke r47.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r15 = virtualinvoke r47.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r15);

        r48 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}{}", $r5);

        $r16 = virtualinvoke r48.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("123", $r16);

        $r17 = virtualinvoke r48.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r18 = virtualinvoke r48.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r18);

        r49 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Value {} is smaller than {}.", $r5);

        $r19 = virtualinvoke r49.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2.", $r19);

        $r20 = virtualinvoke r49.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r21 = virtualinvoke r49.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r21);

        r50 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Value {} is smaller than {}", $r5);

        $r22 = virtualinvoke r50.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2", $r22);

        $r23 = virtualinvoke r50.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r24 = virtualinvoke r50.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r24);

        r51 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val={}, {, Val={}", $r5);

        $r25 = virtualinvoke r51.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val=1, {, Val=2", $r25);

        $r26 = virtualinvoke r51.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z4 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r27 = virtualinvoke r51.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r27);

        r52 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val={}, \\{, Val={}", $r5);

        $r28 = virtualinvoke r52.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val=1, \\{, Val=2", $r28);

        $r29 = virtualinvoke r52.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z5 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r29);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r30 = virtualinvoke r52.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r30);

        r53 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Val1={}, Val2={", $r5);

        $r31 = virtualinvoke r53.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Val1=1, Val2={", $r31);

        $r32 = virtualinvoke r53.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z6 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r32);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r33 = virtualinvoke r53.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r33);

        r54 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("Value {} is smaller than {} and {}.", $r5);

        $r34 = virtualinvoke r54.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Value 1 is smaller than 2 and 3.", $r34);

        $r35 = virtualinvoke r54.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z7 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r35);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r36 = virtualinvoke r54.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r36);

        r55 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>("{}{}{}{}", $r5);

        $r37 = virtualinvoke r55.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("123{}", $r37);

        $r38 = virtualinvoke r55.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r38);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r39 = virtualinvoke r55.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r39);

        $r40 = newarray (java.lang.Object)[1];

        $r41 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r40[0] = $r41;

        r56 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)>("1={}", $r40, $r4);

        $r42 = virtualinvoke r56.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1=1", $r42);

        $r43 = newarray (java.lang.Object)[1];

        $r44 = r0.<org.slf4j.helpers.MessageFormatterTest: java.lang.Integer i1>;

        $r43[0] = $r44;

        $r45 = virtualinvoke r56.<org.slf4j.helpers.FormattingTuple: java.lang.Object[] getArgArray()>();

        $z9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r43, $r45);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r46 = virtualinvoke r56.<org.slf4j.helpers.FormattingTuple: java.lang.Throwable getThrowable()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r46);

        return;
    }
}
