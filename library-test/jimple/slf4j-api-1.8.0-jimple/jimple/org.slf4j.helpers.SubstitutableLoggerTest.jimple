public class org.slf4j.helpers.SubstitutableLoggerTest extends java.lang.Object
{
    private static final java.util.Set EXCLUDED_METHODS;

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.lang.String[] $r1;
        java.util.List $r2;

        $r0 = new java.util.HashSet;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "getName";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        <org.slf4j.helpers.SubstitutableLoggerTest: java.util.Set EXCLUDED_METHODS> = $r0;

        return;
    }

    public void <init>()
    {
        org.slf4j.helpers.SubstitutableLoggerTest r0;

        r0 := @this: org.slf4j.helpers.SubstitutableLoggerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDelegate() throws java.lang.Exception
    {
        org.slf4j.helpers.SubstitutableLoggerTest r0;
        java.util.Set r2, $r12;
        org.slf4j.Logger r4, $r6;
        org.slf4j.helpers.SubstituteLogger $r5;
        boolean $z0, $z2;
        org.slf4j.helpers.SubstitutableLoggerTest$LoggerInvocationHandler $r7;
        java.lang.Class $r8;
        java.lang.ClassLoader $r9;
        java.lang.Class[] $r10;
        java.lang.Object $r11;
        java.lang.StringBuilder $r13, $r15;
        java.lang.String $r14, $r16;

        r0 := @this: org.slf4j.helpers.SubstitutableLoggerTest;

        $r5 = new org.slf4j.helpers.SubstituteLogger;

        specialinvoke $r5.<org.slf4j.helpers.SubstituteLogger: void <init>(java.lang.String,java.util.Queue,boolean)>("foo", null, 0);

        $r6 = virtualinvoke $r5.<org.slf4j.helpers.SubstituteLogger: org.slf4j.Logger delegate()>();

        $z0 = $r6 instanceof org.slf4j.event.EventRecodingLogger;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = staticinvoke <org.slf4j.helpers.SubstitutableLoggerTest: java.util.Set determineMethodSignatures(java.lang.Class)>(class "org/slf4j/Logger");

        $r7 = new org.slf4j.helpers.SubstitutableLoggerTest$LoggerInvocationHandler;

        specialinvoke $r7.<org.slf4j.helpers.SubstitutableLoggerTest$LoggerInvocationHandler: void <init>(org.slf4j.helpers.SubstitutableLoggerTest,org.slf4j.helpers.SubstitutableLoggerTest$LoggerInvocationHandler)>(r0, null);

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r10 = newarray (java.lang.Class)[1];

        $r10[0] = class "org/slf4j/Logger";

        $r11 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r9, $r10, $r7);

        r4 = (org.slf4j.Logger) $r11;

        virtualinvoke $r5.<org.slf4j.helpers.SubstituteLogger: void setDelegate(org.slf4j.Logger)>(r4);

        specialinvoke r0.<org.slf4j.helpers.SubstitutableLoggerTest: void invokeMethods(org.slf4j.Logger)>($r5);

        $r12 = virtualinvoke $r7.<org.slf4j.helpers.SubstitutableLoggerTest$LoggerInvocationHandler: java.util.Set getInvokedMethodSignatures()>();

        interfaceinvoke r2.<java.util.Set: boolean removeAll(java.util.Collection)>($r12);

        $z2 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Following methods are not delegated ");

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r16);

     label1:
        return;
    }

    private void invokeMethods(org.slf4j.Logger) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        org.slf4j.helpers.SubstitutableLoggerTest r0;
        org.slf4j.Logger r1;
        java.lang.reflect.Method r2;
        int i0, $i1, i2;
        java.lang.Class $r4;
        java.lang.reflect.Method[] $r5;
        java.util.Set $r6;
        java.lang.String $r7;
        boolean $z0;
        java.lang.Class[] $r8;
        java.lang.Object[] $r9;

        r0 := @this: org.slf4j.helpers.SubstitutableLoggerTest;

        r1 := @parameter0: org.slf4j.Logger;

        $r4 = class "org/slf4j/Logger";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r5;

        i2 = 0;

        goto label3;

     label1:
        r2 = $r5[i2];

        $r6 = <org.slf4j.helpers.SubstitutableLoggerTest: java.util.Set EXCLUDED_METHODS>;

        $r7 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r8;

        $r9 = newarray (java.lang.Object)[$i1];

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r9);

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < i0 goto label1;

        return;
    }

    private static java.util.Set determineMethodSignatures(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method r2;
        int i0, i1;
        java.util.HashSet $r4;
        java.lang.reflect.Method[] $r5;
        java.util.Set $r6;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r5;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r5[i1];

        $r6 = <org.slf4j.helpers.SubstitutableLoggerTest: java.util.Set EXCLUDED_METHODS>;

        $r7 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r8 = staticinvoke <org.slf4j.helpers.SubstitutableLoggerTest: java.lang.String getMethodSignature(java.lang.reflect.Method)>(r2);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return $r4;
    }

    private static java.lang.String getMethodSignature(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class r2;
        int i0, i1;
        java.util.ArrayList $r4;
        java.lang.String $r5, $r7, $r8;
        java.lang.Class[] $r6;

        r0 := @parameter0: java.lang.reflect.Method;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r6;

        i1 = 0;

        goto label2;

     label1:
        r2 = $r6[i1];

        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r8;
    }

    static java.lang.String access$0(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.slf4j.helpers.SubstitutableLoggerTest: java.lang.String getMethodSignature(java.lang.reflect.Method)>(r0);

        return $r1;
    }
}
