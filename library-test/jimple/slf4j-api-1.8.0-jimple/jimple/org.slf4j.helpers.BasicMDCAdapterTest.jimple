public class org.slf4j.helpers.BasicMDCAdapterTest extends java.lang.Object
{
    org.slf4j.spi.MDCAdapter mdc;

    public void <init>()
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.helpers.BasicMDCAdapter $r1;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.slf4j.helpers.BasicMDCAdapter;

        specialinvoke $r1.<org.slf4j.helpers.BasicMDCAdapter: void <init>()>();

        r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc> = $r1;

        return;
    }

    public void tearDown() throws java.lang.Exception
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.spi.MDCAdapter $r1;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r1 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r1.<org.slf4j.spi.MDCAdapter: void clear()>();

        return;
    }

    public void testSettingAndGettingWithMDC()
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.spi.MDCAdapter $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r1 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r2 = interfaceinvoke $r1.<org.slf4j.spi.MDCAdapter: java.lang.String get(java.lang.String)>("testKey");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r2);

        $r3 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r3.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("testKey", "testValue");

        $r4 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r5 = interfaceinvoke $r4.<org.slf4j.spi.MDCAdapter: java.lang.String get(java.lang.String)>("testKey");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, "testValue");

        return;
    }

    public void testOverwritingAKeyInMDC()
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.spi.MDCAdapter $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r6;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r1 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r2 = interfaceinvoke $r1.<org.slf4j.spi.MDCAdapter: java.lang.String get(java.lang.String)>("testKey");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r2);

        $r3 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r3.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("testKey", "testValue");

        $r4 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r4.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("testKey", "differentTestValue");

        $r5 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r6 = interfaceinvoke $r5.<org.slf4j.spi.MDCAdapter: java.lang.String get(java.lang.String)>("testKey");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, "differentTestValue");

        return;
    }

    public void testClearingMDC()
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.spi.MDCAdapter $r1, $r2, $r4, $r5;
        java.util.Map $r3, $r6;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r1 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r1.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("testKey", "testValue");

        $r2 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r3 = interfaceinvoke $r2.<org.slf4j.spi.MDCAdapter: java.util.Map getCopyOfContextMap()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r4 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r4.<org.slf4j.spi.MDCAdapter: void clear()>();

        $r5 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r6 = interfaceinvoke $r5.<org.slf4j.spi.MDCAdapter: java.util.Map getCopyOfContextMap()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r6);

        return;
    }

    public void testGetCopyOfContextMapFromMDC()
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        java.util.Map r1, $r6;
        org.slf4j.spi.MDCAdapter $r2, $r3, $r4, $r5;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r2 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r2.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("testKey", "testValue");

        $r3 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        r1 = interfaceinvoke $r3.<org.slf4j.spi.MDCAdapter: java.util.Map getCopyOfContextMap()>();

        $r4 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r4.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("anotherTestKey", "anotherTestValue");

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r5 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r6 = interfaceinvoke $r5.<org.slf4j.spi.MDCAdapter: java.util.Map getCopyOfContextMap()>();

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testMDCInheritsValuesFromParentThread() throws java.lang.Exception
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.spi.MDCAdapter $r1;
        org.slf4j.helpers.BasicMDCAdapterTest$1 $r2;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r1 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r1.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("parentKey", "parentValue");

        $r2 = new org.slf4j.helpers.BasicMDCAdapterTest$1;

        specialinvoke $r2.<org.slf4j.helpers.BasicMDCAdapterTest$1: void <init>(org.slf4j.helpers.BasicMDCAdapterTest)>(r0);

        specialinvoke r0.<org.slf4j.helpers.BasicMDCAdapterTest: void runAndWait(java.lang.Runnable)>($r2);

        return;
    }

    public void testMDCDoesntGetValuesFromChildThread() throws java.lang.Exception
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.spi.MDCAdapter $r1, $r3, $r5;
        org.slf4j.helpers.BasicMDCAdapterTest$2 $r2;
        java.lang.String $r4, $r6;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r1 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r1.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("parentKey", "parentValue");

        $r2 = new org.slf4j.helpers.BasicMDCAdapterTest$2;

        specialinvoke $r2.<org.slf4j.helpers.BasicMDCAdapterTest$2: void <init>(org.slf4j.helpers.BasicMDCAdapterTest)>(r0);

        specialinvoke r0.<org.slf4j.helpers.BasicMDCAdapterTest: void runAndWait(java.lang.Runnable)>($r2);

        $r3 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r4 = interfaceinvoke $r3.<org.slf4j.spi.MDCAdapter: java.lang.String get(java.lang.String)>("parentKey");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("parentValue", $r4);

        $r5 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r6 = interfaceinvoke $r5.<org.slf4j.spi.MDCAdapter: java.lang.String get(java.lang.String)>("childKey");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r6);

        return;
    }

    public void testMDCChildThreadCanOverwriteParentThread() throws java.lang.Exception
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        org.slf4j.spi.MDCAdapter $r1, $r3;
        org.slf4j.helpers.BasicMDCAdapterTest$3 $r2;
        java.lang.String $r4;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        $r1 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        interfaceinvoke $r1.<org.slf4j.spi.MDCAdapter: void put(java.lang.String,java.lang.String)>("sharedKey", "parentValue");

        $r2 = new org.slf4j.helpers.BasicMDCAdapterTest$3;

        specialinvoke $r2.<org.slf4j.helpers.BasicMDCAdapterTest$3: void <init>(org.slf4j.helpers.BasicMDCAdapterTest)>(r0);

        specialinvoke r0.<org.slf4j.helpers.BasicMDCAdapterTest: void runAndWait(java.lang.Runnable)>($r2);

        $r3 = r0.<org.slf4j.helpers.BasicMDCAdapterTest: org.slf4j.spi.MDCAdapter mdc>;

        $r4 = interfaceinvoke $r3.<org.slf4j.spi.MDCAdapter: java.lang.String get(java.lang.String)>("sharedKey");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("parentValue", $r4);

        return;
    }

    private void runAndWait(java.lang.Runnable) throws java.lang.Exception
    {
        org.slf4j.helpers.BasicMDCAdapterTest r0;
        java.lang.Runnable r1;
        org.slf4j.helpers.BasicMDCAdapterTest$RecordingExceptionHandler $r5;
        java.lang.Thread $r6;
        java.lang.String $r7, $r10, $r12;
        boolean $z0;
        java.lang.Throwable $r8;
        java.lang.StringBuilder $r9, $r11;

        r0 := @this: org.slf4j.helpers.BasicMDCAdapterTest;

        r1 := @parameter0: java.lang.Runnable;

        $r5 = new org.slf4j.helpers.BasicMDCAdapterTest$RecordingExceptionHandler;

        specialinvoke $r5.<org.slf4j.helpers.BasicMDCAdapterTest$RecordingExceptionHandler: void <init>(org.slf4j.helpers.BasicMDCAdapterTest$RecordingExceptionHandler)>(null);

        $r6 = new java.lang.Thread;

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1);

        virtualinvoke $r6.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r5);

        virtualinvoke $r6.<java.lang.Thread: void start()>();

     label1:
        virtualinvoke $r6.<java.lang.Thread: void join()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected failure in child thread:");

        $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label4:
        $r7 = virtualinvoke $r5.<org.slf4j.helpers.BasicMDCAdapterTest$RecordingExceptionHandler: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r5.<org.slf4j.helpers.BasicMDCAdapterTest$RecordingExceptionHandler: boolean hadException()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($r7, $z0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
