public class org.slf4j.NoBindingTest extends java.lang.Object
{
    int diff;

    public void <init>()
    {
        org.slf4j.NoBindingTest r0;
        java.util.Random $r1;
        int $i0;

        r0 := @this: org.slf4j.NoBindingTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(10000);

        r0.<org.slf4j.NoBindingTest: int diff> = $i0;

        return;
    }

    public void testLogger()
    {
        org.slf4j.NoBindingTest r0;
        org.slf4j.Logger r1;
        java.lang.StringBuilder $r2, $r3;
        int $i0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.slf4j.NoBindingTest;

        r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/slf4j/NoBindingTest");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("hello");

        $i0 = r0.<org.slf4j.NoBindingTest: int diff>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<org.slf4j.Logger: void debug(java.lang.String)>($r4);

        $z0 = r1 instanceof org.slf4j.helpers.NOPLogger;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMDC()
    {
        org.slf4j.NoBindingTest r0;
        java.lang.StringBuilder $r1, $r2;
        int $i0;
        java.lang.String $r3, $r4;

        r0 := @this: org.slf4j.NoBindingTest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("k");

        $i0 = r0.<org.slf4j.NoBindingTest: int diff>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.slf4j.MDC: void put(java.lang.String,java.lang.String)>($r3, "v");

        $r4 = staticinvoke <org.slf4j.MDC: java.lang.String get(java.lang.String)>("k");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r4);

        return;
    }

    public void testMarker()
    {
        org.slf4j.NoBindingTest r0;
        org.slf4j.Marker r1;
        java.lang.StringBuilder $r2, $r3;
        int $i0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.slf4j.NoBindingTest;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("a");

        $i0 = r0.<org.slf4j.NoBindingTest: int diff>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = staticinvoke <org.slf4j.MarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>($r4);

        $z0 = r1 instanceof org.slf4j.helpers.BasicMarker;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }
}
