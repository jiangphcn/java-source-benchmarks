public class org.slf4j.BasicMarkerTest extends java.lang.Object
{
    static final java.lang.String BLUE_STR;
    static final java.lang.String RED_STR;
    static final java.lang.String GREEN_STR;
    static final java.lang.String COMP_STR;
    static final java.lang.String MULTI_COMP_STR;
    static final java.lang.String PARENT_MARKER_STR;
    static final java.lang.String CHILD_MARKER_STR;
    static final java.lang.String NOT_CONTAINED_MARKER_STR;
    final org.slf4j.IMarkerFactory factory;
    final org.slf4j.Marker blue;
    final org.slf4j.Marker red;
    final org.slf4j.Marker green;
    final org.slf4j.Marker comp;
    final org.slf4j.Marker multiComp;
    short diff;

    public void <init>()
    {
        org.slf4j.BasicMarkerTest r0;
        short $s0;
        org.slf4j.helpers.BasicMarkerFactory $r1;
        org.slf4j.IMarkerFactory $r2, $r4, $r6, $r8, $r12;
        org.slf4j.Marker $r3, $r5, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17;

        r0 := @this: org.slf4j.BasicMarkerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $s0 = staticinvoke <org.slf4j.Differentiator: short getDiffentiator()>();

        r0.<org.slf4j.BasicMarkerTest: short diff> = $s0;

        $r1 = new org.slf4j.helpers.BasicMarkerFactory;

        specialinvoke $r1.<org.slf4j.helpers.BasicMarkerFactory: void <init>()>();

        r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory> = $r1;

        $r2 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        $r3 = interfaceinvoke $r2.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("BLUE");

        r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue> = $r3;

        $r4 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        $r5 = interfaceinvoke $r4.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("RED");

        r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker red> = $r5;

        $r6 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        $r7 = interfaceinvoke $r6.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("GREEN");

        r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker green> = $r7;

        $r8 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        $r9 = interfaceinvoke $r8.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("COMP");

        r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp> = $r9;

        $r11 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        $r10 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        interfaceinvoke $r11.<org.slf4j.Marker: void add(org.slf4j.Marker)>($r10);

        $r12 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        $r13 = interfaceinvoke $r12.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("MULTI_COMP");

        r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp> = $r13;

        $r15 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $r14 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker green>;

        interfaceinvoke $r15.<org.slf4j.Marker: void add(org.slf4j.Marker)>($r14);

        $r17 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $r16 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        interfaceinvoke $r17.<org.slf4j.Marker: void add(org.slf4j.Marker)>($r16);

        return;
    }

    public void testPrimitive()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker r1, $r2, $r4, $r5, $r8, $r9, $r10;
        java.lang.String $r3, $r7;
        boolean $z0, $z1, $z2;
        org.slf4j.IMarkerFactory $r6;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r2 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $r3 = interfaceinvoke $r2.<org.slf4j.Marker: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BLUE", $r3);

        $r5 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $r4 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r1 = interfaceinvoke $r6.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("BLUE");

        $r7 = interfaceinvoke r1.<org.slf4j.Marker: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BLUE", $r7);

        $r8 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r1);

        $r9 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $z1 = interfaceinvoke $r9.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $z2 = interfaceinvoke r1.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testPrimitiveByName()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker $r1;
        boolean $z0;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r1 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Marker: boolean contains(java.lang.String)>("BLUE");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testComposite()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r2 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        $r1 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        $r3 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testCompositeByName()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r1 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Marker: boolean contains(java.lang.String)>("COMP");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Marker: boolean contains(java.lang.String)>("BLUE");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testMultiComposite()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r2 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $r1 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker comp>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $r3 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker blue>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r6 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $r5 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker green>;

        $z2 = interfaceinvoke $r6.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r8 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $r7 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker red>;

        $z3 = interfaceinvoke $r8.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        return;
    }

    public void testMultiCompositeByName()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r1 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Marker: boolean contains(java.lang.String)>("COMP");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Marker: boolean contains(java.lang.String)>("BLUE");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r3 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $z2 = interfaceinvoke $r3.<org.slf4j.Marker: boolean contains(java.lang.String)>("GREEN");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r4 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.Marker multiComp>;

        $z3 = interfaceinvoke $r4.<org.slf4j.Marker: boolean contains(java.lang.String)>("RED");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        return;
    }

    public void testMultiAdd()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker r1, r2, $r6;
        org.slf4j.IMarkerFactory $r3, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.String $r7;
        int i0;
        java.util.Iterator r8;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r3 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r1 = interfaceinvoke $r3.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("PARENT_MARKER");

        $r4 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r2 = interfaceinvoke $r4.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("CHILD_MARKER");

        i0 = 0;

        goto label2;

     label1:
        interfaceinvoke r1.<org.slf4j.Marker: void add(org.slf4j.Marker)>(r2);

        i0 = i0 + 1;

     label2:
        if i0 < 10 goto label1;

        r8 = interfaceinvoke r1.<org.slf4j.Marker: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.slf4j.Marker) $r5;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("CHILD_MARKER", $r7);

        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void testAddRemove()
    {
        org.slf4j.BasicMarkerTest r0;
        org.slf4j.Marker r2, r3;
        org.slf4j.IMarkerFactory $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r4 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r2 = interfaceinvoke $r4.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("NEW_PARENT_MARKER");

        $r5 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r3 = interfaceinvoke $r5.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>("NEW_CHILD_MARKER");

        $z0 = interfaceinvoke r2.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = interfaceinvoke r2.<org.slf4j.Marker: boolean contains(java.lang.String)>("NEW_CHILD_MARKER");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $z2 = interfaceinvoke r2.<org.slf4j.Marker: boolean remove(org.slf4j.Marker)>(r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        interfaceinvoke r2.<org.slf4j.Marker: void add(org.slf4j.Marker)>(r3);

        $z3 = interfaceinvoke r2.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $z4 = interfaceinvoke r2.<org.slf4j.Marker: boolean contains(java.lang.String)>("NEW_CHILD_MARKER");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = interfaceinvoke r2.<org.slf4j.Marker: boolean remove(org.slf4j.Marker)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $z6 = interfaceinvoke r2.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        $z7 = interfaceinvoke r2.<org.slf4j.Marker: boolean contains(java.lang.String)>("NEW_CHILD_MARKER");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        $z8 = interfaceinvoke r2.<org.slf4j.Marker: boolean remove(org.slf4j.Marker)>(r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z8);

        return;
    }

    public void testSelfRecursion()
    {
        org.slf4j.BasicMarkerTest r0;
        java.lang.String r1, r2, r3, $r9, $r12;
        org.slf4j.Marker r4, r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r13;
        short $s0;
        org.slf4j.IMarkerFactory $r14, $r15;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("NEW_");

        $s0 = r0.<org.slf4j.BasicMarkerTest: short diff>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s0);

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARENT_MARKER");

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT_CONTAINED");

        r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r4 = interfaceinvoke $r14.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r2);

        $r15 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r5 = interfaceinvoke $r15.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r3);

        interfaceinvoke r4.<org.slf4j.Marker: void add(org.slf4j.Marker)>(r4);

        $z0 = interfaceinvoke r4.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r4.<org.slf4j.Marker: boolean contains(java.lang.String)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r4.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $z3 = interfaceinvoke r4.<org.slf4j.Marker: boolean contains(java.lang.String)>("NOT_CONTAINED");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        return;
    }

    public void testIndirectRecursion()
    {
        org.slf4j.BasicMarkerTest r0;
        java.lang.String r1, r2, r3, r4, $r11, $r14, $r17;
        org.slf4j.Marker r5, r6, r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18;
        short $s0;
        org.slf4j.IMarkerFactory $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("NEW_");

        $s0 = r0.<org.slf4j.BasicMarkerTest: short diff>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s0);

        r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARENT_MARKER");

        r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CHILD_MARKER");

        r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.StringBuilder;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT_CONTAINED");

        r4 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r5 = interfaceinvoke $r19.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r2);

        $r20 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r6 = interfaceinvoke $r20.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r3);

        $r21 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r7 = interfaceinvoke $r21.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r4);

        interfaceinvoke r5.<org.slf4j.Marker: void add(org.slf4j.Marker)>(r6);

        interfaceinvoke r6.<org.slf4j.Marker: void add(org.slf4j.Marker)>(r5);

        $z0 = interfaceinvoke r5.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r5.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r5.<org.slf4j.Marker: boolean contains(java.lang.String)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = interfaceinvoke r5.<org.slf4j.Marker: boolean contains(java.lang.String)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $z4 = interfaceinvoke r5.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $z5 = interfaceinvoke r5.<org.slf4j.Marker: boolean contains(java.lang.String)>("NOT_CONTAINED");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        return;
    }

    public void testHomonyms()
    {
        org.slf4j.BasicMarkerTest r0;
        java.lang.String r1, r2, r3, $r12, $r15;
        org.slf4j.Marker r4, r5, r7, r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r16;
        short $s0;
        org.slf4j.IMarkerFactory $r17, $r18;
        org.slf4j.helpers.BasicMarkerFactory $r19;
        boolean $z0, $z1, $z2;

        r0 := @this: org.slf4j.BasicMarkerTest;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("homonym");

        $s0 = r0.<org.slf4j.BasicMarkerTest: short diff>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s0);

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARENT_MARKER");

        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CHILD_MARKER");

        r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r4 = interfaceinvoke $r17.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r2);

        $r18 = r0.<org.slf4j.BasicMarkerTest: org.slf4j.IMarkerFactory factory>;

        r5 = interfaceinvoke $r18.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r3);

        interfaceinvoke r4.<org.slf4j.Marker: void add(org.slf4j.Marker)>(r5);

        $r19 = new org.slf4j.helpers.BasicMarkerFactory;

        specialinvoke $r19.<org.slf4j.helpers.BasicMarkerFactory: void <init>()>();

        r7 = interfaceinvoke $r19.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r2);

        r8 = interfaceinvoke $r19.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r3);

        $z0 = interfaceinvoke r4.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = interfaceinvoke r4.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = interfaceinvoke r4.<org.slf4j.Marker: boolean remove(org.slf4j.Marker)>(r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public static void <clinit>()
    {
        <org.slf4j.BasicMarkerTest: java.lang.String NOT_CONTAINED_MARKER_STR> = "NOT_CONTAINED";

        <org.slf4j.BasicMarkerTest: java.lang.String CHILD_MARKER_STR> = "CHILD_MARKER";

        <org.slf4j.BasicMarkerTest: java.lang.String PARENT_MARKER_STR> = "PARENT_MARKER";

        <org.slf4j.BasicMarkerTest: java.lang.String MULTI_COMP_STR> = "MULTI_COMP";

        <org.slf4j.BasicMarkerTest: java.lang.String COMP_STR> = "COMP";

        <org.slf4j.BasicMarkerTest: java.lang.String GREEN_STR> = "GREEN";

        <org.slf4j.BasicMarkerTest: java.lang.String RED_STR> = "RED";

        <org.slf4j.BasicMarkerTest: java.lang.String BLUE_STR> = "BLUE";

        return;
    }
}
