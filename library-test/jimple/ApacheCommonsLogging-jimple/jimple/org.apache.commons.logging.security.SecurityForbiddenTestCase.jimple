public class org.apache.commons.logging.security.SecurityForbiddenTestCase extends junit.framework.TestCase
{
    private java.lang.SecurityManager oldSecMgr;
    private java.lang.ClassLoader otherClassLoader;

    public void <init>()
    {
        org.apache.commons.logging.security.SecurityForbiddenTestCase r0;

        r0 := @this: org.apache.commons.logging.security.SecurityForbiddenTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public static junit.framework.Test suite() throws java.lang.Exception
    {
        java.lang.Class r1, $r3;
        org.apache.commons.logging.PathableClassLoader $r2;
        java.lang.ClassLoader $r4;
        org.apache.commons.logging.PathableTestSuite $r5;

        $r2 = new org.apache.commons.logging.PathableClassLoader;

        specialinvoke $r2.<org.apache.commons.logging.PathableClassLoader: void <init>(java.lang.ClassLoader)>(null);

        $r3 = class "junit/framework/Test";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r2.<org.apache.commons.logging.PathableClassLoader: void useExplicitLoader(java.lang.String,java.lang.ClassLoader)>("junit.", $r4);

        virtualinvoke $r2.<org.apache.commons.logging.PathableClassLoader: void addLogicalLib(java.lang.String)>("commons-logging");

        virtualinvoke $r2.<org.apache.commons.logging.PathableClassLoader: void addLogicalLib(java.lang.String)>("testclasses");

        r1 = virtualinvoke $r2.<org.apache.commons.logging.PathableClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.commons.logging.security.SecurityForbiddenTestCase");

        $r5 = new org.apache.commons.logging.PathableTestSuite;

        specialinvoke $r5.<org.apache.commons.logging.PathableTestSuite: void <init>(java.lang.Class,java.lang.ClassLoader)>(r1, $r2);

        return $r5;
    }

    public void setUp()
    {
        org.apache.commons.logging.security.SecurityForbiddenTestCase r0;
        java.lang.SecurityManager $r2;
        org.apache.commons.logging.PathableClassLoader $r3;

        r0 := @this: org.apache.commons.logging.security.SecurityForbiddenTestCase;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.SecurityManager oldSecMgr> = $r2;

        $r3 = new org.apache.commons.logging.PathableClassLoader;

        specialinvoke $r3.<org.apache.commons.logging.PathableClassLoader: void <init>(java.lang.ClassLoader)>(null);

        virtualinvoke $r3.<org.apache.commons.logging.PathableClassLoader: void addLogicalLib(java.lang.String)>("commons-logging");

        virtualinvoke $r3.<org.apache.commons.logging.PathableClassLoader: void addLogicalLib(java.lang.String)>("testclasses");

        r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.ClassLoader otherClassLoader> = $r3;

        return;
    }

    public void tearDown()
    {
        org.apache.commons.logging.security.SecurityForbiddenTestCase r0;
        java.lang.SecurityManager $r1;

        r0 := @this: org.apache.commons.logging.security.SecurityForbiddenTestCase;

        $r1 = r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.SecurityManager oldSecMgr>;

        staticinvoke <java.lang.System: void setSecurityManager(java.lang.SecurityManager)>($r1);

        return;
    }

    public void testAllForbidden()
    {
        org.apache.commons.logging.security.SecurityForbiddenTestCase r0;
        java.lang.reflect.Field r2;
        java.lang.Object r3, $r14;
        java.lang.String r4, $r6, $r19, $r25, $r28, $r30;
        java.lang.Class $r5, $r9, $r13, $r16, $r17, r31;
        org.apache.commons.logging.security.MockSecurityManager $r8;
        java.lang.ClassLoader $r10;
        java.lang.Class[] $r11;
        java.lang.Object[] $r12;
        java.lang.SecurityManager $r15, $r21;
        boolean $z0, $z1;
        int $i0;
        java.lang.Throwable $r20;
        java.io.StringWriter $r22;
        java.io.PrintWriter $r23;
        java.lang.StringBuilder $r24, $r26, $r27, $r29;
        java.lang.reflect.Method r32;
        org.apache.commons.logging.Log r33;

        r0 := @this: org.apache.commons.logging.security.SecurityForbiddenTestCase;

        $r5 = class "org/apache/commons/logging/security/SecurityForbiddenTestCase$CustomHashtable";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl", $r6);

        $r8 = new org.apache.commons.logging.security.MockSecurityManager;

        specialinvoke $r8.<org.apache.commons.logging.security.MockSecurityManager: void <init>()>();

        staticinvoke <java.lang.System: void setSecurityManager(java.lang.SecurityManager)>($r8);

     label1:
        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r31 = virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r11 = newarray (java.lang.Class)[1];

        $r11[0] = class "java/lang/Class";

        r32 = virtualinvoke r31.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getLog", $r11);

        $r12 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12[0] = $r13;

        $r14 = virtualinvoke r32.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r12);

        r33 = (org.apache.commons.logging.Log) $r14;

        interfaceinvoke r33.<org.apache.commons.logging.Log: void info(java.lang.Object)>("testing");

        $r15 = r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.SecurityManager oldSecMgr>;

        staticinvoke <java.lang.System: void setSecurityManager(java.lang.SecurityManager)>($r15);

        r2 = virtualinvoke r31.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("factories");

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        staticinvoke <org.apache.commons.logging.security.SecurityForbiddenTestCase: void assertNotNull(java.lang.Object)>(r3);

        $r16 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r17 = class "org/apache/commons/logging/security/SecurityForbiddenTestCase$CustomHashtable";

        $r19 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $z1 = 0;

        goto label3;

     label2:
        $z1 = 1;

     label3:
        staticinvoke <org.apache.commons.logging.security.SecurityForbiddenTestCase: void assertTrue(java.lang.String,boolean)>("Custom hashtable unexpectedly used", $z1);

        $i0 = virtualinvoke $r8.<org.apache.commons.logging.security.MockSecurityManager: int getUntrustedCodeCount()>();

        staticinvoke <org.apache.commons.logging.security.SecurityForbiddenTestCase: void assertEquals(int,int)>(0, $i0);

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        $r21 = r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.SecurityManager oldSecMgr>;

        staticinvoke <java.lang.System: void setSecurityManager(java.lang.SecurityManager)>($r21);

        $r22 = new java.io.StringWriter;

        specialinvoke $r22.<java.io.StringWriter: void <init>()>();

        $r23 = new java.io.PrintWriter;

        specialinvoke $r23.<java.io.PrintWriter: void <init>(java.io.Writer)>($r22);

        virtualinvoke $r20.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected exception:");

        $r25 = virtualinvoke $r20.<java.lang.Throwable: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r28 = virtualinvoke $r22.<java.io.StringWriter: java.lang.String toString()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.security.SecurityForbiddenTestCase: void fail(java.lang.String)>($r30);

     label6:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void testContextClassLoader()
    {
        org.apache.commons.logging.security.SecurityForbiddenTestCase r0;
        java.lang.Class $r5;
        java.lang.String $r6, $r17, $r20, $r22;
        org.apache.commons.logging.security.MockSecurityManager $r8;
        java.lang.ClassLoader $r9;
        java.lang.SecurityManager $r11, $r13;
        int $i0;
        java.lang.Throwable $r12;
        java.io.StringWriter $r14;
        java.io.PrintWriter $r15;
        java.lang.StringBuilder $r16, $r18, $r19, $r21;

        r0 := @this: org.apache.commons.logging.security.SecurityForbiddenTestCase;

        $r5 = class "org/apache/commons/logging/security/SecurityForbiddenTestCase$CustomHashtable";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl", $r6);

        $r8 = new org.apache.commons.logging.security.MockSecurityManager;

        specialinvoke $r8.<org.apache.commons.logging.security.MockSecurityManager: void <init>()>();

        staticinvoke <java.lang.System: void setSecurityManager(java.lang.SecurityManager)>($r8);

     label1:
        $r9 = r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.ClassLoader otherClassLoader>;

        specialinvoke r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.Object loadClass(java.lang.String,java.lang.ClassLoader)>("org.apache.commons.logging.security.DummyClass", $r9);

        $r11 = r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.SecurityManager oldSecMgr>;

        staticinvoke <java.lang.System: void setSecurityManager(java.lang.SecurityManager)>($r11);

        $i0 = virtualinvoke $r8.<org.apache.commons.logging.security.MockSecurityManager: int getUntrustedCodeCount()>();

        staticinvoke <org.apache.commons.logging.security.SecurityForbiddenTestCase: void assertEquals(int,int)>(0, $i0);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = r0.<org.apache.commons.logging.security.SecurityForbiddenTestCase: java.lang.SecurityManager oldSecMgr>;

        staticinvoke <java.lang.System: void setSecurityManager(java.lang.SecurityManager)>($r13);

        $r14 = new java.io.StringWriter;

        specialinvoke $r14.<java.io.StringWriter: void <init>()>();

        $r15 = new java.io.PrintWriter;

        specialinvoke $r15.<java.io.PrintWriter: void <init>(java.io.Writer)>($r14);

        virtualinvoke $r12.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected exception:");

        $r17 = virtualinvoke $r12.<java.lang.Throwable: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r20 = virtualinvoke $r14.<java.io.StringWriter: java.lang.String toString()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.security.SecurityForbiddenTestCase: void fail(java.lang.String)>($r22);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private java.lang.Object loadClass(java.lang.String, java.lang.ClassLoader)
    {
        org.apache.commons.logging.security.SecurityForbiddenTestCase r0;
        java.lang.String r1, $r8, $r11, $r13;
        java.lang.ClassLoader r2;
        java.lang.Exception $r4;
        java.io.StringWriter $r5;
        java.io.PrintWriter $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;
        java.lang.Class r14;
        java.lang.Object r15;

        r0 := @this: org.apache.commons.logging.security.SecurityForbiddenTestCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

     label1:
        r14 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        r15 = virtualinvoke r14.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return r15;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.StringWriter;

        specialinvoke $r5.<java.io.StringWriter: void <init>()>();

        $r6 = new java.io.PrintWriter;

        specialinvoke $r6.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5);

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected exception:");

        $r8 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.security.SecurityForbiddenTestCase: void fail(java.lang.String)>($r13);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
