public class org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread extends java.lang.Thread
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>(r1);

        return;
    }

    public void run()
    {
        org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread r0;
        org.apache.commons.logging.impl.WeakHashtable $r1;
        java.lang.StringBuilder $r2, $r3;
        int $i0, $i1, i2;
        java.lang.String $r4;
        java.lang.Boolean $r5;

        r0 := @this: org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread;

        i2 = 0;

        goto label3;

     label1:
        $r1 = staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase: org.apache.commons.logging.impl.WeakHashtable access$0()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("key:");

        $i0 = i2 % 10;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r1.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $i1 = i2 % 50;

        if $i1 != 0 goto label2;

        staticinvoke <org.apache.commons.logging.impl.WeakHashtableTestCase$StupidThread: void yield()>();

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < 3000 goto label1;

        return;
    }
}
