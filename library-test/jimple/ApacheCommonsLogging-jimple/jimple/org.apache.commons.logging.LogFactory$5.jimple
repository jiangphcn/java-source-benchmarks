class org.apache.commons.logging.LogFactory$5 extends java.lang.Object implements java.security.PrivilegedAction
{
    private final java.net.URL val$url;

    void <init>(java.net.URL)
    {
        org.apache.commons.logging.LogFactory$5 r0;
        java.net.URL r1;

        r0 := @this: org.apache.commons.logging.LogFactory$5;

        r1 := @parameter0: java.net.URL;

        r0.<org.apache.commons.logging.LogFactory$5: java.net.URL val$url> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object run()
    {
        org.apache.commons.logging.LogFactory$5 r0;
        java.net.URL $r4, $r8, $r13, $r18, $r28;
        java.util.Properties $r5;
        java.io.IOException $r6, $r11, $r16, $r26;
        boolean $z0, $z1, $z2, $z4;
        java.lang.StringBuilder $r7, $r9, $r12, $r14, $r17, $r19, $r27, $r29;
        java.lang.String $r10, $r15, $r20, $r30;
        java.lang.Throwable $r31;
        java.io.InputStream r32;
        java.net.URLConnection r33;

        r0 := @this: org.apache.commons.logging.LogFactory$5;

        r32 = null;

     label01:
        $r4 = r0.<org.apache.commons.logging.LogFactory$5: java.net.URL val$url>;

        r33 = virtualinvoke $r4.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke r33.<java.net.URLConnection: void setUseCaches(boolean)>(0);

        r32 = virtualinvoke r33.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        if r32 == null goto label14;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        virtualinvoke $r5.<java.util.Properties: void load(java.io.InputStream)>(r32);

        virtualinvoke r32.<java.io.InputStream: void close()>();

        r32 = null;

     label02:
        goto label03;

     label03:
        return $r5;

     label04:
        $r16 := @caughtexception;

        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label05;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to read URL ");

        $r18 = r0.<org.apache.commons.logging.LogFactory$5: java.net.URL val$url>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>($r20);

     label05:
        if r32 == null goto label18;

     label06:
        virtualinvoke r32.<java.io.InputStream: void close()>();

     label07:
        goto label18;

     label08:
        $r6 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label18;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to close stream for URL ");

        $r8 = r0.<org.apache.commons.logging.LogFactory$5: java.net.URL val$url>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>($r10);

        goto label18;

     label09:
        $r31 := @caughtexception;

        if r32 == null goto label13;

     label10:
        virtualinvoke r32.<java.io.InputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to close stream for URL ");

        $r13 = r0.<org.apache.commons.logging.LogFactory$5: java.net.URL val$url>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>($r15);

     label13:
        throw $r31;

     label14:
        if r32 == null goto label18;

     label15:
        virtualinvoke r32.<java.io.InputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r26 := @caughtexception;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label18;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to close stream for URL ");

        $r28 = r0.<org.apache.commons.logging.LogFactory$5: java.net.URL val$url>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void access$0(java.lang.String)>($r30);

     label18:
        return null;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label15 to label16 with label17;
    }
}
