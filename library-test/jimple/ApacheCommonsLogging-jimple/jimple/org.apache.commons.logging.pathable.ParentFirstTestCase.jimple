public class org.apache.commons.logging.pathable.ParentFirstTestCase extends junit.framework.TestCase
{

    public void <init>()
    {
        org.apache.commons.logging.pathable.ParentFirstTestCase r0;

        r0 := @this: org.apache.commons.logging.pathable.ParentFirstTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public static junit.framework.Test suite() throws java.lang.Exception
    {
        java.lang.Class r0, r5;
        java.lang.ClassLoader r1;
        org.apache.commons.logging.PathableClassLoader $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.commons.logging.PathableTestSuite $r10;

        r0 = class "org/apache/commons/logging/pathable/ParentFirstTestCase";

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = new org.apache.commons.logging.PathableClassLoader;

        specialinvoke $r6.<org.apache.commons.logging.PathableClassLoader: void <init>(java.lang.ClassLoader)>(null);

        virtualinvoke $r6.<org.apache.commons.logging.PathableClassLoader: void useExplicitLoader(java.lang.String,java.lang.ClassLoader)>("junit.", r1);

        virtualinvoke $r6.<org.apache.commons.logging.PathableClassLoader: void addLogicalLib(java.lang.String)>("commons-logging");

        $r7 = new org.apache.commons.logging.PathableClassLoader;

        specialinvoke $r7.<org.apache.commons.logging.PathableClassLoader: void <init>(java.lang.ClassLoader)>($r6);

        virtualinvoke $r7.<org.apache.commons.logging.PathableClassLoader: void addLogicalLib(java.lang.String)>("testclasses");

        virtualinvoke $r7.<org.apache.commons.logging.PathableClassLoader: void addLogicalLib(java.lang.String)>("commons-logging-adapters");

        $r8 = new org.apache.commons.logging.PathableClassLoader;

        specialinvoke $r8.<org.apache.commons.logging.PathableClassLoader: void <init>(java.lang.ClassLoader)>($r7);

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r5 = virtualinvoke $r7.<org.apache.commons.logging.PathableClassLoader: java.lang.Class loadClass(java.lang.String)>($r9);

        $r10 = new org.apache.commons.logging.PathableTestSuite;

        specialinvoke $r10.<org.apache.commons.logging.PathableTestSuite: void <init>(java.lang.Class,java.lang.ClassLoader)>(r5, $r8);

        return $r10;
    }

    private java.util.Set getAncestorCLs()
    {
        org.apache.commons.logging.pathable.ParentFirstTestCase r0;
        java.util.HashSet $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader r4;

        r0 := @this: org.apache.commons.logging.pathable.ParentFirstTestCase;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        goto label2;

     label1:
        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

        r4 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label2:
        if r4 != null goto label1;

        return $r2;
    }

    public void testPaths() throws java.lang.Exception
    {
        org.apache.commons.logging.pathable.ParentFirstTestCase r0;
        java.lang.ClassLoader r1, r2, r3, r4, $r20, $r25, $r30, $r31, $r32, $r33, $r34;
        java.lang.Class r5, r7, r8, r9, $r11, $r13, $r15, $r16, $r18, $r21, $r23, $r26, $r28, r36, r38;
        java.util.Set r6;
        java.lang.Thread $r10;
        java.lang.String $r12, $r14, $r17, $r19, $r22, $r24, $r27, $r29;
        boolean $z0, $z1;
        java.lang.ClassNotFoundException $r35;

        r0 := @this: org.apache.commons.logging.pathable.ParentFirstTestCase;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Context classloader is null", r1);

        $r11 = class "org/apache/commons/logging/PathableClassLoader";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Context classloader has unexpected type", $r12, $r14);

        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("thisLoader is null", r2);

        $r16 = class "org/apache/commons/logging/PathableClassLoader";

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("thisLoader has unexpected type", $r17, $r19);

        $r20 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Context classloader is not child of thisLoader", r2, $r20);

        r3 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Parent classloader is null", r3);

        $r21 = class "org/apache/commons/logging/PathableClassLoader";

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Parent classloader has unexpected type", $r22, $r24);

        $r25 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNull(java.lang.String,java.lang.Object)>("Parent classloader has non-null parent", $r25);

        r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("System classloader is null", r4);

        $r26 = class "org/apache/commons/logging/PathableClassLoader";

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertFalse(java.lang.String,boolean)>("System classloader has unexpected type", $z0);

        r5 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("junit.framework.Test");

        r6 = specialinvoke r0.<org.apache.commons.logging.pathable.ParentFirstTestCase: java.util.Set getAncestorCLs()>();

        $r30 = virtualinvoke r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z1 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r30);

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertFalse(java.lang.String,boolean)>("Junit not loaded by ancestor classloader", $z1);

        r7 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.commons.logging.Log");

        $r31 = virtualinvoke r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Log class not loaded via parent", $r31, r3);

        r8 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.commons.logging.impl.Log4JLogger");

        $r32 = virtualinvoke r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Log4JLogger not loaded via parent", $r32, r3);

        r9 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.commons.logging.PathableTestSuite");

        $r33 = virtualinvoke r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("PathableTestSuite not loaded via child", $r33, r2);

     label1:
        r36 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("no.such.class");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void fail(java.lang.String)>("Class no.such.class is unexpectedly available");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.Object)>(r36);

     label2:
        goto label4;

     label3:
        $r35 := @caughtexception;

     label4:
        r38 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("java.lang.String");

        $r34 = virtualinvoke r38.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNull(java.lang.String,java.lang.Object)>("String class classloader is not null!", $r34);

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void testResource()
    {
        org.apache.commons.logging.pathable.ParentFirstTestCase r0;
        java.lang.ClassLoader r1, r2;
        java.lang.Thread $r3;
        java.lang.String $r5;
        int $i0;
        java.net.URL r6, r7, r8, r9;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.pathable.ParentFirstTestCase;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        r6 = virtualinvoke r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("nosuchfile");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNull(java.lang.String,java.lang.Object)>("Non-null URL returned for invalid resource name", r6);

        r7 = virtualinvoke r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("org/apache/commons/logging/Log.class");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Unable to locate Log.class resource", r7);

        r8 = virtualinvoke r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("org/apache/commons/logging/PathableTestSuite.class");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Unable to locate PathableTestSuite.class resource", r8);

        r9 = virtualinvoke r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("org/apache/commons/logging/impl/Log4JLogger.class");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Unable to locate Log4JLogger.class resource", r9);

        $r5 = virtualinvoke r9.<java.net.URL: java.lang.String toString()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("/commons-logging-1.");

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertTrue(java.lang.String,boolean)>("Incorrect source for Log4JLogger class", $z0);

        return;
    }

    public void testResources() throws java.lang.Exception
    {
        org.apache.commons.logging.pathable.ParentFirstTestCase r0;
        java.lang.ClassLoader r1, r2, r3, r4;
        java.lang.String[] r5;
        java.lang.Thread $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.net.URL $r7, $r9;
        java.lang.String $r8, $r10, $r11, $r13;
        java.util.Enumeration r15, r17, r19, r21;
        java.net.URL[] r16, r18, r20, r22;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.logging.pathable.ParentFirstTestCase;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        r3 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        r4 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNull(java.lang.String,java.lang.Object)>("Unexpected classloader hierarchy", r4);

        r15 = virtualinvoke r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("nosuchfile");

        r16 = staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: java.net.URL[] toURLArray(java.util.Enumeration)>(r15);

        $i0 = lengthof r16;

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertEquals(java.lang.String,int,int)>("Non-null URL returned for invalid resource name", 0, $i0);

        r17 = virtualinvoke r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("org/apache/commons/logging/Log.class");

        r18 = staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: java.net.URL[] toURLArray(java.util.Enumeration)>(r17);

        $i1 = lengthof r18;

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertEquals(java.lang.String,int,int)>("Unexpected number of Log.class resources found", 1, $i1);

        r19 = virtualinvoke r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("org/apache/commons/logging/PathableTestSuite.class");

        r20 = staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: java.net.URL[] toURLArray(java.util.Enumeration)>(r19);

        $i2 = lengthof r20;

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertEquals(java.lang.String,int,int)>("Unexpected number of PathableTestSuite.class resources found", 1, $i2);

        r21 = virtualinvoke r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("org/apache/commons/logging/impl/Log4JLogger.class");

        r22 = staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: java.net.URL[] toURLArray(java.util.Enumeration)>(r21);

        $i3 = lengthof r22;

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertEquals(java.lang.String,int,int)>("Unexpected number of Log4JLogger.class resources found", 2, $i3);

        r5 = newarray (java.lang.String)[2];

        $r7 = r22[0];

        $r8 = virtualinvoke $r7.<java.net.URL: java.lang.String toString()>();

        r5[0] = $r8;

        $r9 = r22[1];

        $r10 = virtualinvoke $r9.<java.net.URL: java.lang.String toString()>();

        r5[1] = $r10;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r5);

        $r11 = r5[0];

        $i4 = virtualinvoke $r11.<java.lang.String: int indexOf(java.lang.String)>("/commons-logging-1.");

        if $i4 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertTrue(java.lang.String,boolean)>("Incorrect source for Log4JLogger class", $z0);

        $r13 = r5[1];

        $i5 = virtualinvoke $r13.<java.lang.String: int indexOf(java.lang.String)>("/commons-logging-adapters-1.");

        if $i5 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertTrue(java.lang.String,boolean)>("Incorrect source for Log4JLogger class", $z1);

        return;
    }

    private static java.net.URL[] toURLArray(java.util.Enumeration)
    {
        java.util.Enumeration r0;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.Object $r3;
        int $i0;
        java.lang.Object[] $r4;
        java.net.URL[] $r5, r7;
        java.net.URL r6;

        r0 := @parameter0: java.util.Enumeration;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (java.net.URL) $r3;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label2:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        r7 = newarray (java.net.URL)[$i0];

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r7);

        $r5 = (java.net.URL[]) $r4;

        return $r5;
    }

    public void testResourceAsStream() throws java.lang.Exception
    {
        org.apache.commons.logging.pathable.ParentFirstTestCase r0;
        java.lang.ClassLoader r1, r2, r3, r4;
        java.lang.Thread $r5;
        java.io.InputStream r6, r7;

        r0 := @this: org.apache.commons.logging.pathable.ParentFirstTestCase;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        r3 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        r4 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNull(java.lang.String,java.lang.Object)>("Unexpected classloader hierarchy", r4);

        r6 = virtualinvoke r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("nosuchfile");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNull(java.lang.String,java.lang.Object)>("Invalid resource returned non-null stream", r6);

        r7 = virtualinvoke r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("org/apache/commons/logging/Log.class");

        staticinvoke <org.apache.commons.logging.pathable.ParentFirstTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Null returned for valid resource", r7);

        virtualinvoke r7.<java.io.InputStream: void close()>();

        return;
    }
}
