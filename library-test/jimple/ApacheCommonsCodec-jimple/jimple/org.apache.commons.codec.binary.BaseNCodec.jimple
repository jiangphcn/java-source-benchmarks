public abstract class org.apache.commons.codec.binary.BaseNCodec extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder, org.apache.commons.codec.BinaryDecoder
{
    static final int EOF;
    public static final int MIME_CHUNK_SIZE;
    public static final int PEM_CHUNK_SIZE;
    private static final int DEFAULT_BUFFER_RESIZE_FACTOR;
    private static final int DEFAULT_BUFFER_SIZE;
    protected static final int MASK_8BITS;
    protected static final byte PAD_DEFAULT;
    protected final byte PAD;
    protected final byte pad;
    private final int unencodedBlockSize;
    private final int encodedBlockSize;
    protected final int lineLength;
    private final int chunkSeparatorLength;

    protected void <init>(int, int, int, int)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void <init>(int,int,int,int,byte)>(i0, i1, i2, i3, 61);

        return;
    }

    protected void <init>(int, int, int, int, byte)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        int i0, i1, i2, i3, $i5, $i6;
        byte b4;
        boolean $z1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        b4 := @parameter4: byte;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.binary.BaseNCodec: byte PAD> = 61;

        r0.<org.apache.commons.codec.binary.BaseNCodec: int unencodedBlockSize> = i0;

        r0.<org.apache.commons.codec.binary.BaseNCodec: int encodedBlockSize> = i1;

        if i2 <= 0 goto label1;

        if i3 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        $i5 = i2 / i1;

        $i6 = $i5 * i1;

        goto label4;

     label3:
        $i6 = 0;

     label4:
        r0.<org.apache.commons.codec.binary.BaseNCodec: int lineLength> = $i6;

        r0.<org.apache.commons.codec.binary.BaseNCodec: int chunkSeparatorLength> = i3;

        r0.<org.apache.commons.codec.binary.BaseNCodec: byte pad> = b4;

        return;
    }

    boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        org.apache.commons.codec.binary.BaseNCodec$Context r1;
        byte[] $r2;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: org.apache.commons.codec.binary.BaseNCodec$Context;

        $r2 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    int available(org.apache.commons.codec.binary.BaseNCodec$Context)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        org.apache.commons.codec.binary.BaseNCodec$Context r1;
        byte[] $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: org.apache.commons.codec.binary.BaseNCodec$Context;

        $r2 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        if $r2 == null goto label1;

        $i1 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i0 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>;

        $i2 = $i1 - $i0;

        goto label2;

     label1:
        $i2 = 0;

     label2:
        return $i2;
    }

    protected int getDefaultBufferSize()
    {
        org.apache.commons.codec.binary.BaseNCodec r0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        return 8192;
    }

    private byte[] resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        org.apache.commons.codec.binary.BaseNCodec$Context r1;
        byte[] r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: org.apache.commons.codec.binary.BaseNCodec$Context;

        $r3 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        if $r3 != null goto label1;

        $i3 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: int getDefaultBufferSize()>();

        $r8 = newarray (byte)[$i3];

        r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer> = $r8;

        r1.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos> = 0;

        r1.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos> = 0;

        goto label2;

     label1:
        $r4 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        $i0 = lengthof $r4;

        $i1 = $i0 * 2;

        r2 = newarray (byte)[$i1];

        $r6 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        $r5 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, $i2);

        r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer> = r2;

     label2:
        $r7 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        return $r7;
    }

    protected byte[] ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec$Context)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.codec.binary.BaseNCodec$Context r1;
        byte[] $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.codec.binary.BaseNCodec$Context;

        $r2 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        if $r2 == null goto label1;

        $r4 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        $i3 = lengthof $r4;

        $i1 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $i1 + i0;

        if $i3 >= $i2 goto label2;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context)>(r1);

        return $r3;

     label2:
        $r5 = r1.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        return $r5;
    }

    int readResults(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1, $r3, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.commons.codec.binary.BaseNCodec$Context r2;
        boolean $z0;
        byte $b9;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.apache.commons.codec.binary.BaseNCodec$Context;

        $r3 = r2.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        if $r3 == null goto label2;

        $i3 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: int available(org.apache.commons.codec.binary.BaseNCodec$Context)>(r2);

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i1);

        $r4 = r2.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer>;

        $i4 = r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i4, r1, i0, i2);

        $i5 = r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>;

        $i6 = $i5 + i2;

        r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos> = $i6;

        $i8 = r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>;

        $i7 = r2.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        if $i8 < $i7 goto label1;

        r2.<org.apache.commons.codec.binary.BaseNCodec$Context: byte[] buffer> = null;

     label1:
        return i2;

     label2:
        $z0 = r2.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>;

        if $z0 == 0 goto label3;

        $b9 = -1;

        goto label4;

     label3:
        $b9 = 0;

     label4:
        return $b9;
    }

    protected static boolean isWhiteSpace(byte)
    {
        byte b0;

        b0 := @parameter0: byte;

        lookupswitch(b0)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        java.lang.Object r1;
        boolean $z0;
        byte[] $r2, $r3;
        org.apache.commons.codec.EncoderException $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r4.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base-N encode is not a byte[]");

        throw $r4;

     label1:
        $r2 = (byte[]) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])>($r2);

        return $r3;
    }

    public java.lang.String encodeToString(byte[])
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])>(r1);

        $r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r2);

        return $r3;
    }

    public java.lang.String encodeAsString(byte[])
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])>(r1);

        $r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r2);

        return $r3;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.apache.commons.codec.DecoderException $r2;
        java.lang.String $r3;
        byte[] $r4, $r5, $r6;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 == 0 goto label1;

        $r5 = (byte[]) r1;

        $r6 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] decode(byte[])>($r5);

        return $r6;

     label1:
        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r3 = (java.lang.String) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] decode(java.lang.String)>($r3);

        return $r4;

     label2:
        $r2 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r2.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base-N decode is not a byte[] or a String");

        throw $r2;
    }

    public byte[] decode(java.lang.String)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        java.lang.String r1;
        byte[] $r2, $r3;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] decode(byte[])>($r2);

        return $r3;
    }

    public byte[] decode(byte[])
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1, r3;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.codec.binary.BaseNCodec$Context $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $r4 = new org.apache.commons.codec.binary.BaseNCodec$Context;

        specialinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>();

        $i1 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r1, 0, $i1, $r4);

        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r1, 0, -1, $r4);

        $i2 = $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        r3 = newarray (byte)[$i2];

        $i3 = lengthof r3;

        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r3, 0, $i3, $r4);

        return r3;
    }

    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.codec.binary.BaseNCodec$Context $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $r4 = new org.apache.commons.codec.binary.BaseNCodec$Context;

        specialinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>();

        $i1 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r1, 0, $i1, $r4);

        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r1, 0, -1, $r4);

        $i3 = $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: int pos>;

        $i2 = $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: int readPos>;

        $i4 = $i3 - $i2;

        r3 = newarray (byte)[$i4];

        $i5 = lengthof r3;

        virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r3, 0, $i5, $r4);

        return r3;
    }

    abstract void encode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context);

    abstract void decode(byte[], int, int, org.apache.commons.codec.binary.BaseNCodec$Context);

    protected abstract boolean isInAlphabet(byte);

    public boolean isInAlphabet(byte[], boolean)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1;
        boolean z0, $z1, $z2;
        byte $b0, $b1, $b2, $b3;
        int i4, $i5;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        i4 = 0;

        goto label4;

     label1:
        $b0 = r1[i4];

        $z1 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>($b0);

        if $z1 != 0 goto label3;

        if z0 == 0 goto label2;

        $b2 = r1[i4];

        $b1 = r0.<org.apache.commons.codec.binary.BaseNCodec: byte pad>;

        if $b2 == $b1 goto label3;

        $b3 = r1[i4];

        $z2 = staticinvoke <org.apache.commons.codec.binary.BaseNCodec: boolean isWhiteSpace(byte)>($b3);

        if $z2 != 0 goto label3;

     label2:
        return 0;

     label3:
        i4 = i4 + 1;

     label4:
        $i5 = lengthof r1;

        if i4 < $i5 goto label1;

        return 1;
    }

    public boolean isInAlphabet(java.lang.String)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        java.lang.String r1;
        byte[] $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r2, 1);

        return $z0;
    }

    protected boolean containsAlphabetOrPad(byte[])
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1;
        byte b0, $b2;
        int i1, i3;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        return 0;

     label1:
        i1 = lengthof r1;

        i3 = 0;

        goto label5;

     label2:
        b0 = r1[i3];

        $b2 = r0.<org.apache.commons.codec.binary.BaseNCodec: byte pad>;

        if $b2 == b0 goto label3;

        $z0 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(b0);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        i3 = i3 + 1;

     label5:
        if i3 < i1 goto label2;

        return 0;
    }

    public long getEncodedLength(byte[])
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10, $i13, $i16;
        long $l7, $l8, $l11, $l12, $l14, $l15, $l17, $l18, $l19, l20;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodec;

        r1 := @parameter0: byte[];

        $i1 = lengthof r1;

        $i0 = r0.<org.apache.commons.codec.binary.BaseNCodec: int unencodedBlockSize>;

        $i2 = $i1 + $i0;

        $i4 = $i2 - 1;

        $i3 = r0.<org.apache.commons.codec.binary.BaseNCodec: int unencodedBlockSize>;

        $i5 = $i4 / $i3;

        $l8 = (long) $i5;

        $i6 = r0.<org.apache.commons.codec.binary.BaseNCodec: int encodedBlockSize>;

        $l7 = (long) $i6;

        l20 = $l8 * $l7;

        $i9 = r0.<org.apache.commons.codec.binary.BaseNCodec: int lineLength>;

        if $i9 <= 0 goto label1;

        $i10 = r0.<org.apache.commons.codec.binary.BaseNCodec: int lineLength>;

        $l11 = (long) $i10;

        $l12 = l20 + $l11;

        $l15 = $l12 - 1L;

        $i13 = r0.<org.apache.commons.codec.binary.BaseNCodec: int lineLength>;

        $l14 = (long) $i13;

        $l18 = $l15 / $l14;

        $i16 = r0.<org.apache.commons.codec.binary.BaseNCodec: int chunkSeparatorLength>;

        $l17 = (long) $i16;

        $l19 = $l18 * $l17;

        l20 = l20 + $l19;

     label1:
        return l20;
    }

    public static void <clinit>()
    {
        <org.apache.commons.codec.binary.BaseNCodec: byte PAD_DEFAULT> = 61;

        <org.apache.commons.codec.binary.BaseNCodec: int MASK_8BITS> = 255;

        <org.apache.commons.codec.binary.BaseNCodec: int DEFAULT_BUFFER_SIZE> = 8192;

        <org.apache.commons.codec.binary.BaseNCodec: int DEFAULT_BUFFER_RESIZE_FACTOR> = 2;

        <org.apache.commons.codec.binary.BaseNCodec: int PEM_CHUNK_SIZE> = 64;

        <org.apache.commons.codec.binary.BaseNCodec: int MIME_CHUNK_SIZE> = 76;

        <org.apache.commons.codec.binary.BaseNCodec: int EOF> = -1;

        return;
    }
}
