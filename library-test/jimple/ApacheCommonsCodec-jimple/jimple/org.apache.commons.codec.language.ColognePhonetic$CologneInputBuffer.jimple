class org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer extends org.apache.commons.codec.language.ColognePhonetic$CologneBuffer
{
    final org.apache.commons.codec.language.ColognePhonetic this$0;

    public void <init>(org.apache.commons.codec.language.ColognePhonetic, char[])
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer r0;
        org.apache.commons.codec.language.ColognePhonetic r1;
        char[] r2;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer;

        r1 := @parameter0: org.apache.commons.codec.language.ColognePhonetic;

        r2 := @parameter1: char[];

        r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: org.apache.commons.codec.language.ColognePhonetic this$0> = r1;

        specialinvoke r0.<org.apache.commons.codec.language.ColognePhonetic$CologneBuffer: void <init>(org.apache.commons.codec.language.ColognePhonetic,char[])>(r1, r2);

        return;
    }

    public void addLeft(char)
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer r0;
        char c0;
        int $i1, $i2, $i3;
        char[] $r1;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer;

        c0 := @parameter0: char;

        $i1 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length>;

        $i2 = $i1 + 1;

        r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length> = $i2;

        $r1 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>;

        $i3 = virtualinvoke r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int getNextPos()>();

        $r1[$i3] = c0;

        return;
    }

    protected char[] copyData(int, int)
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        char[] r1, $r2, $r3;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = newarray (char)[i1];

        $r3 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>;

        $r2 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>;

        $i3 = lengthof $r2;

        $i2 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length>;

        $i4 = $i3 - $i2;

        $i5 = $i4 + i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, r1, 0, i1);

        return r1;
    }

    public char getNextChar()
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer r0;
        char[] $r1;
        int $i0;
        char $c1;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer;

        $r1 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>;

        $i0 = virtualinvoke r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int getNextPos()>();

        $c1 = $r1[$i0];

        return $c1;
    }

    protected int getNextPos()
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer r0;
        char[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer;

        $r1 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char[] data>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public char removeNext()
    {
        org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer r0;
        char c0;
        int $i1, $i2;

        r0 := @this: org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer;

        c0 = virtualinvoke r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: char getNextChar()>();

        $i1 = r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length>;

        $i2 = $i1 - 1;

        r0.<org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer: int length> = $i2;

        return c0;
    }
}
