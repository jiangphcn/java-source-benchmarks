public class org.apache.commons.codec.binary.Base32TestData extends java.lang.Object
{
    static final java.lang.String STRING_FIXTURE;
    static final java.lang.String BASE32_FIXTURE;
    private static final int SIZE_KEY;
    private static final int LAST_READ_KEY;

    public void <init>()
    {
        org.apache.commons.codec.binary.Base32TestData r0;

        r0 := @this: org.apache.commons.codec.binary.Base32TestData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[] streamToBytes(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] $r1, $r2;

        r0 := @parameter0: java.io.InputStream;

        $r1 = newarray (byte)[7];

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[] streamToBytes(java.io.InputStream,byte[])>(r0, $r1);

        return $r2;
    }

    static byte[] streamToBytes(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1, r4;
        int $i0, i1, i2;
        java.lang.Throwable $r3;
        int[] r5, r6;

        r0 := @parameter0: java.io.InputStream;

        r4 := @parameter1: byte[];

     label1:
        r5 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: int[] fill(byte[],int,java.io.InputStream)>(r4, 0, r0);

        i1 = r5[0];

        i2 = r5[1];

        goto label3;

     label2:
        r4 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[] resizeArray(byte[])>(r4);

        r6 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: int[] fill(byte[],int,java.io.InputStream)>(r4, i1, r0);

        i1 = r6[0];

        i2 = r6[1];

     label3:
        if i2 != -1 goto label2;

        $i0 = lengthof r4;

        if $i0 == i1 goto label5;

        r1 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, 0, i1);

        r4 = r1;

        goto label5;

     label4:
        $r3 := @caughtexception;

        virtualinvoke r0.<java.io.InputStream: void close()>();

        throw $r3;

     label5:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        return r4;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    private static int[] fill(byte[], int, java.io.InputStream) throws java.io.IOException
    {
        byte[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.io.InputStream r1;
        int[] $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.io.InputStream;

        $i1 = lengthof r0;

        $i2 = $i1 - i0;

        i10 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, i0, $i2);

        i11 = i10;

        if i10 != -1 goto label2;

        i10 = 0;

        goto label2;

     label1:
        $i9 = i0 + i10;

        $i6 = lengthof r0;

        $i7 = $i6 - i10;

        $i8 = $i7 - i0;

        i11 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, $i9, $i8);

        if i11 == -1 goto label2;

        i10 = i10 + i11;

     label2:
        if i11 == -1 goto label3;

        $i5 = i10 + i0;

        $i4 = lengthof r0;

        if $i5 < $i4 goto label1;

     label3:
        $r2 = newarray (int)[2];

        $i3 = i0 + i10;

        $r2[0] = $i3;

        $r2[1] = i11;

        return $r2;
    }

    private static byte[] resizeArray(byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 * 2;

        r1 = newarray (byte)[$i1];

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;
    }

    static byte[][] randomData(org.apache.commons.codec.binary.BaseNCodec, int)
    {
        org.apache.commons.codec.binary.BaseNCodec r0;
        int i0;
        byte[] r2, r3;
        java.util.Random $r4;
        byte[][] $r5;

        r0 := @parameter0: org.apache.commons.codec.binary.BaseNCodec;

        i0 := @parameter1: int;

        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        r2 = newarray (byte)[i0];

        virtualinvoke $r4.<java.util.Random: void nextBytes(byte[])>(r2);

        r3 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])>(r2);

        $r5 = newarray (byte[])[2];

        $r5[0] = r2;

        $r5[1] = r3;

        return $r5;
    }

    static boolean bytesContain(byte[], byte)
    {
        byte[] r0;
        byte b0, b1;
        int i2, i3;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        i2 = lengthof r0;

        i3 = 0;

        goto label3;

     label1:
        b1 = r0[i3];

        if b1 != b0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i2 goto label1;

        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.codec.binary.Base32TestData: int LAST_READ_KEY> = 1;

        <org.apache.commons.codec.binary.Base32TestData: int SIZE_KEY> = 0;

        <org.apache.commons.codec.binary.Base32TestData: java.lang.String BASE32_FIXTURE> = "JBSWY3DPEBLW64TMMQ======\r\n";

        <org.apache.commons.codec.binary.Base32TestData: java.lang.String STRING_FIXTURE> = "Hello World";

        return;
    }
}
