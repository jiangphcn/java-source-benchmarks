public class org.apache.commons.codec.binary.Base64Test extends java.lang.Object
{
    private final java.util.Random random;

    public void <init>()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.util.Random $r1;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.apache.commons.codec.binary.Base64Test: java.util.Random random> = $r1;

        return;
    }

    public java.util.Random getRandom()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.util.Random $r1;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = r0.<org.apache.commons.codec.binary.Base64Test: java.util.Random random>;

        return $r1;
    }

    public void testIsStringBase64()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        boolean $z0, $z1, $z2;
        java.lang.NullPointerException $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

     label1:
        staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Base64.isStringBase64() should not be null-safe.");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Base64.isStringBase64() should not be null-safe.", $r2);

     label4:
        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Base64.isStringBase64(empty-string) is true", $z0);

        $z1 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(java.lang.String)>("abc===defg\n\r123456\r789\r\rABC\n\nDEF==GHI\r\nJKL==============");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Base64.isStringBase64(valid-string) is true", $z1);

        $z2 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(java.lang.String)>("abc===defg\n\r123456\r789\r\rABC\n\nDEF==GHI\r\nJKL==============\u0000");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Base64.isStringBase64(invalid-string) is false", $z2);

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testBase64()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, $r4, $r6, $r8, r9, r12, r15;
        java.lang.String r3, r10, r13, r16;
        org.apache.commons.codec.binary.Base64 $r5, $r7;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r4);

        r10 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("encoding hello world", "SGVsbG8gV29ybGQ=", r10);

        $r5 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(76, null);

        $r6 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r12 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r6);

        r13 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("encoding hello world", "SGVsbG8gV29ybGQ=", r13);

        $r7 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r7.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(0, null);

        $r8 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r15 = virtualinvoke $r7.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r8);

        r16 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("encoding hello world", "SGVsbG8gV29ybGQ=", r16);

        r2 = virtualinvoke $r7.<org.apache.commons.codec.binary.Base64: byte[] decode(java.lang.String)>("SGVsbG{\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9}8gV29ybGQ=");

        r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("decode hello world", "Hello World", r3);

        return;
    }

    public void testDecodeWithInnerPad()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, r3;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ=");

        r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("decode should halt at pad (=)", $z0);

        return;
    }

    public void testChunkedEncodeMultipleOf76()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r1, r3, $r4;
        java.lang.String r2, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r4 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($r4, 1);

        $r5 = "9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9xA7c/FHypWcl\nrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+qBpTsPpepW8DNVYy1c02/1wy\nC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYdivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6\n+WAELKvm/UovvyaOi+OdMUfjQ0JLiLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQd\ngciIHnpdd4VUTPGRUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+K\nZJSoAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/Qoqf92UH\n/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp251IUxBGA4cUxh0eaxk3OD\nWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1thMavm4nDc4vaNoSE1RnZNYwbiUVlVPM\n9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjv\nB5MYQlOlaaTtQrRApXa5Z4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKW\nC3KuiOS9BJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvfDnqi\ncYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK++S7Y0VXUgoYYrBV4\nY7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUElepjs1QdV3fEV1LJtiywA3ubVNQJ\nRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35IcaOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p\n088l3/93qGR5593NCiuPPWcsDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2\nWcypAiOIEkBsH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG/6YAHZilo8at\n0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq3CLZXdZFZ/VrqXeVjtOAu2A=\n";

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "\r\n");

        r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r2);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("chunkedEncodeMultipleOf76", $z0);

        return;
    }

    public void testCodec68()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r2 = newarray (byte)[5];

        $r2[0] = 110;

        $r2[1] = 65;

        $r2[2] = 61;

        $r2[3] = 61;

        $r2[4] = -100;

        staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r2);

        return;
    }

    public void testCodeInteger1()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.math.BigInteger $r3, $r9;
        java.lang.String $r4, $r7;
        byte[] $r5, $r8;
        java.nio.charset.Charset $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.lang.String)>("857393771208094202104259627990318636601332086981");

        $r4 = new java.lang.String;

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeInteger(java.math.BigInteger)>($r3);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("li7dzDacuo67Jg7mtqEm2TRuOMU=", $r4);

        $r7 = "li7dzDacuo67Jg7mtqEm2TRuOMU=";

        $r6 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: java.math.BigInteger decodeInteger(byte[])>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r9);

        return;
    }

    public void testCodeInteger2()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.math.BigInteger $r3, $r9;
        java.lang.String $r4, $r7;
        byte[] $r5, $r8;
        java.nio.charset.Charset $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.lang.String)>("1393672757286116725466646726891466679477132949611");

        $r4 = new java.lang.String;

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeInteger(java.math.BigInteger)>($r3);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("9B5ypLY9pMOmtxCeTDHgwdNFeGs=", $r4);

        $r7 = "9B5ypLY9pMOmtxCeTDHgwdNFeGs=";

        $r6 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: java.math.BigInteger decodeInteger(byte[])>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r9);

        return;
    }

    public void testCodeInteger3()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.math.BigInteger $r3, $r9;
        java.lang.String $r4, $r7;
        byte[] $r5, $r8;
        java.nio.charset.Charset $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.lang.String)>("1080654815409387346195174854511969891364164488058190793635243098977490449581124171362405574495062430572478766856090958495998158114332651671116876320938126");

        $r4 = new java.lang.String;

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeInteger(java.math.BigInteger)>($r3);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==", $r4);

        $r7 = "FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==";

        $r6 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: java.math.BigInteger decodeInteger(byte[])>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r9);

        return;
    }

    public void testCodeInteger4()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.math.BigInteger $r3, $r9;
        java.lang.String $r4, $r7;
        byte[] $r5, $r8;
        java.nio.charset.Charset $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.lang.String)>("80624726256040348115552042320696813500187275370942441977258669395023235020055564647117594451929708788598704081077890850726227289270230377442285367559774800853404089092381420228663316324808605521697655145608801533888071381819208887705771753016938104409283940243801509765453542091716518238707344493641683483917");

        $r4 = new java.lang.String;

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeInteger(java.math.BigInteger)>($r3);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3oDzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYvQ0=", $r4);

        $r7 = "ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3oDzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYvQ0=";

        $r6 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: java.math.BigInteger decodeInteger(byte[])>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r9);

        return;
    }

    public void testCodeIntegerEdgeCases()
    {
        org.apache.commons.codec.binary.Base64Test r0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        return;
    }

    public void testCodeIntegerNull()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.Exception $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

     label1:
        staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeInteger(java.math.BigInteger)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception not thrown when passing in null to encodeInteger(BigInteger)");

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Incorrect Exception caught when passing in null to encodeInteger(BigInteger)");

     label5:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public void testConstructors()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        org.apache.commons.codec.binary.Base64 $r1, $r2, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        byte[] $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        java.lang.IllegalArgumentException $r19, $r20, $r21, $r22;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r1.<org.apache.commons.codec.binary.Base64: void <init>()>();

        $r2 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r2.<org.apache.commons.codec.binary.Base64: void <init>(int)>(-1);

        $r3 = new org.apache.commons.codec.binary.Base64;

        $r4 = newarray (byte)[0];

        specialinvoke $r3.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(-1, $r4);

        $r5 = new org.apache.commons.codec.binary.Base64;

        $r6 = newarray (byte)[0];

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(64, $r6);

     label01:
        $r7 = new org.apache.commons.codec.binary.Base64;

        $r8 = newarray (byte)[1];

        $r8[0] = 65;

        specialinvoke $r7.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(-1, $r8);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should have rejected attempt to use \'A\' as a line separator");

     label02:
        goto label04;

     label03:
        $r19 := @caughtexception;

     label04:
        $r9 = new org.apache.commons.codec.binary.Base64;

        $r10 = newarray (byte)[1];

        $r10[0] = 65;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(64, $r10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should have rejected attempt to use \'A\' as a line separator");

     label05:
        goto label07;

     label06:
        $r22 := @caughtexception;

     label07:
        $r11 = new org.apache.commons.codec.binary.Base64;

        $r12 = newarray (byte)[1];

        $r12[0] = 61;

        specialinvoke $r11.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(64, $r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should have rejected attempt to use \'=\' as a line separator");

     label08:
        goto label10;

     label09:
        $r21 := @caughtexception;

     label10:
        $r13 = new org.apache.commons.codec.binary.Base64;

        $r14 = newarray (byte)[1];

        $r14[0] = 36;

        specialinvoke $r13.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(64, $r14);

     label11:
        $r15 = new org.apache.commons.codec.binary.Base64;

        $r16 = newarray (byte)[2];

        $r16[0] = 65;

        $r16[1] = 36;

        specialinvoke $r15.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(64, $r16);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should have rejected attempt to use \'A$\' as a line separator");

     label12:
        goto label14;

     label13:
        $r20 := @caughtexception;

     label14:
        $r17 = new org.apache.commons.codec.binary.Base64;

        $r18 = newarray (byte)[5];

        $r18[0] = 32;

        $r18[1] = 36;

        $r18[2] = 10;

        $r18[3] = 13;

        $r18[4] = 9;

        specialinvoke $r17.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(64, $r18);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    public void testConstructor_Int_ByteArray_Boolean()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, $r5, $r6;
        java.lang.String r3, r7, r8;
        org.apache.commons.codec.binary.Base64 $r4;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r4 = new org.apache.commons.codec.binary.Base64;

        $r5 = newarray (byte)[1];

        $r5[0] = 9;

        specialinvoke $r4.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(65, $r5, 0);

        $r6 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        r2 = virtualinvoke $r4.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r6);

        r7 = "9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n";

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String replace(char,char)>(10, 9);

        r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("new Base64(65, \\t, false)", r8, r3);

        return;
    }

    public void testConstructor_Int_ByteArray_Boolean_UrlSafe()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, $r5, $r6;
        java.lang.String r3, r7, r8, r9, r10, r11;
        org.apache.commons.codec.binary.Base64 $r4;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r4 = new org.apache.commons.codec.binary.Base64;

        $r5 = newarray (byte)[1];

        $r5[0] = 9;

        specialinvoke $r4.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[],boolean)>(64, $r5, 1);

        $r6 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        r2 = virtualinvoke $r4.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r6);

        r7 = "9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n";

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("=", "");

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String replace(char,char)>(10, 9);

        r10 = virtualinvoke r9.<java.lang.String: java.lang.String replace(char,char)>(43, 45);

        r11 = virtualinvoke r10.<java.lang.String: java.lang.String replace(char,char)>(47, 95);

        r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("new Base64(64, \\t, true)", r3, r11);

        return;
    }

    public void testDecodePadMarkerIndex2()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r3;
        java.nio.charset.Charset $r2;
        byte[] $r4, $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r3 = "QQ==";

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r4);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("A", $r1);

        return;
    }

    public void testDecodePadMarkerIndex3()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r3, $r6, $r8;
        java.nio.charset.Charset $r2, $r7;
        byte[] $r4, $r5, $r9, $r10;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r3 = "QUE=";

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r4);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AA", $r1);

        $r6 = new java.lang.String;

        $r8 = "QUFB";

        $r7 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        $r10 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r9);

        specialinvoke $r6.<java.lang.String: void <init>(byte[])>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA", $r6);

        return;
    }

    public void testDecodePadOnly()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.nio.charset.Charset $r1, $r6, $r10, $r14, $r18, $r22;
        java.lang.String $r2, $r5, $r7, $r11, $r15, $r19, $r23;
        byte[] $r3, $r4, $r8, $r9, $r12, $r13, $r16, $r17, $r20, $r21, $r24, $r25;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r2 = "====";

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r4 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r3);

        $i0 = lengthof $r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r5 = new java.lang.String;

        $r7 = "====";

        $r6 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r8);

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r5);

        $r11 = "===";

        $r10 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10);

        $r13 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r12);

        $i2 = lengthof $r13;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $r15 = "==";

        $r14 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r16 = virtualinvoke $r15.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r14);

        $r17 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r16);

        $i4 = lengthof $r17;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r19 = "=";

        $r18 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r20 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r18);

        $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r20);

        $i6 = lengthof $r21;

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r23 = "";

        $r22 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r24 = virtualinvoke $r23.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r22);

        $r25 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r24);

        $i8 = lengthof $r25;

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        return;
    }

    public void testDecodePadOnlyChunked()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.nio.charset.Charset $r1, $r6, $r10, $r14, $r18, $r22;
        java.lang.String $r2, $r5, $r7, $r11, $r15, $r19, $r23;
        byte[] $r3, $r4, $r8, $r9, $r12, $r13, $r16, $r17, $r20, $r21, $r24, $r25;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r2 = "====\n";

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r4 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r3);

        $i0 = lengthof $r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r5 = new java.lang.String;

        $r7 = "====\n";

        $r6 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r8);

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r5);

        $r11 = "===\n";

        $r10 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10);

        $r13 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r12);

        $i2 = lengthof $r13;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $r15 = "==\n";

        $r14 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r16 = virtualinvoke $r15.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r14);

        $r17 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r16);

        $i4 = lengthof $r17;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r19 = "=\n";

        $r18 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r20 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r18);

        $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r20);

        $i6 = lengthof $r21;

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r23 = "\n";

        $r22 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r24 = virtualinvoke $r23.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r22);

        $r25 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r24);

        $i8 = lengthof $r25;

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        return;
    }

    public void testDecodeWithWhitespace() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, r4, r5, $r9;
        java.nio.charset.Charset $r7, $r17;
        java.lang.String $r8, $r11, $r16, $r18;
        java.lang.StringBuilder $r10;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r8 = "I am a late night coder.";

        $r7 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r9);

        $r10 = new java.lang.StringBuilder;

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>(r2);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(2, 32);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(5, 9);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(10, 13);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(15, 10);

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        r4 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17);

        r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r4);

        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(byte[])>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Dest string doesn\'t equal the original", "I am a late night coder.", $r18);

        return;
    }

    public void testEmptyBase64()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        int $i0, $i2;
        long $l1, $l3;
        byte[] $r1, $r2, r3, r4, r5, r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r3 = newarray (byte)[0];

        r4 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(r3);

        $i0 = lengthof r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("empty base64 encode", 0L, $l1);

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty base64 encode", null, $r1);

        r5 = newarray (byte)[0];

        r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r5);

        $i2 = lengthof r6;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("empty base64 decode", 0L, $l3);

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty base64 encode", null, $r2);

        return;
    }

    public void testEncodeDecodeRandom()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r1, r2, r3;
        java.util.Random $r4, $r5;
        int $i0, $i1, i2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        i2 = 1;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64Test: java.util.Random getRandom()>();

        $i0 = virtualinvoke $r4.<java.util.Random: int nextInt(int)>(10000);

        $i1 = $i0 + 1;

        r1 = newarray (byte)[$i1];

        $r5 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64Test: java.util.Random getRandom()>();

        virtualinvoke $r5.<java.util.Random: void nextBytes(byte[])>(r1);

        r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(r1);

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r2);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        i2 = i2 + 1;

     label2:
        if i2 < 5 goto label1;

        return;
    }

    public void testEncodeDecodeSmall()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r1, r2, r3;
        java.util.Random $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r13, $r15;
        java.lang.String $r6, $r9, $r11, $r12, $r14, $r16;
        boolean $z0, $z1;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        i0 = 0;

        goto label2;

     label1:
        r1 = newarray (byte)[i0];

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64Test: java.util.Random getRandom()>();

        virtualinvoke $r4.<java.util.Random: void nextBytes(byte[])>(r1);

        r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(r1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("\"");

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(byte[])>(r2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is Base64 data.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r9, $z0);

        r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r2);

        $r10 = new java.lang.StringBuilder;

        $r11 = specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: java.lang.String toString(byte[])>(r1);

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" equals ");

        $r14 = specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: java.lang.String toString(byte[])>(r3);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r16, $z1);

        i0 = i0 + 1;

     label2:
        if i0 < 12 goto label1;

        return;
    }

    public void testEncodeOverMaxSize() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeOverMaxSize(int)>(-1);

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeOverMaxSize(int)>(0);

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeOverMaxSize(int)>(1);

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeOverMaxSize(int)>(2);

        return;
    }

    public void testCodec112()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r1, r2;
        int $i0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r1 = newarray (byte)[1];

        r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(r1);

        $i0 = lengthof r2;

        staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean,int)>(r1, 0, 0, $i0);

        return;
    }

    private void testEncodeOverMaxSize(int) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        int i0;
        byte[] $r2;
        java.lang.StringBuilder $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        i0 := @parameter0: int;

     label1:
        $r2 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean,int)>($r2, 1, 0, i0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected ");

        $r5 = class "java/lang/IllegalArgumentException";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIgnoringNonBase64InDecode() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r3;
        java.nio.charset.Charset $r2;
        byte[] $r4, $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r3 = "VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==";

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r4);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("The quick brown fox jumped over the lazy dogs.", $r1);

        return;
    }

    public void testIsArrayByteBase64()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = newarray (byte)[1];

        $r1[0] = -128;

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r2 = newarray (byte)[1];

        $r2[0] = -125;

        $z1 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r3 = newarray (byte)[1];

        $r3[0] = -10;

        $z2 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r4 = newarray (byte)[1];

        $z3 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r5 = newarray (byte)[2];

        $r5[0] = 64;

        $r5[1] = 127;

        $z4 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $r6 = newarray (byte)[1];

        $r6[0] = 127;

        $z5 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $r7 = newarray (byte)[1];

        $r7[0] = 65;

        $z6 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r8 = newarray (byte)[2];

        $r8[0] = 65;

        $r8[1] = -128;

        $z7 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        $r9 = newarray (byte)[3];

        $r9[0] = 65;

        $r9[1] = 90;

        $r9[2] = 97;

        $z8 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r10 = newarray (byte)[3];

        $r10[0] = 47;

        $r10[1] = 61;

        $r10[2] = 43;

        $z9 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r11 = newarray (byte)[1];

        $r11[0] = 36;

        $z10 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r11);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z10);

        return;
    }

    public void testIsUrlSafe()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        org.apache.commons.codec.binary.Base64 $r4, $r5;
        boolean $z0, $z1, $z2;
        byte[] $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r4 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r4.<org.apache.commons.codec.binary.Base64: void <init>(boolean)>(0);

        $r5 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64: void <init>(boolean)>(1);

        $z0 = virtualinvoke $r4.<org.apache.commons.codec.binary.Base64: boolean isUrlSafe()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Base64.isUrlSafe=false", $z0);

        $z1 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: boolean isUrlSafe()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Base64.isUrlSafe=true", $z1);

        $r6 = newarray (byte)[4];

        $r6[0] = 32;

        $r6[1] = 10;

        $r6[2] = 13;

        $r6[3] = 9;

        $z2 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Base64.isBase64(whiteSpace)=true", $z2);

        return;
    }

    public void testKnownDecodings()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r3, $r6, $r8, $r11, $r13, $r16, $r18, $r21, $r23, $r26, $r28;
        java.nio.charset.Charset $r2, $r7, $r12, $r17, $r22, $r27;
        byte[] $r4, $r5, $r9, $r10, $r14, $r15, $r19, $r20, $r24, $r25, $r29, $r30;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r3 = "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==";

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r4);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("The quick brown fox jumped over the lazy dogs.", $r1);

        $r6 = new java.lang.String;

        $r8 = "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==";

        $r7 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        $r10 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r9);

        specialinvoke $r6.<java.lang.String: void <init>(byte[])>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("It was the best of times, it was the worst of times.", $r6);

        $r11 = new java.lang.String;

        $r13 = "aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==";

        $r12 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r14 = virtualinvoke $r13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r12);

        $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r14);

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("http://jakarta.apache.org/commmons", $r11);

        $r16 = new java.lang.String;

        $r18 = "QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==";

        $r17 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r19 = virtualinvoke $r18.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17);

        $r20 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r19);

        specialinvoke $r16.<java.lang.String: void <init>(byte[])>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", $r16);

        $r21 = new java.lang.String;

        $r23 = "eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=";

        $r22 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r24 = virtualinvoke $r23.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r22);

        $r25 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r24);

        specialinvoke $r21.<java.lang.String: void <init>(byte[])>($r25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }", $r21);

        $r26 = new java.lang.String;

        $r28 = "eHl6enkh";

        $r27 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r29 = virtualinvoke $r28.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r27);

        $r30 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r29);

        specialinvoke $r26.<java.lang.String: void <init>(byte[])>($r30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xyzzy!", $r26);

        return;
    }

    public void testKnownEncodings()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r3, $r6, $r8, $r11, $r13, $r16, $r18, $r21, $r23, $r26, $r28, $r31, $r33;
        java.nio.charset.Charset $r2, $r7, $r12, $r17, $r22, $r27, $r32;
        byte[] $r4, $r5, $r9, $r10, $r14, $r15, $r19, $r20, $r24, $r25, $r29, $r30, $r34, $r35;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r3 = "The quick brown fox jumped over the lazy dogs.";

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r4);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==", $r1);

        $r6 = new java.lang.String;

        $r8 = "blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah";

        $r7 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        $r10 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r9);

        specialinvoke $r6.<java.lang.String: void <init>(byte[])>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n", $r6);

        $r11 = new java.lang.String;

        $r13 = "It was the best of times, it was the worst of times.";

        $r12 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r14 = virtualinvoke $r13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r12);

        $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r14);

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==", $r11);

        $r16 = new java.lang.String;

        $r18 = "http://jakarta.apache.org/commmons";

        $r17 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r19 = virtualinvoke $r18.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17);

        $r20 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r19);

        specialinvoke $r16.<java.lang.String: void <init>(byte[])>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==", $r16);

        $r21 = new java.lang.String;

        $r23 = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";

        $r22 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r24 = virtualinvoke $r23.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r22);

        $r25 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r24);

        specialinvoke $r21.<java.lang.String: void <init>(byte[])>($r25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==", $r21);

        $r26 = new java.lang.String;

        $r28 = "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }";

        $r27 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r29 = virtualinvoke $r28.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r27);

        $r30 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r29);

        specialinvoke $r26.<java.lang.String: void <init>(byte[])>($r30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=", $r26);

        $r31 = new java.lang.String;

        $r33 = "xyzzy!";

        $r32 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r34 = virtualinvoke $r33.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r32);

        $r35 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r34);

        specialinvoke $r31.<java.lang.String: void <init>(byte[])>($r35);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("eHl6enkh", $r31);

        return;
    }

    public void testNonBase64Test() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, $r3;
        boolean $z0;
        org.apache.commons.codec.binary.Base64 $r4;
        int $i0;
        long $l1;
        java.lang.Exception $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = newarray (byte)[1];

        $r3[0] = 37;

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte[])>($r3);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Invalid Base64 array was incorrectly validated as an array of Base64 encoded data", $z0);

     label1:
        $r4 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r4.<org.apache.commons.codec.binary.Base64: void <init>()>();

        r2 = virtualinvoke $r4.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>($r3);

        $i0 = lengthof r2;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The result should be empty as the test encoded content did not contain any valid base 64 characters", 0L, $l1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception was thrown when trying to decode invalid base64 encoded data - RFC 2045 requires that all non base64 character be discarded, an exception should not have been thrown");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testObjectDecodeWithInvalidParameter() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        org.apache.commons.codec.binary.Base64 $r3;
        java.lang.Integer $r4;
        org.apache.commons.codec.DecoderException $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r3.<org.apache.commons.codec.binary.Base64: void <init>()>();

     label1:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        virtualinvoke $r3.<org.apache.commons.codec.binary.Base64: java.lang.Object decode(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("decode(Object) didn\'t throw an exception when passed an Integer object");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public void testObjectDecodeWithValidParameter() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, r5, $r9;
        java.lang.Object r4;
        java.nio.charset.Charset $r7;
        java.lang.String $r8, $r11;
        org.apache.commons.codec.binary.Base64 $r10;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r8 = "Hello World!";

        $r7 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r9);

        $r10 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r10.<org.apache.commons.codec.binary.Base64: void <init>()>();

        r4 = virtualinvoke $r10.<org.apache.commons.codec.binary.Base64: java.lang.Object decode(java.lang.Object)>(r2);

        r5 = (byte[]) r4;

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("dest string does not equal original", "Hello World!", $r11);

        return;
    }

    public void testObjectEncodeWithInvalidParameter() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        org.apache.commons.codec.binary.Base64 $r3;
        org.apache.commons.codec.EncoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r3.<org.apache.commons.codec.binary.Base64: void <init>()>();

     label1:
        virtualinvoke $r3.<org.apache.commons.codec.binary.Base64: java.lang.Object encode(java.lang.Object)>("Yadayadayada");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("encode(Object) didn\'t throw an exception when passed a String object");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch org.apache.commons.codec.EncoderException from label1 to label2 with label3;
    }

    public void testObjectEncodeWithValidParameter() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, r5, $r10;
        java.lang.Object r4;
        java.nio.charset.Charset $r7;
        java.lang.String $r8, $r11;
        org.apache.commons.codec.binary.Base64 $r9;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r8 = "Hello World!";

        $r7 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        r2 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        $r9 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base64: void <init>()>();

        r4 = virtualinvoke $r9.<org.apache.commons.codec.binary.Base64: java.lang.Object encode(java.lang.Object)>(r2);

        $r10 = (byte[]) r4;

        r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r10);

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("dest string does not equal original", "Hello World!", $r11);

        return;
    }

    public void testObjectEncode() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64Test r0;
        org.apache.commons.codec.binary.Base64 $r2;
        java.lang.String $r3, $r5;
        java.nio.charset.Charset $r4;
        byte[] $r6, $r7;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r2 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r2.<org.apache.commons.codec.binary.Base64: void <init>()>();

        $r3 = new java.lang.String;

        $r5 = "Hello World";

        $r4 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r7 = virtualinvoke $r2.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r6);

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SGVsbG8gV29ybGQ=", $r3);

        return;
    }

    public void testPairs()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r2;
        byte[] $r3, $r4, $r5, $r6, $r7;
        byte $b0, $b1;
        boolean $z0;
        int i2;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r2 = new java.lang.String;

        $r3 = newarray (byte)[2];

        $r4 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r3);

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA=", $r2);

        i2 = -128;

        goto label2;

     label1:
        $r5 = newarray (byte)[2];

        $b0 = (byte) i2;

        $r5[0] = $b0;

        $b1 = (byte) i2;

        $r5[1] = $b1;

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r5);

        $r7 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r6);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i2 = i2 + 1;

     label2:
        if i2 <= 127 goto label1;

        return;
    }

    public void testRfc2045Section2Dot1CrLfDefinition()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = newarray (byte)[2];

        $r1[0] = 13;

        $r1[1] = 10;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r1, $r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testRfc2045Section6Dot8ChunkSizeDefinition()
    {
        org.apache.commons.codec.binary.Base64Test r0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(76L, 76L);

        return;
    }

    public void testRfc1421Section6Dot8ChunkSizeDefinition()
    {
        org.apache.commons.codec.binary.Base64Test r0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, 64L);

        return;
    }

    public void testRfc4648Section10Decode()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        java.lang.String $r2, $r4, $r6, $r8, $r10, $r12, $r14;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("");

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r2);

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("Zg==");

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("f", $r4);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("Zm8=");

        $r6 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("fo", $r6);

        $r7 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("Zm9v");

        $r8 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $r8);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("Zm9vYg==");

        $r10 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foob", $r10);

        $r11 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("Zm9vYmE=");

        $r12 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("fooba", $r12);

        $r13 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("Zm9vYmFy");

        $r14 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobar", $r14);

        return;
    }

    public void testRfc4648Section10DecodeWithCrLf()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String r1, $r5, $r7, $r10, $r12, $r15, $r17, $r20, $r22, $r25, $r27, $r30, $r32, $r35, $r37;
        byte[] $r2, $r6, $r11, $r16, $r21, $r26, $r31, $r36;
        java.lang.StringBuilder $r3, $r4, $r8, $r9, $r13, $r14, $r18, $r19, $r23, $r24, $r28, $r29, $r33, $r34;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r5);

        $r7 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Zg==");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r10);

        $r12 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("f", $r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Zm8=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r15);

        $r17 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("fo", $r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Zm9v");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r20);

        $r22 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Zm9vYg==");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r25);

        $r27 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foob", $r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Zm9vYmE=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r30);

        $r32 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("fooba", $r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Zm9vYmFy");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r35);

        $r37 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobar", $r37);

        return;
    }

    public void testRfc4648Section10Encode()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        java.lang.String $r2, $r4, $r6, $r8, $r10, $r12, $r14;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("");

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r2);

        $r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("f");

        $r4 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zg==", $r4);

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("fo");

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zm8=", $r6);

        $r7 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("foo");

        $r8 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zm9v", $r8);

        $r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("foob");

        $r10 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zm9vYg==", $r10);

        $r11 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("fooba");

        $r12 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zm9vYmE=", $r12);

        $r13 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("foobar");

        $r14 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zm9vYmFy", $r14);

        return;
    }

    public void testRfc4648Section10DecodeEncode()
    {
        org.apache.commons.codec.binary.Base64Test r0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testDecodeEncode(java.lang.String)>("");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testDecodeEncode(java.lang.String)>("Zg==");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testDecodeEncode(java.lang.String)>("Zm8=");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testDecodeEncode(java.lang.String)>("Zm9v");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testDecodeEncode(java.lang.String)>("Zm9vYg==");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testDecodeEncode(java.lang.String)>("Zm9vYmE=");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testDecodeEncode(java.lang.String)>("Zm9vYmFy");

        return;
    }

    private void testDecodeEncode(java.lang.String)
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String r1, r2, r3;
        byte[] $r4, $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r1 := @parameter0: java.lang.String;

        $r4 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>(r1);

        r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r4);

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r2);

        r3 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    public void testRfc4648Section10EncodeDecode()
    {
        org.apache.commons.codec.binary.Base64Test r0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeDecode(java.lang.String)>("");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeDecode(java.lang.String)>("f");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeDecode(java.lang.String)>("fo");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeDecode(java.lang.String)>("foo");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeDecode(java.lang.String)>("foob");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeDecode(java.lang.String)>("fooba");

        specialinvoke r0.<org.apache.commons.codec.binary.Base64Test: void testEncodeDecode(java.lang.String)>("foobar");

        return;
    }

    private void testEncodeDecode(java.lang.String)
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String r1, r2, r3;
        byte[] $r4, $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r1 := @parameter0: java.lang.String;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);

        r2 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r4);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>(r2);

        r3 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    public void testSingletons()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r50, $r53, $r56, $r59, $r62, $r65, $r68, $r71, $r74, $r77, $r80, $r83, $r86, $r89, $r92, $r95, $r98, $r101, $r104, $r107, $r110, $r113, $r116, $r119, $r122, $r125, $r128, $r131, $r134, $r137, $r140, $r143, $r146, $r149, $r152, $r155, $r158, $r161, $r164, $r167, $r170, $r173, $r176, $r179, $r182, $r185, $r188, $r191, $r194, $r197, $r200, $r203, $r206, $r209, $r212, $r215, $r218, $r221, $r224, $r227, $r230, $r233, $r236, $r239, $r242, $r245, $r248, $r251, $r254, $r257, $r260, $r263, $r266, $r269, $r272, $r275, $r278, $r281, $r284, $r287, $r290, $r293, $r296, $r299, $r302, $r305, $r308, $r311, $r314;
        byte[] $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r36, $r37, $r39, $r40, $r42, $r43, $r45, $r46, $r48, $r49, $r51, $r52, $r54, $r55, $r57, $r58, $r60, $r61, $r63, $r64, $r66, $r67, $r69, $r70, $r72, $r73, $r75, $r76, $r78, $r79, $r81, $r82, $r84, $r85, $r87, $r88, $r90, $r91, $r93, $r94, $r96, $r97, $r99, $r100, $r102, $r103, $r105, $r106, $r108, $r109, $r111, $r112, $r114, $r115, $r117, $r118, $r120, $r121, $r123, $r124, $r126, $r127, $r129, $r130, $r132, $r133, $r135, $r136, $r138, $r139, $r141, $r142, $r144, $r145, $r147, $r148, $r150, $r151, $r153, $r154, $r156, $r157, $r159, $r160, $r162, $r163, $r165, $r166, $r168, $r169, $r171, $r172, $r174, $r175, $r177, $r178, $r180, $r181, $r183, $r184, $r186, $r187, $r189, $r190, $r192, $r193, $r195, $r196, $r198, $r199, $r201, $r202, $r204, $r205, $r207, $r208, $r210, $r211, $r213, $r214, $r216, $r217, $r219, $r220, $r222, $r223, $r225, $r226, $r228, $r229, $r231, $r232, $r234, $r235, $r237, $r238, $r240, $r241, $r243, $r244, $r246, $r247, $r249, $r250, $r252, $r253, $r255, $r256, $r258, $r259, $r261, $r262, $r264, $r265, $r267, $r268, $r270, $r271, $r273, $r274, $r276, $r277, $r279, $r280, $r282, $r283, $r285, $r286, $r288, $r289, $r291, $r292, $r294, $r295, $r297, $r298, $r300, $r301, $r303, $r304, $r306, $r307, $r309, $r310, $r312, $r313, $r315, $r316, $r317, $r318, $r319;
        byte $b0;
        boolean $z0;
        int i1;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r2 = new java.lang.String;

        $r3 = newarray (byte)[1];

        $r4 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r3);

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AA==", $r2);

        $r5 = new java.lang.String;

        $r6 = newarray (byte)[1];

        $r6[0] = 1;

        $r7 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r6);

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AQ==", $r5);

        $r8 = new java.lang.String;

        $r9 = newarray (byte)[1];

        $r9[0] = 2;

        $r10 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r9);

        specialinvoke $r8.<java.lang.String: void <init>(byte[])>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ag==", $r8);

        $r11 = new java.lang.String;

        $r12 = newarray (byte)[1];

        $r12[0] = 3;

        $r13 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r12);

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>($r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Aw==", $r11);

        $r14 = new java.lang.String;

        $r15 = newarray (byte)[1];

        $r15[0] = 4;

        $r16 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r15);

        specialinvoke $r14.<java.lang.String: void <init>(byte[])>($r16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BA==", $r14);

        $r17 = new java.lang.String;

        $r18 = newarray (byte)[1];

        $r18[0] = 5;

        $r19 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r18);

        specialinvoke $r17.<java.lang.String: void <init>(byte[])>($r19);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BQ==", $r17);

        $r20 = new java.lang.String;

        $r21 = newarray (byte)[1];

        $r21[0] = 6;

        $r22 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r21);

        specialinvoke $r20.<java.lang.String: void <init>(byte[])>($r22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Bg==", $r20);

        $r23 = new java.lang.String;

        $r24 = newarray (byte)[1];

        $r24[0] = 7;

        $r25 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r24);

        specialinvoke $r23.<java.lang.String: void <init>(byte[])>($r25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Bw==", $r23);

        $r26 = new java.lang.String;

        $r27 = newarray (byte)[1];

        $r27[0] = 8;

        $r28 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r27);

        specialinvoke $r26.<java.lang.String: void <init>(byte[])>($r28);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("CA==", $r26);

        $r29 = new java.lang.String;

        $r30 = newarray (byte)[1];

        $r30[0] = 9;

        $r31 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r30);

        specialinvoke $r29.<java.lang.String: void <init>(byte[])>($r31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("CQ==", $r29);

        $r32 = new java.lang.String;

        $r33 = newarray (byte)[1];

        $r33[0] = 10;

        $r34 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r33);

        specialinvoke $r32.<java.lang.String: void <init>(byte[])>($r34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Cg==", $r32);

        $r35 = new java.lang.String;

        $r36 = newarray (byte)[1];

        $r36[0] = 11;

        $r37 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r36);

        specialinvoke $r35.<java.lang.String: void <init>(byte[])>($r37);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Cw==", $r35);

        $r38 = new java.lang.String;

        $r39 = newarray (byte)[1];

        $r39[0] = 12;

        $r40 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r39);

        specialinvoke $r38.<java.lang.String: void <init>(byte[])>($r40);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("DA==", $r38);

        $r41 = new java.lang.String;

        $r42 = newarray (byte)[1];

        $r42[0] = 13;

        $r43 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r42);

        specialinvoke $r41.<java.lang.String: void <init>(byte[])>($r43);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("DQ==", $r41);

        $r44 = new java.lang.String;

        $r45 = newarray (byte)[1];

        $r45[0] = 14;

        $r46 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r45);

        specialinvoke $r44.<java.lang.String: void <init>(byte[])>($r46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Dg==", $r44);

        $r47 = new java.lang.String;

        $r48 = newarray (byte)[1];

        $r48[0] = 15;

        $r49 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r48);

        specialinvoke $r47.<java.lang.String: void <init>(byte[])>($r49);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Dw==", $r47);

        $r50 = new java.lang.String;

        $r51 = newarray (byte)[1];

        $r51[0] = 16;

        $r52 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r51);

        specialinvoke $r50.<java.lang.String: void <init>(byte[])>($r52);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("EA==", $r50);

        $r53 = new java.lang.String;

        $r54 = newarray (byte)[1];

        $r54[0] = 17;

        $r55 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r54);

        specialinvoke $r53.<java.lang.String: void <init>(byte[])>($r55);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("EQ==", $r53);

        $r56 = new java.lang.String;

        $r57 = newarray (byte)[1];

        $r57[0] = 18;

        $r58 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r57);

        specialinvoke $r56.<java.lang.String: void <init>(byte[])>($r58);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Eg==", $r56);

        $r59 = new java.lang.String;

        $r60 = newarray (byte)[1];

        $r60[0] = 19;

        $r61 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r60);

        specialinvoke $r59.<java.lang.String: void <init>(byte[])>($r61);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ew==", $r59);

        $r62 = new java.lang.String;

        $r63 = newarray (byte)[1];

        $r63[0] = 20;

        $r64 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r63);

        specialinvoke $r62.<java.lang.String: void <init>(byte[])>($r64);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FA==", $r62);

        $r65 = new java.lang.String;

        $r66 = newarray (byte)[1];

        $r66[0] = 21;

        $r67 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r66);

        specialinvoke $r65.<java.lang.String: void <init>(byte[])>($r67);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FQ==", $r65);

        $r68 = new java.lang.String;

        $r69 = newarray (byte)[1];

        $r69[0] = 22;

        $r70 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r69);

        specialinvoke $r68.<java.lang.String: void <init>(byte[])>($r70);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Fg==", $r68);

        $r71 = new java.lang.String;

        $r72 = newarray (byte)[1];

        $r72[0] = 23;

        $r73 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r72);

        specialinvoke $r71.<java.lang.String: void <init>(byte[])>($r73);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Fw==", $r71);

        $r74 = new java.lang.String;

        $r75 = newarray (byte)[1];

        $r75[0] = 24;

        $r76 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r75);

        specialinvoke $r74.<java.lang.String: void <init>(byte[])>($r76);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("GA==", $r74);

        $r77 = new java.lang.String;

        $r78 = newarray (byte)[1];

        $r78[0] = 25;

        $r79 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r78);

        specialinvoke $r77.<java.lang.String: void <init>(byte[])>($r79);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("GQ==", $r77);

        $r80 = new java.lang.String;

        $r81 = newarray (byte)[1];

        $r81[0] = 26;

        $r82 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r81);

        specialinvoke $r80.<java.lang.String: void <init>(byte[])>($r82);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Gg==", $r80);

        $r83 = new java.lang.String;

        $r84 = newarray (byte)[1];

        $r84[0] = 27;

        $r85 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r84);

        specialinvoke $r83.<java.lang.String: void <init>(byte[])>($r85);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Gw==", $r83);

        $r86 = new java.lang.String;

        $r87 = newarray (byte)[1];

        $r87[0] = 28;

        $r88 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r87);

        specialinvoke $r86.<java.lang.String: void <init>(byte[])>($r88);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("HA==", $r86);

        $r89 = new java.lang.String;

        $r90 = newarray (byte)[1];

        $r90[0] = 29;

        $r91 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r90);

        specialinvoke $r89.<java.lang.String: void <init>(byte[])>($r91);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("HQ==", $r89);

        $r92 = new java.lang.String;

        $r93 = newarray (byte)[1];

        $r93[0] = 30;

        $r94 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r93);

        specialinvoke $r92.<java.lang.String: void <init>(byte[])>($r94);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Hg==", $r92);

        $r95 = new java.lang.String;

        $r96 = newarray (byte)[1];

        $r96[0] = 31;

        $r97 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r96);

        specialinvoke $r95.<java.lang.String: void <init>(byte[])>($r97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Hw==", $r95);

        $r98 = new java.lang.String;

        $r99 = newarray (byte)[1];

        $r99[0] = 32;

        $r100 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r99);

        specialinvoke $r98.<java.lang.String: void <init>(byte[])>($r100);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("IA==", $r98);

        $r101 = new java.lang.String;

        $r102 = newarray (byte)[1];

        $r102[0] = 33;

        $r103 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r102);

        specialinvoke $r101.<java.lang.String: void <init>(byte[])>($r103);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("IQ==", $r101);

        $r104 = new java.lang.String;

        $r105 = newarray (byte)[1];

        $r105[0] = 34;

        $r106 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r105);

        specialinvoke $r104.<java.lang.String: void <init>(byte[])>($r106);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ig==", $r104);

        $r107 = new java.lang.String;

        $r108 = newarray (byte)[1];

        $r108[0] = 35;

        $r109 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r108);

        specialinvoke $r107.<java.lang.String: void <init>(byte[])>($r109);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Iw==", $r107);

        $r110 = new java.lang.String;

        $r111 = newarray (byte)[1];

        $r111[0] = 36;

        $r112 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r111);

        specialinvoke $r110.<java.lang.String: void <init>(byte[])>($r112);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("JA==", $r110);

        $r113 = new java.lang.String;

        $r114 = newarray (byte)[1];

        $r114[0] = 37;

        $r115 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r114);

        specialinvoke $r113.<java.lang.String: void <init>(byte[])>($r115);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("JQ==", $r113);

        $r116 = new java.lang.String;

        $r117 = newarray (byte)[1];

        $r117[0] = 38;

        $r118 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r117);

        specialinvoke $r116.<java.lang.String: void <init>(byte[])>($r118);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Jg==", $r116);

        $r119 = new java.lang.String;

        $r120 = newarray (byte)[1];

        $r120[0] = 39;

        $r121 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r120);

        specialinvoke $r119.<java.lang.String: void <init>(byte[])>($r121);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Jw==", $r119);

        $r122 = new java.lang.String;

        $r123 = newarray (byte)[1];

        $r123[0] = 40;

        $r124 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r123);

        specialinvoke $r122.<java.lang.String: void <init>(byte[])>($r124);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("KA==", $r122);

        $r125 = new java.lang.String;

        $r126 = newarray (byte)[1];

        $r126[0] = 41;

        $r127 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r126);

        specialinvoke $r125.<java.lang.String: void <init>(byte[])>($r127);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("KQ==", $r125);

        $r128 = new java.lang.String;

        $r129 = newarray (byte)[1];

        $r129[0] = 42;

        $r130 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r129);

        specialinvoke $r128.<java.lang.String: void <init>(byte[])>($r130);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Kg==", $r128);

        $r131 = new java.lang.String;

        $r132 = newarray (byte)[1];

        $r132[0] = 43;

        $r133 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r132);

        specialinvoke $r131.<java.lang.String: void <init>(byte[])>($r133);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Kw==", $r131);

        $r134 = new java.lang.String;

        $r135 = newarray (byte)[1];

        $r135[0] = 44;

        $r136 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r135);

        specialinvoke $r134.<java.lang.String: void <init>(byte[])>($r136);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("LA==", $r134);

        $r137 = new java.lang.String;

        $r138 = newarray (byte)[1];

        $r138[0] = 45;

        $r139 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r138);

        specialinvoke $r137.<java.lang.String: void <init>(byte[])>($r139);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("LQ==", $r137);

        $r140 = new java.lang.String;

        $r141 = newarray (byte)[1];

        $r141[0] = 46;

        $r142 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r141);

        specialinvoke $r140.<java.lang.String: void <init>(byte[])>($r142);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Lg==", $r140);

        $r143 = new java.lang.String;

        $r144 = newarray (byte)[1];

        $r144[0] = 47;

        $r145 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r144);

        specialinvoke $r143.<java.lang.String: void <init>(byte[])>($r145);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Lw==", $r143);

        $r146 = new java.lang.String;

        $r147 = newarray (byte)[1];

        $r147[0] = 48;

        $r148 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r147);

        specialinvoke $r146.<java.lang.String: void <init>(byte[])>($r148);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("MA==", $r146);

        $r149 = new java.lang.String;

        $r150 = newarray (byte)[1];

        $r150[0] = 49;

        $r151 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r150);

        specialinvoke $r149.<java.lang.String: void <init>(byte[])>($r151);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("MQ==", $r149);

        $r152 = new java.lang.String;

        $r153 = newarray (byte)[1];

        $r153[0] = 50;

        $r154 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r153);

        specialinvoke $r152.<java.lang.String: void <init>(byte[])>($r154);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Mg==", $r152);

        $r155 = new java.lang.String;

        $r156 = newarray (byte)[1];

        $r156[0] = 51;

        $r157 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r156);

        specialinvoke $r155.<java.lang.String: void <init>(byte[])>($r157);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Mw==", $r155);

        $r158 = new java.lang.String;

        $r159 = newarray (byte)[1];

        $r159[0] = 52;

        $r160 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r159);

        specialinvoke $r158.<java.lang.String: void <init>(byte[])>($r160);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NA==", $r158);

        $r161 = new java.lang.String;

        $r162 = newarray (byte)[1];

        $r162[0] = 53;

        $r163 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r162);

        specialinvoke $r161.<java.lang.String: void <init>(byte[])>($r163);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NQ==", $r161);

        $r164 = new java.lang.String;

        $r165 = newarray (byte)[1];

        $r165[0] = 54;

        $r166 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r165);

        specialinvoke $r164.<java.lang.String: void <init>(byte[])>($r166);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ng==", $r164);

        $r167 = new java.lang.String;

        $r168 = newarray (byte)[1];

        $r168[0] = 55;

        $r169 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r168);

        specialinvoke $r167.<java.lang.String: void <init>(byte[])>($r169);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Nw==", $r167);

        $r170 = new java.lang.String;

        $r171 = newarray (byte)[1];

        $r171[0] = 56;

        $r172 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r171);

        specialinvoke $r170.<java.lang.String: void <init>(byte[])>($r172);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("OA==", $r170);

        $r173 = new java.lang.String;

        $r174 = newarray (byte)[1];

        $r174[0] = 57;

        $r175 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r174);

        specialinvoke $r173.<java.lang.String: void <init>(byte[])>($r175);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("OQ==", $r173);

        $r176 = new java.lang.String;

        $r177 = newarray (byte)[1];

        $r177[0] = 58;

        $r178 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r177);

        specialinvoke $r176.<java.lang.String: void <init>(byte[])>($r178);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Og==", $r176);

        $r179 = new java.lang.String;

        $r180 = newarray (byte)[1];

        $r180[0] = 59;

        $r181 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r180);

        specialinvoke $r179.<java.lang.String: void <init>(byte[])>($r181);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ow==", $r179);

        $r182 = new java.lang.String;

        $r183 = newarray (byte)[1];

        $r183[0] = 60;

        $r184 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r183);

        specialinvoke $r182.<java.lang.String: void <init>(byte[])>($r184);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("PA==", $r182);

        $r185 = new java.lang.String;

        $r186 = newarray (byte)[1];

        $r186[0] = 61;

        $r187 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r186);

        specialinvoke $r185.<java.lang.String: void <init>(byte[])>($r187);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("PQ==", $r185);

        $r188 = new java.lang.String;

        $r189 = newarray (byte)[1];

        $r189[0] = 62;

        $r190 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r189);

        specialinvoke $r188.<java.lang.String: void <init>(byte[])>($r190);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Pg==", $r188);

        $r191 = new java.lang.String;

        $r192 = newarray (byte)[1];

        $r192[0] = 63;

        $r193 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r192);

        specialinvoke $r191.<java.lang.String: void <init>(byte[])>($r193);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Pw==", $r191);

        $r194 = new java.lang.String;

        $r195 = newarray (byte)[1];

        $r195[0] = 64;

        $r196 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r195);

        specialinvoke $r194.<java.lang.String: void <init>(byte[])>($r196);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("QA==", $r194);

        $r197 = new java.lang.String;

        $r198 = newarray (byte)[1];

        $r198[0] = 65;

        $r199 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r198);

        specialinvoke $r197.<java.lang.String: void <init>(byte[])>($r199);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("QQ==", $r197);

        $r200 = new java.lang.String;

        $r201 = newarray (byte)[1];

        $r201[0] = 66;

        $r202 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r201);

        specialinvoke $r200.<java.lang.String: void <init>(byte[])>($r202);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Qg==", $r200);

        $r203 = new java.lang.String;

        $r204 = newarray (byte)[1];

        $r204[0] = 67;

        $r205 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r204);

        specialinvoke $r203.<java.lang.String: void <init>(byte[])>($r205);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Qw==", $r203);

        $r206 = new java.lang.String;

        $r207 = newarray (byte)[1];

        $r207[0] = 68;

        $r208 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r207);

        specialinvoke $r206.<java.lang.String: void <init>(byte[])>($r208);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("RA==", $r206);

        $r209 = new java.lang.String;

        $r210 = newarray (byte)[1];

        $r210[0] = 69;

        $r211 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r210);

        specialinvoke $r209.<java.lang.String: void <init>(byte[])>($r211);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("RQ==", $r209);

        $r212 = new java.lang.String;

        $r213 = newarray (byte)[1];

        $r213[0] = 70;

        $r214 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r213);

        specialinvoke $r212.<java.lang.String: void <init>(byte[])>($r214);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Rg==", $r212);

        $r215 = new java.lang.String;

        $r216 = newarray (byte)[1];

        $r216[0] = 71;

        $r217 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r216);

        specialinvoke $r215.<java.lang.String: void <init>(byte[])>($r217);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Rw==", $r215);

        $r218 = new java.lang.String;

        $r219 = newarray (byte)[1];

        $r219[0] = 72;

        $r220 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r219);

        specialinvoke $r218.<java.lang.String: void <init>(byte[])>($r220);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SA==", $r218);

        $r221 = new java.lang.String;

        $r222 = newarray (byte)[1];

        $r222[0] = 73;

        $r223 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r222);

        specialinvoke $r221.<java.lang.String: void <init>(byte[])>($r223);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SQ==", $r221);

        $r224 = new java.lang.String;

        $r225 = newarray (byte)[1];

        $r225[0] = 74;

        $r226 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r225);

        specialinvoke $r224.<java.lang.String: void <init>(byte[])>($r226);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Sg==", $r224);

        $r227 = new java.lang.String;

        $r228 = newarray (byte)[1];

        $r228[0] = 75;

        $r229 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r228);

        specialinvoke $r227.<java.lang.String: void <init>(byte[])>($r229);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Sw==", $r227);

        $r230 = new java.lang.String;

        $r231 = newarray (byte)[1];

        $r231[0] = 76;

        $r232 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r231);

        specialinvoke $r230.<java.lang.String: void <init>(byte[])>($r232);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("TA==", $r230);

        $r233 = new java.lang.String;

        $r234 = newarray (byte)[1];

        $r234[0] = 77;

        $r235 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r234);

        specialinvoke $r233.<java.lang.String: void <init>(byte[])>($r235);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("TQ==", $r233);

        $r236 = new java.lang.String;

        $r237 = newarray (byte)[1];

        $r237[0] = 78;

        $r238 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r237);

        specialinvoke $r236.<java.lang.String: void <init>(byte[])>($r238);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Tg==", $r236);

        $r239 = new java.lang.String;

        $r240 = newarray (byte)[1];

        $r240[0] = 79;

        $r241 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r240);

        specialinvoke $r239.<java.lang.String: void <init>(byte[])>($r241);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Tw==", $r239);

        $r242 = new java.lang.String;

        $r243 = newarray (byte)[1];

        $r243[0] = 80;

        $r244 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r243);

        specialinvoke $r242.<java.lang.String: void <init>(byte[])>($r244);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("UA==", $r242);

        $r245 = new java.lang.String;

        $r246 = newarray (byte)[1];

        $r246[0] = 81;

        $r247 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r246);

        specialinvoke $r245.<java.lang.String: void <init>(byte[])>($r247);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("UQ==", $r245);

        $r248 = new java.lang.String;

        $r249 = newarray (byte)[1];

        $r249[0] = 82;

        $r250 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r249);

        specialinvoke $r248.<java.lang.String: void <init>(byte[])>($r250);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ug==", $r248);

        $r251 = new java.lang.String;

        $r252 = newarray (byte)[1];

        $r252[0] = 83;

        $r253 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r252);

        specialinvoke $r251.<java.lang.String: void <init>(byte[])>($r253);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Uw==", $r251);

        $r254 = new java.lang.String;

        $r255 = newarray (byte)[1];

        $r255[0] = 84;

        $r256 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r255);

        specialinvoke $r254.<java.lang.String: void <init>(byte[])>($r256);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("VA==", $r254);

        $r257 = new java.lang.String;

        $r258 = newarray (byte)[1];

        $r258[0] = 85;

        $r259 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r258);

        specialinvoke $r257.<java.lang.String: void <init>(byte[])>($r259);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("VQ==", $r257);

        $r260 = new java.lang.String;

        $r261 = newarray (byte)[1];

        $r261[0] = 86;

        $r262 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r261);

        specialinvoke $r260.<java.lang.String: void <init>(byte[])>($r262);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Vg==", $r260);

        $r263 = new java.lang.String;

        $r264 = newarray (byte)[1];

        $r264[0] = 87;

        $r265 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r264);

        specialinvoke $r263.<java.lang.String: void <init>(byte[])>($r265);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Vw==", $r263);

        $r266 = new java.lang.String;

        $r267 = newarray (byte)[1];

        $r267[0] = 88;

        $r268 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r267);

        specialinvoke $r266.<java.lang.String: void <init>(byte[])>($r268);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("WA==", $r266);

        $r269 = new java.lang.String;

        $r270 = newarray (byte)[1];

        $r270[0] = 89;

        $r271 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r270);

        specialinvoke $r269.<java.lang.String: void <init>(byte[])>($r271);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("WQ==", $r269);

        $r272 = new java.lang.String;

        $r273 = newarray (byte)[1];

        $r273[0] = 90;

        $r274 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r273);

        specialinvoke $r272.<java.lang.String: void <init>(byte[])>($r274);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Wg==", $r272);

        $r275 = new java.lang.String;

        $r276 = newarray (byte)[1];

        $r276[0] = 91;

        $r277 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r276);

        specialinvoke $r275.<java.lang.String: void <init>(byte[])>($r277);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ww==", $r275);

        $r278 = new java.lang.String;

        $r279 = newarray (byte)[1];

        $r279[0] = 92;

        $r280 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r279);

        specialinvoke $r278.<java.lang.String: void <init>(byte[])>($r280);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("XA==", $r278);

        $r281 = new java.lang.String;

        $r282 = newarray (byte)[1];

        $r282[0] = 93;

        $r283 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r282);

        specialinvoke $r281.<java.lang.String: void <init>(byte[])>($r283);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("XQ==", $r281);

        $r284 = new java.lang.String;

        $r285 = newarray (byte)[1];

        $r285[0] = 94;

        $r286 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r285);

        specialinvoke $r284.<java.lang.String: void <init>(byte[])>($r286);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Xg==", $r284);

        $r287 = new java.lang.String;

        $r288 = newarray (byte)[1];

        $r288[0] = 95;

        $r289 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r288);

        specialinvoke $r287.<java.lang.String: void <init>(byte[])>($r289);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Xw==", $r287);

        $r290 = new java.lang.String;

        $r291 = newarray (byte)[1];

        $r291[0] = 96;

        $r292 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r291);

        specialinvoke $r290.<java.lang.String: void <init>(byte[])>($r292);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("YA==", $r290);

        $r293 = new java.lang.String;

        $r294 = newarray (byte)[1];

        $r294[0] = 97;

        $r295 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r294);

        specialinvoke $r293.<java.lang.String: void <init>(byte[])>($r295);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("YQ==", $r293);

        $r296 = new java.lang.String;

        $r297 = newarray (byte)[1];

        $r297[0] = 98;

        $r298 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r297);

        specialinvoke $r296.<java.lang.String: void <init>(byte[])>($r298);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Yg==", $r296);

        $r299 = new java.lang.String;

        $r300 = newarray (byte)[1];

        $r300[0] = 99;

        $r301 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r300);

        specialinvoke $r299.<java.lang.String: void <init>(byte[])>($r301);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Yw==", $r299);

        $r302 = new java.lang.String;

        $r303 = newarray (byte)[1];

        $r303[0] = 100;

        $r304 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r303);

        specialinvoke $r302.<java.lang.String: void <init>(byte[])>($r304);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ZA==", $r302);

        $r305 = new java.lang.String;

        $r306 = newarray (byte)[1];

        $r306[0] = 101;

        $r307 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r306);

        specialinvoke $r305.<java.lang.String: void <init>(byte[])>($r307);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ZQ==", $r305);

        $r308 = new java.lang.String;

        $r309 = newarray (byte)[1];

        $r309[0] = 102;

        $r310 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r309);

        specialinvoke $r308.<java.lang.String: void <init>(byte[])>($r310);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zg==", $r308);

        $r311 = new java.lang.String;

        $r312 = newarray (byte)[1];

        $r312[0] = 103;

        $r313 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r312);

        specialinvoke $r311.<java.lang.String: void <init>(byte[])>($r313);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zw==", $r311);

        $r314 = new java.lang.String;

        $r315 = newarray (byte)[1];

        $r315[0] = 104;

        $r316 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r315);

        specialinvoke $r314.<java.lang.String: void <init>(byte[])>($r316);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aA==", $r314);

        i1 = -128;

        goto label2;

     label1:
        $r317 = newarray (byte)[1];

        $b0 = (byte) i1;

        $r317[0] = $b0;

        $r318 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r317);

        $r319 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r318);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r317, $r319);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i1 = i1 + 1;

     label2:
        if i1 <= 127 goto label1;

        return;
    }

    public void testSingletonsChunked()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52, $r55, $r58, $r61, $r64, $r67, $r70, $r73, $r76, $r79, $r82, $r85, $r88, $r91, $r94, $r97, $r100, $r103, $r106, $r109, $r112, $r115, $r118, $r121, $r124, $r127, $r130, $r133, $r136, $r139, $r142, $r145, $r148, $r151, $r154, $r157, $r160, $r163, $r166, $r169, $r172, $r175, $r178, $r181, $r184, $r187, $r190, $r193, $r196, $r199, $r202, $r205, $r208, $r211, $r214, $r217, $r220, $r223, $r226, $r229, $r232, $r235, $r238, $r241, $r244, $r247, $r250, $r253, $r256, $r259, $r262, $r265, $r268, $r271, $r274, $r277, $r280, $r283, $r286, $r289, $r292, $r295, $r298, $r301, $r304, $r307, $r310, $r313;
        byte[] $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r50, $r51, $r53, $r54, $r56, $r57, $r59, $r60, $r62, $r63, $r65, $r66, $r68, $r69, $r71, $r72, $r74, $r75, $r77, $r78, $r80, $r81, $r83, $r84, $r86, $r87, $r89, $r90, $r92, $r93, $r95, $r96, $r98, $r99, $r101, $r102, $r104, $r105, $r107, $r108, $r110, $r111, $r113, $r114, $r116, $r117, $r119, $r120, $r122, $r123, $r125, $r126, $r128, $r129, $r131, $r132, $r134, $r135, $r137, $r138, $r140, $r141, $r143, $r144, $r146, $r147, $r149, $r150, $r152, $r153, $r155, $r156, $r158, $r159, $r161, $r162, $r164, $r165, $r167, $r168, $r170, $r171, $r173, $r174, $r176, $r177, $r179, $r180, $r182, $r183, $r185, $r186, $r188, $r189, $r191, $r192, $r194, $r195, $r197, $r198, $r200, $r201, $r203, $r204, $r206, $r207, $r209, $r210, $r212, $r213, $r215, $r216, $r218, $r219, $r221, $r222, $r224, $r225, $r227, $r228, $r230, $r231, $r233, $r234, $r236, $r237, $r239, $r240, $r242, $r243, $r245, $r246, $r248, $r249, $r251, $r252, $r254, $r255, $r257, $r258, $r260, $r261, $r263, $r264, $r266, $r267, $r269, $r270, $r272, $r273, $r275, $r276, $r278, $r279, $r281, $r282, $r284, $r285, $r287, $r288, $r290, $r291, $r293, $r294, $r296, $r297, $r299, $r300, $r302, $r303, $r305, $r306, $r308, $r309, $r311, $r312, $r314, $r315;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r2 = newarray (byte)[1];

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r2);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AA==\r\n", $r1);

        $r4 = new java.lang.String;

        $r5 = newarray (byte)[1];

        $r5[0] = 1;

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r5);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AQ==\r\n", $r4);

        $r7 = new java.lang.String;

        $r8 = newarray (byte)[1];

        $r8[0] = 2;

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r8);

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ag==\r\n", $r7);

        $r10 = new java.lang.String;

        $r11 = newarray (byte)[1];

        $r11[0] = 3;

        $r12 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r11);

        specialinvoke $r10.<java.lang.String: void <init>(byte[])>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Aw==\r\n", $r10);

        $r13 = new java.lang.String;

        $r14 = newarray (byte)[1];

        $r14[0] = 4;

        $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r14);

        specialinvoke $r13.<java.lang.String: void <init>(byte[])>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BA==\r\n", $r13);

        $r16 = new java.lang.String;

        $r17 = newarray (byte)[1];

        $r17[0] = 5;

        $r18 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r17);

        specialinvoke $r16.<java.lang.String: void <init>(byte[])>($r18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("BQ==\r\n", $r16);

        $r19 = new java.lang.String;

        $r20 = newarray (byte)[1];

        $r20[0] = 6;

        $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r20);

        specialinvoke $r19.<java.lang.String: void <init>(byte[])>($r21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Bg==\r\n", $r19);

        $r22 = new java.lang.String;

        $r23 = newarray (byte)[1];

        $r23[0] = 7;

        $r24 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r23);

        specialinvoke $r22.<java.lang.String: void <init>(byte[])>($r24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Bw==\r\n", $r22);

        $r25 = new java.lang.String;

        $r26 = newarray (byte)[1];

        $r26[0] = 8;

        $r27 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r26);

        specialinvoke $r25.<java.lang.String: void <init>(byte[])>($r27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("CA==\r\n", $r25);

        $r28 = new java.lang.String;

        $r29 = newarray (byte)[1];

        $r29[0] = 9;

        $r30 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r29);

        specialinvoke $r28.<java.lang.String: void <init>(byte[])>($r30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("CQ==\r\n", $r28);

        $r31 = new java.lang.String;

        $r32 = newarray (byte)[1];

        $r32[0] = 10;

        $r33 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r32);

        specialinvoke $r31.<java.lang.String: void <init>(byte[])>($r33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Cg==\r\n", $r31);

        $r34 = new java.lang.String;

        $r35 = newarray (byte)[1];

        $r35[0] = 11;

        $r36 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r35);

        specialinvoke $r34.<java.lang.String: void <init>(byte[])>($r36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Cw==\r\n", $r34);

        $r37 = new java.lang.String;

        $r38 = newarray (byte)[1];

        $r38[0] = 12;

        $r39 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r38);

        specialinvoke $r37.<java.lang.String: void <init>(byte[])>($r39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("DA==\r\n", $r37);

        $r40 = new java.lang.String;

        $r41 = newarray (byte)[1];

        $r41[0] = 13;

        $r42 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r41);

        specialinvoke $r40.<java.lang.String: void <init>(byte[])>($r42);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("DQ==\r\n", $r40);

        $r43 = new java.lang.String;

        $r44 = newarray (byte)[1];

        $r44[0] = 14;

        $r45 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r44);

        specialinvoke $r43.<java.lang.String: void <init>(byte[])>($r45);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Dg==\r\n", $r43);

        $r46 = new java.lang.String;

        $r47 = newarray (byte)[1];

        $r47[0] = 15;

        $r48 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r47);

        specialinvoke $r46.<java.lang.String: void <init>(byte[])>($r48);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Dw==\r\n", $r46);

        $r49 = new java.lang.String;

        $r50 = newarray (byte)[1];

        $r50[0] = 16;

        $r51 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r50);

        specialinvoke $r49.<java.lang.String: void <init>(byte[])>($r51);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("EA==\r\n", $r49);

        $r52 = new java.lang.String;

        $r53 = newarray (byte)[1];

        $r53[0] = 17;

        $r54 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r53);

        specialinvoke $r52.<java.lang.String: void <init>(byte[])>($r54);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("EQ==\r\n", $r52);

        $r55 = new java.lang.String;

        $r56 = newarray (byte)[1];

        $r56[0] = 18;

        $r57 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r56);

        specialinvoke $r55.<java.lang.String: void <init>(byte[])>($r57);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Eg==\r\n", $r55);

        $r58 = new java.lang.String;

        $r59 = newarray (byte)[1];

        $r59[0] = 19;

        $r60 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r59);

        specialinvoke $r58.<java.lang.String: void <init>(byte[])>($r60);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ew==\r\n", $r58);

        $r61 = new java.lang.String;

        $r62 = newarray (byte)[1];

        $r62[0] = 20;

        $r63 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r62);

        specialinvoke $r61.<java.lang.String: void <init>(byte[])>($r63);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FA==\r\n", $r61);

        $r64 = new java.lang.String;

        $r65 = newarray (byte)[1];

        $r65[0] = 21;

        $r66 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r65);

        specialinvoke $r64.<java.lang.String: void <init>(byte[])>($r66);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FQ==\r\n", $r64);

        $r67 = new java.lang.String;

        $r68 = newarray (byte)[1];

        $r68[0] = 22;

        $r69 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r68);

        specialinvoke $r67.<java.lang.String: void <init>(byte[])>($r69);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Fg==\r\n", $r67);

        $r70 = new java.lang.String;

        $r71 = newarray (byte)[1];

        $r71[0] = 23;

        $r72 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r71);

        specialinvoke $r70.<java.lang.String: void <init>(byte[])>($r72);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Fw==\r\n", $r70);

        $r73 = new java.lang.String;

        $r74 = newarray (byte)[1];

        $r74[0] = 24;

        $r75 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r74);

        specialinvoke $r73.<java.lang.String: void <init>(byte[])>($r75);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("GA==\r\n", $r73);

        $r76 = new java.lang.String;

        $r77 = newarray (byte)[1];

        $r77[0] = 25;

        $r78 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r77);

        specialinvoke $r76.<java.lang.String: void <init>(byte[])>($r78);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("GQ==\r\n", $r76);

        $r79 = new java.lang.String;

        $r80 = newarray (byte)[1];

        $r80[0] = 26;

        $r81 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r80);

        specialinvoke $r79.<java.lang.String: void <init>(byte[])>($r81);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Gg==\r\n", $r79);

        $r82 = new java.lang.String;

        $r83 = newarray (byte)[1];

        $r83[0] = 27;

        $r84 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r83);

        specialinvoke $r82.<java.lang.String: void <init>(byte[])>($r84);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Gw==\r\n", $r82);

        $r85 = new java.lang.String;

        $r86 = newarray (byte)[1];

        $r86[0] = 28;

        $r87 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r86);

        specialinvoke $r85.<java.lang.String: void <init>(byte[])>($r87);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("HA==\r\n", $r85);

        $r88 = new java.lang.String;

        $r89 = newarray (byte)[1];

        $r89[0] = 29;

        $r90 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r89);

        specialinvoke $r88.<java.lang.String: void <init>(byte[])>($r90);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("HQ==\r\n", $r88);

        $r91 = new java.lang.String;

        $r92 = newarray (byte)[1];

        $r92[0] = 30;

        $r93 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r92);

        specialinvoke $r91.<java.lang.String: void <init>(byte[])>($r93);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Hg==\r\n", $r91);

        $r94 = new java.lang.String;

        $r95 = newarray (byte)[1];

        $r95[0] = 31;

        $r96 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r95);

        specialinvoke $r94.<java.lang.String: void <init>(byte[])>($r96);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Hw==\r\n", $r94);

        $r97 = new java.lang.String;

        $r98 = newarray (byte)[1];

        $r98[0] = 32;

        $r99 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r98);

        specialinvoke $r97.<java.lang.String: void <init>(byte[])>($r99);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("IA==\r\n", $r97);

        $r100 = new java.lang.String;

        $r101 = newarray (byte)[1];

        $r101[0] = 33;

        $r102 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r101);

        specialinvoke $r100.<java.lang.String: void <init>(byte[])>($r102);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("IQ==\r\n", $r100);

        $r103 = new java.lang.String;

        $r104 = newarray (byte)[1];

        $r104[0] = 34;

        $r105 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r104);

        specialinvoke $r103.<java.lang.String: void <init>(byte[])>($r105);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ig==\r\n", $r103);

        $r106 = new java.lang.String;

        $r107 = newarray (byte)[1];

        $r107[0] = 35;

        $r108 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r107);

        specialinvoke $r106.<java.lang.String: void <init>(byte[])>($r108);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Iw==\r\n", $r106);

        $r109 = new java.lang.String;

        $r110 = newarray (byte)[1];

        $r110[0] = 36;

        $r111 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r110);

        specialinvoke $r109.<java.lang.String: void <init>(byte[])>($r111);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("JA==\r\n", $r109);

        $r112 = new java.lang.String;

        $r113 = newarray (byte)[1];

        $r113[0] = 37;

        $r114 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r113);

        specialinvoke $r112.<java.lang.String: void <init>(byte[])>($r114);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("JQ==\r\n", $r112);

        $r115 = new java.lang.String;

        $r116 = newarray (byte)[1];

        $r116[0] = 38;

        $r117 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r116);

        specialinvoke $r115.<java.lang.String: void <init>(byte[])>($r117);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Jg==\r\n", $r115);

        $r118 = new java.lang.String;

        $r119 = newarray (byte)[1];

        $r119[0] = 39;

        $r120 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r119);

        specialinvoke $r118.<java.lang.String: void <init>(byte[])>($r120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Jw==\r\n", $r118);

        $r121 = new java.lang.String;

        $r122 = newarray (byte)[1];

        $r122[0] = 40;

        $r123 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r122);

        specialinvoke $r121.<java.lang.String: void <init>(byte[])>($r123);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("KA==\r\n", $r121);

        $r124 = new java.lang.String;

        $r125 = newarray (byte)[1];

        $r125[0] = 41;

        $r126 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r125);

        specialinvoke $r124.<java.lang.String: void <init>(byte[])>($r126);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("KQ==\r\n", $r124);

        $r127 = new java.lang.String;

        $r128 = newarray (byte)[1];

        $r128[0] = 42;

        $r129 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r128);

        specialinvoke $r127.<java.lang.String: void <init>(byte[])>($r129);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Kg==\r\n", $r127);

        $r130 = new java.lang.String;

        $r131 = newarray (byte)[1];

        $r131[0] = 43;

        $r132 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r131);

        specialinvoke $r130.<java.lang.String: void <init>(byte[])>($r132);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Kw==\r\n", $r130);

        $r133 = new java.lang.String;

        $r134 = newarray (byte)[1];

        $r134[0] = 44;

        $r135 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r134);

        specialinvoke $r133.<java.lang.String: void <init>(byte[])>($r135);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("LA==\r\n", $r133);

        $r136 = new java.lang.String;

        $r137 = newarray (byte)[1];

        $r137[0] = 45;

        $r138 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r137);

        specialinvoke $r136.<java.lang.String: void <init>(byte[])>($r138);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("LQ==\r\n", $r136);

        $r139 = new java.lang.String;

        $r140 = newarray (byte)[1];

        $r140[0] = 46;

        $r141 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r140);

        specialinvoke $r139.<java.lang.String: void <init>(byte[])>($r141);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Lg==\r\n", $r139);

        $r142 = new java.lang.String;

        $r143 = newarray (byte)[1];

        $r143[0] = 47;

        $r144 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r143);

        specialinvoke $r142.<java.lang.String: void <init>(byte[])>($r144);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Lw==\r\n", $r142);

        $r145 = new java.lang.String;

        $r146 = newarray (byte)[1];

        $r146[0] = 48;

        $r147 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r146);

        specialinvoke $r145.<java.lang.String: void <init>(byte[])>($r147);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("MA==\r\n", $r145);

        $r148 = new java.lang.String;

        $r149 = newarray (byte)[1];

        $r149[0] = 49;

        $r150 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r149);

        specialinvoke $r148.<java.lang.String: void <init>(byte[])>($r150);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("MQ==\r\n", $r148);

        $r151 = new java.lang.String;

        $r152 = newarray (byte)[1];

        $r152[0] = 50;

        $r153 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r152);

        specialinvoke $r151.<java.lang.String: void <init>(byte[])>($r153);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Mg==\r\n", $r151);

        $r154 = new java.lang.String;

        $r155 = newarray (byte)[1];

        $r155[0] = 51;

        $r156 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r155);

        specialinvoke $r154.<java.lang.String: void <init>(byte[])>($r156);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Mw==\r\n", $r154);

        $r157 = new java.lang.String;

        $r158 = newarray (byte)[1];

        $r158[0] = 52;

        $r159 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r158);

        specialinvoke $r157.<java.lang.String: void <init>(byte[])>($r159);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NA==\r\n", $r157);

        $r160 = new java.lang.String;

        $r161 = newarray (byte)[1];

        $r161[0] = 53;

        $r162 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r161);

        specialinvoke $r160.<java.lang.String: void <init>(byte[])>($r162);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NQ==\r\n", $r160);

        $r163 = new java.lang.String;

        $r164 = newarray (byte)[1];

        $r164[0] = 54;

        $r165 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r164);

        specialinvoke $r163.<java.lang.String: void <init>(byte[])>($r165);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ng==\r\n", $r163);

        $r166 = new java.lang.String;

        $r167 = newarray (byte)[1];

        $r167[0] = 55;

        $r168 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r167);

        specialinvoke $r166.<java.lang.String: void <init>(byte[])>($r168);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Nw==\r\n", $r166);

        $r169 = new java.lang.String;

        $r170 = newarray (byte)[1];

        $r170[0] = 56;

        $r171 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r170);

        specialinvoke $r169.<java.lang.String: void <init>(byte[])>($r171);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("OA==\r\n", $r169);

        $r172 = new java.lang.String;

        $r173 = newarray (byte)[1];

        $r173[0] = 57;

        $r174 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r173);

        specialinvoke $r172.<java.lang.String: void <init>(byte[])>($r174);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("OQ==\r\n", $r172);

        $r175 = new java.lang.String;

        $r176 = newarray (byte)[1];

        $r176[0] = 58;

        $r177 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r176);

        specialinvoke $r175.<java.lang.String: void <init>(byte[])>($r177);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Og==\r\n", $r175);

        $r178 = new java.lang.String;

        $r179 = newarray (byte)[1];

        $r179[0] = 59;

        $r180 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r179);

        specialinvoke $r178.<java.lang.String: void <init>(byte[])>($r180);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ow==\r\n", $r178);

        $r181 = new java.lang.String;

        $r182 = newarray (byte)[1];

        $r182[0] = 60;

        $r183 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r182);

        specialinvoke $r181.<java.lang.String: void <init>(byte[])>($r183);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("PA==\r\n", $r181);

        $r184 = new java.lang.String;

        $r185 = newarray (byte)[1];

        $r185[0] = 61;

        $r186 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r185);

        specialinvoke $r184.<java.lang.String: void <init>(byte[])>($r186);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("PQ==\r\n", $r184);

        $r187 = new java.lang.String;

        $r188 = newarray (byte)[1];

        $r188[0] = 62;

        $r189 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r188);

        specialinvoke $r187.<java.lang.String: void <init>(byte[])>($r189);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Pg==\r\n", $r187);

        $r190 = new java.lang.String;

        $r191 = newarray (byte)[1];

        $r191[0] = 63;

        $r192 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r191);

        specialinvoke $r190.<java.lang.String: void <init>(byte[])>($r192);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Pw==\r\n", $r190);

        $r193 = new java.lang.String;

        $r194 = newarray (byte)[1];

        $r194[0] = 64;

        $r195 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r194);

        specialinvoke $r193.<java.lang.String: void <init>(byte[])>($r195);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("QA==\r\n", $r193);

        $r196 = new java.lang.String;

        $r197 = newarray (byte)[1];

        $r197[0] = 65;

        $r198 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r197);

        specialinvoke $r196.<java.lang.String: void <init>(byte[])>($r198);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("QQ==\r\n", $r196);

        $r199 = new java.lang.String;

        $r200 = newarray (byte)[1];

        $r200[0] = 66;

        $r201 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r200);

        specialinvoke $r199.<java.lang.String: void <init>(byte[])>($r201);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Qg==\r\n", $r199);

        $r202 = new java.lang.String;

        $r203 = newarray (byte)[1];

        $r203[0] = 67;

        $r204 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r203);

        specialinvoke $r202.<java.lang.String: void <init>(byte[])>($r204);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Qw==\r\n", $r202);

        $r205 = new java.lang.String;

        $r206 = newarray (byte)[1];

        $r206[0] = 68;

        $r207 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r206);

        specialinvoke $r205.<java.lang.String: void <init>(byte[])>($r207);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("RA==\r\n", $r205);

        $r208 = new java.lang.String;

        $r209 = newarray (byte)[1];

        $r209[0] = 69;

        $r210 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r209);

        specialinvoke $r208.<java.lang.String: void <init>(byte[])>($r210);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("RQ==\r\n", $r208);

        $r211 = new java.lang.String;

        $r212 = newarray (byte)[1];

        $r212[0] = 70;

        $r213 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r212);

        specialinvoke $r211.<java.lang.String: void <init>(byte[])>($r213);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Rg==\r\n", $r211);

        $r214 = new java.lang.String;

        $r215 = newarray (byte)[1];

        $r215[0] = 71;

        $r216 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r215);

        specialinvoke $r214.<java.lang.String: void <init>(byte[])>($r216);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Rw==\r\n", $r214);

        $r217 = new java.lang.String;

        $r218 = newarray (byte)[1];

        $r218[0] = 72;

        $r219 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r218);

        specialinvoke $r217.<java.lang.String: void <init>(byte[])>($r219);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SA==\r\n", $r217);

        $r220 = new java.lang.String;

        $r221 = newarray (byte)[1];

        $r221[0] = 73;

        $r222 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r221);

        specialinvoke $r220.<java.lang.String: void <init>(byte[])>($r222);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("SQ==\r\n", $r220);

        $r223 = new java.lang.String;

        $r224 = newarray (byte)[1];

        $r224[0] = 74;

        $r225 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r224);

        specialinvoke $r223.<java.lang.String: void <init>(byte[])>($r225);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Sg==\r\n", $r223);

        $r226 = new java.lang.String;

        $r227 = newarray (byte)[1];

        $r227[0] = 75;

        $r228 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r227);

        specialinvoke $r226.<java.lang.String: void <init>(byte[])>($r228);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Sw==\r\n", $r226);

        $r229 = new java.lang.String;

        $r230 = newarray (byte)[1];

        $r230[0] = 76;

        $r231 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r230);

        specialinvoke $r229.<java.lang.String: void <init>(byte[])>($r231);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("TA==\r\n", $r229);

        $r232 = new java.lang.String;

        $r233 = newarray (byte)[1];

        $r233[0] = 77;

        $r234 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r233);

        specialinvoke $r232.<java.lang.String: void <init>(byte[])>($r234);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("TQ==\r\n", $r232);

        $r235 = new java.lang.String;

        $r236 = newarray (byte)[1];

        $r236[0] = 78;

        $r237 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r236);

        specialinvoke $r235.<java.lang.String: void <init>(byte[])>($r237);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Tg==\r\n", $r235);

        $r238 = new java.lang.String;

        $r239 = newarray (byte)[1];

        $r239[0] = 79;

        $r240 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r239);

        specialinvoke $r238.<java.lang.String: void <init>(byte[])>($r240);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Tw==\r\n", $r238);

        $r241 = new java.lang.String;

        $r242 = newarray (byte)[1];

        $r242[0] = 80;

        $r243 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r242);

        specialinvoke $r241.<java.lang.String: void <init>(byte[])>($r243);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("UA==\r\n", $r241);

        $r244 = new java.lang.String;

        $r245 = newarray (byte)[1];

        $r245[0] = 81;

        $r246 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r245);

        specialinvoke $r244.<java.lang.String: void <init>(byte[])>($r246);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("UQ==\r\n", $r244);

        $r247 = new java.lang.String;

        $r248 = newarray (byte)[1];

        $r248[0] = 82;

        $r249 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r248);

        specialinvoke $r247.<java.lang.String: void <init>(byte[])>($r249);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ug==\r\n", $r247);

        $r250 = new java.lang.String;

        $r251 = newarray (byte)[1];

        $r251[0] = 83;

        $r252 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r251);

        specialinvoke $r250.<java.lang.String: void <init>(byte[])>($r252);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Uw==\r\n", $r250);

        $r253 = new java.lang.String;

        $r254 = newarray (byte)[1];

        $r254[0] = 84;

        $r255 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r254);

        specialinvoke $r253.<java.lang.String: void <init>(byte[])>($r255);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("VA==\r\n", $r253);

        $r256 = new java.lang.String;

        $r257 = newarray (byte)[1];

        $r257[0] = 85;

        $r258 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r257);

        specialinvoke $r256.<java.lang.String: void <init>(byte[])>($r258);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("VQ==\r\n", $r256);

        $r259 = new java.lang.String;

        $r260 = newarray (byte)[1];

        $r260[0] = 86;

        $r261 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r260);

        specialinvoke $r259.<java.lang.String: void <init>(byte[])>($r261);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Vg==\r\n", $r259);

        $r262 = new java.lang.String;

        $r263 = newarray (byte)[1];

        $r263[0] = 87;

        $r264 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r263);

        specialinvoke $r262.<java.lang.String: void <init>(byte[])>($r264);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Vw==\r\n", $r262);

        $r265 = new java.lang.String;

        $r266 = newarray (byte)[1];

        $r266[0] = 88;

        $r267 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r266);

        specialinvoke $r265.<java.lang.String: void <init>(byte[])>($r267);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("WA==\r\n", $r265);

        $r268 = new java.lang.String;

        $r269 = newarray (byte)[1];

        $r269[0] = 89;

        $r270 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r269);

        specialinvoke $r268.<java.lang.String: void <init>(byte[])>($r270);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("WQ==\r\n", $r268);

        $r271 = new java.lang.String;

        $r272 = newarray (byte)[1];

        $r272[0] = 90;

        $r273 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r272);

        specialinvoke $r271.<java.lang.String: void <init>(byte[])>($r273);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Wg==\r\n", $r271);

        $r274 = new java.lang.String;

        $r275 = newarray (byte)[1];

        $r275[0] = 91;

        $r276 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r275);

        specialinvoke $r274.<java.lang.String: void <init>(byte[])>($r276);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ww==\r\n", $r274);

        $r277 = new java.lang.String;

        $r278 = newarray (byte)[1];

        $r278[0] = 92;

        $r279 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r278);

        specialinvoke $r277.<java.lang.String: void <init>(byte[])>($r279);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("XA==\r\n", $r277);

        $r280 = new java.lang.String;

        $r281 = newarray (byte)[1];

        $r281[0] = 93;

        $r282 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r281);

        specialinvoke $r280.<java.lang.String: void <init>(byte[])>($r282);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("XQ==\r\n", $r280);

        $r283 = new java.lang.String;

        $r284 = newarray (byte)[1];

        $r284[0] = 94;

        $r285 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r284);

        specialinvoke $r283.<java.lang.String: void <init>(byte[])>($r285);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Xg==\r\n", $r283);

        $r286 = new java.lang.String;

        $r287 = newarray (byte)[1];

        $r287[0] = 95;

        $r288 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r287);

        specialinvoke $r286.<java.lang.String: void <init>(byte[])>($r288);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Xw==\r\n", $r286);

        $r289 = new java.lang.String;

        $r290 = newarray (byte)[1];

        $r290[0] = 96;

        $r291 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r290);

        specialinvoke $r289.<java.lang.String: void <init>(byte[])>($r291);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("YA==\r\n", $r289);

        $r292 = new java.lang.String;

        $r293 = newarray (byte)[1];

        $r293[0] = 97;

        $r294 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r293);

        specialinvoke $r292.<java.lang.String: void <init>(byte[])>($r294);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("YQ==\r\n", $r292);

        $r295 = new java.lang.String;

        $r296 = newarray (byte)[1];

        $r296[0] = 98;

        $r297 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r296);

        specialinvoke $r295.<java.lang.String: void <init>(byte[])>($r297);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Yg==\r\n", $r295);

        $r298 = new java.lang.String;

        $r299 = newarray (byte)[1];

        $r299[0] = 99;

        $r300 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r299);

        specialinvoke $r298.<java.lang.String: void <init>(byte[])>($r300);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Yw==\r\n", $r298);

        $r301 = new java.lang.String;

        $r302 = newarray (byte)[1];

        $r302[0] = 100;

        $r303 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r302);

        specialinvoke $r301.<java.lang.String: void <init>(byte[])>($r303);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ZA==\r\n", $r301);

        $r304 = new java.lang.String;

        $r305 = newarray (byte)[1];

        $r305[0] = 101;

        $r306 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r305);

        specialinvoke $r304.<java.lang.String: void <init>(byte[])>($r306);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ZQ==\r\n", $r304);

        $r307 = new java.lang.String;

        $r308 = newarray (byte)[1];

        $r308[0] = 102;

        $r309 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r308);

        specialinvoke $r307.<java.lang.String: void <init>(byte[])>($r309);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zg==\r\n", $r307);

        $r310 = new java.lang.String;

        $r311 = newarray (byte)[1];

        $r311[0] = 103;

        $r312 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r311);

        specialinvoke $r310.<java.lang.String: void <init>(byte[])>($r312);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Zw==\r\n", $r310);

        $r313 = new java.lang.String;

        $r314 = newarray (byte)[1];

        $r314[0] = 104;

        $r315 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r314);

        specialinvoke $r313.<java.lang.String: void <init>(byte[])>($r315);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aA==\r\n", $r313);

        return;
    }

    public void testTriplets()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52, $r55, $r58, $r61, $r64, $r67, $r70, $r73, $r76, $r79, $r82, $r85, $r88, $r91, $r94, $r97, $r100, $r103, $r106, $r109, $r112, $r115, $r118, $r121, $r124, $r127, $r130, $r133, $r136, $r139, $r142, $r145, $r148, $r151, $r154, $r157, $r160, $r163, $r166, $r169, $r172, $r175, $r178, $r181, $r184, $r187, $r190;
        byte[] $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r50, $r51, $r53, $r54, $r56, $r57, $r59, $r60, $r62, $r63, $r65, $r66, $r68, $r69, $r71, $r72, $r74, $r75, $r77, $r78, $r80, $r81, $r83, $r84, $r86, $r87, $r89, $r90, $r92, $r93, $r95, $r96, $r98, $r99, $r101, $r102, $r104, $r105, $r107, $r108, $r110, $r111, $r113, $r114, $r116, $r117, $r119, $r120, $r122, $r123, $r125, $r126, $r128, $r129, $r131, $r132, $r134, $r135, $r137, $r138, $r140, $r141, $r143, $r144, $r146, $r147, $r149, $r150, $r152, $r153, $r155, $r156, $r158, $r159, $r161, $r162, $r164, $r165, $r167, $r168, $r170, $r171, $r173, $r174, $r176, $r177, $r179, $r180, $r182, $r183, $r185, $r186, $r188, $r189, $r191, $r192;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r2 = newarray (byte)[3];

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r2);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAA", $r1);

        $r4 = new java.lang.String;

        $r5 = newarray (byte)[3];

        $r5[2] = 1;

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r5);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAB", $r4);

        $r7 = new java.lang.String;

        $r8 = newarray (byte)[3];

        $r8[2] = 2;

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r8);

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAC", $r7);

        $r10 = new java.lang.String;

        $r11 = newarray (byte)[3];

        $r11[2] = 3;

        $r12 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r11);

        specialinvoke $r10.<java.lang.String: void <init>(byte[])>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAD", $r10);

        $r13 = new java.lang.String;

        $r14 = newarray (byte)[3];

        $r14[2] = 4;

        $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r14);

        specialinvoke $r13.<java.lang.String: void <init>(byte[])>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAE", $r13);

        $r16 = new java.lang.String;

        $r17 = newarray (byte)[3];

        $r17[2] = 5;

        $r18 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r17);

        specialinvoke $r16.<java.lang.String: void <init>(byte[])>($r18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAF", $r16);

        $r19 = new java.lang.String;

        $r20 = newarray (byte)[3];

        $r20[2] = 6;

        $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r20);

        specialinvoke $r19.<java.lang.String: void <init>(byte[])>($r21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAG", $r19);

        $r22 = new java.lang.String;

        $r23 = newarray (byte)[3];

        $r23[2] = 7;

        $r24 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r23);

        specialinvoke $r22.<java.lang.String: void <init>(byte[])>($r24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAH", $r22);

        $r25 = new java.lang.String;

        $r26 = newarray (byte)[3];

        $r26[2] = 8;

        $r27 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r26);

        specialinvoke $r25.<java.lang.String: void <init>(byte[])>($r27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAI", $r25);

        $r28 = new java.lang.String;

        $r29 = newarray (byte)[3];

        $r29[2] = 9;

        $r30 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r29);

        specialinvoke $r28.<java.lang.String: void <init>(byte[])>($r30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAJ", $r28);

        $r31 = new java.lang.String;

        $r32 = newarray (byte)[3];

        $r32[2] = 10;

        $r33 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r32);

        specialinvoke $r31.<java.lang.String: void <init>(byte[])>($r33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAK", $r31);

        $r34 = new java.lang.String;

        $r35 = newarray (byte)[3];

        $r35[2] = 11;

        $r36 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r35);

        specialinvoke $r34.<java.lang.String: void <init>(byte[])>($r36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAL", $r34);

        $r37 = new java.lang.String;

        $r38 = newarray (byte)[3];

        $r38[2] = 12;

        $r39 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r38);

        specialinvoke $r37.<java.lang.String: void <init>(byte[])>($r39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAM", $r37);

        $r40 = new java.lang.String;

        $r41 = newarray (byte)[3];

        $r41[2] = 13;

        $r42 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r41);

        specialinvoke $r40.<java.lang.String: void <init>(byte[])>($r42);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAN", $r40);

        $r43 = new java.lang.String;

        $r44 = newarray (byte)[3];

        $r44[2] = 14;

        $r45 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r44);

        specialinvoke $r43.<java.lang.String: void <init>(byte[])>($r45);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAO", $r43);

        $r46 = new java.lang.String;

        $r47 = newarray (byte)[3];

        $r47[2] = 15;

        $r48 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r47);

        specialinvoke $r46.<java.lang.String: void <init>(byte[])>($r48);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAP", $r46);

        $r49 = new java.lang.String;

        $r50 = newarray (byte)[3];

        $r50[2] = 16;

        $r51 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r50);

        specialinvoke $r49.<java.lang.String: void <init>(byte[])>($r51);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAQ", $r49);

        $r52 = new java.lang.String;

        $r53 = newarray (byte)[3];

        $r53[2] = 17;

        $r54 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r53);

        specialinvoke $r52.<java.lang.String: void <init>(byte[])>($r54);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAR", $r52);

        $r55 = new java.lang.String;

        $r56 = newarray (byte)[3];

        $r56[2] = 18;

        $r57 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r56);

        specialinvoke $r55.<java.lang.String: void <init>(byte[])>($r57);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAS", $r55);

        $r58 = new java.lang.String;

        $r59 = newarray (byte)[3];

        $r59[2] = 19;

        $r60 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r59);

        specialinvoke $r58.<java.lang.String: void <init>(byte[])>($r60);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAT", $r58);

        $r61 = new java.lang.String;

        $r62 = newarray (byte)[3];

        $r62[2] = 20;

        $r63 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r62);

        specialinvoke $r61.<java.lang.String: void <init>(byte[])>($r63);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAU", $r61);

        $r64 = new java.lang.String;

        $r65 = newarray (byte)[3];

        $r65[2] = 21;

        $r66 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r65);

        specialinvoke $r64.<java.lang.String: void <init>(byte[])>($r66);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAV", $r64);

        $r67 = new java.lang.String;

        $r68 = newarray (byte)[3];

        $r68[2] = 22;

        $r69 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r68);

        specialinvoke $r67.<java.lang.String: void <init>(byte[])>($r69);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAW", $r67);

        $r70 = new java.lang.String;

        $r71 = newarray (byte)[3];

        $r71[2] = 23;

        $r72 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r71);

        specialinvoke $r70.<java.lang.String: void <init>(byte[])>($r72);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAX", $r70);

        $r73 = new java.lang.String;

        $r74 = newarray (byte)[3];

        $r74[2] = 24;

        $r75 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r74);

        specialinvoke $r73.<java.lang.String: void <init>(byte[])>($r75);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAY", $r73);

        $r76 = new java.lang.String;

        $r77 = newarray (byte)[3];

        $r77[2] = 25;

        $r78 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r77);

        specialinvoke $r76.<java.lang.String: void <init>(byte[])>($r78);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAZ", $r76);

        $r79 = new java.lang.String;

        $r80 = newarray (byte)[3];

        $r80[2] = 26;

        $r81 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r80);

        specialinvoke $r79.<java.lang.String: void <init>(byte[])>($r81);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAa", $r79);

        $r82 = new java.lang.String;

        $r83 = newarray (byte)[3];

        $r83[2] = 27;

        $r84 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r83);

        specialinvoke $r82.<java.lang.String: void <init>(byte[])>($r84);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAb", $r82);

        $r85 = new java.lang.String;

        $r86 = newarray (byte)[3];

        $r86[2] = 28;

        $r87 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r86);

        specialinvoke $r85.<java.lang.String: void <init>(byte[])>($r87);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAc", $r85);

        $r88 = new java.lang.String;

        $r89 = newarray (byte)[3];

        $r89[2] = 29;

        $r90 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r89);

        specialinvoke $r88.<java.lang.String: void <init>(byte[])>($r90);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAd", $r88);

        $r91 = new java.lang.String;

        $r92 = newarray (byte)[3];

        $r92[2] = 30;

        $r93 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r92);

        specialinvoke $r91.<java.lang.String: void <init>(byte[])>($r93);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAe", $r91);

        $r94 = new java.lang.String;

        $r95 = newarray (byte)[3];

        $r95[2] = 31;

        $r96 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r95);

        specialinvoke $r94.<java.lang.String: void <init>(byte[])>($r96);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAf", $r94);

        $r97 = new java.lang.String;

        $r98 = newarray (byte)[3];

        $r98[2] = 32;

        $r99 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r98);

        specialinvoke $r97.<java.lang.String: void <init>(byte[])>($r99);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAg", $r97);

        $r100 = new java.lang.String;

        $r101 = newarray (byte)[3];

        $r101[2] = 33;

        $r102 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r101);

        specialinvoke $r100.<java.lang.String: void <init>(byte[])>($r102);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAh", $r100);

        $r103 = new java.lang.String;

        $r104 = newarray (byte)[3];

        $r104[2] = 34;

        $r105 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r104);

        specialinvoke $r103.<java.lang.String: void <init>(byte[])>($r105);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAi", $r103);

        $r106 = new java.lang.String;

        $r107 = newarray (byte)[3];

        $r107[2] = 35;

        $r108 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r107);

        specialinvoke $r106.<java.lang.String: void <init>(byte[])>($r108);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAj", $r106);

        $r109 = new java.lang.String;

        $r110 = newarray (byte)[3];

        $r110[2] = 36;

        $r111 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r110);

        specialinvoke $r109.<java.lang.String: void <init>(byte[])>($r111);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAk", $r109);

        $r112 = new java.lang.String;

        $r113 = newarray (byte)[3];

        $r113[2] = 37;

        $r114 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r113);

        specialinvoke $r112.<java.lang.String: void <init>(byte[])>($r114);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAl", $r112);

        $r115 = new java.lang.String;

        $r116 = newarray (byte)[3];

        $r116[2] = 38;

        $r117 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r116);

        specialinvoke $r115.<java.lang.String: void <init>(byte[])>($r117);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAm", $r115);

        $r118 = new java.lang.String;

        $r119 = newarray (byte)[3];

        $r119[2] = 39;

        $r120 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r119);

        specialinvoke $r118.<java.lang.String: void <init>(byte[])>($r120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAn", $r118);

        $r121 = new java.lang.String;

        $r122 = newarray (byte)[3];

        $r122[2] = 40;

        $r123 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r122);

        specialinvoke $r121.<java.lang.String: void <init>(byte[])>($r123);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAo", $r121);

        $r124 = new java.lang.String;

        $r125 = newarray (byte)[3];

        $r125[2] = 41;

        $r126 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r125);

        specialinvoke $r124.<java.lang.String: void <init>(byte[])>($r126);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAp", $r124);

        $r127 = new java.lang.String;

        $r128 = newarray (byte)[3];

        $r128[2] = 42;

        $r129 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r128);

        specialinvoke $r127.<java.lang.String: void <init>(byte[])>($r129);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAq", $r127);

        $r130 = new java.lang.String;

        $r131 = newarray (byte)[3];

        $r131[2] = 43;

        $r132 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r131);

        specialinvoke $r130.<java.lang.String: void <init>(byte[])>($r132);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAr", $r130);

        $r133 = new java.lang.String;

        $r134 = newarray (byte)[3];

        $r134[2] = 44;

        $r135 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r134);

        specialinvoke $r133.<java.lang.String: void <init>(byte[])>($r135);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAs", $r133);

        $r136 = new java.lang.String;

        $r137 = newarray (byte)[3];

        $r137[2] = 45;

        $r138 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r137);

        specialinvoke $r136.<java.lang.String: void <init>(byte[])>($r138);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAt", $r136);

        $r139 = new java.lang.String;

        $r140 = newarray (byte)[3];

        $r140[2] = 46;

        $r141 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r140);

        specialinvoke $r139.<java.lang.String: void <init>(byte[])>($r141);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAu", $r139);

        $r142 = new java.lang.String;

        $r143 = newarray (byte)[3];

        $r143[2] = 47;

        $r144 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r143);

        specialinvoke $r142.<java.lang.String: void <init>(byte[])>($r144);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAv", $r142);

        $r145 = new java.lang.String;

        $r146 = newarray (byte)[3];

        $r146[2] = 48;

        $r147 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r146);

        specialinvoke $r145.<java.lang.String: void <init>(byte[])>($r147);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAw", $r145);

        $r148 = new java.lang.String;

        $r149 = newarray (byte)[3];

        $r149[2] = 49;

        $r150 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r149);

        specialinvoke $r148.<java.lang.String: void <init>(byte[])>($r150);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAx", $r148);

        $r151 = new java.lang.String;

        $r152 = newarray (byte)[3];

        $r152[2] = 50;

        $r153 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r152);

        specialinvoke $r151.<java.lang.String: void <init>(byte[])>($r153);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAy", $r151);

        $r154 = new java.lang.String;

        $r155 = newarray (byte)[3];

        $r155[2] = 51;

        $r156 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r155);

        specialinvoke $r154.<java.lang.String: void <init>(byte[])>($r156);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAz", $r154);

        $r157 = new java.lang.String;

        $r158 = newarray (byte)[3];

        $r158[2] = 52;

        $r159 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r158);

        specialinvoke $r157.<java.lang.String: void <init>(byte[])>($r159);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA0", $r157);

        $r160 = new java.lang.String;

        $r161 = newarray (byte)[3];

        $r161[2] = 53;

        $r162 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r161);

        specialinvoke $r160.<java.lang.String: void <init>(byte[])>($r162);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA1", $r160);

        $r163 = new java.lang.String;

        $r164 = newarray (byte)[3];

        $r164[2] = 54;

        $r165 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r164);

        specialinvoke $r163.<java.lang.String: void <init>(byte[])>($r165);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA2", $r163);

        $r166 = new java.lang.String;

        $r167 = newarray (byte)[3];

        $r167[2] = 55;

        $r168 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r167);

        specialinvoke $r166.<java.lang.String: void <init>(byte[])>($r168);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA3", $r166);

        $r169 = new java.lang.String;

        $r170 = newarray (byte)[3];

        $r170[2] = 56;

        $r171 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r170);

        specialinvoke $r169.<java.lang.String: void <init>(byte[])>($r171);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA4", $r169);

        $r172 = new java.lang.String;

        $r173 = newarray (byte)[3];

        $r173[2] = 57;

        $r174 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r173);

        specialinvoke $r172.<java.lang.String: void <init>(byte[])>($r174);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA5", $r172);

        $r175 = new java.lang.String;

        $r176 = newarray (byte)[3];

        $r176[2] = 58;

        $r177 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r176);

        specialinvoke $r175.<java.lang.String: void <init>(byte[])>($r177);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA6", $r175);

        $r178 = new java.lang.String;

        $r179 = newarray (byte)[3];

        $r179[2] = 59;

        $r180 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r179);

        specialinvoke $r178.<java.lang.String: void <init>(byte[])>($r180);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA7", $r178);

        $r181 = new java.lang.String;

        $r182 = newarray (byte)[3];

        $r182[2] = 60;

        $r183 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r182);

        specialinvoke $r181.<java.lang.String: void <init>(byte[])>($r183);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA8", $r181);

        $r184 = new java.lang.String;

        $r185 = newarray (byte)[3];

        $r185[2] = 61;

        $r186 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r185);

        specialinvoke $r184.<java.lang.String: void <init>(byte[])>($r186);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA9", $r184);

        $r187 = new java.lang.String;

        $r188 = newarray (byte)[3];

        $r188[2] = 62;

        $r189 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r188);

        specialinvoke $r187.<java.lang.String: void <init>(byte[])>($r189);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA+", $r187);

        $r190 = new java.lang.String;

        $r191 = newarray (byte)[3];

        $r191[2] = 63;

        $r192 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r191);

        specialinvoke $r190.<java.lang.String: void <init>(byte[])>($r192);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA/", $r190);

        return;
    }

    public void testTripletsChunked()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        java.lang.String $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52, $r55, $r58, $r61, $r64, $r67, $r70, $r73, $r76, $r79, $r82, $r85, $r88, $r91, $r94, $r97, $r100, $r103, $r106, $r109, $r112, $r115, $r118, $r121, $r124, $r127, $r130, $r133, $r136, $r139, $r142, $r145, $r148, $r151, $r154, $r157, $r160, $r163, $r166, $r169, $r172, $r175, $r178, $r181, $r184, $r187, $r190;
        byte[] $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r50, $r51, $r53, $r54, $r56, $r57, $r59, $r60, $r62, $r63, $r65, $r66, $r68, $r69, $r71, $r72, $r74, $r75, $r77, $r78, $r80, $r81, $r83, $r84, $r86, $r87, $r89, $r90, $r92, $r93, $r95, $r96, $r98, $r99, $r101, $r102, $r104, $r105, $r107, $r108, $r110, $r111, $r113, $r114, $r116, $r117, $r119, $r120, $r122, $r123, $r125, $r126, $r128, $r129, $r131, $r132, $r134, $r135, $r137, $r138, $r140, $r141, $r143, $r144, $r146, $r147, $r149, $r150, $r152, $r153, $r155, $r156, $r158, $r159, $r161, $r162, $r164, $r165, $r167, $r168, $r170, $r171, $r173, $r174, $r176, $r177, $r179, $r180, $r182, $r183, $r185, $r186, $r188, $r189, $r191, $r192;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r1 = new java.lang.String;

        $r2 = newarray (byte)[3];

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r2);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAA\r\n", $r1);

        $r4 = new java.lang.String;

        $r5 = newarray (byte)[3];

        $r5[2] = 1;

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r5);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAB\r\n", $r4);

        $r7 = new java.lang.String;

        $r8 = newarray (byte)[3];

        $r8[2] = 2;

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r8);

        specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAC\r\n", $r7);

        $r10 = new java.lang.String;

        $r11 = newarray (byte)[3];

        $r11[2] = 3;

        $r12 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r11);

        specialinvoke $r10.<java.lang.String: void <init>(byte[])>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAD\r\n", $r10);

        $r13 = new java.lang.String;

        $r14 = newarray (byte)[3];

        $r14[2] = 4;

        $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r14);

        specialinvoke $r13.<java.lang.String: void <init>(byte[])>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAE\r\n", $r13);

        $r16 = new java.lang.String;

        $r17 = newarray (byte)[3];

        $r17[2] = 5;

        $r18 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r17);

        specialinvoke $r16.<java.lang.String: void <init>(byte[])>($r18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAF\r\n", $r16);

        $r19 = new java.lang.String;

        $r20 = newarray (byte)[3];

        $r20[2] = 6;

        $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r20);

        specialinvoke $r19.<java.lang.String: void <init>(byte[])>($r21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAG\r\n", $r19);

        $r22 = new java.lang.String;

        $r23 = newarray (byte)[3];

        $r23[2] = 7;

        $r24 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r23);

        specialinvoke $r22.<java.lang.String: void <init>(byte[])>($r24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAH\r\n", $r22);

        $r25 = new java.lang.String;

        $r26 = newarray (byte)[3];

        $r26[2] = 8;

        $r27 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r26);

        specialinvoke $r25.<java.lang.String: void <init>(byte[])>($r27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAI\r\n", $r25);

        $r28 = new java.lang.String;

        $r29 = newarray (byte)[3];

        $r29[2] = 9;

        $r30 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r29);

        specialinvoke $r28.<java.lang.String: void <init>(byte[])>($r30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAJ\r\n", $r28);

        $r31 = new java.lang.String;

        $r32 = newarray (byte)[3];

        $r32[2] = 10;

        $r33 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r32);

        specialinvoke $r31.<java.lang.String: void <init>(byte[])>($r33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAK\r\n", $r31);

        $r34 = new java.lang.String;

        $r35 = newarray (byte)[3];

        $r35[2] = 11;

        $r36 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r35);

        specialinvoke $r34.<java.lang.String: void <init>(byte[])>($r36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAL\r\n", $r34);

        $r37 = new java.lang.String;

        $r38 = newarray (byte)[3];

        $r38[2] = 12;

        $r39 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r38);

        specialinvoke $r37.<java.lang.String: void <init>(byte[])>($r39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAM\r\n", $r37);

        $r40 = new java.lang.String;

        $r41 = newarray (byte)[3];

        $r41[2] = 13;

        $r42 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r41);

        specialinvoke $r40.<java.lang.String: void <init>(byte[])>($r42);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAN\r\n", $r40);

        $r43 = new java.lang.String;

        $r44 = newarray (byte)[3];

        $r44[2] = 14;

        $r45 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r44);

        specialinvoke $r43.<java.lang.String: void <init>(byte[])>($r45);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAO\r\n", $r43);

        $r46 = new java.lang.String;

        $r47 = newarray (byte)[3];

        $r47[2] = 15;

        $r48 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r47);

        specialinvoke $r46.<java.lang.String: void <init>(byte[])>($r48);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAP\r\n", $r46);

        $r49 = new java.lang.String;

        $r50 = newarray (byte)[3];

        $r50[2] = 16;

        $r51 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r50);

        specialinvoke $r49.<java.lang.String: void <init>(byte[])>($r51);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAQ\r\n", $r49);

        $r52 = new java.lang.String;

        $r53 = newarray (byte)[3];

        $r53[2] = 17;

        $r54 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r53);

        specialinvoke $r52.<java.lang.String: void <init>(byte[])>($r54);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAR\r\n", $r52);

        $r55 = new java.lang.String;

        $r56 = newarray (byte)[3];

        $r56[2] = 18;

        $r57 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r56);

        specialinvoke $r55.<java.lang.String: void <init>(byte[])>($r57);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAS\r\n", $r55);

        $r58 = new java.lang.String;

        $r59 = newarray (byte)[3];

        $r59[2] = 19;

        $r60 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r59);

        specialinvoke $r58.<java.lang.String: void <init>(byte[])>($r60);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAT\r\n", $r58);

        $r61 = new java.lang.String;

        $r62 = newarray (byte)[3];

        $r62[2] = 20;

        $r63 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r62);

        specialinvoke $r61.<java.lang.String: void <init>(byte[])>($r63);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAU\r\n", $r61);

        $r64 = new java.lang.String;

        $r65 = newarray (byte)[3];

        $r65[2] = 21;

        $r66 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r65);

        specialinvoke $r64.<java.lang.String: void <init>(byte[])>($r66);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAV\r\n", $r64);

        $r67 = new java.lang.String;

        $r68 = newarray (byte)[3];

        $r68[2] = 22;

        $r69 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r68);

        specialinvoke $r67.<java.lang.String: void <init>(byte[])>($r69);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAW\r\n", $r67);

        $r70 = new java.lang.String;

        $r71 = newarray (byte)[3];

        $r71[2] = 23;

        $r72 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r71);

        specialinvoke $r70.<java.lang.String: void <init>(byte[])>($r72);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAX\r\n", $r70);

        $r73 = new java.lang.String;

        $r74 = newarray (byte)[3];

        $r74[2] = 24;

        $r75 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r74);

        specialinvoke $r73.<java.lang.String: void <init>(byte[])>($r75);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAY\r\n", $r73);

        $r76 = new java.lang.String;

        $r77 = newarray (byte)[3];

        $r77[2] = 25;

        $r78 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r77);

        specialinvoke $r76.<java.lang.String: void <init>(byte[])>($r78);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAZ\r\n", $r76);

        $r79 = new java.lang.String;

        $r80 = newarray (byte)[3];

        $r80[2] = 26;

        $r81 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r80);

        specialinvoke $r79.<java.lang.String: void <init>(byte[])>($r81);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAa\r\n", $r79);

        $r82 = new java.lang.String;

        $r83 = newarray (byte)[3];

        $r83[2] = 27;

        $r84 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r83);

        specialinvoke $r82.<java.lang.String: void <init>(byte[])>($r84);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAb\r\n", $r82);

        $r85 = new java.lang.String;

        $r86 = newarray (byte)[3];

        $r86[2] = 28;

        $r87 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r86);

        specialinvoke $r85.<java.lang.String: void <init>(byte[])>($r87);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAc\r\n", $r85);

        $r88 = new java.lang.String;

        $r89 = newarray (byte)[3];

        $r89[2] = 29;

        $r90 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r89);

        specialinvoke $r88.<java.lang.String: void <init>(byte[])>($r90);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAd\r\n", $r88);

        $r91 = new java.lang.String;

        $r92 = newarray (byte)[3];

        $r92[2] = 30;

        $r93 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r92);

        specialinvoke $r91.<java.lang.String: void <init>(byte[])>($r93);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAe\r\n", $r91);

        $r94 = new java.lang.String;

        $r95 = newarray (byte)[3];

        $r95[2] = 31;

        $r96 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r95);

        specialinvoke $r94.<java.lang.String: void <init>(byte[])>($r96);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAf\r\n", $r94);

        $r97 = new java.lang.String;

        $r98 = newarray (byte)[3];

        $r98[2] = 32;

        $r99 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r98);

        specialinvoke $r97.<java.lang.String: void <init>(byte[])>($r99);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAg\r\n", $r97);

        $r100 = new java.lang.String;

        $r101 = newarray (byte)[3];

        $r101[2] = 33;

        $r102 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r101);

        specialinvoke $r100.<java.lang.String: void <init>(byte[])>($r102);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAh\r\n", $r100);

        $r103 = new java.lang.String;

        $r104 = newarray (byte)[3];

        $r104[2] = 34;

        $r105 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r104);

        specialinvoke $r103.<java.lang.String: void <init>(byte[])>($r105);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAi\r\n", $r103);

        $r106 = new java.lang.String;

        $r107 = newarray (byte)[3];

        $r107[2] = 35;

        $r108 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r107);

        specialinvoke $r106.<java.lang.String: void <init>(byte[])>($r108);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAj\r\n", $r106);

        $r109 = new java.lang.String;

        $r110 = newarray (byte)[3];

        $r110[2] = 36;

        $r111 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r110);

        specialinvoke $r109.<java.lang.String: void <init>(byte[])>($r111);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAk\r\n", $r109);

        $r112 = new java.lang.String;

        $r113 = newarray (byte)[3];

        $r113[2] = 37;

        $r114 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r113);

        specialinvoke $r112.<java.lang.String: void <init>(byte[])>($r114);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAl\r\n", $r112);

        $r115 = new java.lang.String;

        $r116 = newarray (byte)[3];

        $r116[2] = 38;

        $r117 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r116);

        specialinvoke $r115.<java.lang.String: void <init>(byte[])>($r117);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAm\r\n", $r115);

        $r118 = new java.lang.String;

        $r119 = newarray (byte)[3];

        $r119[2] = 39;

        $r120 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r119);

        specialinvoke $r118.<java.lang.String: void <init>(byte[])>($r120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAn\r\n", $r118);

        $r121 = new java.lang.String;

        $r122 = newarray (byte)[3];

        $r122[2] = 40;

        $r123 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r122);

        specialinvoke $r121.<java.lang.String: void <init>(byte[])>($r123);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAo\r\n", $r121);

        $r124 = new java.lang.String;

        $r125 = newarray (byte)[3];

        $r125[2] = 41;

        $r126 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r125);

        specialinvoke $r124.<java.lang.String: void <init>(byte[])>($r126);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAp\r\n", $r124);

        $r127 = new java.lang.String;

        $r128 = newarray (byte)[3];

        $r128[2] = 42;

        $r129 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r128);

        specialinvoke $r127.<java.lang.String: void <init>(byte[])>($r129);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAq\r\n", $r127);

        $r130 = new java.lang.String;

        $r131 = newarray (byte)[3];

        $r131[2] = 43;

        $r132 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r131);

        specialinvoke $r130.<java.lang.String: void <init>(byte[])>($r132);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAr\r\n", $r130);

        $r133 = new java.lang.String;

        $r134 = newarray (byte)[3];

        $r134[2] = 44;

        $r135 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r134);

        specialinvoke $r133.<java.lang.String: void <init>(byte[])>($r135);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAs\r\n", $r133);

        $r136 = new java.lang.String;

        $r137 = newarray (byte)[3];

        $r137[2] = 45;

        $r138 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r137);

        specialinvoke $r136.<java.lang.String: void <init>(byte[])>($r138);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAt\r\n", $r136);

        $r139 = new java.lang.String;

        $r140 = newarray (byte)[3];

        $r140[2] = 46;

        $r141 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r140);

        specialinvoke $r139.<java.lang.String: void <init>(byte[])>($r141);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAu\r\n", $r139);

        $r142 = new java.lang.String;

        $r143 = newarray (byte)[3];

        $r143[2] = 47;

        $r144 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r143);

        specialinvoke $r142.<java.lang.String: void <init>(byte[])>($r144);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAv\r\n", $r142);

        $r145 = new java.lang.String;

        $r146 = newarray (byte)[3];

        $r146[2] = 48;

        $r147 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r146);

        specialinvoke $r145.<java.lang.String: void <init>(byte[])>($r147);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAw\r\n", $r145);

        $r148 = new java.lang.String;

        $r149 = newarray (byte)[3];

        $r149[2] = 49;

        $r150 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r149);

        specialinvoke $r148.<java.lang.String: void <init>(byte[])>($r150);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAx\r\n", $r148);

        $r151 = new java.lang.String;

        $r152 = newarray (byte)[3];

        $r152[2] = 50;

        $r153 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r152);

        specialinvoke $r151.<java.lang.String: void <init>(byte[])>($r153);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAy\r\n", $r151);

        $r154 = new java.lang.String;

        $r155 = newarray (byte)[3];

        $r155[2] = 51;

        $r156 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r155);

        specialinvoke $r154.<java.lang.String: void <init>(byte[])>($r156);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAAz\r\n", $r154);

        $r157 = new java.lang.String;

        $r158 = newarray (byte)[3];

        $r158[2] = 52;

        $r159 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r158);

        specialinvoke $r157.<java.lang.String: void <init>(byte[])>($r159);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA0\r\n", $r157);

        $r160 = new java.lang.String;

        $r161 = newarray (byte)[3];

        $r161[2] = 53;

        $r162 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r161);

        specialinvoke $r160.<java.lang.String: void <init>(byte[])>($r162);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA1\r\n", $r160);

        $r163 = new java.lang.String;

        $r164 = newarray (byte)[3];

        $r164[2] = 54;

        $r165 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r164);

        specialinvoke $r163.<java.lang.String: void <init>(byte[])>($r165);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA2\r\n", $r163);

        $r166 = new java.lang.String;

        $r167 = newarray (byte)[3];

        $r167[2] = 55;

        $r168 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r167);

        specialinvoke $r166.<java.lang.String: void <init>(byte[])>($r168);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA3\r\n", $r166);

        $r169 = new java.lang.String;

        $r170 = newarray (byte)[3];

        $r170[2] = 56;

        $r171 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r170);

        specialinvoke $r169.<java.lang.String: void <init>(byte[])>($r171);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA4\r\n", $r169);

        $r172 = new java.lang.String;

        $r173 = newarray (byte)[3];

        $r173[2] = 57;

        $r174 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r173);

        specialinvoke $r172.<java.lang.String: void <init>(byte[])>($r174);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA5\r\n", $r172);

        $r175 = new java.lang.String;

        $r176 = newarray (byte)[3];

        $r176[2] = 58;

        $r177 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r176);

        specialinvoke $r175.<java.lang.String: void <init>(byte[])>($r177);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA6\r\n", $r175);

        $r178 = new java.lang.String;

        $r179 = newarray (byte)[3];

        $r179[2] = 59;

        $r180 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r179);

        specialinvoke $r178.<java.lang.String: void <init>(byte[])>($r180);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA7\r\n", $r178);

        $r181 = new java.lang.String;

        $r182 = newarray (byte)[3];

        $r182[2] = 60;

        $r183 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r182);

        specialinvoke $r181.<java.lang.String: void <init>(byte[])>($r183);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA8\r\n", $r181);

        $r184 = new java.lang.String;

        $r185 = newarray (byte)[3];

        $r185[2] = 61;

        $r186 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r185);

        specialinvoke $r184.<java.lang.String: void <init>(byte[])>($r186);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA9\r\n", $r184);

        $r187 = new java.lang.String;

        $r188 = newarray (byte)[3];

        $r188[2] = 62;

        $r189 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r188);

        specialinvoke $r187.<java.lang.String: void <init>(byte[])>($r189);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA+\r\n", $r187);

        $r190 = new java.lang.String;

        $r191 = newarray (byte)[3];

        $r191[2] = 63;

        $r192 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])>($r191);

        specialinvoke $r190.<java.lang.String: void <init>(byte[])>($r192);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("AAA/\r\n", $r190);

        return;
    }

    public void testUrlSafe()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[][] r1;
        byte[] r2, r3, r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18;
        java.lang.String $r7, $r11, $r15, $r19;
        boolean $z0, $z1, $z2, $z3;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        i0 = 0;

        goto label2;

     label1:
        r1 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[][] randomData(int,boolean)>(i0, 1);

        r2 = r1[1];

        r3 = r1[0];

        r4 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r2);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("url-safe i=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r3, r4);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r7, $z0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("url-safe i=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no \'=\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: boolean bytesContain(byte[],byte)>(r2, 61);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($r11, $z1);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("url-safe i=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no \'\\\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: boolean bytesContain(byte[],byte)>(r2, 92);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($r15, $z2);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("url-safe i=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no \'+\'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: boolean bytesContain(byte[],byte)>(r2, 43);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($r19, $z3);

        i0 = i0 + 1;

     label2:
        if i0 <= 150 goto label1;

        return;
    }

    public void testUUID() throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[][] r1, r2, r3, r4, r5;
        byte[] r6, r7, r8, r9, r10, r11, $r14, $r17, $r20, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51;
        java.lang.String $r12, $r15, $r18, $r21;
        char[] $r13, $r16, $r19, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r1 = newarray (byte[])[4];

        $r12 = "94ed8d0319e4493399560fb67404d370";

        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        $r14 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r13);

        r1[0] = $r14;

        $r15 = "2bf7cc2701fe4397b49ebeed5acc7090";

        $r16 = virtualinvoke $r15.<java.lang.String: char[] toCharArray()>();

        $r17 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r16);

        r1[1] = $r17;

        $r18 = "64be154b6ffa40258d1a01288e7c31ca";

        $r19 = virtualinvoke $r18.<java.lang.String: char[] toCharArray()>();

        $r20 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r19);

        r1[2] = $r20;

        $r21 = "ff7f8fc01cdb471a8c8b5a9306183fe8";

        $r22 = virtualinvoke $r21.<java.lang.String: char[] toCharArray()>();

        $r23 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r22);

        r1[3] = $r23;

        r2 = newarray (byte[])[4];

        $r24 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("lO2NAxnkSTOZVg+2dATTcA==");

        r2[0] = $r24;

        $r25 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("K/fMJwH+Q5e0nr7tWsxwkA==");

        r2[1] = $r25;

        $r26 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("ZL4VS2/6QCWNGgEojnwxyg==");

        r2[2] = $r26;

        $r27 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("/3+PwBzbRxqMi1qTBhg/6A==");

        r2[3] = $r27;

        r3 = newarray (byte[])[4];

        $r28 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("lO2NAxnkSTOZVg-2dATTcA==");

        r3[0] = $r28;

        $r29 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("K_fMJwH-Q5e0nr7tWsxwkA==");

        r3[1] = $r29;

        $r30 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("ZL4VS2_6QCWNGgEojnwxyg==");

        r3[2] = $r30;

        $r31 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("_3-PwBzbRxqMi1qTBhg_6A==");

        r3[3] = $r31;

        r4 = newarray (byte[])[4];

        $r32 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("lO2NAxnkSTOZVg-2dATTcA=");

        r4[0] = $r32;

        $r33 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("K_fMJwH-Q5e0nr7tWsxwkA=");

        r4[1] = $r33;

        $r34 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("ZL4VS2_6QCWNGgEojnwxyg=");

        r4[2] = $r34;

        $r35 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("_3-PwBzbRxqMi1qTBhg_6A=");

        r4[3] = $r35;

        r5 = newarray (byte[])[4];

        $r36 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("lO2NAxnkSTOZVg-2dATTcA");

        r5[0] = $r36;

        $r37 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("K_fMJwH-Q5e0nr7tWsxwkA");

        r5[1] = $r37;

        $r38 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("ZL4VS2_6QCWNGgEojnwxyg");

        r5[2] = $r38;

        $r39 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("_3-PwBzbRxqMi1qTBhg_6A");

        r5[3] = $r39;

        i0 = 0;

        goto label2;

     label1:
        $r40 = r1[i0];

        r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r40);

        $r41 = r1[i0];

        r7 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64URLSafe(byte[])>($r41);

        $r42 = r2[i0];

        r8 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r42);

        $r43 = r3[i0];

        r9 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r43);

        $r44 = r4[i0];

        r10 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r44);

        $r45 = r5[i0];

        r11 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r45);

        $r46 = r2[i0];

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r6, $r46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("standard encode uuid", $z0);

        $r47 = r5[i0];

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r7, $r47);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("url-safe encode uuid", $z1);

        $r48 = r1[i0];

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r8, $r48);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("standard decode uuid", $z2);

        $r49 = r1[i0];

        $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r9, $r49);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("url-safe1 decode uuid", $z3);

        $r50 = r1[i0];

        $z4 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r10, $r50);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("url-safe2 decode uuid", $z4);

        $r51 = r1[i0];

        $z5 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r11, $r51);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("url-safe3 decode uuid", $z5);

        i0 = i0 + 1;

     label2:
        if i0 < 4 goto label1;

        return;
    }

    public void testByteToStringVariations() throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, r3, r4;
        org.apache.commons.codec.binary.Base64 $r5;
        java.lang.String $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        char[] $r7;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r5 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64: void <init>(int)>(0);

        r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r3 = newarray (byte)[0];

        $r6 = "2bf7cc2701fe4397b49ebeed5acc7090";

        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        r4 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r7);

        $r8 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: java.lang.String encodeToString(byte[])>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString Hello World", "SGVsbG8gV29ybGQ=", $r8);

        $r9 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString static Hello World", "SGVsbG8gV29ybGQ=", $r9);

        $r10 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: java.lang.String encodeToString(byte[])>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString \"\"", "", $r10);

        $r11 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString static \"\"", "", $r11);

        $r12 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: java.lang.String encodeToString(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString null", null, $r12);

        $r13 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString static null", null, $r13);

        $r14 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: java.lang.String encodeToString(byte[])>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString UUID", "K/fMJwH+Q5e0nr7tWsxwkA==", $r14);

        $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString static UUID", "K/fMJwH+Q5e0nr7tWsxwkA==", $r15);

        $r16 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64URLSafeString(byte[])>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byteToString static-url-safe UUID", "K_fMJwH-Q5e0nr7tWsxwkA", $r16);

        return;
    }

    public void testStringToByteVariations() throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r2, $r6, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r22, $r23;
        org.apache.commons.codec.binary.Base64 $r3;
        java.lang.String $r4, $r7, $r10, $r12, $r14, $r16, $r18, $r20;
        char[] $r5;
        java.lang.Object $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        $r3 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r3.<org.apache.commons.codec.binary.Base64: void <init>()>();

        $r4 = "2bf7cc2701fe4397b49ebeed5acc7090";

        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        r2 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r5);

        $r6 = virtualinvoke $r3.<org.apache.commons.codec.binary.Base64: byte[] decode(java.lang.String)>("SGVsbG8gV29ybGQ=\r\n");

        $r7 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("StringToByte Hello World", "Hello World", $r7);

        $r8 = virtualinvoke $r3.<org.apache.commons.codec.binary.Base64: java.lang.Object decode(java.lang.Object)>("SGVsbG8gV29ybGQ=\r\n");

        $r9 = (byte[]) $r8;

        $r10 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("StringToByte Hello World", "Hello World", $r10);

        $r11 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("SGVsbG8gV29ybGQ=\r\n");

        $r12 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("StringToByte static Hello World", "Hello World", $r12);

        $r13 = virtualinvoke $r3.<org.apache.commons.codec.binary.Base64: byte[] decode(java.lang.String)>("");

        $r14 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("StringToByte \"\"", "", $r14);

        $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("");

        $r16 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("StringToByte static \"\"", "", $r16);

        $r17 = virtualinvoke $r3.<org.apache.commons.codec.binary.Base64: byte[] decode(java.lang.String)>(null);

        $r18 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("StringToByte null", null, $r18);

        $r19 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>(null);

        $r20 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r19);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("StringToByte static null", null, $r20);

        $r21 = virtualinvoke $r3.<org.apache.commons.codec.binary.Base64: byte[] decode(java.lang.String)>("K_fMJwH-Q5e0nr7tWsxwkA");

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, $r21);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringToByte UUID", $z0);

        $r22 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("K/fMJwH+Q5e0nr7tWsxwkA==\r\n");

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, $r22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringToByte static UUID", $z1);

        $r23 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>("K_fMJwH-Q5e0nr7tWsxwkA");

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, $r23);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringToByte static-url-safe UUID", $z2);

        return;
    }

    private java.lang.String toString(byte[])
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r1;
        java.lang.StringBuilder $r3;
        byte $b0;
        int $i1, $i2, i3, $i4;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r1 := @parameter0: byte[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

        goto label3;

     label1:
        $b0 = r1[i3];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        i3 = i3 + 1;

     label3:
        $i4 = lengthof r1;

        if i3 < $i4 goto label1;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void testHugeLineSeparator()
    {
        org.apache.commons.codec.binary.Base64Test r0;
        byte[] r1, $r7, $r8, $r9;
        org.apache.commons.codec.binary.Base64 $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.codec.binary.Base64Test;

        r1 = newarray (byte)[32765];

        $r5 = new org.apache.commons.codec.binary.Base64;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64: void <init>(int,byte[])>(4, r1);

        $r6 = new java.lang.String;

        $r7 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r8 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r7);

        $r9 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>($r8);

        specialinvoke $r6.<java.lang.String: void <init>(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("testDEFAULT_BUFFER_SIZE", "Hello World", $r6);

        return;
    }
}
