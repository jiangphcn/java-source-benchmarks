public class org.apache.commons.codec.binary.Base64InputStreamTest extends java.lang.Object
{
    private static final java.lang.String ENCODED_B64;
    private static final byte[] CRLF;
    private static final byte[] LF;
    private static final java.lang.String STRING_FIXTURE;

    static void <clinit>()
    {
        byte[] $r0, $r1;

        <org.apache.commons.codec.binary.Base64InputStreamTest: java.lang.String STRING_FIXTURE> = "Hello World";

        <org.apache.commons.codec.binary.Base64InputStreamTest: java.lang.String ENCODED_B64> = "AAAA////";

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] CRLF> = $r0;

        $r1 = newarray (byte)[1];

        $r1[0] = 10;

        <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] LF> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCodec130() throws java.io.IOException
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r5, $r9, $r11, $r13;
        java.lang.String r6, $r14, $r15;
        java.io.ByteArrayOutputStream $r7;
        org.apache.commons.codec.binary.Base64OutputStream $r8;
        java.io.ByteArrayInputStream $r10;
        org.apache.commons.codec.binary.Base64InputStream $r12;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new org.apache.commons.codec.binary.Base64OutputStream;

        specialinvoke $r8.<org.apache.commons.codec.binary.Base64OutputStream: void <init>(java.io.OutputStream)>($r7);

        $r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        virtualinvoke $r8.<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[])>($r9);

        virtualinvoke $r8.<org.apache.commons.codec.binary.Base64OutputStream: void close()>();

        $r10 = new java.io.ByteArrayInputStream;

        $r11 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r11);

        $r12 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r12.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r10);

        virtualinvoke $r12.<org.apache.commons.codec.binary.Base64InputStream: long skip(long)>(1L);

        $r13 = newarray (byte)[64];

        r5 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[] streamToBytes(java.io.InputStream,byte[])>($r12, $r13);

        r6 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r5);

        $r14 = "Hello World";

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, r6);

        return;
    }

    public void testCodec105() throws java.io.IOException
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        org.apache.commons.codec.binary.Base64InputStream $r3;
        org.apache.commons.codec.binary.Codec105ErrorInputStream $r4;
        java.lang.Throwable $r5;
        int i1;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r3 = new org.apache.commons.codec.binary.Base64InputStream;

        $r4 = new org.apache.commons.codec.binary.Codec105ErrorInputStream;

        specialinvoke $r4.<org.apache.commons.codec.binary.Codec105ErrorInputStream: void <init>()>();

        specialinvoke $r3.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r4, 1, 0, null);

     label1:
        i1 = 0;

        goto label3;

     label2:
        virtualinvoke $r3.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        i1 = i1 + 1;

     label3:
        if i1 < 5 goto label2;

        goto label5;

     label4:
        $r5 := @caughtexception;

        virtualinvoke $r3.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        throw $r5;

     label5:
        virtualinvoke $r3.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    public void testCodec101() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, r4;
        java.io.ByteArrayInputStream $r5;
        org.apache.commons.codec.binary.Base64InputStream $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12, $r13;
        java.lang.String $r10, $r14;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("123");

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r5);

        r4 = newarray (byte)[8192];

        i0 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[])>(r4);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Codec101: First read successful [c=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r10, $z0);

        i1 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[])>(r4);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Codec101: Second read should report end-of-stream [c=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        if i1 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r14, $z1);

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testInputStreamReader() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1;
        java.lang.String r6;
        java.io.ByteArrayInputStream $r7;
        org.apache.commons.codec.binary.Base64InputStream $r8;
        java.io.InputStreamReader $r9;
        java.io.BufferedReader $r10;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("123");

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r8 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r8.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r7);

        $r9 = new java.io.InputStreamReader;

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r8);

        $r10 = new java.io.BufferedReader;

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r9);

        r6 = virtualinvoke $r10.<java.io.BufferedReader: java.lang.String readLine()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Codec101:  InputStreamReader works!", r6);

        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

        return;
    }

    public void testCodec98NPE() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, r4, $r8;
        java.lang.String r5;
        java.io.ByteArrayInputStream $r6;
        org.apache.commons.codec.binary.Base64InputStream $r7;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM");

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r7 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r7.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r6);

        $r8 = newarray (byte)[1024];

        r4 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[] streamToBytes(java.io.InputStream,byte[])>($r7, $r8);

        r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("codec-98 NPE Base64InputStream", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123", r5);

        return;
    }

    public void testAvailable() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base64InputStream $r5;
        int $i0, $i3, $i5, $i7, $i9;
        long $l1, $l2, $l4, $l6, $l8, $l10;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("AAAA////");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r3);

        $i0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int available()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $l2 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: long skip(long)>(10L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int available()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l4);

        $i5 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l6);

        $i7 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l8);

        $i9 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int available()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l10);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testBase64EmptyInputStreamMimeChuckSize() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testBase64EmptyInputStream(int)>(76);

        return;
    }

    public void testBase64EmptyInputStreamPemChuckSize() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testBase64EmptyInputStream(int)>(64);

        return;
    }

    private void testBase64EmptyInputStream(int) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        int i0;
        byte[] r1, r2, $r3, $r4;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        i0 := @parameter0: int;

        r1 = newarray (byte)[0];

        r2 = newarray (byte)[0];

        $r3 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r1, r2, i0, $r3);

        $r4 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r1, r2, i0, $r4);

        return;
    }

    public void testBase64InputStreamByChunk() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        java.lang.String r1, $r6;
        byte[][] r2;
        byte[] $r3, $r4, $r5, $r7, $r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("SGVsbG8gV29ybGQ=\r\n");

        r10 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r3 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r9, r10, 76, $r3);

        r11 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("AA==\r\n");

        r12 = newarray (byte)[1];

        $r4 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r11, r12, 76, $r4);

        r13 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n");

        r14 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r5 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r13, r14, 64, $r5);

        $r6 = "9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n";

        r1 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "");

        r15 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);

        r16 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r7 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r15, r16, 0, $r7);

        i0 = 0;

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[][] randomData(int,boolean)>(i0, 0);

        r17 = r2[1];

        r18 = r2[0];

        $r8 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r17, r18, 0, $r8);

        i0 = i0 + 1;

     label2:
        if i0 <= 150 goto label1;

        return;
    }

    public void testBase64InputStreamByteByByte() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        java.lang.String r1, $r6;
        byte[][] r2;
        byte[] $r3, $r4, $r5, $r7, $r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("SGVsbG8gV29ybGQ=\r\n");

        r10 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r3 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r9, r10, 76, $r3);

        r11 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("AA==\r\n");

        r12 = newarray (byte)[1];

        $r4 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r11, r12, 76, $r4);

        r13 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n");

        r14 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r5 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r13, r14, 64, $r5);

        $r6 = "9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\nxA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\nqBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\nivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\niLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\nUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\nAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\nQoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\nthMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\nZ4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\nBJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\nDnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\nlepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\naOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\nDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\nH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\nrb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n3CLZXdZFZ/VrqXeVjtOAu2A=\n";

        r1 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "");

        r15 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);

        r16 = <org.apache.commons.codec.binary.Base64TestData: byte[] DECODED>;

        $r7 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r15, r16, 0, $r7);

        i0 = 0;

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[][] randomData(int,boolean)>(i0, 0);

        r17 = r2[1];

        r18 = r2[0];

        $r8 = <org.apache.commons.codec.binary.Base64InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base64InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r17, r18, 0, $r8);

        i0 = i0 + 1;

     label2:
        if i0 <= 150 goto label1;

        return;
    }

    private void testByChunk(byte[], byte[], int, byte[]) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, r2, r3, r12, r14, r17;
        int i0, $i1, $i3, $i5, $i7, $i9, $i11, i13;
        org.apache.commons.codec.binary.Base64InputStream $r4, $r6, $r9, $r10;
        java.io.ByteArrayInputStream $r5, $r7, $r8;
        long $l2, $l4, $l6, $l8, $l10, $l12;
        boolean $z0, $z1, $z2;
        java.io.InputStream r15;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        $r4 = new org.apache.commons.codec.binary.Base64InputStream;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r4.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, i0, r3);

        r12 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[] streamToBytes(java.io.InputStream)>($r4);

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l2);

        $i3 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l4);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r12, r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base64 encode", $z0);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        $r6 = new org.apache.commons.codec.binary.Base64InputStream;

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r7);

        r14 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[] streamToBytes(java.io.InputStream)>($r6);

        $i5 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l6);

        $i7 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l8);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r14, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base64 decode", $z1);

        $r8 = new java.io.ByteArrayInputStream;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r15 = $r8;

        i13 = 0;

        goto label2;

     label1:
        $r9 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>(r15, 1, i0, r3);

        $r10 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r10.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean)>($r9, 0);

        r15 = $r10;

        i13 = i13 + 1;

     label2:
        if i13 < 10 goto label1;

        r17 = staticinvoke <org.apache.commons.codec.binary.Base64TestData: byte[] streamToBytes(java.io.InputStream)>(r15);

        $i9 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l10);

        $i11 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l12);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r17, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base64 wrap-wrap-wrap!", $z2);

        virtualinvoke r15.<java.io.InputStream: void close()>();

        return;
    }

    private void testByteByByte(byte[], byte[], int, byte[]) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, r2, r3, r12, r14, r17;
        int i0, $i1, $i2, $i3, $i5, $i7, $i9, $i10, $i11, $i13, $i15, $i17, $i18, $i19, $i21, $i23, i25, i26, i27, i28;
        org.apache.commons.codec.binary.Base64InputStream $r4, $r6, $r9, $r10;
        java.io.ByteArrayInputStream $r5, $r7, $r8;
        byte $b4, $b12, $b20;
        long $l6, $l8, $l14, $l16, $l22, $l24;
        boolean $z0, $z1, $z2;
        java.io.InputStream r15;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        $r4 = new org.apache.commons.codec.binary.Base64InputStream;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r4.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, i0, r3);

        $i1 = lengthof r1;

        r12 = newarray (byte)[$i1];

        i25 = 0;

        goto label2;

     label1:
        $i3 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $b4 = (byte) $i3;

        r12[i25] = $b4;

        i25 = i25 + 1;

     label2:
        $i2 = lengthof r12;

        if i25 < $i2 goto label1;

        $i5 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l6);

        $i7 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l8);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r12, r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base64 encode", $z0);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        $r6 = new org.apache.commons.codec.binary.Base64InputStream;

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r7);

        $i9 = lengthof r2;

        r14 = newarray (byte)[$i9];

        i26 = 0;

        goto label4;

     label3:
        $i11 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $b12 = (byte) $i11;

        r14[i26] = $b12;

        i26 = i26 + 1;

     label4:
        $i10 = lengthof r14;

        if i26 < $i10 goto label3;

        $i13 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l14 = (long) $i13;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l14);

        $i15 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l16 = (long) $i15;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l16);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r14, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base64 decode", $z1);

        virtualinvoke $r6.<java.io.InputStream: void close()>();

        $r8 = new java.io.ByteArrayInputStream;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r15 = $r8;

        i27 = 0;

        goto label6;

     label5:
        $r9 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>(r15, 1, i0, r3);

        $r10 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r10.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean)>($r9, 0);

        r15 = $r10;

        i27 = i27 + 1;

     label6:
        if i27 < 10 goto label5;

        $i17 = lengthof r2;

        r17 = newarray (byte)[$i17];

        i28 = 0;

        goto label8;

     label7:
        $i19 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $b20 = (byte) $i19;

        r17[i28] = $b20;

        i28 = i28 + 1;

     label8:
        $i18 = lengthof r17;

        if i28 < $i18 goto label7;

        $i21 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l22 = (long) $i21;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l22);

        $i23 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l24);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r17, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base64 wrap-wrap-wrap!", $z2);

        virtualinvoke r15.<java.io.InputStream: void close()>();

        return;
    }

    public void testMarkSupported() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, $r6;
        java.io.ByteArrayInputStream $r4;
        org.apache.commons.codec.binary.Base64InputStream $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r5 = new org.apache.commons.codec.binary.Base64InputStream;

        $r6 = newarray (byte)[3];

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r4, 1, 4, $r6);

        $z0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Base64InputStream.markSupported() is false", $z0);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testRead0() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, r2, $r7;
        java.io.ByteArrayInputStream $r5;
        org.apache.commons.codec.binary.Base64InputStream $r6;
        long $l0;
        int i1;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r2 = newarray (byte)[1024];

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new org.apache.commons.codec.binary.Base64InputStream;

        $r7 = newarray (byte)[3];

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, 4, $r7);

        i1 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>(r2, 0, 0);

        $l0 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Base64InputStream.read(buf, 0, 0) returns 0", 0L, $l0);

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testReadNull() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, $r7;
        java.io.ByteArrayInputStream $r5;
        org.apache.commons.codec.binary.Base64InputStream $r6;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new org.apache.commons.codec.binary.Base64InputStream;

        $r7 = newarray (byte)[3];

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, 4, $r7);

     label1:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>(null, 0, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Base64InputStream.read(null, 0, 0) to throw a NullPointerException");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testReadOutOfBounds() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r1, r2, $r7;
        java.io.ByteArrayInputStream $r5;
        org.apache.commons.codec.binary.Base64InputStream $r6;
        int $i2, $i3, $i5, $i6;
        java.lang.IndexOutOfBoundsException $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r2 = newarray (byte)[1024];

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new org.apache.commons.codec.binary.Base64InputStream;

        $r7 = newarray (byte)[3];

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, 4, $r7);

     label01:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>(r2, -1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base64InputStream.read(buf, -1, 0) to throw IndexOutOfBoundsException");

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

     label04:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>(r2, 0, -1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base64InputStream.read(buf, 0, -1) to throw IndexOutOfBoundsException");

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

     label07:
        $i2 = lengthof r2;

        $i3 = $i2 + 1;

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>(r2, $i3, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Base64InputStream.read(buf, buf.length + 1, 0) throws IndexOutOfBoundsException");

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

     label10:
        $i5 = lengthof r2;

        $i6 = $i5 - 1;

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>(r2, $i6, 2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Base64InputStream.read(buf, buf.length - 1, 2) throws IndexOutOfBoundsException");

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

     label13:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
    }

    public void testSkipBig() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base64InputStream $r5;
        long $l0, $l2, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("AAAA////");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r3);

        $l0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: long skip(long)>(2147483647L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l0);

        $i1 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testSkipNone() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        byte[] r3, $r5, $r7;
        java.io.ByteArrayInputStream $r4;
        org.apache.commons.codec.binary.Base64InputStream $r6;
        long $l0, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("AAAA////");

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r4);

        r3 = newarray (byte)[6];

        $l0 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: long skip(long)>(0L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l0);

        $i1 = lengthof r3;

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>(r3, 0, $i1);

        $r7 = newarray (byte)[6];

        $r7[3] = -1;

        $r7[4] = -1;

        $r7[5] = -1;

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r3, $r7);

        $i3 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testSkipPastEnd() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base64InputStream $r5;
        long $l0, $l2, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("AAAA////");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r3);

        $l0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: long skip(long)>(10L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l0);

        $i1 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testSkipToEnd() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base64InputStream $r5;
        long $l0, $l2, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("AAAA////");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r3);

        $l0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: long skip(long)>(6L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l0);

        $i1 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }

    public void testSkipWrongArgument() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base64InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base64InputStream $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("AAAA////");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base64InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void <init>(java.io.InputStream)>($r3);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: long skip(long)>(-10L);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base64InputStream: void close()>();

        return;
    }
}
