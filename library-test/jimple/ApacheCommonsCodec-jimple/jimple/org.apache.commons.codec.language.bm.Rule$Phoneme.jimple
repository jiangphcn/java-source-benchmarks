public final class org.apache.commons.codec.language.bm.Rule$Phoneme extends java.lang.Object implements org.apache.commons.codec.language.bm.Rule$PhonemeExpr
{
    public static final java.util.Comparator COMPARATOR;
    private final java.lang.StringBuilder phonemeText;
    private final org.apache.commons.codec.language.bm.Languages$LanguageSet languages;

    static void <clinit>()
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme$1 $r0;

        $r0 = new org.apache.commons.codec.language.bm.Rule$Phoneme$1;

        specialinvoke $r0.<org.apache.commons.codec.language.bm.Rule$Phoneme$1: void <init>()>();

        <org.apache.commons.codec.language.bm.Rule$Phoneme: java.util.Comparator COMPARATOR> = $r0;

        return;
    }

    public void <init>(java.lang.CharSequence, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0;
        java.lang.CharSequence r1;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r2;
        java.lang.StringBuilder $r3;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r1);

        r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText> = $r3;

        r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages> = r2;

        return;
    }

    public void <init>(org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Rule$Phoneme)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0, r1, r2;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r1 := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r2 := @parameter1: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r4 = r1.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        $r3 = r1.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>;

        specialinvoke r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r4, $r3);

        $r6 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        $r5 = r2.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r5);

        return;
    }

    public void <init>(org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0, r1, r2;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r1 := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r2 := @parameter1: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r3 := @parameter2: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        $r4 = r1.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        specialinvoke r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r4, r3);

        $r6 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        $r5 = r2.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r5);

        return;
    }

    public org.apache.commons.codec.language.bm.Rule$Phoneme append(java.lang.CharSequence)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0;
        java.lang.CharSequence r1;
        java.lang.StringBuilder $r2;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);

        return r0;
    }

    public org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages()
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r1 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>;

        return $r1;
    }

    public java.lang.Iterable getPhonemes()
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0;
        java.util.Set $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r0);

        return $r1;
    }

    public java.lang.CharSequence getPhonemeText()
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0;
        java.lang.StringBuilder $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r1 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.Rule$Phoneme join(org.apache.commons.codec.language.bm.Rule$Phoneme)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0, r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r9;
        java.lang.String $r5, $r6, $r8, $r10;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r11, $r12, $r13;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r1 := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r2 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r3 = new java.lang.StringBuilder;

        $r4 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = r1.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>;

        $r11 = r1.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>;

        $r13 = virtualinvoke $r12.<org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r11);

        specialinvoke $r2.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r10, $r13);

        return $r2;
    }

    public org.apache.commons.codec.language.bm.Rule$Phoneme mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0, $r2;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r1, $r5, $r6;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r1 := @parameter0: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        $r2 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r3 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>;

        $r6 = virtualinvoke $r5.<org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet merge(org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r1);

        specialinvoke $r2.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r4, $r6);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r7, $r8;
        java.lang.String $r3, $r4, $r9;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r6;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r1 = new java.lang.StringBuilder;

        $r2 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet languages>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static java.lang.StringBuilder access$0(org.apache.commons.codec.language.bm.Rule$Phoneme)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0;
        java.lang.StringBuilder $r1;

        r0 := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r1 = r0.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.StringBuilder phonemeText>;

        return $r1;
    }
}
