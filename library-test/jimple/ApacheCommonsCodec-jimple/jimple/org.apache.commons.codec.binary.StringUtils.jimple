public class org.apache.commons.codec.binary.StringUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.codec.binary.StringUtils r0;

        r0 := @this: org.apache.commons.codec.binary.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean equals(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label4;

        $z2 = r1 instanceof java.lang.String;

        if $z2 == 0 goto label4;

        $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z3;

     label4:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $z1 = staticinvoke <org.apache.commons.codec.binary.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, 0, 0, r1, 0, $i2);

        return $z1;
    }

    private static byte[] getBytes(java.lang.String, java.nio.charset.Charset)
    {
        java.lang.String r0;
        java.nio.charset.Charset r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.nio.charset.Charset;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r1);

        return $r2;
    }

    public static byte[] getBytesIso8859_1(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset ISO_8859_1>;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static byte[] getBytesUnchecked(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        byte[] $r3;
        java.io.UnsupportedEncodingException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>(r1, $r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static byte[] getBytesUsAscii(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset US_ASCII>;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static byte[] getBytesUtf16(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16>;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static byte[] getBytesUtf16Be(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16BE>;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static byte[] getBytesUtf16Le(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16LE>;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public static byte[] getBytesUtf8(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytes(java.lang.String,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    private static java.lang.IllegalStateException newIllegalStateException(java.lang.String, java.io.UnsupportedEncodingException)
    {
        java.lang.String r0, $r4, $r7;
        java.io.UnsupportedEncodingException r1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.UnsupportedEncodingException;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        return $r2;
    }

    private static java.lang.String newString(byte[], java.nio.charset.Charset)
    {
        byte[] r0;
        java.nio.charset.Charset r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.nio.charset.Charset;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, r1);

     label2:
        return $r2;
    }

    public static java.lang.String newString(byte[], java.lang.String)
    {
        byte[] r0;
        java.lang.String r1, $r3;
        java.io.UnsupportedEncodingException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException)>(r1, $r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String newStringIso8859_1(byte[])
    {
        byte[] r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset ISO_8859_1>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, $r2);

        return $r1;
    }

    public static java.lang.String newStringUsAscii(byte[])
    {
        byte[] r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, $r2);

        return $r1;
    }

    public static java.lang.String newStringUtf16(byte[])
    {
        byte[] r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, $r2);

        return $r1;
    }

    public static java.lang.String newStringUtf16Be(byte[])
    {
        byte[] r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16BE>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, $r2);

        return $r1;
    }

    public static java.lang.String newStringUtf16Le(byte[])
    {
        byte[] r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_16LE>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, $r2);

        return $r1;
    }

    public static java.lang.String newStringUtf8(byte[])
    {
        byte[] r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $r1 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r2 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newString(byte[],java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }
}
