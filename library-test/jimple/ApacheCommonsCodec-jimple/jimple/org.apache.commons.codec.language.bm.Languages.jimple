public class org.apache.commons.codec.language.bm.Languages extends java.lang.Object
{
    public static final java.lang.String ANY;
    private static final java.util.Map LANGUAGES;
    private final java.util.Set languages;
    public static final org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES;
    public static final org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE;

    static void <clinit>()
    {
        org.apache.commons.codec.language.bm.NameType r0;
        int i0, i1;
        java.util.EnumMap $r2;
        org.apache.commons.codec.language.bm.NameType[] $r3;
        java.util.Map $r4;
        java.lang.String $r5;
        org.apache.commons.codec.language.bm.Languages $r6;
        org.apache.commons.codec.language.bm.Languages$1 $r8;
        org.apache.commons.codec.language.bm.Languages$2 $r9;

        <org.apache.commons.codec.language.bm.Languages: java.lang.String ANY> = "any";

        $r2 = new java.util.EnumMap;

        specialinvoke $r2.<java.util.EnumMap: void <init>(java.lang.Class)>(class "org/apache/commons/codec/language/bm/NameType");

        <org.apache.commons.codec.language.bm.Languages: java.util.Map LANGUAGES> = $r2;

        $r3 = staticinvoke <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType[] values()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label2;

     label1:
        r0 = $r3[i1];

        $r4 = <org.apache.commons.codec.language.bm.Languages: java.util.Map LANGUAGES>;

        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Languages: java.lang.String langResourceName(org.apache.commons.codec.language.bm.NameType)>(r0);

        $r6 = staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)>($r5);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        $r8 = new org.apache.commons.codec.language.bm.Languages$1;

        specialinvoke $r8.<org.apache.commons.codec.language.bm.Languages$1: void <init>()>();

        <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES> = $r8;

        $r9 = new org.apache.commons.codec.language.bm.Languages$2;

        specialinvoke $r9.<org.apache.commons.codec.language.bm.Languages$2: void <init>()>();

        <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE> = $r9;

        return;
    }

    public static org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.apache.commons.codec.language.bm.Languages $r3;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 = <org.apache.commons.codec.language.bm.Languages: java.util.Map LANGUAGES>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.codec.language.bm.Languages) $r2;

        return $r3;
    }

    public static org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)
    {
        java.lang.String r0, r4, $r10, $r16;
        java.io.InputStream r2;
        java.util.HashSet $r6;
        java.lang.Class $r7;
        java.lang.ClassLoader $r8;
        java.util.Scanner $r9;
        boolean $z0, $z2, z3, $z4;
        int $i0;
        org.apache.commons.codec.language.bm.Languages $r11;
        java.util.Set $r12;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15;
        java.lang.Throwable $r17;

        r0 := @parameter0: java.lang.String;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = class "org/apache/commons/codec/language/bm/Languages";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r8.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        if r2 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to resolve required resource: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label1:
        $r9 = new java.util.Scanner;

        specialinvoke $r9.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r2, "UTF-8");

     label2:
        z3 = 0;

        goto label6;

     label3:
        $r10 = virtualinvoke $r9.<java.util.Scanner: java.lang.String nextLine()>();

        r4 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        if z3 == 0 goto label4;

        $z2 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z2 == 0 goto label6;

        z3 = 0;

        goto label6;

     label4:
        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("/*");

        if $z0 == 0 goto label5;

        z3 = 1;

        goto label6;

     label5:
        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label6:
        $z4 = virtualinvoke $r9.<java.util.Scanner: boolean hasNextLine()>();

        if $z4 != 0 goto label3;

        goto label8;

     label7:
        $r17 := @caughtexception;

        virtualinvoke $r9.<java.util.Scanner: void close()>();

        throw $r17;

     label8:
        virtualinvoke $r9.<java.util.Scanner: void close()>();

        $r11 = new org.apache.commons.codec.language.bm.Languages;

        $r12 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r6);

        specialinvoke $r11.<org.apache.commons.codec.language.bm.Languages: void <init>(java.util.Set)>($r12);

        return $r11;

        catch java.lang.Throwable from label2 to label7 with label7;
    }

    private static java.lang.String langResourceName(org.apache.commons.codec.language.bm.NameType)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>();

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("org/apache/commons/codec/language/bm/%s_languages.txt", $r1);

        return $r3;
    }

    private void <init>(java.util.Set)
    {
        org.apache.commons.codec.language.bm.Languages r0;
        java.util.Set r1;

        r0 := @this: org.apache.commons.codec.language.bm.Languages;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.codec.language.bm.Languages: java.util.Set languages> = r1;

        return;
    }

    public java.util.Set getLanguages()
    {
        org.apache.commons.codec.language.bm.Languages r0;
        java.util.Set $r1;

        r0 := @this: org.apache.commons.codec.language.bm.Languages;

        $r1 = r0.<org.apache.commons.codec.language.bm.Languages: java.util.Set languages>;

        return $r1;
    }
}
