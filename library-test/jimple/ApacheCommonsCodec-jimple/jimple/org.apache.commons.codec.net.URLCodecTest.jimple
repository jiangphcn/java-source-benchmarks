public class org.apache.commons.codec.net.URLCodecTest extends java.lang.Object
{
    static final int[] SWISS_GERMAN_STUFF_UNICODE;
    static final int[] RUSSIAN_STUFF_UNICODE;

    static void <clinit>()
    {
        int[] $r0, $r1;

        $r0 = newarray (int)[11];

        $r0[0] = 71;

        $r0[1] = 114;

        $r0[2] = 252;

        $r0[3] = 101;

        $r0[4] = 122;

        $r0[5] = 105;

        $r0[6] = 95;

        $r0[7] = 122;

        $r0[8] = 228;

        $r0[9] = 109;

        $r0[10] = 228;

        <org.apache.commons.codec.net.URLCodecTest: int[] SWISS_GERMAN_STUFF_UNICODE> = $r0;

        $r1 = newarray (int)[11];

        $r1[0] = 1042;

        $r1[1] = 1089;

        $r1[2] = 1077;

        $r1[3] = 1084;

        $r1[4] = 95;

        $r1[5] = 1087;

        $r1[6] = 1088;

        $r1[7] = 1080;

        $r1[8] = 1074;

        $r1[9] = 1077;

        $r1[10] = 1090;

        <org.apache.commons.codec.net.URLCodecTest: int[] RUSSIAN_STUFF_UNICODE> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.net.URLCodecTest r0;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void validateState(org.apache.commons.codec.net.URLCodec)
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        org.apache.commons.codec.net.URLCodec r1;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        r1 := @parameter0: org.apache.commons.codec.net.URLCodec;

        return;
    }

    private java.lang.String constructString(int[])
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        int[] r1;
        int i0, i1, i3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        char $c2;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        r1 := @parameter0: int[];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r1 == null goto label3;

        i1 = lengthof r1;

        i3 = 0;

        goto label2;

     label1:
        i0 = r1[i3];

        $c2 = (char) i0;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        i3 = i3 + 1;

     label2:
        if i3 < i1 goto label1;

     label3:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void testUTF8RoundTrip() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r1, r2, $r7, $r8, $r9, $r10, $r11, $r12;
        int[] $r4, $r5;
        org.apache.commons.codec.net.URLCodec $r6;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r4 = <org.apache.commons.codec.net.URLCodecTest: int[] RUSSIAN_STUFF_UNICODE>;

        r1 = specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: java.lang.String constructString(int[])>($r4);

        $r5 = <org.apache.commons.codec.net.URLCodecTest: int[] SWISS_GERMAN_STUFF_UNICODE>;

        r2 = specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: java.lang.String constructString(int[])>($r5);

        $r6 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r6.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r6);

        $r7 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>(r1, "UTF-8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82", $r7);

        $r8 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>(r2, "UTF-8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Gr%C3%BCezi_z%C3%A4m%C3%A4", $r8);

        $r9 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>(r1, "UTF-8");

        $r10 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String,java.lang.String)>($r9, "UTF-8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r10);

        $r11 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>(r2, "UTF-8");

        $r12 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String,java.lang.String)>($r11, "UTF-8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r12);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r6);

        return;
    }

    public void testBasicEncodeDecode() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r3, $r5;
        org.apache.commons.codec.net.URLCodec $r4;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r4 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r4.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r3 = virtualinvoke $r4.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>("Hello there!");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL encoding test", "Hello+there%21", r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL decoding test", "Hello there!", $r5);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r4);

        return;
    }

    public void testSafeCharEncodeDecode() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r3, $r5;
        org.apache.commons.codec.net.URLCodec $r4;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r4 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r4.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r3 = virtualinvoke $r4.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>("abc123_-.*");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Safe chars URL encoding test", "abc123_-.*", r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Safe chars URL decoding test", "abc123_-.*", $r5);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r4);

        return;
    }

    public void testUnsafeEncodeDecode() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r3, $r5;
        org.apache.commons.codec.net.URLCodec $r4;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r4 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r4.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r3 = virtualinvoke $r4.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>("~!@#$%^&()+{}\"\\;:`,/[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Unsafe chars URL encoding test", "%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D", r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Unsafe chars URL decoding test", "~!@#$%^&()+{}\"\\;:`,/[]", $r5);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r4);

        return;
    }

    public void testEncodeDecodeNull() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        org.apache.commons.codec.net.URLCodec $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r2 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r2.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Null string URL encoding test", $r3);

        $r4 = virtualinvoke $r2.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Null string URL decoding test", $r4);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r2);

        return;
    }

    public void testDecodeInvalid() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        org.apache.commons.codec.net.URLCodec $r2;
        org.apache.commons.codec.DecoderException $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r2 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r2.<org.apache.commons.codec.net.URLCodec: void <init>()>();

     label01:
        virtualinvoke $r2.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>("%");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DecoderException should have been thrown");

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

     label04:
        virtualinvoke $r2.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>("%A");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DecoderException should have been thrown");

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

     label07:
        virtualinvoke $r2.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>("%WW");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DecoderException should have been thrown");

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

     label10:
        virtualinvoke $r2.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>("%0W");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DecoderException should have been thrown");

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

     label13:
        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r2);

        return;

        catch org.apache.commons.codec.DecoderException from label01 to label02 with label03;
        catch org.apache.commons.codec.DecoderException from label04 to label05 with label06;
        catch org.apache.commons.codec.DecoderException from label07 to label08 with label09;
        catch org.apache.commons.codec.DecoderException from label10 to label11 with label12;
    }

    public void testDecodeInvalidContent() throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r1;
        byte[] r3, r4;
        int[] $r5;
        org.apache.commons.codec.net.URLCodec $r6;
        int $i0, $i1, $i4, i9;
        long $l2, $l3, $l7, $l8;
        byte $b5, $b6;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r5 = <org.apache.commons.codec.net.URLCodecTest: int[] SWISS_GERMAN_STUFF_UNICODE>;

        r1 = specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: java.lang.String constructString(int[])>($r5);

        $r6 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r6.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        r4 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: byte[] decode(byte[])>(r3);

        $i0 = lengthof r3;

        $l3 = (long) $i0;

        $i1 = lengthof r4;

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        i9 = 0;

        goto label2;

     label1:
        $b5 = r3[i9];

        $l8 = (long) $b5;

        $b6 = r4[i9];

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l8, $l7);

        i9 = i9 + 1;

     label2:
        $i4 = lengthof r3;

        if i9 < $i4 goto label1;

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r6);

        return;
    }

    public void testEncodeNull() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        byte[] r2;
        org.apache.commons.codec.net.URLCodec $r3;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r3 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r3.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r2 = virtualinvoke $r3.<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Encoding a null string should return null", null, r2);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r3);

        return;
    }

    public void testEncodeUrlWithNullBitSet() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        org.apache.commons.codec.net.URLCodec $r4;
        java.lang.String $r5, $r7, $r10;
        java.nio.charset.Charset $r6;
        byte[] $r8, $r9;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r4 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r4.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        $r5 = new java.lang.String;

        $r7 = "Hello there!";

        $r6 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r9 = staticinvoke <org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>(null, $r8);

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL encoding test", "Hello+there%21", $r5);

        $r10 = virtualinvoke $r4.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL decoding test", "Hello there!", $r10);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r4);

        return;
    }

    public void testDecodeWithNullArray() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        byte[] r1;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        r1 = staticinvoke <org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Result should be null", null, r1);

        return;
    }

    public void testEncodeStringWithNull() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r2;
        org.apache.commons.codec.net.URLCodec $r3;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r3 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r3.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r2 = virtualinvoke $r3.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>(null, "charset");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Result should be null", null, r2);

        return;
    }

    public void testDecodeStringWithNull() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r2;
        org.apache.commons.codec.net.URLCodec $r3;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r3 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r3.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        r2 = virtualinvoke $r3.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String,java.lang.String)>(null, "charset");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Result should be null", null, r2);

        return;
    }

    public void testEncodeObjects() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        byte[] r3, r4;
        java.lang.Object r5, $r7, $r10;
        org.apache.commons.codec.net.URLCodec $r6;
        java.nio.charset.Charset $r8;
        java.lang.String $r9, $r11, r15;
        java.lang.Double $r12;
        org.apache.commons.codec.EncoderException $r14;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r6 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r6.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object encode(java.lang.Object)>("Hello there!");

        r15 = (java.lang.String) $r7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL encoding test", "Hello+there%21", r15);

        $r9 = "Hello there!";

        $r8 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        r3 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        $r10 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object encode(java.lang.Object)>(r3);

        r4 = (byte[]) $r10;

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL encoding test", "Hello+there%21", $r11);

        r5 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object encode(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Encoding a null Object should return null", null, r5);

     label1:
        $r12 = new java.lang.Double;

        specialinvoke $r12.<java.lang.Double: void <init>(double)>(3.0);

        virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object encode(java.lang.Object)>($r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Trying to url encode a Double object should cause an exception.");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r6);

        return;

        catch org.apache.commons.codec.EncoderException from label1 to label2 with label3;
    }

    public void testInvalidEncoding()
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        org.apache.commons.codec.net.URLCodec $r3;
        org.apache.commons.codec.DecoderException $r6;
        org.apache.commons.codec.EncoderException $r7;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r3 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r3.<org.apache.commons.codec.net.URLCodec: void <init>(java.lang.String)>("NONSENSE");

     label1:
        virtualinvoke $r3.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>("Hello there!");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("We set the encoding to a bogus NONSENSE vlaue, this shouldn\'t have worked.");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r3.<org.apache.commons.codec.net.URLCodec: java.lang.String decode(java.lang.String)>("Hello there!");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("We set the encoding to a bogus NONSENSE vlaue, this shouldn\'t have worked.");

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r3);

        return;

        catch org.apache.commons.codec.EncoderException from label1 to label2 with label3;
        catch org.apache.commons.codec.DecoderException from label4 to label5 with label6;
    }

    public void testDecodeObjects() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        byte[] r3, r4;
        java.lang.Object r5, $r7, $r10;
        org.apache.commons.codec.net.URLCodec $r6;
        java.nio.charset.Charset $r8;
        java.lang.String $r9, $r11, r15;
        java.lang.Double $r12;
        org.apache.commons.codec.DecoderException $r14;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r6 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r6.<org.apache.commons.codec.net.URLCodec: void <init>()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object decode(java.lang.Object)>("Hello+there%21");

        r15 = (java.lang.String) $r7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL decoding test", "Hello there!", r15);

        $r9 = "Hello+there%21";

        $r8 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        r3 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        $r10 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object decode(java.lang.Object)>(r3);

        r4 = (byte[]) $r10;

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(byte[])>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Basic URL decoding test", "Hello there!", $r11);

        r5 = virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object decode(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Decoding a null Object should return null", null, r5);

     label1:
        $r12 = new java.lang.Double;

        specialinvoke $r12.<java.lang.Double: void <init>(double)>(3.0);

        virtualinvoke $r6.<org.apache.commons.codec.net.URLCodec: java.lang.Object decode(java.lang.Object)>($r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Trying to url encode a Double object should cause an exception.");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r6);

        return;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public void testDefaultEncoding() throws java.lang.Exception
    {
        org.apache.commons.codec.net.URLCodecTest r0;
        java.lang.String r3, r4;
        org.apache.commons.codec.net.URLCodec $r5;

        r0 := @this: org.apache.commons.codec.net.URLCodecTest;

        $r5 = new org.apache.commons.codec.net.URLCodec;

        specialinvoke $r5.<org.apache.commons.codec.net.URLCodec: void <init>(java.lang.String)>("UnicodeBig");

        virtualinvoke $r5.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>("Hello there!");

        r3 = virtualinvoke $r5.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)>("Hello there!", "UnicodeBig");

        r4 = virtualinvoke $r5.<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)>("Hello there!");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        specialinvoke r0.<org.apache.commons.codec.net.URLCodecTest: void validateState(org.apache.commons.codec.net.URLCodec)>($r5);

        return;
    }
}
