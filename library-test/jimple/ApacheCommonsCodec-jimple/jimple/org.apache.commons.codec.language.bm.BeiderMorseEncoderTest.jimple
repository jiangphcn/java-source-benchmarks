public class org.apache.commons.codec.language.bm.BeiderMorseEncoderTest extends org.apache.commons.codec.StringEncoderAbstractTest
{
    private static final char[] TEST_CHARS;

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[10];

        $r0[0] = 97;

        $r0[1] = 98;

        $r0[2] = 99;

        $r0[3] = 100;

        $r0[4] = 101;

        $r0[5] = 102;

        $r0[6] = 103;

        $r0[7] = 104;

        $r0[8] = 111;

        $r0[9] = 117;

        <org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: char[] TEST_CHARS> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        specialinvoke r0.<org.apache.commons.codec.StringEncoderAbstractTest: void <init>()>();

        return;
    }

    private void assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder, java.lang.String) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 := @parameter0: org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)>(r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>(r2, $z0);

        return;
    }

    private org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder $r2;
        org.apache.commons.codec.language.bm.NameType $r3;
        org.apache.commons.codec.language.bm.RuleType $r4;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r2 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void <init>()>();

        $r3 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setNameType(org.apache.commons.codec.language.bm.NameType)>($r3);

        $r4 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType APPROX>;

        virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setRuleType(org.apache.commons.codec.language.bm.RuleType)>($r4);

        return $r2;
    }

    protected org.apache.commons.codec.StringEncoder createStringEncoder()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder $r1;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r1 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        specialinvoke $r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void <init>()>();

        return $r1;
    }

    public void testAllChars() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.String $r2;
        int $i0;
        char c1;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        c1 = 0;

        goto label2;

     label1:
        $r2 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c1);

        virtualinvoke r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)>($r2);

        $i0 = c1 + 1;

        c1 = (char) $i0;

     label2:
        if c1 < 65535 goto label1;

        return;
    }

    public void testAsciiEncodeNotEmpty1Letter() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.String r2, r3;
        int $i0;
        char c1;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        c1 = 97;

        goto label2;

     label1:
        r2 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c1);

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

        specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: void assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)>(r1, r2);

        specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: void assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)>(r1, r3);

        $i0 = c1 + 1;

        c1 = (char) $i0;

     label2:
        if c1 <= 122 goto label1;

        return;
    }

    public void testAsciiEncodeNotEmpty2Letters() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.String r3, $r4;
        char[] $r5;
        int $i0, $i1;
        char c2, c3;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        c2 = 97;

        goto label4;

     label1:
        c3 = 97;

        goto label3;

     label2:
        $r4 = new java.lang.String;

        $r5 = newarray (char)[2];

        $r5[0] = c2;

        $r5[1] = c3;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        r3 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: void assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)>(r1, $r4);

        specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: void assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)>(r1, r3);

        $i0 = c3 + 1;

        c3 = (char) $i0;

     label3:
        if c3 <= 122 goto label2;

        $i1 = c2 + 1;

        c2 = (char) $i1;

     label4:
        if c2 <= 122 goto label1;

        return;
    }

    public void testEncodeAtzNotEmpty() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.String r3;
        int i0, i1;
        java.lang.String[] $r5;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        $r5 = newarray (java.lang.String)[5];

        $r5[0] = "\u00e1cz";

        $r5[1] = "\u00e1tz";

        $r5[2] = "Ign\u00e1cz";

        $r5[3] = "Ign\u00e1tz";

        $r5[4] = "Ign\u00e1c";

        i0 = lengthof $r5;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r5[i1];

        specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: void assertNotEmpty(org.apache.commons.codec.language.bm.BeiderMorseEncoder,java.lang.String)>(r1, r3);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    public void testEncodeGna() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        virtualinvoke r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)>("gna");

        return;
    }

    public void testInvalidLangIllegalArgumentException()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.RuleType $r1;
        org.apache.commons.codec.language.bm.NameType $r2;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r2 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        $r1 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType APPROX>;

        staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($r2, $r1, "noSuchLanguage");

        return;
    }

    public void testInvalidLangIllegalStateException()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.NameType $r1;
        org.apache.commons.codec.language.bm.Languages $r2;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r1 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        $r2 = staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType)>($r1);

        staticinvoke <org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)>("thisIsAMadeUpResourceName", $r2);

        return;
    }

    public void testInvalidLanguageIllegalArgumentException()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)>("thereIsNoSuchLanguage");

        return;
    }

    public void testLongestEnglishSurname() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        virtualinvoke r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)>("MacGhilleseatheanaich");

        return;
    }

    public void testNegativeIndexForRuleMatchIndexOutOfBoundsException()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.Rule $r2;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r3;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r4;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r2 = new org.apache.commons.codec.language.bm.Rule;

        $r3 = new org.apache.commons.codec.language.bm.Rule$Phoneme;

        $r4 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>;

        specialinvoke $r3.<org.apache.commons.codec.language.bm.Rule$Phoneme: void <init>(java.lang.CharSequence,org.apache.commons.codec.language.bm.Languages$LanguageSet)>("", $r4);

        specialinvoke $r2.<org.apache.commons.codec.language.bm.Rule: void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule$PhonemeExpr)>("a", "", "", $r3);

        virtualinvoke $r2.<org.apache.commons.codec.language.bm.Rule: boolean patternAndContextMatches(java.lang.CharSequence,int)>("bob", -1);

        return;
    }

    public void testOOM() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        java.lang.String r3;
        java.lang.String[] r4;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder $r5;
        org.apache.commons.codec.language.bm.NameType $r6;
        org.apache.commons.codec.language.bm.RuleType $r7;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r5 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        specialinvoke $r5.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void <init>()>();

        $r6 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        virtualinvoke $r5.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setNameType(org.apache.commons.codec.language.bm.NameType)>($r6);

        $r7 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType EXACT>;

        virtualinvoke $r5.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setRuleType(org.apache.commons.codec.language.bm.RuleType)>($r7);

        virtualinvoke $r5.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setMaxPhonemes(int)>(10);

        r3 = virtualinvoke $r5.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)>("200697900\'-->&#1913348150;</  bceaeef >aadaabcf\"aedfbff<!--\'-->?>caecfaaa><?&#<!--</script>&lang&fc;aadeaf?>>&bdquo<    cc =\"abff\"    /></   afe  ><script><!-- f(\';<    cf aefbeef = \"bfabadcf\" ebbfeedd = fccabeb >");

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\|");

        $i1 = lengthof r4;

        if $i1 > 10 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testSetConcat()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r2 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void <init>()>();

        virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setConcat(boolean)>(0);

        $z0 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: boolean isConcat()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Should be able to set concat to false", $z0);

        return;
    }

    public void testSetNameTypeAsh()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder $r2;
        org.apache.commons.codec.language.bm.NameType $r3, $r4, $r5;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r2 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void <init>()>();

        $r3 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType ASHKENAZI>;

        virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setNameType(org.apache.commons.codec.language.bm.NameType)>($r3);

        $r4 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType ASHKENAZI>;

        $r5 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.NameType getNameType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Name type should have been set to ash", $r4, $r5);

        return;
    }

    public void testSetRuleTypeExact()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder $r2;
        org.apache.commons.codec.language.bm.RuleType $r3, $r4, $r5;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r2 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void <init>()>();

        $r3 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType EXACT>;

        virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setRuleType(org.apache.commons.codec.language.bm.RuleType)>($r3);

        $r4 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType EXACT>;

        $r5 = virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: org.apache.commons.codec.language.bm.RuleType getRuleType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Rule type should have been set to exact", $r4, $r5);

        return;
    }

    public void testSetRuleTypeToRulesIllegalArgumentException()
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder $r2;
        org.apache.commons.codec.language.bm.RuleType $r3;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        $r2 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder;

        specialinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void <init>()>();

        $r3 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        virtualinvoke $r2.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: void setRuleType(org.apache.commons.codec.language.bm.RuleType)>($r3);

        return;
    }

    public void testSpeedCheck() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.StringBuilder $r3;
        char[] $r4, $r6, $r9;
        char $c0, $c2;
        int $i1, i3, i4;
        java.lang.String $r7;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = <org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: char[] TEST_CHARS>;

        $c0 = $r4[0];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        i3 = 0;

        i4 = 1;

        goto label3;

     label1:
        $r6 = <org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: char[] TEST_CHARS>;

        $i1 = lengthof $r6;

        if i4 != $i1 goto label2;

        i4 = 0;

     label2:
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)>($r7);

        $r9 = <org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: char[] TEST_CHARS>;

        $c2 = $r9[i4];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        i3 = i3 + 1;

        i4 = i4 + 1;

     label3:
        if i3 < 40 goto label1;

        return;
    }

    public void testSpeedCheck2() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.String $r3, $r4;
        int $i0, i1;
        java.lang.CharSequence $r5;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        i1 = 1;

        goto label2;

     label1:
        $r4 = "ItstheendoftheworldasweknowitandIfeelfine";

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(0, i1);

        virtualinvoke r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.Object encode(java.lang.Object)>($r5);

        i1 = i1 + 1;

     label2:
        $r3 = "ItstheendoftheworldasweknowitandIfeelfine";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i1 <= $i0 goto label1;

        return;
    }

    public void testSpeedCheck3() throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.bm.BeiderMorseEncoderTest r0;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder r1;
        java.lang.String $r3, $r4;
        int $i0, i1;
        java.lang.CharSequence $r5;

        r0 := @this: org.apache.commons.codec.language.bm.BeiderMorseEncoderTest;

        r1 = specialinvoke r0.<org.apache.commons.codec.language.bm.BeiderMorseEncoderTest: org.apache.commons.codec.language.bm.BeiderMorseEncoder createGenericApproxEncoder()>();

        i1 = 1;

        goto label2;

     label1:
        $r4 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(0, i1);

        virtualinvoke r1.<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.Object encode(java.lang.Object)>($r5);

        i1 = i1 + 1;

     label2:
        $r3 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i1 <= $i0 goto label1;

        return;
    }
}
