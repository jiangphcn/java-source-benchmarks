public class org.apache.commons.codec.binary.BaseNCodecInputStream extends java.io.FilterInputStream
{
    private final org.apache.commons.codec.binary.BaseNCodec baseNCodec;
    private final boolean doEncode;
    private final byte[] singleByte;
    private final org.apache.commons.codec.binary.BaseNCodec$Context context;

    protected void <init>(java.io.InputStream, org.apache.commons.codec.binary.BaseNCodec, boolean)
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        java.io.InputStream r1;
        org.apache.commons.codec.binary.BaseNCodec r2;
        boolean z0;
        byte[] $r3;
        org.apache.commons.codec.binary.BaseNCodec$Context $r4;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.commons.codec.binary.BaseNCodec;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        $r3 = newarray (byte)[1];

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte> = $r3;

        $r4 = new org.apache.commons.codec.binary.BaseNCodec$Context;

        specialinvoke $r4.<org.apache.commons.codec.binary.BaseNCodec$Context: void <init>()>();

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context> = $r4;

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode> = z0;

        r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec> = r2;

        return;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        org.apache.commons.codec.binary.BaseNCodec$Context $r1;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        $z0 = $r1.<org.apache.commons.codec.binary.BaseNCodec$Context: boolean eof>;

        if $z0 == 0 goto label1;

        $b0 = 0;

        goto label2;

     label1:
        $b0 = 1;

     label2:
        return $b0;
    }

    public synchronized void mark(int)
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        i0 := @parameter0: int;

        return;
    }

    public boolean markSupported()
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        byte b0;
        byte[] $r1, $r2, $r3;
        int i1, $i2;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        i1 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($r1, 0, 1);

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        i1 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>($r2, 0, 1);

     label2:
        if i1 == 0 goto label1;

        if i1 <= 0 goto label5;

        $r3 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: byte[] singleByte>;

        b0 = $r3[0];

        if b0 >= 0 goto label3;

        $i2 = 256 + b0;

        goto label4;

     label3:
        $i2 = b0;

     label4:
        return $i2;

     label5:
        return -1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.lang.IndexOutOfBoundsException $r3, $r4;
        org.apache.commons.codec.binary.BaseNCodec$Context $r5, $r8, $r10, $r14;
        org.apache.commons.codec.binary.BaseNCodec $r6, $r9, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.io.InputStream $r7;
        java.lang.NullPointerException $r12;
        short $s7;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label01;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>()>();

        throw $r12;

     label01:
        if i0 < 0 goto label02;

        if i1 >= 0 goto label03;

     label02:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label03:
        $i3 = lengthof r1;

        if i0 > $i3 goto label04;

        $i5 = i0 + i1;

        $i4 = lengthof r1;

        if $i5 <= $i4 goto label05;

     label04:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label05:
        if i1 != 0 goto label06;

        return 0;

     label06:
        i6 = 0;

        goto label12;

     label07:
        $r6 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r5 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        $z0 = virtualinvoke $r6.<org.apache.commons.codec.binary.BaseNCodec: boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context)>($r5);

        if $z0 != 0 goto label11;

        $z1 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode>;

        if $z1 == 0 goto label08;

        $s7 = 4096;

        goto label09;

     label08:
        $s7 = 8192;

     label09:
        r2 = newarray (byte)[$s7];

        $r7 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: java.io.InputStream in>;

        i2 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r2);

        $z2 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: boolean doEncode>;

        if $z2 == 0 goto label10;

        $r11 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r10 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r11.<org.apache.commons.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r2, 0, i2, $r10);

        goto label11;

     label10:
        $r9 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r8 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        virtualinvoke $r9.<org.apache.commons.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r2, 0, i2, $r8);

     label11:
        $r13 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec baseNCodec>;

        $r14 = r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: org.apache.commons.codec.binary.BaseNCodec$Context context>;

        i6 = virtualinvoke $r13.<org.apache.commons.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)>(r1, i0, i1, $r14);

     label12:
        if i6 == 0 goto label07;

        return i6;
    }

    public synchronized void reset() throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        java.io.IOException $r1;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");

        throw $r1;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.codec.binary.BaseNCodecInputStream r0;
        long l0, $l4, $l5, $l6, $l7, l8;
        byte[] r1;
        byte $b1, $b2;
        int $i3, i9, i10;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.codec.binary.BaseNCodecInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Negative skip length: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        r1 = newarray (byte)[512];

        l8 = l0;

        goto label4;

     label2:
        $i3 = lengthof r1;

        $l4 = (long) $i3;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>($l4, l8);

        i9 = (int) $l5;

        i10 = virtualinvoke r0.<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>(r1, 0, i9);

        if i10 != -1 goto label3;

        goto label5;

     label3:
        $l6 = (long) i10;

        l8 = l8 - $l6;

     label4:
        $b2 = l8 cmp 0L;

        if $b2 > 0 goto label2;

     label5:
        $l7 = l0 - l8;

        return $l7;
    }
}
