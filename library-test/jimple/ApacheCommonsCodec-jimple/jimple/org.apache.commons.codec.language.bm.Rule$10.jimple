class org.apache.commons.codec.language.bm.Rule$10 extends java.lang.Object implements org.apache.commons.codec.language.bm.Rule$RPattern
{
    java.util.regex.Pattern pattern;

    void <init>(java.lang.String)
    {
        org.apache.commons.codec.language.bm.Rule$10 r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$10;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        r0.<org.apache.commons.codec.language.bm.Rule$10: java.util.regex.Pattern pattern> = $r2;

        return;
    }

    public boolean isMatch(java.lang.CharSequence)
    {
        org.apache.commons.codec.language.bm.Rule$10 r0;
        java.lang.CharSequence r1;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$10;

        r1 := @parameter0: java.lang.CharSequence;

        $r3 = r0.<org.apache.commons.codec.language.bm.Rule$10: java.util.regex.Pattern pattern>;

        r2 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        return $z0;
    }
}
