final class org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication extends java.lang.Object
{
    private final java.util.Map finalRules;
    private final java.lang.CharSequence input;
    private org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder;
    private int i;
    private final int maxPhonemes;
    private boolean found;

    public void <init>(java.util.Map, java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder, int, int)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        java.util.Map r1;
        java.lang.CharSequence r2;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder r3;
        int i0, i1;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("The finalRules argument must not be null");

        throw $r4;

     label1:
        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.util.Map finalRules> = r1;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder> = r3;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input> = r2;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i> = i0;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int maxPhonemes> = i1;

        return;
    }

    public int getI()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        int $i0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        return $i0;
    }

    public org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder $r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        java.util.List r1;
        org.apache.commons.codec.language.bm.Rule r2;
        java.util.Iterator r3;
        java.lang.String r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.CharSequence $r5, $r7, $r11;
        java.util.Map $r6;
        java.lang.Object $r8, $r10;
        boolean $z0, $z1, $z2;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder $r12;
        org.apache.commons.codec.language.bm.Rule$PhonemeExpr $r13;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found> = 0;

        i7 = 1;

        $r6 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.util.Map finalRules>;

        $r5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input>;

        $i2 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        $i1 = $i0 + 1;

        $r7 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i2, $i1);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r1 = (java.util.List) $r8;

        if r1 == null goto label3;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.codec.language.bm.Rule) $r10;

        r4 = virtualinvoke r2.<org.apache.commons.codec.language.bm.Rule: java.lang.String getPattern()>();

        i7 = virtualinvoke r4.<java.lang.String: int length()>();

        $r11 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: java.lang.CharSequence input>;

        $i5 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        $z1 = virtualinvoke r2.<org.apache.commons.codec.language.bm.Rule: boolean patternAndContextMatches(java.lang.CharSequence,int)>($r11, $i5);

        if $z1 == 0 goto label2;

        $r12 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder>;

        $r13 = virtualinvoke r2.<org.apache.commons.codec.language.bm.Rule: org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme()>();

        $i6 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int maxPhonemes>;

        virtualinvoke $r12.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int)>($r13, $i6);

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found> = 1;

        goto label3;

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        $z2 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found>;

        if $z2 != 0 goto label4;

        i7 = 1;

     label4:
        $i3 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i>;

        $i4 = $i3 + i7;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int i> = $i4;

        return r0;
    }

    public boolean isFound()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication r0;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        $z0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean found>;

        return $z0;
    }
}
