public class org.apache.commons.codec.language.bm.Lang extends java.lang.Object
{
    private static final java.util.Map Langs;
    private static final java.lang.String LANGUAGE_RULES_RN;
    private final org.apache.commons.codec.language.bm.Languages languages;
    private final java.util.List rules;

    static void <clinit>()
    {
        org.apache.commons.codec.language.bm.NameType r0;
        int i0, i1;
        java.util.EnumMap $r2;
        org.apache.commons.codec.language.bm.NameType[] $r3;
        java.lang.Object[] $r4;
        java.util.Map $r5;
        java.lang.String $r6, $r7;
        org.apache.commons.codec.language.bm.Languages $r8;
        org.apache.commons.codec.language.bm.Lang $r9;

        <org.apache.commons.codec.language.bm.Lang: java.lang.String LANGUAGE_RULES_RN> = "org/apache/commons/codec/language/bm/%s_lang.txt";

        $r2 = new java.util.EnumMap;

        specialinvoke $r2.<java.util.EnumMap: void <init>(java.lang.Class)>(class "org/apache/commons/codec/language/bm/NameType");

        <org.apache.commons.codec.language.bm.Lang: java.util.Map Langs> = $r2;

        $r3 = staticinvoke <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType[] values()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label2;

     label1:
        r0 = $r3[i1];

        $r5 = <org.apache.commons.codec.language.bm.Lang: java.util.Map Langs>;

        $r4 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<org.apache.commons.codec.language.bm.NameType: java.lang.String getName()>();

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("org/apache/commons/codec/language/bm/%s_lang.txt", $r4);

        $r8 = staticinvoke <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType)>(r0);

        $r9 = staticinvoke <org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)>($r7, $r8);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    public static org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType)
    {
        org.apache.commons.codec.language.bm.NameType r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.apache.commons.codec.language.bm.Lang $r3;

        r0 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        $r1 = <org.apache.commons.codec.language.bm.Lang: java.util.Map Langs>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.codec.language.bm.Lang) $r2;

        return $r3;
    }

    public static org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String, org.apache.commons.codec.language.bm.Languages)
    {
        java.lang.String r0, r5, $r14, $r15, $r16, $r26, r30, r31;
        org.apache.commons.codec.language.bm.Languages r1;
        java.io.InputStream r3;
        int i0, $i1, $i2;
        java.lang.String[] r6, r8;
        java.util.regex.Pattern r7;
        boolean z0, $z1, $z3, z4, $z5;
        java.util.ArrayList $r10;
        java.lang.Class $r11;
        java.lang.ClassLoader $r12;
        java.util.Scanner $r13;
        org.apache.commons.codec.language.bm.Lang$LangRule $r17;
        java.util.HashSet $r18;
        java.util.List $r19;
        java.lang.IllegalArgumentException $r20;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r25;
        org.apache.commons.codec.language.bm.Lang $r27;
        java.lang.IllegalStateException $r28;
        java.lang.Throwable $r29;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.commons.codec.language.bm.Languages;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = class "org/apache/commons/codec/language/bm/Lang";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r3 = virtualinvoke $r12.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        if r3 != null goto label01;

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to resolve required resource:org/apache/commons/codec/language/bm/%s_lang.txt");

        throw $r28;

     label01:
        $r13 = new java.util.Scanner;

        specialinvoke $r13.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(r3, "UTF-8");

     label02:
        z4 = 0;

        goto label09;

     label03:
        r5 = virtualinvoke $r13.<java.util.Scanner: java.lang.String nextLine()>();

        r30 = r5;

        if z4 == 0 goto label04;

        $z3 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>("*/");

        if $z3 == 0 goto label09;

        z4 = 0;

        goto label09;

     label04:
        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/*");

        if $z1 == 0 goto label05;

        z4 = 1;

        goto label09;

     label05:
        i0 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>("//");

        if i0 < 0 goto label06;

        r30 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label06:
        r31 = virtualinvoke r30.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke r31.<java.lang.String: int length()>();

        if $i1 != 0 goto label07;

        goto label09;

     label07:
        r6 = virtualinvoke r31.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i2 = lengthof r6;

        if $i2 == 3 goto label08;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed line \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in language resource \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r20;

     label08:
        $r14 = r6[0];

        r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r14);

        $r15 = r6[1];

        r8 = virtualinvoke $r15.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\+");

        $r16 = r6[2];

        z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("true");

        $r17 = new org.apache.commons.codec.language.bm.Lang$LangRule;

        $r18 = new java.util.HashSet;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r8);

        specialinvoke $r18.<java.util.HashSet: void <init>(java.util.Collection)>($r19);

        specialinvoke $r17.<org.apache.commons.codec.language.bm.Lang$LangRule: void <init>(java.util.regex.Pattern,java.util.Set,boolean,org.apache.commons.codec.language.bm.Lang$LangRule)>(r7, $r18, z0, null);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r17);

     label09:
        $z5 = virtualinvoke $r13.<java.util.Scanner: boolean hasNextLine()>();

        if $z5 != 0 goto label03;

        goto label11;

     label10:
        $r29 := @caughtexception;

        virtualinvoke $r13.<java.util.Scanner: void close()>();

        throw $r29;

     label11:
        virtualinvoke $r13.<java.util.Scanner: void close()>();

        $r27 = new org.apache.commons.codec.language.bm.Lang;

        specialinvoke $r27.<org.apache.commons.codec.language.bm.Lang: void <init>(java.util.List,org.apache.commons.codec.language.bm.Languages)>($r10, r1);

        return $r27;

        catch java.lang.Throwable from label02 to label10 with label10;
    }

    private void <init>(java.util.List, org.apache.commons.codec.language.bm.Languages)
    {
        org.apache.commons.codec.language.bm.Lang r0;
        java.util.List r1, $r3;
        org.apache.commons.codec.language.bm.Languages r2;

        r0 := @this: org.apache.commons.codec.language.bm.Lang;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.commons.codec.language.bm.Languages;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        r0.<org.apache.commons.codec.language.bm.Lang: java.util.List rules> = $r3;

        r0.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages languages> = r2;

        return;
    }

    public java.lang.String guessLanguage(java.lang.String)
    {
        org.apache.commons.codec.language.bm.Lang r0;
        java.lang.String r1, $r3;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r2;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.Lang;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<org.apache.commons.codec.language.bm.Languages$LanguageSet: java.lang.String getAny()>();

        goto label2;

     label1:
        $r3 = "any";

     label2:
        return $r3;
    }

    public org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)
    {
        org.apache.commons.codec.language.bm.Lang r0;
        java.lang.String r1, r2;
        java.util.Iterator r4;
        java.util.Locale $r5;
        java.util.HashSet $r6;
        org.apache.commons.codec.language.bm.Languages $r7;
        java.util.Set $r8, $r11, $r12;
        java.util.List $r9;
        java.lang.Object $r10;
        boolean $z0, $z1, $z4, $z5;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r13, r15, $r16;
        org.apache.commons.codec.language.bm.Lang$LangRule r14;

        r0 := @this: org.apache.commons.codec.language.bm.Lang;

        r1 := @parameter0: java.lang.String;

        $r5 = <java.util.Locale: java.util.Locale ENGLISH>;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r5);

        $r6 = new java.util.HashSet;

        $r7 = r0.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages languages>;

        $r8 = virtualinvoke $r7.<org.apache.commons.codec.language.bm.Languages: java.util.Set getLanguages()>();

        specialinvoke $r6.<java.util.HashSet: void <init>(java.util.Collection)>($r8);

        $r9 = r0.<org.apache.commons.codec.language.bm.Lang: java.util.List rules>;

        r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.commons.codec.language.bm.Lang$LangRule) $r10;

        $z0 = virtualinvoke r14.<org.apache.commons.codec.language.bm.Lang$LangRule: boolean matches(java.lang.String)>(r2);

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <org.apache.commons.codec.language.bm.Lang$LangRule: boolean access$1(org.apache.commons.codec.language.bm.Lang$LangRule)>(r14);

        if $z1 == 0 goto label2;

        $r12 = staticinvoke <org.apache.commons.codec.language.bm.Lang$LangRule: java.util.Set access$2(org.apache.commons.codec.language.bm.Lang$LangRule)>(r14);

        interfaceinvoke $r6.<java.util.Set: boolean retainAll(java.util.Collection)>($r12);

        goto label3;

     label2:
        $r11 = staticinvoke <org.apache.commons.codec.language.bm.Lang$LangRule: java.util.Set access$2(org.apache.commons.codec.language.bm.Lang$LangRule)>(r14);

        interfaceinvoke $r6.<java.util.Set: boolean removeAll(java.util.Collection)>($r11);

     label3:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

        r15 = staticinvoke <org.apache.commons.codec.language.bm.Languages$LanguageSet: org.apache.commons.codec.language.bm.Languages$LanguageSet 'from'(java.util.Set)>($r6);

        $r13 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES>;

        $z4 = virtualinvoke r15.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z4 == 0 goto label4;

        $r16 = <org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE>;

        goto label5;

     label4:
        $r16 = r15;

     label5:
        return $r16;
    }
}
