public class org.apache.commons.codec.language.MatchRatingApproachEncoder extends java.lang.Object implements org.apache.commons.codec.StringEncoder
{
    private static final java.lang.String SPACE;
    private static final java.lang.String EMPTY;
    private static final int ONE;
    private static final int TWO;
    private static final int THREE;
    private static final int FOUR;
    private static final int FIVE;
    private static final int SIX;
    private static final int SEVEN;
    private static final int EIGHT;
    private static final int ELEVEN;
    private static final int TWELVE;
    private static final java.lang.String PLAIN_ASCII;
    private static final java.lang.String UNICODE;
    private static final java.lang.String[] DOUBLE_CONSONANT;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String UNICODE> = "\u00c0\u00e0\u00c8\u00e8\u00cc\u00ec\u00d2\u00f2\u00d9\u00f9\u00c1\u00e1\u00c9\u00e9\u00cd\u00ed\u00d3\u00f3\u00da\u00fa\u00dd\u00fd\u00c2\u00e2\u00ca\u00ea\u00ce\u00ee\u00d4\u00f4\u00db\u00fb\u0176\u0177\u00c3\u00e3\u00d5\u00f5\u00d1\u00f1\u00c4\u00e4\u00cb\u00eb\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc\u0178\u00ff\u00c5\u00e5\u00c7\u00e7\u0150\u0151\u0170\u0171";

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String PLAIN_ASCII> = "AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu";

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int TWELVE> = 12;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int ELEVEN> = 11;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int EIGHT> = 8;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int SEVEN> = 7;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int SIX> = 6;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int FIVE> = 5;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int FOUR> = 4;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int THREE> = 3;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int TWO> = 2;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: int ONE> = 1;

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String EMPTY> = "";

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String SPACE> = " ";

        $r0 = newarray (java.lang.String)[21];

        $r0[0] = "BB";

        $r0[1] = "CC";

        $r0[2] = "DD";

        $r0[3] = "FF";

        $r0[4] = "GG";

        $r0[5] = "HH";

        $r0[6] = "JJ";

        $r0[7] = "KK";

        $r0[8] = "LL";

        $r0[9] = "MM";

        $r0[10] = "NN";

        $r0[11] = "PP";

        $r0[12] = "QQ";

        $r0[13] = "RR";

        $r0[14] = "SS";

        $r0[15] = "TT";

        $r0[16] = "VV";

        $r0[17] = "WW";

        $r0[18] = "XX";

        $r0[19] = "YY";

        $r0[20] = "ZZ";

        <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String[] DOUBLE_CONSONANT> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    java.lang.String cleanName(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String r1, r3, r7, r8, r9;
        int i0, i1;
        java.util.Locale $r5;
        java.lang.String[] $r6;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r1 := @parameter0: java.lang.String;

        $r5 = <java.util.Locale: java.util.Locale ENGLISH>;

        r7 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r5);

        $r6 = newarray (java.lang.String)[5];

        $r6[0] = "\\-";

        $r6[1] = "[&]";

        $r6[2] = "\\\'";

        $r6[3] = "\\.";

        $r6[4] = "[\\,]";

        i0 = lengthof $r6;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r6[i1];

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(r3, "");

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        r8 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeAccents(java.lang.String)>(r7);

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+", "");

        return r9;
    }

    public final java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r2, $r3;
        org.apache.commons.codec.EncoderException $r4;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r4.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Match Rating Approach encoder is not of type java.lang.String");

        throw $r4;

     label1:
        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String encode(java.lang.String)>($r2);

        return $r3;
    }

    public final java.lang.String encode(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String $r1, $r2, r3, r4, r5, r6, r7;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r3 := @parameter0: java.lang.String;

        if r3 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z0 != 0 goto label1;

        $r2 = " ";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z1 != 0 goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 1 goto label2;

     label1:
        return "";

     label2:
        r4 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(r3);

        r5 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(r4);

        r6 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(r5);

        r7 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(r6);

        return r7;
    }

    java.lang.String getFirst3Last3(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String r1, r2, r3, $r5, $r7;
        int i0, $i1;
        java.lang.StringBuilder $r4, $r6;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 <= 6 goto label1;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        $i1 = i0 - 3;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i1, i0);

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label1:
        return r1;
    }

    int getMinRating(int)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        int i0;
        byte b1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        i0 := @parameter0: int;

        if i0 > 4 goto label1;

        b1 = 5;

        goto label5;

     label1:
        if i0 < 5 goto label2;

        if i0 > 7 goto label2;

        b1 = 4;

        goto label5;

     label2:
        if i0 < 8 goto label3;

        if i0 > 11 goto label3;

        b1 = 3;

        goto label5;

     label3:
        if i0 != 12 goto label4;

        b1 = 2;

        goto label5;

     label4:
        b1 = 1;

     label5:
        return b1;
    }

    public boolean isEncodeEquals(java.lang.String, java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.String $r1, $r2, $r3, $r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        if r5 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z0 != 0 goto label1;

        $r2 = " ";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        if r6 == null goto label3;

        $r3 = "";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z2 != 0 goto label3;

        $r4 = " ";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z3 == 0 goto label4;

     label3:
        return 0;

     label4:
        $i2 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i2 == 1 goto label5;

        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 != 1 goto label6;

     label5:
        return 0;

     label6:
        $z4 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z4 == 0 goto label7;

        return 1;

     label7:
        r7 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(r5);

        r8 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String cleanName(java.lang.String)>(r6);

        r9 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(r7);

        r10 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeVowels(java.lang.String)>(r8);

        r11 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(r9);

        r12 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String removeDoubleConsonants(java.lang.String)>(r10);

        r13 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(r11);

        r14 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String getFirst3Last3(java.lang.String)>(r12);

        $i4 = virtualinvoke r13.<java.lang.String: int length()>();

        $i5 = virtualinvoke r14.<java.lang.String: int length()>();

        $i6 = $i4 - $i5;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        if $i7 < 3 goto label8;

        return 0;

     label8:
        $i8 = virtualinvoke r13.<java.lang.String: int length()>();

        $i9 = virtualinvoke r14.<java.lang.String: int length()>();

        $i10 = $i8 + $i9;

        i0 = staticinvoke <java.lang.Math: int abs(int)>($i10);

        i11 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int getMinRating(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String)>(r13, r14);

        if i1 < i11 goto label9;

        return 1;

     label9:
        return 0;
    }

    boolean isVowel(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("E");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("A");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("O");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("I");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("U");

        if $z4 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    int leftToRightThenRightToLeftProcessing(java.lang.String, java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String r1, r2, r5, $r6, $r7, r12, r13, r14, r15, r16;
        char[] r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        r4 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i0 = $i2 - 1;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        i1 = $i3 - 1;

        i22 = 0;

        goto label5;

     label1:
        if i22 <= i1 goto label2;

        goto label6;

     label2:
        $i4 = i22 + 1;

        r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i22, $i4);

        $i7 = i0 - i22;

        $i5 = i0 - i22;

        $i6 = $i5 + 1;

        r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i7, $i6);

        $i8 = i22 + 1;

        r14 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i22, $i8);

        $i11 = i1 - i22;

        $i9 = i1 - i22;

        $i10 = $i9 + 1;

        r15 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>($i11, $i10);

        $z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z0 == 0 goto label3;

        r3[i22] = 32;

        r4[i22] = 32;

     label3:
        $z1 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z1 == 0 goto label4;

        $i12 = i0 - i22;

        r3[$i12] = 32;

        $i13 = i1 - i22;

        r4[$i13] = 32;

     label4:
        i22 = i22 + 1;

     label5:
        $i23 = lengthof r3;

        if i22 < $i23 goto label1;

     label6:
        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[])>(r3);

        r16 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+", "");

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>(r4);

        r5 = virtualinvoke $r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+", "");

        $i14 = virtualinvoke r16.<java.lang.String: int length()>();

        $i15 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i14 <= $i15 goto label7;

        $i19 = virtualinvoke r16.<java.lang.String: int length()>();

        $i20 = 6 - $i19;

        $i21 = staticinvoke <java.lang.Math: int abs(int)>($i20);

        return $i21;

     label7:
        $i16 = virtualinvoke r5.<java.lang.String: int length()>();

        $i17 = 6 - $i16;

        $i18 = staticinvoke <java.lang.Math: int abs(int)>($i17);

        return $i18;
    }

    java.lang.String removeAccents(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String r1, $r4, $r6, $r8;
        int i0, i2, i4;
        char c1, $c3;
        java.lang.StringBuilder $r3;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i4 = 0;

        goto label5;

     label2:
        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);

        $r4 = "\u00c0\u00e0\u00c8\u00e8\u00cc\u00ec\u00d2\u00f2\u00d9\u00f9\u00c1\u00e1\u00c9\u00e9\u00cd\u00ed\u00d3\u00f3\u00da\u00fa\u00dd\u00fd\u00c2\u00e2\u00ca\u00ea\u00ce\u00ee\u00d4\u00f4\u00db\u00fb\u0176\u0177\u00c3\u00e3\u00d5\u00f5\u00d1\u00f1\u00c4\u00e4\u00cb\u00eb\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc\u0178\u00ff\u00c5\u00e5\u00c7\u00e7\u0150\u0151\u0170\u0171";

        i2 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(c1);

        if i2 <= -1 goto label3;

        $r6 = "AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu";

        $c3 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        goto label4;

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label4:
        i4 = i4 + 1;

     label5:
        if i4 < i0 goto label2;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    java.lang.String removeDoubleConsonants(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String r1, r2, r4, r6;
        int i0, i1;
        java.lang.String[] $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r1 := @parameter0: java.lang.String;

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = <org.apache.commons.codec.language.MatchRatingApproachEncoder: java.lang.String[] DOUBLE_CONSONANT>;

        i0 = lengthof $r5;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r5[i1];

        $z0 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label2;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r2, r4);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return r6;
    }

    java.lang.String removeVowels(java.lang.String)
    {
        org.apache.commons.codec.language.MatchRatingApproachEncoder r0;
        java.lang.String r1, $r3, $r5, r6, r7, r8, r9, r10, r11, r12;
        boolean $z0;
        java.lang.StringBuilder $r2, $r4;

        r0 := @this: org.apache.commons.codec.language.MatchRatingApproachEncoder;

        r6 := @parameter0: java.lang.String;

        r1 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("A", "");

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("E", "");

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("I", "");

        r10 = virtualinvoke r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("O", "");

        r11 = virtualinvoke r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("U", "");

        r12 = virtualinvoke r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s{2,}\\b", " ");

        $z0 = virtualinvoke r0.<org.apache.commons.codec.language.MatchRatingApproachEncoder: boolean isVowel(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label1:
        return r12;
    }
}
