public class org.apache.commons.codec.language.bm.PhoneticEngine extends java.lang.Object
{
    private static final java.util.Map NAME_PREFIXES;
    private static final int DEFAULT_MAX_PHONEMES;
    private final org.apache.commons.codec.language.bm.Lang lang;
    private final org.apache.commons.codec.language.bm.NameType nameType;
    private final org.apache.commons.codec.language.bm.RuleType ruleType;
    private final boolean concat;
    private final int maxPhonemes;
    private static int[] $SWITCH_TABLE$org$apache$commons$codec$language$bm$NameType;

    static void <clinit>()
    {
        java.util.EnumMap $r0;
        java.util.HashSet $r1, $r8, $r15;
        java.lang.String[] $r2, $r9, $r16;
        java.util.Map $r3, $r10, $r17;
        org.apache.commons.codec.language.bm.NameType $r4, $r11, $r18;
        java.util.List $r5, $r12, $r19;
        java.util.Set $r6, $r13, $r20;

        <org.apache.commons.codec.language.bm.PhoneticEngine: int DEFAULT_MAX_PHONEMES> = 20;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "org/apache/commons/codec/language/bm/NameType");

        <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES> = $r0;

        $r3 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r4 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType ASHKENAZI>;

        $r1 = new java.util.HashSet;

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "bar";

        $r2[1] = "ben";

        $r2[2] = "da";

        $r2[3] = "de";

        $r2[4] = "van";

        $r2[5] = "von";

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        $r10 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r11 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType SEPHARDIC>;

        $r8 = new java.util.HashSet;

        $r9 = newarray (java.lang.String)[16];

        $r9[0] = "al";

        $r9[1] = "el";

        $r9[2] = "da";

        $r9[3] = "dal";

        $r9[4] = "de";

        $r9[5] = "del";

        $r9[6] = "dela";

        $r9[7] = "de la";

        $r9[8] = "della";

        $r9[9] = "des";

        $r9[10] = "di";

        $r9[11] = "do";

        $r9[12] = "dos";

        $r9[13] = "du";

        $r9[14] = "van";

        $r9[15] = "von";

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r12);

        $r13 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r8);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r13);

        $r17 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r18 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        $r15 = new java.util.HashSet;

        $r16 = newarray (java.lang.String)[14];

        $r16[0] = "da";

        $r16[1] = "dal";

        $r16[2] = "de";

        $r16[3] = "del";

        $r16[4] = "dela";

        $r16[5] = "de la";

        $r16[6] = "della";

        $r16[7] = "des";

        $r16[8] = "di";

        $r16[9] = "do";

        $r16[10] = "dos";

        $r16[11] = "du";

        $r16[12] = "van";

        $r16[13] = "von";

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        specialinvoke $r15.<java.util.HashSet: void <init>(java.util.Collection)>($r19);

        $r20 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r15);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r20);

        return;
    }

    private static java.lang.String join(java.lang.Iterable, java.lang.String)
    {
        java.lang.Iterable r0;
        java.lang.String r1, $r7, $r9, $r11;
        java.util.Iterator r3;
        java.lang.StringBuilder $r4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r10;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label2;

     label1:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void <init>(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.NameType r1;
        org.apache.commons.codec.language.bm.RuleType r2;
        boolean z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r2 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: void <init>(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,boolean,int)>(r1, r2, z0, 20);

        return;
    }

    public void <init>(org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.RuleType, boolean, int)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.NameType r1;
        org.apache.commons.codec.language.bm.RuleType r2, $r3, $r7;
        boolean z0;
        int i0;
        org.apache.commons.codec.language.bm.Lang $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 := @parameter0: org.apache.commons.codec.language.bm.NameType;

        r2 := @parameter1: org.apache.commons.codec.language.bm.RuleType;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        if r2 != $r3 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("ruleType must not be ");

        $r7 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType> = r1;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType> = r2;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat> = z0;

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType)>(r1);

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang> = $r4;

        r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes> = i0;

        return;
    }

    private org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder, java.util.Map)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder r1, $r22, r25;
        java.util.Map r2;
        org.apache.commons.codec.language.bm.Rule$Phoneme r4, r7, r28, r29;
        java.util.Iterator r5, r27;
        java.lang.String r6;
        boolean $z0, $z1, $z2, z3, $z4;
        java.util.TreeMap $r8;
        java.util.Comparator $r9;
        java.util.Set $r10, $r16, $r23;
        java.lang.Object $r11, $r17, $r19;
        org.apache.commons.codec.language.bm.Languages$LanguageSet $r12, $r20;
        java.lang.CharSequence $r13, $r15;
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication $r14, r26;
        int $i0, $i1, i2, $i3;
        java.lang.NullPointerException $r24;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 := @parameter0: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        r2 := @parameter1: java.util.Map;

        if r2 != null goto label01;

        $r24 = new java.lang.NullPointerException;

        specialinvoke $r24.<java.lang.NullPointerException: void <init>(java.lang.String)>("finalRules can not be null");

        throw $r24;

     label01:
        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        return r1;

     label02:
        $r8 = new java.util.TreeMap;

        $r9 = <org.apache.commons.codec.language.bm.Rule$Phoneme: java.util.Comparator COMPARATOR>;

        specialinvoke $r8.<java.util.TreeMap: void <init>(java.util.Comparator)>($r9);

        $r10 = virtualinvoke r1.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set getPhonemes()>();

        r5 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label03:
        $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.codec.language.bm.Rule$Phoneme) $r11;

        $r12 = virtualinvoke r4.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages()>();

        r25 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r12);

        $r13 = virtualinvoke r4.<org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence getPhonemeText()>();

        r6 = interfaceinvoke $r13.<java.lang.CharSequence: java.lang.String toString()>();

        i2 = 0;

        goto label06;

     label04:
        $r14 = new org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>;

        specialinvoke $r14.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: void <init>(java.util.Map,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)>(r2, r6, r25, i2, $i0);

        r26 = virtualinvoke $r14.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()>();

        z3 = virtualinvoke r26.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: boolean isFound()>();

        r25 = virtualinvoke r26.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()>();

        if z3 != 0 goto label05;

        $i1 = i2 + 1;

        $r15 = virtualinvoke r6.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(i2, $i1);

        virtualinvoke r25.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void append(java.lang.CharSequence)>($r15);

     label05:
        i2 = virtualinvoke r26.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int getI()>();

     label06:
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if i2 < $i3 goto label04;

        $r16 = virtualinvoke r25.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.util.Set getPhonemes()>();

        r27 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

        goto label09;

     label07:
        $r17 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.apache.commons.codec.language.bm.Rule$Phoneme) $r17;

        $z2 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r28);

        if $z2 == 0 goto label08;

        $r19 = interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r28);

        r29 = (org.apache.commons.codec.language.bm.Rule$Phoneme) $r19;

        $r20 = virtualinvoke r28.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages()>();

        r7 = virtualinvoke r29.<org.apache.commons.codec.language.bm.Rule$Phoneme: org.apache.commons.codec.language.bm.Rule$Phoneme mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r20);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r7);

        goto label09;

     label08:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r28, r28);

     label09:
        $z4 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label07;

     label10:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label03;

        $r22 = new org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder;

        $r23 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r22.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: void <init>(java.util.Set,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder)>($r23, null);

        return $r22;
    }

    public java.lang.String encode(java.lang.String)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        java.lang.String r1, $r4;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r2;
        org.apache.commons.codec.language.bm.Lang $r3;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>;

        r2 = virtualinvoke $r3.<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r1, r2);

        return $r4;
    }

    public java.lang.String encode(java.lang.String, org.apache.commons.codec.language.bm.Languages$LanguageSet)
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.Languages$LanguageSet r1;
        java.util.Map r2, r3, r4, $r23, $r37, $r46;
        java.lang.String r5, $r13, $r14, $r29, $r31, $r35, $r44, $r51, $r53, $r55, $r58, $r61, $r64, $r65, $r69, $r72, $r75, r76, r77, r78, r79, r81, r82, r83, r87, r89, r92;
        org.apache.commons.codec.language.bm.RuleType $r6, $r8, $r10;
        org.apache.commons.codec.language.bm.NameType $r7, $r9, $r11, $r15, $r16, $r20, $r22, $r36, $r42, $r45;
        java.util.Locale $r12;
        java.lang.String[] $r17, r88;
        java.util.ArrayList $r18;
        int[] $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        boolean $z0, $z3, $z7, $z8, $z9, $z10;
        java.lang.Object $r21, $r24, $r27, $r33, $r38, $r47, $r49;
        java.util.Collection $r25, $r39;
        java.lang.StringBuilder $r26, $r28, $r41, $r43, $r50, $r52, $r54, $r56, $r57, $r59, $r60, $r62, $r63, $r66, $r67, $r68, $r70, $r71, $r73, $r74;
        java.util.Iterator $r32, r80, r86, r91;
        org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication $r34, r94;
        java.lang.IllegalStateException $r40;
        java.util.Set $r48;
        java.util.List r84;
        org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder r93, r95, r96;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        r76 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.commons.codec.language.bm.Languages$LanguageSet;

        $r7 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r6 = <org.apache.commons.codec.language.bm.RuleType: org.apache.commons.codec.language.bm.RuleType RULES>;

        r2 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r7, $r6, r1);

        $r9 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r8 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        r3 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)>($r9, $r8, "common");

        $r11 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r10 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule: java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet)>($r11, $r10, r1);

        $r12 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r13 = virtualinvoke r76.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(char,char)>(45, 32);

        r77 = virtualinvoke $r14.<java.lang.String: java.lang.String trim()>();

        $r16 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r15 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        if $r16 != $r15 goto label04;

        $i7 = virtualinvoke r77.<java.lang.String: int length()>();

        if $i7 < 2 goto label01;

        $r65 = virtualinvoke r77.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $z9 = virtualinvoke $r65.<java.lang.String: boolean equals(java.lang.Object)>("d\'");

        if $z9 == 0 goto label01;

        r78 = virtualinvoke r77.<java.lang.String: java.lang.String substring(int)>(2);

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>(java.lang.String)>("d");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r78);

        r79 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r69 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r78);

        $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")-(");

        $r72 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r79);

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r75;

     label01:
        $r46 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r45 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r47 = interfaceinvoke $r46.<java.util.Map: java.lang.Object get(java.lang.Object)>($r45);

        $r48 = (java.util.Set) $r47;

        r80 = interfaceinvoke $r48.<java.util.Set: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r49 = interfaceinvoke r80.<java.util.Iterator: java.lang.Object next()>();

        r81 = (java.lang.String) $r49;

        $r50 = new java.lang.StringBuilder;

        $r51 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r81);

        specialinvoke $r50.<java.lang.StringBuilder: void <init>(java.lang.String)>($r51);

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $z8 = virtualinvoke r77.<java.lang.String: boolean startsWith(java.lang.String)>($r53);

        if $z8 == 0 goto label03;

        $i8 = virtualinvoke r81.<java.lang.String: int length()>();

        $i9 = $i8 + 1;

        r82 = virtualinvoke r77.<java.lang.String: java.lang.String substring(int)>($i9);

        $r54 = new java.lang.StringBuilder;

        $r55 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r81);

        specialinvoke $r54.<java.lang.StringBuilder: void <init>(java.lang.String)>($r55);

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r82);

        r83 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r58 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r82);

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")-(");

        $r61 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r83);

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r64;

     label03:
        $z7 = interfaceinvoke r80.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label02;

     label04:
        $r17 = virtualinvoke r77.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        r84 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        $r19 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: int[] $SWITCH_TABLE$org$apache$commons$codec$language$bm$NameType()>();

        $r20 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $i0 = virtualinvoke $r20.<org.apache.commons.codec.language.bm.NameType: int ordinal()>();

        $i1 = $r19[$i0];

        tableswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label05;
            default: goto label10;
        };

     label05:
        r86 = interfaceinvoke r84.<java.util.List: java.util.Iterator iterator()>();

        goto label07;

     label06:
        $r21 = interfaceinvoke r86.<java.util.Iterator: java.lang.Object next()>();

        r87 = (java.lang.String) $r21;

        r88 = virtualinvoke r87.<java.lang.String: java.lang.String[] split(java.lang.String)>("\'");

        $i2 = lengthof r88;

        $i3 = $i2 - 1;

        r5 = r88[$i3];

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r5);

     label07:
        $z0 = interfaceinvoke r86.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label06;

        $r23 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r22 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        $r25 = (java.util.Collection) $r24;

        interfaceinvoke $r18.<java.util.List: boolean removeAll(java.util.Collection)>($r25);

        goto label11;

     label08:
        interfaceinvoke $r18.<java.util.List: boolean addAll(java.util.Collection)>(r84);

        $r37 = <org.apache.commons.codec.language.bm.PhoneticEngine: java.util.Map NAME_PREFIXES>;

        $r36 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r38 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>($r36);

        $r39 = (java.util.Collection) $r38;

        interfaceinvoke $r18.<java.util.List: boolean removeAll(java.util.Collection)>($r39);

        goto label11;

     label09:
        interfaceinvoke $r18.<java.util.List: boolean addAll(java.util.Collection)>(r84);

        goto label11;

     label10:
        $r40 = new java.lang.IllegalStateException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unreachable case: ");

        $r42 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r44);

        throw $r40;

     label11:
        $z10 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>;

        if $z10 == 0 goto label12;

        r89 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String join(java.lang.Iterable,java.lang.String)>($r18, " ");

        goto label16;

     label12:
        $i4 = interfaceinvoke $r18.<java.util.List: int size()>();

        if $i4 != 1 goto label13;

        $r32 = interfaceinvoke r84.<java.util.List: java.util.Iterator iterator()>();

        $r33 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r89 = (java.lang.String) $r33;

        goto label16;

     label13:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        r91 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

        goto label15;

     label14:
        $r27 = interfaceinvoke r91.<java.util.Iterator: java.lang.Object next()>();

        r92 = (java.lang.String) $r27;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r29 = virtualinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)>(r92);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

     label15:
        $z3 = interfaceinvoke r91.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label14;

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String substring(int)>(1);

        return $r31;

     label16:
        r93 = staticinvoke <org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet)>(r1);

        i10 = 0;

        goto label18;

     label17:
        $r34 = new org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication;

        $i6 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>;

        specialinvoke $r34.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: void <init>(java.util.Map,java.lang.CharSequence,org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,int,int)>(r2, r89, r93, i10, $i6);

        r94 = virtualinvoke $r34.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke()>();

        i10 = virtualinvoke r94.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: int getI()>();

        r93 = virtualinvoke r94.<org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()>();

     label18:
        $i5 = virtualinvoke r89.<java.lang.String: int length()>();

        if i10 < $i5 goto label17;

        r95 = specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)>(r93, r3);

        r96 = specialinvoke r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map)>(r95, r4);

        $r35 = virtualinvoke r96.<org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder: java.lang.String makeString()>();

        return $r35;
    }

    public org.apache.commons.codec.language.bm.Lang getLang()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.Lang $r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.Lang lang>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.NameType getNameType()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.NameType $r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.NameType nameType>;

        return $r1;
    }

    public org.apache.commons.codec.language.bm.RuleType getRuleType()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        org.apache.commons.codec.language.bm.RuleType $r1;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $r1 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: org.apache.commons.codec.language.bm.RuleType ruleType>;

        return $r1;
    }

    public boolean isConcat()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $z0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: boolean concat>;

        return $z0;
    }

    public int getMaxPhonemes()
    {
        org.apache.commons.codec.language.bm.PhoneticEngine r0;
        int $i0;

        r0 := @this: org.apache.commons.codec.language.bm.PhoneticEngine;

        $i0 = r0.<org.apache.commons.codec.language.bm.PhoneticEngine: int maxPhonemes>;

        return $i0;
    }

    static int[] $SWITCH_TABLE$org$apache$commons$codec$language$bm$NameType()
    {
        int[] r0, $r1;
        org.apache.commons.codec.language.bm.NameType[] $r2;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.codec.language.bm.NameType $r3, $r4, $r5;
        java.lang.NoSuchFieldError $r6, $r8, $r9;

        $r1 = <org.apache.commons.codec.language.bm.PhoneticEngine: int[] $SWITCH_TABLE$org$apache$commons$codec$language$bm$NameType>;

        if $r1 == null goto label01;

        return $r1;

     label01:
        $r2 = staticinvoke <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType[] values()>();

        $i0 = lengthof $r2;

        r0 = newarray (int)[$i0];

     label02:
        $r3 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType ASHKENAZI>;

        $i1 = virtualinvoke $r3.<org.apache.commons.codec.language.bm.NameType: int ordinal()>();

        r0[$i1] = 1;

     label03:
        goto label05;

     label04:
        $r9 := @caughtexception;

     label05:
        $r4 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType GENERIC>;

        $i2 = virtualinvoke $r4.<org.apache.commons.codec.language.bm.NameType: int ordinal()>();

        r0[$i2] = 2;

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

     label08:
        $r5 = <org.apache.commons.codec.language.bm.NameType: org.apache.commons.codec.language.bm.NameType SEPHARDIC>;

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.language.bm.NameType: int ordinal()>();

        r0[$i3] = 3;

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        <org.apache.commons.codec.language.bm.PhoneticEngine: int[] $SWITCH_TABLE$org$apache$commons$codec$language$bm$NameType> = r0;

        return r0;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
    }
}
