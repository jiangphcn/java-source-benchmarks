public class org.apache.commons.codec.binary.Base32InputStreamTest extends java.lang.Object
{
    private static final java.lang.String ENCODED_FOO;
    private static final byte[] CRLF;
    private static final byte[] LF;
    private static final java.lang.String STRING_FIXTURE;

    static void <clinit>()
    {
        byte[] $r0, $r1;

        <org.apache.commons.codec.binary.Base32InputStreamTest: java.lang.String STRING_FIXTURE> = "Hello World";

        <org.apache.commons.codec.binary.Base32InputStreamTest: java.lang.String ENCODED_FOO> = "MZXW6===";

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] CRLF> = $r0;

        $r1 = newarray (byte)[1];

        $r1[0] = 10;

        <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] LF> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCodec130() throws java.io.IOException
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r5, $r9, $r11, $r13;
        java.lang.String r6, $r14, $r15;
        java.io.ByteArrayOutputStream $r7;
        org.apache.commons.codec.binary.Base32OutputStream $r8;
        java.io.ByteArrayInputStream $r10;
        org.apache.commons.codec.binary.Base32InputStream $r12;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r8 = new org.apache.commons.codec.binary.Base32OutputStream;

        specialinvoke $r8.<org.apache.commons.codec.binary.Base32OutputStream: void <init>(java.io.OutputStream)>($r7);

        $r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        virtualinvoke $r8.<org.apache.commons.codec.binary.Base32OutputStream: void write(byte[])>($r9);

        virtualinvoke $r8.<org.apache.commons.codec.binary.Base32OutputStream: void close()>();

        $r10 = new java.io.ByteArrayInputStream;

        $r11 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r11);

        $r12 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r12.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r10);

        virtualinvoke $r12.<org.apache.commons.codec.binary.Base32InputStream: long skip(long)>(1L);

        $r13 = newarray (byte)[64];

        r5 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[] streamToBytes(java.io.InputStream,byte[])>($r12, $r13);

        r6 = staticinvoke <org.apache.commons.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r5);

        $r14 = "Hello World";

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, r6);

        return;
    }

    public void testCodec105() throws java.io.IOException
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        org.apache.commons.codec.binary.Base32InputStream $r3;
        org.apache.commons.codec.binary.Codec105ErrorInputStream $r4;
        java.lang.Throwable $r5;
        int i1;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r3 = new org.apache.commons.codec.binary.Base32InputStream;

        $r4 = new org.apache.commons.codec.binary.Codec105ErrorInputStream;

        specialinvoke $r4.<org.apache.commons.codec.binary.Codec105ErrorInputStream: void <init>()>();

        specialinvoke $r3.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r4, 1, 0, null);

     label1:
        i1 = 0;

        goto label3;

     label2:
        virtualinvoke $r3.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        i1 = i1 + 1;

     label3:
        if i1 < 5 goto label2;

        goto label5;

     label4:
        $r5 := @caughtexception;

        virtualinvoke $r3.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        throw $r5;

     label5:
        virtualinvoke $r3.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label4 with label4;
    }

    public void testAvailable() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base32InputStream $r5;
        int $i0, $i3, $i5, $i7, $i9;
        long $l1, $l2, $l4, $l6, $l8, $l10;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("MZXW6===");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r3);

        $i0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int available()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $l2 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: long skip(long)>(10L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int available()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l4);

        $i5 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l6);

        $i7 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l8);

        $i9 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int available()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l10);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }

    public void testBase32EmptyInputStreamMimeChuckSize() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testBase32EmptyInputStream(int)>(76);

        return;
    }

    public void testBase32EmptyInputStreamPemChuckSize() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testBase32EmptyInputStream(int)>(64);

        return;
    }

    private void testBase32EmptyInputStream(int) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        int i0;
        byte[] r1, r2, $r3, $r4;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        i0 := @parameter0: int;

        r1 = newarray (byte)[0];

        r2 = newarray (byte)[0];

        $r3 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r1, r2, i0, $r3);

        $r4 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r1, r2, i0, $r4);

        return;
    }

    public void testBase32InputStreamByChunk() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[][] r2;
        byte[] $r3, $r4, $r6, r7, r8, r9, r10, r11, r12;
        org.apache.commons.codec.binary.Base32 $r5;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r7 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("JBSWY3DPEBLW64TMMQ======\r\n");

        r8 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r3 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r7, r8, 76, $r3);

        r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("AA======\r\n");

        r10 = newarray (byte)[1];

        $r4 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r9, r10, 76, $r4);

        $r5 = new org.apache.commons.codec.binary.Base32;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32: void <init>()>();

        i0 = 0;

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[][] randomData(org.apache.commons.codec.binary.BaseNCodec,int)>($r5, i0);

        r11 = r2[1];

        r12 = r2[0];

        $r6 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByChunk(byte[],byte[],int,byte[])>(r11, r12, 0, $r6);

        i0 = i0 + 1;

     label2:
        if i0 <= 150 goto label1;

        return;
    }

    public void testBase32InputStreamByteByByte() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[][] r2;
        byte[] $r3, $r4, $r6, r7, r8, r9, r10, r11, r12;
        org.apache.commons.codec.binary.Base32 $r5;
        int i0;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r7 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("JBSWY3DPEBLW64TMMQ======\r\n");

        r8 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r3 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r7, r8, 76, $r3);

        r9 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("AA======\r\n");

        r10 = newarray (byte)[1];

        $r4 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] CRLF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r9, r10, 76, $r4);

        $r5 = new org.apache.commons.codec.binary.Base32;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32: void <init>()>();

        i0 = 0;

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[][] randomData(org.apache.commons.codec.binary.BaseNCodec,int)>($r5, i0);

        r11 = r2[1];

        r12 = r2[0];

        $r6 = <org.apache.commons.codec.binary.Base32InputStreamTest: byte[] LF>;

        specialinvoke r0.<org.apache.commons.codec.binary.Base32InputStreamTest: void testByteByByte(byte[],byte[],int,byte[])>(r11, r12, 0, $r6);

        i0 = i0 + 1;

     label2:
        if i0 <= 150 goto label1;

        return;
    }

    private void testByChunk(byte[], byte[], int, byte[]) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r1, r2, r3, r12, r14, r17;
        int i0, $i1, $i3, $i5, $i7, $i9, $i11, i13;
        org.apache.commons.codec.binary.Base32InputStream $r4, $r6, $r9, $r10;
        java.io.ByteArrayInputStream $r5, $r7, $r8;
        long $l2, $l4, $l6, $l8, $l10, $l12;
        boolean $z0, $z1, $z2;
        java.io.InputStream r15;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        $r4 = new org.apache.commons.codec.binary.Base32InputStream;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r4.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, i0, r3);

        r12 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[] streamToBytes(java.io.InputStream)>($r4);

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l2);

        $i3 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l4);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r12, r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base32 encode", $z0);

        $r6 = new org.apache.commons.codec.binary.Base32InputStream;

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r7);

        r14 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[] streamToBytes(java.io.InputStream)>($r6);

        $i5 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l6);

        $i7 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l8);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r14, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base32 decode", $z1);

        $r8 = new java.io.ByteArrayInputStream;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r15 = $r8;

        i13 = 0;

        goto label2;

     label1:
        $r9 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>(r15, 1, i0, r3);

        $r10 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r10.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean)>($r9, 0);

        r15 = $r10;

        i13 = i13 + 1;

     label2:
        if i13 < 10 goto label1;

        r17 = staticinvoke <org.apache.commons.codec.binary.Base32TestData: byte[] streamToBytes(java.io.InputStream)>(r15);

        $i9 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l10);

        $i11 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l12);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r17, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base32 wrap-wrap-wrap!", $z2);

        virtualinvoke r15.<java.io.InputStream: void close()>();

        return;
    }

    private void testByteByByte(byte[], byte[], int, byte[]) throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r1, r2, r3, r12, r14, r17;
        int i0, $i1, $i2, $i3, $i5, $i7, $i9, $i10, $i11, $i13, $i15, $i17, $i18, $i19, $i21, $i23, i25, i26, i27, i28;
        org.apache.commons.codec.binary.Base32InputStream $r4, $r6, $r9, $r10;
        java.io.ByteArrayInputStream $r5, $r7, $r8;
        byte $b4, $b12, $b20;
        long $l6, $l8, $l14, $l16, $l22, $l24;
        boolean $z0, $z1, $z2;
        java.io.InputStream r15;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        $r4 = new org.apache.commons.codec.binary.Base32InputStream;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r4.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, i0, r3);

        $i1 = lengthof r1;

        r12 = newarray (byte)[$i1];

        i25 = 0;

        goto label2;

     label1:
        $i3 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $b4 = (byte) $i3;

        r12[i25] = $b4;

        i25 = i25 + 1;

     label2:
        $i2 = lengthof r12;

        if i25 < $i2 goto label1;

        $i5 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l6);

        $i7 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l8);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r12, r1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base32 encode", $z0);

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        $r6 = new org.apache.commons.codec.binary.Base32InputStream;

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r7);

        $i9 = lengthof r2;

        r14 = newarray (byte)[$i9];

        i26 = 0;

        goto label4;

     label3:
        $i11 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $b12 = (byte) $i11;

        r14[i26] = $b12;

        i26 = i26 + 1;

     label4:
        $i10 = lengthof r14;

        if i26 < $i10 goto label3;

        $i13 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l14 = (long) $i13;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l14);

        $i15 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        $l16 = (long) $i15;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l16);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r14, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base32 decode", $z1);

        virtualinvoke $r6.<java.io.InputStream: void close()>();

        $r8 = new java.io.ByteArrayInputStream;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r15 = $r8;

        i27 = 0;

        goto label6;

     label5:
        $r9 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r9.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>(r15, 1, i0, r3);

        $r10 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r10.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean)>($r9, 0);

        r15 = $r10;

        i27 = i27 + 1;

     label6:
        if i27 < 10 goto label5;

        $i17 = lengthof r2;

        r17 = newarray (byte)[$i17];

        i28 = 0;

        goto label8;

     label7:
        $i19 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $b20 = (byte) $i19;

        r17[i28] = $b20;

        i28 = i28 + 1;

     label8:
        $i18 = lengthof r17;

        if i28 < $i18 goto label7;

        $i21 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l22 = (long) $i21;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("EOF", -1L, $l22);

        $i23 = virtualinvoke r15.<java.io.InputStream: int read()>();

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Still EOF", -1L, $l24);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r17, r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Streaming base32 wrap-wrap-wrap!", $z2);

        return;
    }

    public void testMarkSupported() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r1, $r6;
        java.io.ByteArrayInputStream $r4;
        org.apache.commons.codec.binary.Base32InputStream $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r5 = new org.apache.commons.codec.binary.Base32InputStream;

        $r6 = newarray (byte)[3];

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r4, 1, 4, $r6);

        $z0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Base32InputStream.markSupported() is false", $z0);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }

    public void testRead0() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r1, r2, $r7;
        java.io.ByteArrayInputStream $r5;
        org.apache.commons.codec.binary.Base32InputStream $r6;
        long $l0;
        int i1;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r2 = newarray (byte)[1024];

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new org.apache.commons.codec.binary.Base32InputStream;

        $r7 = newarray (byte)[3];

        specialinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, 4, $r7);

        i1 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read(byte[],int,int)>(r2, 0, 0);

        $l0 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Base32InputStream.read(buf, 0, 0) returns 0", 0L, $l0);

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }

    public void testReadNull() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r1, $r7;
        java.io.ByteArrayInputStream $r5;
        org.apache.commons.codec.binary.Base32InputStream $r6;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new org.apache.commons.codec.binary.Base32InputStream;

        $r7 = newarray (byte)[3];

        specialinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, 4, $r7);

     label1:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read(byte[],int,int)>(null, 0, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Base32InputStream.read(null, 0, 0) to throw a NullPointerException");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testReadOutOfBounds() throws java.lang.Exception
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r1, r2, $r7;
        java.io.ByteArrayInputStream $r5;
        org.apache.commons.codec.binary.Base32InputStream $r6;
        int $i2, $i3, $i5, $i6;
        java.lang.IndexOutOfBoundsException $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        r1 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>("Hello World");

        r2 = newarray (byte)[1024];

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new org.apache.commons.codec.binary.Base32InputStream;

        $r7 = newarray (byte)[3];

        specialinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream,boolean,int,byte[])>($r5, 1, 4, $r7);

     label01:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read(byte[],int,int)>(r2, -1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base32InputStream.read(buf, -1, 0) to throw IndexOutOfBoundsException");

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

     label04:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read(byte[],int,int)>(r2, 0, -1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected Base32InputStream.read(buf, 0, -1) to throw IndexOutOfBoundsException");

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        $i2 = lengthof r2;

        $i3 = $i2 + 1;

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read(byte[],int,int)>(r2, $i3, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Base32InputStream.read(buf, buf.length + 1, 0) throws IndexOutOfBoundsException");

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

     label10:
        $i5 = lengthof r2;

        $i6 = $i5 - 1;

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read(byte[],int,int)>(r2, $i6, 2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Base32InputStream.read(buf, buf.length - 1, 2) throws IndexOutOfBoundsException");

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

     label13:
        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
    }

    public void testSkipNone() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        byte[] r3, $r5, $r7;
        java.io.ByteArrayInputStream $r4;
        org.apache.commons.codec.binary.Base32InputStream $r6;
        long $l0, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("MZXW6===");

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r4);

        r3 = newarray (byte)[6];

        $l0 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: long skip(long)>(0L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l0);

        $i1 = lengthof r3;

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read(byte[],int,int)>(r3, 0, $i1);

        $r7 = newarray (byte)[6];

        $r7[0] = 102;

        $r7[1] = 111;

        $r7[2] = 111;

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r3, $r7);

        $i3 = virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r6.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }

    public void testSkipBig() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base32InputStream $r5;
        long $l0, $l2, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("MZXW6===");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r3);

        $l0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: long skip(long)>(1024L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l0);

        $i1 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }

    public void testSkipPastEnd() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base32InputStream $r5;
        long $l0, $l2, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("MZXW6===");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r3);

        $l0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: long skip(long)>(10L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l0);

        $i1 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }

    public void testSkipToEnd() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base32InputStream $r5;
        long $l0, $l2, $l4;
        int $i1, $i3;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("MZXW6===");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r3);

        $l0 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: long skip(long)>(3L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l0);

        $i1 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $i3 = virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: int read()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l4);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }

    public void testSkipWrongArgument() throws java.lang.Throwable
    {
        org.apache.commons.codec.binary.Base32InputStreamTest r0;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        org.apache.commons.codec.binary.Base32InputStream $r5;

        r0 := @this: org.apache.commons.codec.binary.Base32InputStreamTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = staticinvoke <org.apache.commons.codec.binary.StringUtils: byte[] getBytesIso8859_1(java.lang.String)>("MZXW6===");

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = new org.apache.commons.codec.binary.Base32InputStream;

        specialinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void <init>(java.io.InputStream)>($r3);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: long skip(long)>(-10L);

        virtualinvoke $r5.<org.apache.commons.codec.binary.Base32InputStream: void close()>();

        return;
    }
}
